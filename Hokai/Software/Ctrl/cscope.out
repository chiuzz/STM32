cscope 15 /cygdrive/e/place/ÂÜ∑Ê∞¥Êú∫/Ctrl -q 0000015403 0001732372
	@CORE/core_cm4.h

38 #i‡
deföed
 ( 
__ICCARM__
 )

39 #¥agm®
sy°em_ö˛ude


42 #ifde‡
__˝lu•lus


46 #i‚de‡
__CORE_CM4_H_GENERIC


47 
	#__CORE_CM4_H_GENERIC


	)

71 
	#__CM4_CMSIS_VERSION_MAIN
 (0x03Ë

	)

72 
	#__CM4_CMSIS_VERSION_SUB
 (0x20Ë

	)

73 
	#__CM4_CMSIS_VERSION
 ((
__CM4_CMSIS_VERSION_MAIN
 << 16) | \

74 
__CM4_CMSIS_VERSION_SUB
 )

	)

76 
	#__CORTEX_M
 (0x04Ë

	)

79 #i‡ 
deföed
 ( 
__CC_ARM
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
__ölöe


	)

82 
	#__STATIC_INLINE
 
__ölöe


	)

84 #ñi‡
deföed
 ( 
__ICCARM__
 )

85 
	#__ASM
 
__asm


	)

86 
	#__INLINE
 
ölöe


	)

87 
	#__STATIC_INLINE
 
ölöe


	)

89 #ñi‡
deföed
 ( 
__TMS470__
 )

90 
	#__ASM
 
__asm


	)

91 
	#__STATIC_INLINE
 
ölöe


	)

93 #ñi‡
deföed
 ( 
__GNUC__
 )

94 
	#__ASM
 
__asm


	)

95 
	#__INLINE
 
ölöe


	)

96 
	#__STATIC_INLINE
 
ölöe


	)

98 #ñi‡
deföed
 ( 
__TASKING__
 )

99 
	#__ASM
 
__asm


	)

100 
	#__INLINE
 
ölöe


	)

101 
	#__STATIC_INLINE
 
ölöe


	)

107 #i‡
deföed
 ( 
__CC_ARM
 )

108 #i‡
deföed
 
__TARGET_FPU_VFP


109 #i‡(
__FPU_PRESENT
 == 1)

110 
	#__FPU_USED
 1

	)

113 
	#__FPU_USED
 0

	)

116 
	#__FPU_USED
 0

	)

119 #ñi‡
deföed
 ( 
__ICCARM__
 )

120 #i‡
deföed
 
__ARMVFP__


121 #i‡(
__FPU_PRESENT
 == 1)

122 
	#__FPU_USED
 1

	)

125 
	#__FPU_USED
 0

	)

128 
	#__FPU_USED
 0

	)

131 #ñi‡
deföed
 ( 
__TMS470__
 )

132 #i‡
deföed
 
__TI_VFP_SUPPORT__


133 #i‡(
__FPU_PRESENT
 == 1)

134 
	#__FPU_USED
 1

	)

137 
	#__FPU_USED
 0

	)

140 
	#__FPU_USED
 0

	)

143 #ñi‡
deföed
 ( 
__GNUC__
 )

144 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

145 #i‡(
__FPU_PRESENT
 == 1)

146 
	#__FPU_USED
 1

	)

149 
	#__FPU_USED
 0

	)

152 
	#__FPU_USED
 0

	)

155 #ñi‡
deföed
 ( 
__TASKING__
 )

156 #i‡
deföed
 
__FPU_VFP__


157 #i‡(
__FPU_PRESENT
 == 1)

158 
	#__FPU_USED
 1

	)

161 
	#__FPU_USED
 0

	)

164 
	#__FPU_USED
 0

	)

168 
	~<°döt.h
>

169 
	~<c‹e_cmIn°r.h
>

170 
	~<c‹e_cmFunc.h
>

171 
	~<c‹e_cm4_simd.h
>

175 #i‚de‡
__CMSIS_GENERIC


177 #i‚de‡
__CORE_CM4_H_DEPENDANT


178 
	#__CORE_CM4_H_DEPENDANT


	)

181 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


182 #i‚de‡
__CM4_REV


183 
	#__CM4_REV
 0x0000

	)

187 #i‚de‡
__FPU_PRESENT


188 
	#__FPU_PRESENT
 0

	)

192 #i‚de‡
__MPU_PRESENT


193 
	#__MPU_PRESENT
 0

	)

197 #i‚de‡
__NVIC_PRIO_BITS


198 
	#__NVIC_PRIO_BITS
 4

	)

202 #i‚de‡
__Víd‹_SysTickC⁄fig


203 
	#__Víd‹_SysTickC⁄fig
 0

	)

216 #ifde‡
__˝lu•lus


217 
	#__I
 vﬁ©ûê

	)

219 
	#__I
 vﬁ©ûêc⁄°

	)

221 
	#__O
 vﬁ©ûê

	)

222 
	#__IO
 vﬁ©ûê

	)

255 #i‡(
__CORTEX_M
 != 0x04)

256 
uöt32_t
 
_ª£rved0
:27;

258 
uöt32_t
 
_ª£rved0
:16;

259 
uöt32_t
 
GE
:4;

260 
uöt32_t
 
_ª£rved1
:7;

262 
uöt32_t
 
Q
:1;

263 
uöt32_t
 
V
:1;

264 
uöt32_t
 
C
:1;

265 
uöt32_t
 
Z
:1;

266 
uöt32_t
 
N
:1;

267 } 
b
;

268 
uöt32_t
 
w
;

269 } 
	tAPSR_Ty≥
;

278 
uöt32_t
 
ISR
:9;

279 
uöt32_t
 
_ª£rved0
:23;

280 } 
b
;

281 
uöt32_t
 
w
;

282 } 
	tIPSR_Ty≥
;

291 
uöt32_t
 
ISR
:9;

292 #i‡(
__CORTEX_M
 != 0x04)

293 
uöt32_t
 
_ª£rved0
:15;

295 
uöt32_t
 
_ª£rved0
:7;

296 
uöt32_t
 
GE
:4;

297 
uöt32_t
 
_ª£rved1
:4;

299 
uöt32_t
 
T
:1;

300 
uöt32_t
 
IT
:2;

301 
uöt32_t
 
Q
:1;

302 
uöt32_t
 
V
:1;

303 
uöt32_t
 
C
:1;

304 
uöt32_t
 
Z
:1;

305 
uöt32_t
 
N
:1;

306 } 
b
;

307 
uöt32_t
 
w
;

308 } 
	txPSR_Ty≥
;

317 
uöt32_t
 
nPRIV
:1;

318 
uöt32_t
 
SPSEL
:1;

319 
uöt32_t
 
FPCA
:1;

320 
uöt32_t
 
_ª£rved0
:29;

321 } 
b
;

322 
uöt32_t
 
w
;

323 } 
	tCONTROL_Ty≥
;

338 
__IO
 
uöt32_t
 
ISER
[8];

339 
uöt32_t
 
RESERVED0
[24];

340 
__IO
 
uöt32_t
 
ICER
[8];

341 
uöt32_t
 
RSERVED1
[24];

342 
__IO
 
uöt32_t
 
ISPR
[8];

343 
uöt32_t
 
RESERVED2
[24];

344 
__IO
 
uöt32_t
 
ICPR
[8];

345 
uöt32_t
 
RESERVED3
[24];

346 
__IO
 
uöt32_t
 
IABR
[8];

347 
uöt32_t
 
RESERVED4
[56];

348 
__IO
 
uöt8_t
 
IP
[240];

349 
uöt32_t
 
RESERVED5
[644];

350 
__O
 
uöt32_t
 
STIR
;

351 } 
	tNVIC_Ty≥
;

354 
	#NVIC_STIR_INTID_Pos
 0

	)

355 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

370 
__I
 
uöt32_t
 
CPUID
;

371 
__IO
 
uöt32_t
 
ICSR
;

372 
__IO
 
uöt32_t
 
VTOR
;

373 
__IO
 
uöt32_t
 
AIRCR
;

374 
__IO
 
uöt32_t
 
SCR
;

375 
__IO
 
uöt32_t
 
CCR
;

376 
__IO
 
uöt8_t
 
SHP
[12];

377 
__IO
 
uöt32_t
 
SHCSR
;

378 
__IO
 
uöt32_t
 
CFSR
;

379 
__IO
 
uöt32_t
 
HFSR
;

380 
__IO
 
uöt32_t
 
DFSR
;

381 
__IO
 
uöt32_t
 
MMFAR
;

382 
__IO
 
uöt32_t
 
BFAR
;

383 
__IO
 
uöt32_t
 
AFSR
;

384 
__I
 
uöt32_t
 
PFR
[2];

385 
__I
 
uöt32_t
 
DFR
;

386 
__I
 
uöt32_t
 
ADR
;

387 
__I
 
uöt32_t
 
MMFR
[4];

388 
__I
 
uöt32_t
 
ISAR
[5];

389 
uöt32_t
 
RESERVED0
[5];

390 
__IO
 
uöt32_t
 
CPACR
;

391 } 
	tSCB_Ty≥
;

394 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

395 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

397 
	#SCB_CPUID_VARIANT_Pos
 20

	)

398 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

400 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

401 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

403 
	#SCB_CPUID_PARTNO_Pos
 4

	)

404 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

406 
	#SCB_CPUID_REVISION_Pos
 0

	)

407 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

410 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

411 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

413 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

414 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

416 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

417 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

419 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

420 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

422 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

423 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

425 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

426 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

428 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

429 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

431 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

432 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

434 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

435 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

437 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

438 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

441 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

442 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

445 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

446 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

448 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

449 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

451 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

452 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

454 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

455 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

457 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

458 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

460 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

461 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

463 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

464 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

467 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

468 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

470 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

471 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

473 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

474 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

477 
	#SCB_CCR_STKALIGN_Pos
 9

	)

478 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

480 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

481 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

483 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

484 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

486 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

487 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

489 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

490 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

492 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

493 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

496 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

497 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

499 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

500 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

502 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

503 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

505 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

506 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

508 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

509 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

511 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

512 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

514 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

515 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

517 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

518 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

520 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

521 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

523 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

524 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

526 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

527 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

529 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

530 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

532 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

533 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

535 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

536 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

539 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

540 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

542 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

543 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

545 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

546 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

549 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

550 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

552 
	#SCB_HFSR_FORCED_Pos
 30

	)

553 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

555 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

556 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

559 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

560 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

562 
	#SCB_DFSR_VCATCH_Pos
 3

	)

563 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

565 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

566 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

568 
	#SCB_DFSR_BKPT_Pos
 1

	)

569 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

571 
	#SCB_DFSR_HALTED_Pos
 0

	)

572 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

587 
uöt32_t
 
RESERVED0
[1];

588 
__I
 
uöt32_t
 
ICTR
;

589 
__IO
 
uöt32_t
 
ACTLR
;

590 } 
	tSCnSCB_Ty≥
;

593 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

594 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

597 
	#SCnSCB_ACTLR_DISOOFP_Pos
 9

	)

598 
	#SCnSCB_ACTLR_DISOOFP_Msk
 (1UL << 
SCnSCB_ACTLR_DISOOFP_Pos
Ë

	)

600 
	#SCnSCB_ACTLR_DISFPCA_Pos
 8

	)

601 
	#SCnSCB_ACTLR_DISFPCA_Msk
 (1UL << 
SCnSCB_ACTLR_DISFPCA_Pos
Ë

	)

603 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2

	)

604 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

606 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1

	)

607 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

609 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

610 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

625 
__IO
 
uöt32_t
 
CTRL
;

626 
__IO
 
uöt32_t
 
LOAD
;

627 
__IO
 
uöt32_t
 
VAL
;

628 
__I
 
uöt32_t
 
CALIB
;

629 } 
	tSysTick_Ty≥
;

632 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

633 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

635 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

636 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

638 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

639 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

641 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

642 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

645 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

646 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

649 
	#SysTick_VAL_CURRENT_Pos
 0

	)

650 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

653 
	#SysTick_CALIB_NOREF_Pos
 31

	)

654 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

656 
	#SysTick_CALIB_SKEW_Pos
 30

	)

657 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

659 
	#SysTick_CALIB_TENMS_Pos
 0

	)

660 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

675 
__O
 union

677 
__O
 
uöt8_t
 
u8
;

678 
__O
 
uöt16_t
 
u16
;

679 
__O
 
uöt32_t
 
u32
;

680 } 
PORT
 [32];

681 
uöt32_t
 
RESERVED0
[864];

682 
__IO
 
uöt32_t
 
TER
;

683 
uöt32_t
 
RESERVED1
[15];

684 
__IO
 
uöt32_t
 
TPR
;

685 
uöt32_t
 
RESERVED2
[15];

686 
__IO
 
uöt32_t
 
TCR
;

687 
uöt32_t
 
RESERVED3
[29];

688 
__O
 
uöt32_t
 
IWR
;

689 
__I
 
uöt32_t
 
IRR
;

690 
__IO
 
uöt32_t
 
IMCR
;

691 
uöt32_t
 
RESERVED4
[43];

692 
__O
 
uöt32_t
 
LAR
;

693 
__I
 
uöt32_t
 
LSR
;

694 
uöt32_t
 
RESERVED5
[6];

695 
__I
 
uöt32_t
 
PID4
;

696 
__I
 
uöt32_t
 
PID5
;

697 
__I
 
uöt32_t
 
PID6
;

698 
__I
 
uöt32_t
 
PID7
;

699 
__I
 
uöt32_t
 
PID0
;

700 
__I
 
uöt32_t
 
PID1
;

701 
__I
 
uöt32_t
 
PID2
;

702 
__I
 
uöt32_t
 
PID3
;

703 
__I
 
uöt32_t
 
CID0
;

704 
__I
 
uöt32_t
 
CID1
;

705 
__I
 
uöt32_t
 
CID2
;

706 
__I
 
uöt32_t
 
CID3
;

707 } 
	tITM_Ty≥
;

710 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

711 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

714 
	#ITM_TCR_BUSY_Pos
 23

	)

715 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

717 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

718 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

720 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

721 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

723 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

724 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

726 
	#ITM_TCR_SWOENA_Pos
 4

	)

727 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

729 
	#ITM_TCR_DWTENA_Pos
 3

	)

730 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

732 
	#ITM_TCR_SYNCENA_Pos
 2

	)

733 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

735 
	#ITM_TCR_TSENA_Pos
 1

	)

736 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

738 
	#ITM_TCR_ITMENA_Pos
 0

	)

739 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

742 
	#ITM_IWR_ATVALIDM_Pos
 0

	)

743 
	#ITM_IWR_ATVALIDM_Msk
 (1UL << 
ITM_IWR_ATVALIDM_Pos
Ë

	)

746 
	#ITM_IRR_ATREADYM_Pos
 0

	)

747 
	#ITM_IRR_ATREADYM_Msk
 (1UL << 
ITM_IRR_ATREADYM_Pos
Ë

	)

750 
	#ITM_IMCR_INTEGRATION_Pos
 0

	)

751 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL << 
ITM_IMCR_INTEGRATION_Pos
Ë

	)

754 
	#ITM_LSR_ByãAcc_Pos
 2

	)

755 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

757 
	#ITM_LSR_Ac˚ss_Pos
 1

	)

758 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

760 
	#ITM_LSR_Pª£¡_Pos
 0

	)

761 
	#ITM_LSR_Pª£¡_Msk
 (1UL << 
ITM_LSR_Pª£¡_Pos
Ë

	)

776 
__IO
 
uöt32_t
 
CTRL
;

777 
__IO
 
uöt32_t
 
CYCCNT
;

778 
__IO
 
uöt32_t
 
CPICNT
;

779 
__IO
 
uöt32_t
 
EXCCNT
;

780 
__IO
 
uöt32_t
 
SLEEPCNT
;

781 
__IO
 
uöt32_t
 
LSUCNT
;

782 
__IO
 
uöt32_t
 
FOLDCNT
;

783 
__I
 
uöt32_t
 
PCSR
;

784 
__IO
 
uöt32_t
 
COMP0
;

785 
__IO
 
uöt32_t
 
MASK0
;

786 
__IO
 
uöt32_t
 
FUNCTION0
;

787 
uöt32_t
 
RESERVED0
[1];

788 
__IO
 
uöt32_t
 
COMP1
;

789 
__IO
 
uöt32_t
 
MASK1
;

790 
__IO
 
uöt32_t
 
FUNCTION1
;

791 
uöt32_t
 
RESERVED1
[1];

792 
__IO
 
uöt32_t
 
COMP2
;

793 
__IO
 
uöt32_t
 
MASK2
;

794 
__IO
 
uöt32_t
 
FUNCTION2
;

795 
uöt32_t
 
RESERVED2
[1];

796 
__IO
 
uöt32_t
 
COMP3
;

797 
__IO
 
uöt32_t
 
MASK3
;

798 
__IO
 
uöt32_t
 
FUNCTION3
;

799 } 
	tDWT_Ty≥
;

802 
	#DWT_CTRL_NUMCOMP_Pos
 28

	)

803 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

805 
	#DWT_CTRL_NOTRCPKT_Pos
 27

	)

806 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

808 
	#DWT_CTRL_NOEXTTRIG_Pos
 26

	)

809 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

811 
	#DWT_CTRL_NOCYCCNT_Pos
 25

	)

812 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

814 
	#DWT_CTRL_NOPRFCNT_Pos
 24

	)

815 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

817 
	#DWT_CTRL_CYCEVTENA_Pos
 22

	)

818 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

820 
	#DWT_CTRL_FOLDEVTENA_Pos
 21

	)

821 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

823 
	#DWT_CTRL_LSUEVTENA_Pos
 20

	)

824 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

826 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19

	)

827 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

829 
	#DWT_CTRL_EXCEVTENA_Pos
 18

	)

830 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

832 
	#DWT_CTRL_CPIEVTENA_Pos
 17

	)

833 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

835 
	#DWT_CTRL_EXCTRCENA_Pos
 16

	)

836 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

838 
	#DWT_CTRL_PCSAMPLENA_Pos
 12

	)

839 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

841 
	#DWT_CTRL_SYNCTAP_Pos
 10

	)

842 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

844 
	#DWT_CTRL_CYCTAP_Pos
 9

	)

845 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

847 
	#DWT_CTRL_POSTINIT_Pos
 5

	)

848 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

850 
	#DWT_CTRL_POSTPRESET_Pos
 1

	)

851 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

853 
	#DWT_CTRL_CYCCNTENA_Pos
 0

	)

854 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCCNTENA_Pos
Ë

	)

857 
	#DWT_CPICNT_CPICNT_Pos
 0

	)

858 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL << 
DWT_CPICNT_CPICNT_Pos
Ë

	)

861 
	#DWT_EXCCNT_EXCCNT_Pos
 0

	)

862 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL << 
DWT_EXCCNT_EXCCNT_Pos
Ë

	)

865 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0

	)

866 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL << 
DWT_SLEEPCNT_SLEEPCNT_Pos
Ë

	)

869 
	#DWT_LSUCNT_LSUCNT_Pos
 0

	)

870 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL << 
DWT_LSUCNT_LSUCNT_Pos
Ë

	)

873 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0

	)

874 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL << 
DWT_FOLDCNT_FOLDCNT_Pos
Ë

	)

877 
	#DWT_MASK_MASK_Pos
 0

	)

878 
	#DWT_MASK_MASK_Msk
 (0x1FUL << 
DWT_MASK_MASK_Pos
Ë

	)

881 
	#DWT_FUNCTION_MATCHED_Pos
 24

	)

882 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

884 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16

	)

885 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

887 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12

	)

888 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

890 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10

	)

891 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

893 
	#DWT_FUNCTION_LNK1ENA_Pos
 9

	)

894 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

896 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8

	)

897 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

899 
	#DWT_FUNCTION_CYCMATCH_Pos
 7

	)

900 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

902 
	#DWT_FUNCTION_EMITRANGE_Pos
 5

	)

903 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

905 
	#DWT_FUNCTION_FUNCTION_Pos
 0

	)

906 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL << 
DWT_FUNCTION_FUNCTION_Pos
Ë

	)

921 
__IO
 
uöt32_t
 
SSPSR
;

922 
__IO
 
uöt32_t
 
CSPSR
;

923 
uöt32_t
 
RESERVED0
[2];

924 
__IO
 
uöt32_t
 
ACPR
;

925 
uöt32_t
 
RESERVED1
[55];

926 
__IO
 
uöt32_t
 
SPPR
;

927 
uöt32_t
 
RESERVED2
[131];

928 
__I
 
uöt32_t
 
FFSR
;

929 
__IO
 
uöt32_t
 
FFCR
;

930 
__I
 
uöt32_t
 
FSCR
;

931 
uöt32_t
 
RESERVED3
[759];

932 
__I
 
uöt32_t
 
TRIGGER
;

933 
__I
 
uöt32_t
 
FIFO0
;

934 
__I
 
uöt32_t
 
ITATBCTR2
;

935 
uöt32_t
 
RESERVED4
[1];

936 
__I
 
uöt32_t
 
ITATBCTR0
;

937 
__I
 
uöt32_t
 
FIFO1
;

938 
__IO
 
uöt32_t
 
ITCTRL
;

939 
uöt32_t
 
RESERVED5
[39];

940 
__IO
 
uöt32_t
 
CLAIMSET
;

941 
__IO
 
uöt32_t
 
CLAIMCLR
;

942 
uöt32_t
 
RESERVED7
[8];

943 
__I
 
uöt32_t
 
DEVID
;

944 
__I
 
uöt32_t
 
DEVTYPE
;

945 } 
	tTPI_Ty≥
;

948 
	#TPI_ACPR_PRESCALER_Pos
 0

	)

949 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL << 
TPI_ACPR_PRESCALER_Pos
Ë

	)

952 
	#TPI_SPPR_TXMODE_Pos
 0

	)

953 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL << 
TPI_SPPR_TXMODE_Pos
Ë

	)

956 
	#TPI_FFSR_FtN⁄St›_Pos
 3

	)

957 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

959 
	#TPI_FFSR_TCPª£¡_Pos
 2

	)

960 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

962 
	#TPI_FFSR_FtSt›≥d_Pos
 1

	)

963 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

965 
	#TPI_FFSR_FlInProg_Pos
 0

	)

966 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL << 
TPI_FFSR_FlInProg_Pos
Ë

	)

969 
	#TPI_FFCR_TrigIn_Pos
 8

	)

970 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

972 
	#TPI_FFCR_EnFC⁄t_Pos
 1

	)

973 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

976 
	#TPI_TRIGGER_TRIGGER_Pos
 0

	)

977 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL << 
TPI_TRIGGER_TRIGGER_Pos
Ë

	)

980 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29

	)

981 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

983 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27

	)

984 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

986 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26

	)

987 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

989 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24

	)

990 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

992 
	#TPI_FIFO0_ETM2_Pos
 16

	)

993 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

995 
	#TPI_FIFO0_ETM1_Pos
 8

	)

996 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

998 
	#TPI_FIFO0_ETM0_Pos
 0

	)

999 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL << 
TPI_FIFO0_ETM0_Pos
Ë

	)

1002 
	#TPI_ITATBCTR2_ATREADY_Pos
 0

	)

1003 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR2_ATREADY_Pos
Ë

	)

1006 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29

	)

1007 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

1009 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27

	)

1010 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

1012 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26

	)

1013 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1015 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24

	)

1016 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1018 
	#TPI_FIFO1_ITM2_Pos
 16

	)

1019 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1021 
	#TPI_FIFO1_ITM1_Pos
 8

	)

1022 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1024 
	#TPI_FIFO1_ITM0_Pos
 0

	)

1025 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL << 
TPI_FIFO1_ITM0_Pos
Ë

	)

1028 
	#TPI_ITATBCTR0_ATREADY_Pos
 0

	)

1029 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR0_ATREADY_Pos
Ë

	)

1032 
	#TPI_ITCTRL_Mode_Pos
 0

	)

1033 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL << 
TPI_ITCTRL_Mode_Pos
Ë

	)

1036 
	#TPI_DEVID_NRZVALID_Pos
 11

	)

1037 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1039 
	#TPI_DEVID_MANCVALID_Pos
 10

	)

1040 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1042 
	#TPI_DEVID_PTINVALID_Pos
 9

	)

1043 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1045 
	#TPI_DEVID_MöBufSz_Pos
 6

	)

1046 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1048 
	#TPI_DEVID_AsynClkIn_Pos
 5

	)

1049 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1051 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0

	)

1052 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL << 
TPI_DEVID_NrTø˚I≈ut_Pos
Ë

	)

1055 
	#TPI_DEVTYPE_SubTy≥_Pos
 0

	)

1056 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL << 
TPI_DEVTYPE_SubTy≥_Pos
Ë

	)

1058 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4

	)

1059 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1064 #i‡(
__MPU_PRESENT
 == 1)

1075 
__I
 
uöt32_t
 
TYPE
;

1076 
__IO
 
uöt32_t
 
CTRL
;

1077 
__IO
 
uöt32_t
 
RNR
;

1078 
__IO
 
uöt32_t
 
RBAR
;

1079 
__IO
 
uöt32_t
 
RASR
;

1080 
__IO
 
uöt32_t
 
RBAR_A1
;

1081 
__IO
 
uöt32_t
 
RASR_A1
;

1082 
__IO
 
uöt32_t
 
RBAR_A2
;

1083 
__IO
 
uöt32_t
 
RASR_A2
;

1084 
__IO
 
uöt32_t
 
RBAR_A3
;

1085 
__IO
 
uöt32_t
 
RASR_A3
;

1086 } 
	tMPU_Ty≥
;

1089 
	#MPU_TYPE_IREGION_Pos
 16

	)

1090 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1092 
	#MPU_TYPE_DREGION_Pos
 8

	)

1093 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1095 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

1096 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

1099 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

1100 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1102 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

1103 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1105 
	#MPU_CTRL_ENABLE_Pos
 0

	)

1106 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

1109 
	#MPU_RNR_REGION_Pos
 0

	)

1110 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

1113 
	#MPU_RBAR_ADDR_Pos
 5

	)

1114 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1116 
	#MPU_RBAR_VALID_Pos
 4

	)

1117 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1119 
	#MPU_RBAR_REGION_Pos
 0

	)

1120 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

1123 
	#MPU_RASR_ATTRS_Pos
 16

	)

1124 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1126 
	#MPU_RASR_XN_Pos
 28

	)

1127 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1129 
	#MPU_RASR_AP_Pos
 24

	)

1130 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1132 
	#MPU_RASR_TEX_Pos
 19

	)

1133 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1135 
	#MPU_RASR_S_Pos
 18

	)

1136 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1138 
	#MPU_RASR_C_Pos
 17

	)

1139 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1141 
	#MPU_RASR_B_Pos
 16

	)

1142 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1144 
	#MPU_RASR_SRD_Pos
 8

	)

1145 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1147 
	#MPU_RASR_SIZE_Pos
 1

	)

1148 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1150 
	#MPU_RASR_ENABLE_Pos
 0

	)

1151 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

1157 #i‡(
__FPU_PRESENT
 == 1)

1168 
uöt32_t
 
RESERVED0
[1];

1169 
__IO
 
uöt32_t
 
FPCCR
;

1170 
__IO
 
uöt32_t
 
FPCAR
;

1171 
__IO
 
uöt32_t
 
FPDSCR
;

1172 
__I
 
uöt32_t
 
MVFR0
;

1173 
__I
 
uöt32_t
 
MVFR1
;

1174 } 
	tFPU_Ty≥
;

1177 
	#FPU_FPCCR_ASPEN_Pos
 31

	)

1178 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

1180 
	#FPU_FPCCR_LSPEN_Pos
 30

	)

1181 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

1183 
	#FPU_FPCCR_MONRDY_Pos
 8

	)

1184 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

1186 
	#FPU_FPCCR_BFRDY_Pos
 6

	)

1187 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

1189 
	#FPU_FPCCR_MMRDY_Pos
 5

	)

1190 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

1192 
	#FPU_FPCCR_HFRDY_Pos
 4

	)

1193 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

1195 
	#FPU_FPCCR_THREAD_Pos
 3

	)

1196 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

1198 
	#FPU_FPCCR_USER_Pos
 1

	)

1199 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

1201 
	#FPU_FPCCR_LSPACT_Pos
 0

	)

1202 
	#FPU_FPCCR_LSPACT_Msk
 (1UL << 
FPU_FPCCR_LSPACT_Pos
Ë

	)

1205 
	#FPU_FPCAR_ADDRESS_Pos
 3

	)

1206 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

1209 
	#FPU_FPDSCR_AHP_Pos
 26

	)

1210 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

1212 
	#FPU_FPDSCR_DN_Pos
 25

	)

1213 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

1215 
	#FPU_FPDSCR_FZ_Pos
 24

	)

1216 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

1218 
	#FPU_FPDSCR_RMode_Pos
 22

	)

1219 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

1222 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28

	)

1223 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

1225 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24

	)

1226 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

1228 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20

	)

1229 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

1231 
	#FPU_MVFR0_Divide_Pos
 16

	)

1232 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

1234 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12

	)

1235 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

1237 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8

	)

1238 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

1240 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4

	)

1241 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

1243 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0

	)

1244 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL << 
FPU_MVFR0_A_SIMD_ªgi°îs_Pos
Ë

	)

1247 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28

	)

1248 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

1250 
	#FPU_MVFR1_FP_HPFP_Pos
 24

	)

1251 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

1253 
	#FPU_MVFR1_D_NaN_mode_Pos
 4

	)

1254 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

1256 
	#FPU_MVFR1_FtZ_mode_Pos
 0

	)

1257 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL << 
FPU_MVFR1_FtZ_mode_Pos
Ë

	)

1273 
__IO
 
uöt32_t
 
DHCSR
;

1274 
__O
 
uöt32_t
 
DCRSR
;

1275 
__IO
 
uöt32_t
 
DCRDR
;

1276 
__IO
 
uöt32_t
 
DEMCR
;

1277 } 
	tC‹eDebug_Ty≥
;

1280 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

1281 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1283 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

1284 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1286 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

1287 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1289 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

1290 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1292 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

1293 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1295 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

1296 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1298 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

1299 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1301 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

1302 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1304 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

1305 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1307 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

1308 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1310 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

1311 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1313 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

1314 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

1317 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

1318 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1320 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

1321 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

1324 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

1325 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1327 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

1328 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1330 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

1331 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1333 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

1334 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1336 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

1337 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1339 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

1340 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1342 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

1343 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1345 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

1346 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1348 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

1349 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1351 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

1352 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1354 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

1355 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1357 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

1358 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1360 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

1361 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

1373 
	#SCS_BASE
 (0xE000E000ULË

	)

1374 
	#ITM_BASE
 (0xE0000000ULË

	)

1375 
	#DWT_BASE
 (0xE0001000ULË

	)

1376 
	#TPI_BASE
 (0xE0040000ULË

	)

1377 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1378 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1379 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1380 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1382 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1383 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1384 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1385 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1386 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1387 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1388 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1389 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1391 #i‡(
__MPU_PRESENT
 == 1)

1392 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1393 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1396 #i‡(
__FPU_PRESENT
 == 1)

1397 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

1398 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

1435 
__STATIC_INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1437 
uöt32_t
 
ªg_vÆue
;

1438 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1440 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1441 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1442 
ªg_vÆue
 = (reg_value |

1443 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1444 (
Pri‹ôyGroupTmp
 << 8));

1445 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1455 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1457  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1467 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1470 
NVIC
->
ISER
[(
uöt32_t
)((
öt32_t
)
IRQn
) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));

1480 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1482 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1496 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1498 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1508 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1510 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1520 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1522 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1535 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1537 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1550 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1552 if(
IRQn
 < 0) {

1553 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1555 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1570 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1573 if(
IRQn
 < 0) {

1574 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1576 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1592 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1594 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1595 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1596 
uöt32_t
 
SubPri‹ôyBôs
;

1598 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1599 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1602 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1603 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1620 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1622 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1623 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1624 
uöt32_t
 
SubPri‹ôyBôs
;

1626 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1627 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1629 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1630 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1638 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

1640 
__DSB
();

1642 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1643 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1644 
SCB_AIRCR_SYSRESETREQ_Msk
);

1645 
__DSB
();

1660 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1677 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1679 i‡((
ticks
 - 1Ë> 
SysTick_LOAD_RELOAD_Msk
)  (1);

1681 
SysTick
->
LOAD
 = 
ticks
 - 1;

1682 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1683 
SysTick
->
VAL
 = 0;

1684 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1685 
SysTick_CTRL_TICKINT_Msk
 |

1686 
SysTick_CTRL_ENABLE_Msk
;

1703 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1704 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1717 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1719 i‡((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1720 (
	gITM
->
	gTER
 & (1UL << 0) ) )

1722 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1723 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1725  (
	gch
);

1736 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 () {

1737 
öt32_t
 
	gch
 = -1;

1739 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1740 
ch
 = 
ITM_RxBuf„r
;

1741 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1744  (
	gch
);

1755 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 () {

1757 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1770 #ifde‡
__˝lu•lus


	@CORE/core_cm4_simd.h

38 #ifde‡
__˝lu•lus


42 #i‚de‡
__CORE_CM4_SIMD_H


43 
	#__CORE_CM4_SIMD_H


	)

57 #i‡ 
deföed
 ( 
__CC_ARM
 )

61 
	#__SADD8
 
__ßdd8


	)

62 
	#__QADD8
 
__qadd8


	)

63 
	#__SHADD8
 
__shadd8


	)

64 
	#__UADD8
 
__uadd8


	)

65 
	#__UQADD8
 
__uqadd8


	)

66 
	#__UHADD8
 
__uhadd8


	)

67 
	#__SSUB8
 
__ssub8


	)

68 
	#__QSUB8
 
__qsub8


	)

69 
	#__SHSUB8
 
__shsub8


	)

70 
	#__USUB8
 
__usub8


	)

71 
	#__UQSUB8
 
__uqsub8


	)

72 
	#__UHSUB8
 
__uhsub8


	)

73 
	#__SADD16
 
__ßdd16


	)

74 
	#__QADD16
 
__qadd16


	)

75 
	#__SHADD16
 
__shadd16


	)

76 
	#__UADD16
 
__uadd16


	)

77 
	#__UQADD16
 
__uqadd16


	)

78 
	#__UHADD16
 
__uhadd16


	)

79 
	#__SSUB16
 
__ssub16


	)

80 
	#__QSUB16
 
__qsub16


	)

81 
	#__SHSUB16
 
__shsub16


	)

82 
	#__USUB16
 
__usub16


	)

83 
	#__UQSUB16
 
__uqsub16


	)

84 
	#__UHSUB16
 
__uhsub16


	)

85 
	#__SASX
 
__ßsx


	)

86 
	#__QASX
 
__qasx


	)

87 
	#__SHASX
 
__shasx


	)

88 
	#__UASX
 
__uasx


	)

89 
	#__UQASX
 
__uqasx


	)

90 
	#__UHASX
 
__uhasx


	)

91 
	#__SSAX
 
__sßx


	)

92 
	#__QSAX
 
__qßx


	)

93 
	#__SHSAX
 
__shßx


	)

94 
	#__USAX
 
__ußx


	)

95 
	#__UQSAX
 
__uqßx


	)

96 
	#__UHSAX
 
__uhßx


	)

97 
	#__USAD8
 
__ußd8


	)

98 
	#__USADA8
 
__ußda8


	)

99 
	#__SSAT16
 
__sßt16


	)

100 
	#__USAT16
 
__ußt16


	)

101 
	#__UXTB16
 
__uxtb16


	)

102 
	#__UXTAB16
 
__uxèb16


	)

103 
	#__SXTB16
 
__sxtb16


	)

104 
	#__SXTAB16
 
__sxèb16


	)

105 
	#__SMUAD
 
__smuad


	)

106 
	#__SMUADX
 
__smuadx


	)

107 
	#__SMLAD
 
__smœd


	)

108 
	#__SMLADX
 
__smœdx


	)

109 
	#__SMLALD
 
__smœld


	)

110 
	#__SMLALDX
 
__smœldx


	)

111 
	#__SMUSD
 
__smusd


	)

112 
	#__SMUSDX
 
__smusdx


	)

113 
	#__SMLSD
 
__smlsd


	)

114 
	#__SMLSDX
 
__smlsdx


	)

115 
	#__SMLSLD
 
__sml¶d


	)

116 
	#__SMLSLDX
 
__sml¶dx


	)

117 
	#__SEL
 
__£l


	)

118 
	#__QADD
 
__qadd


	)

119 
	#__QSUB
 
__qsub


	)

121 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0x0000FFFFUL) | \

122 ((((
uöt32_t
)(
ARG2
)Ë<< (
ARG3
)Ë& 0xFFFF0000ULË)

	)

124 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0xFFFF0000UL) | \

125 ((((
uöt32_t
)(
ARG2
)Ë>> (
ARG3
)Ë& 0x0000FFFFULË)

	)

127 
	#__SMMLA
(
ARG1
,
ARG2
,
ARG3
Ë–(
öt32_t
)((((
öt64_t
)(ARG1) * (ARG2)) + \

128 ((
öt64_t
)(
ARG3
Ë<< 32ËË>> 32))

	)

134 #ñi‡
deföed
 ( 
__ICCARM__
 )

138 
	~<cmsis_ür.h
>

144 #ñi‡
deföed
 ( 
__TMS470__
 )

148 
	~<cmsis_ccs.h
>

154 #ñi‡
deföed
 ( 
__GNUC__
 )

158 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

160 
uöt32_t
 
ªsu…
;

162 
__ASM
 vﬁ©ûê("ßdd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

163 (
ªsu…
);

164 
	}
}

166 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

168 
uöt32_t
 
ªsu…
;

170 
__ASM
 vﬁ©ûê("qadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

171 (
ªsu…
);

172 
	}
}

174 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

176 
uöt32_t
 
ªsu…
;

178 
__ASM
 vﬁ©ûê("shadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

179 (
ªsu…
);

180 
	}
}

182 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

184 
uöt32_t
 
ªsu…
;

186 
__ASM
 vﬁ©ûê("uadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

187 (
ªsu…
);

188 
	}
}

190 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

192 
uöt32_t
 
ªsu…
;

194 
__ASM
 vﬁ©ûê("uqadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

195 (
ªsu…
);

196 
	}
}

198 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

200 
uöt32_t
 
ªsu…
;

202 
__ASM
 vﬁ©ûê("uhadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

203 (
ªsu…
);

204 
	}
}

207 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

209 
uöt32_t
 
ªsu…
;

211 
__ASM
 vﬁ©ûê("ssub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

212 (
ªsu…
);

213 
	}
}

215 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

217 
uöt32_t
 
ªsu…
;

219 
__ASM
 vﬁ©ûê("qsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

220 (
ªsu…
);

221 
	}
}

223 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

225 
uöt32_t
 
ªsu…
;

227 
__ASM
 vﬁ©ûê("shsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

228 (
ªsu…
);

229 
	}
}

231 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

233 
uöt32_t
 
ªsu…
;

235 
__ASM
 vﬁ©ûê("usub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

236 (
ªsu…
);

237 
	}
}

239 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

241 
uöt32_t
 
ªsu…
;

243 
__ASM
 vﬁ©ûê("uqsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

244 (
ªsu…
);

245 
	}
}

247 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

249 
uöt32_t
 
ªsu…
;

251 
__ASM
 vﬁ©ûê("uhsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

252 (
ªsu…
);

253 
	}
}

256 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

258 
uöt32_t
 
ªsu…
;

260 
__ASM
 vﬁ©ûê("ßdd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

261 (
ªsu…
);

262 
	}
}

264 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

266 
uöt32_t
 
ªsu…
;

268 
__ASM
 vﬁ©ûê("qadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

269 (
ªsu…
);

270 
	}
}

272 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

274 
uöt32_t
 
ªsu…
;

276 
__ASM
 vﬁ©ûê("shadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

277 (
ªsu…
);

278 
	}
}

280 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

282 
uöt32_t
 
ªsu…
;

284 
__ASM
 vﬁ©ûê("uadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

285 (
ªsu…
);

286 
	}
}

288 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

290 
uöt32_t
 
ªsu…
;

292 
__ASM
 vﬁ©ûê("uqadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

293 (
ªsu…
);

294 
	}
}

296 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

298 
uöt32_t
 
ªsu…
;

300 
__ASM
 vﬁ©ûê("uhadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

301 (
ªsu…
);

302 
	}
}

304 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

306 
uöt32_t
 
ªsu…
;

308 
__ASM
 vﬁ©ûê("ssub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

309 (
ªsu…
);

310 
	}
}

312 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

314 
uöt32_t
 
ªsu…
;

316 
__ASM
 vﬁ©ûê("qsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

317 (
ªsu…
);

318 
	}
}

320 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

322 
uöt32_t
 
ªsu…
;

324 
__ASM
 vﬁ©ûê("shsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

325 (
ªsu…
);

326 
	}
}

328 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

330 
uöt32_t
 
ªsu…
;

332 
__ASM
 vﬁ©ûê("usub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

333 (
ªsu…
);

334 
	}
}

336 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

338 
uöt32_t
 
ªsu…
;

340 
__ASM
 vﬁ©ûê("uqsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

341 (
ªsu…
);

342 
	}
}

344 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

346 
uöt32_t
 
ªsu…
;

348 
__ASM
 vﬁ©ûê("uhsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

349 (
ªsu…
);

350 
	}
}

352 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

354 
uöt32_t
 
ªsu…
;

356 
__ASM
 vﬁ©ûê("ßsx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

357 (
ªsu…
);

358 
	}
}

360 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

362 
uöt32_t
 
ªsu…
;

364 
__ASM
 vﬁ©ûê("qasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

365 (
ªsu…
);

366 
	}
}

368 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

370 
uöt32_t
 
ªsu…
;

372 
__ASM
 vﬁ©ûê("shasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

373 (
ªsu…
);

374 
	}
}

376 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

378 
uöt32_t
 
ªsu…
;

380 
__ASM
 vﬁ©ûê("uasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

381 (
ªsu…
);

382 
	}
}

384 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

386 
uöt32_t
 
ªsu…
;

388 
__ASM
 vﬁ©ûê("uqasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

389 (
ªsu…
);

390 
	}
}

392 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

394 
uöt32_t
 
ªsu…
;

396 
__ASM
 vﬁ©ûê("uhasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

397 (
ªsu…
);

398 
	}
}

400 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

402 
uöt32_t
 
ªsu…
;

404 
__ASM
 vﬁ©ûê("sßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

405 (
ªsu…
);

406 
	}
}

408 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

410 
uöt32_t
 
ªsu…
;

412 
__ASM
 vﬁ©ûê("qßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

413 (
ªsu…
);

414 
	}
}

416 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

418 
uöt32_t
 
ªsu…
;

420 
__ASM
 vﬁ©ûê("shßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

421 (
ªsu…
);

422 
	}
}

424 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

426 
uöt32_t
 
ªsu…
;

428 
__ASM
 vﬁ©ûê("ußx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

429 (
ªsu…
);

430 
	}
}

432 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

434 
uöt32_t
 
ªsu…
;

436 
__ASM
 vﬁ©ûê("uqßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

437 (
ªsu…
);

438 
	}
}

440 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

442 
uöt32_t
 
ªsu…
;

444 
__ASM
 vﬁ©ûê("uhßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

445 (
ªsu…
);

446 
	}
}

448 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USAD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

450 
uöt32_t
 
ªsu…
;

452 
__ASM
 vﬁ©ûê("ußd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

453 (
ªsu…
);

454 
	}
}

456 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USADA8
(
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

458 
uöt32_t
 
ªsu…
;

460 
__ASM
 vﬁ©ûê("ußda8 %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

461 (
ªsu…
);

462 
	}
}

464 
	#__SSAT16
(
ARG1
,
ARG2
) \

466 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

467 
	`__ASM
 ("sßt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

468 
__RES
; \

469 })

	)

471 
	#__USAT16
(
ARG1
,
ARG2
) \

473 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

474 
	`__ASM
 ("ußt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

475 
__RES
; \

476 })

	)

478 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UXTB16
(
uöt32_t
 
›1
)

480 
uöt32_t
 
ªsu…
;

482 
__ASM
 vﬁ©ûê("uxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

483 (
ªsu…
);

484 
	}
}

486 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

488 
uöt32_t
 
ªsu…
;

490 
__ASM
 vﬁ©ûê("uxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

491 (
ªsu…
);

492 
	}
}

494 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SXTB16
(
uöt32_t
 
›1
)

496 
uöt32_t
 
ªsu…
;

498 
__ASM
 vﬁ©ûê("sxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

499 (
ªsu…
);

500 
	}
}

502 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

504 
uöt32_t
 
ªsu…
;

506 
__ASM
 vﬁ©ûê("sxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

507 (
ªsu…
);

508 
	}
}

510 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUAD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

512 
uöt32_t
 
ªsu…
;

514 
__ASM
 vﬁ©ûê("smuad %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

515 (
ªsu…
);

516 
	}
}

518 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUADX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

520 
uöt32_t
 
ªsu…
;

522 
__ASM
 vﬁ©ûê("smuadx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

523 (
ªsu…
);

524 
	}
}

526 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLAD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

528 
uöt32_t
 
ªsu…
;

530 
__ASM
 vﬁ©ûê("smœd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

531 (
ªsu…
);

532 
	}
}

534 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLADX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

536 
uöt32_t
 
ªsu…
;

538 
__ASM
 vﬁ©ûê("smœdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

539 (
ªsu…
);

540 
	}
}

542 
	#__SMLALD
(
ARG1
,
ARG2
,
ARG3
) \

544 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
uöt64_t
)(
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \

545 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

546 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

547 })

	)

549 
	#__SMLALDX
(
ARG1
,
ARG2
,
ARG3
) \

551 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
uöt64_t
)(
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \

552 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

553 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

554 })

	)

556 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUSD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

558 
uöt32_t
 
ªsu…
;

560 
__ASM
 vﬁ©ûê("smusd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

561 (
ªsu…
);

562 
	}
}

564 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

566 
uöt32_t
 
ªsu…
;

568 
__ASM
 vﬁ©ûê("smusdx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

569 (
ªsu…
);

570 
	}
}

572 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLSD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

574 
uöt32_t
 
ªsu…
;

576 
__ASM
 vﬁ©ûê("smlsd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

577 (
ªsu…
);

578 
	}
}

580 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

582 
uöt32_t
 
ªsu…
;

584 
__ASM
 vﬁ©ûê("smlsdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

585 (
ªsu…
);

586 
	}
}

588 
	#__SMLSLD
(
ARG1
,
ARG2
,
ARG3
) \

590 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \

591 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

592 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

593 })

	)

595 
	#__SMLSLDX
(
ARG1
,
ARG2
,
ARG3
) \

597 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \

598 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

599 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

600 })

	)

602 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SEL
 (
uöt32_t
 
›1
, uöt32_à
›2
)

604 
uöt32_t
 
ªsu…
;

606 
__ASM
 vﬁ©ûê("£»%0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

607 (
ªsu…
);

608 
	}
}

610 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QADD
(
uöt32_t
 
›1
, uöt32_à
›2
)

612 
uöt32_t
 
ªsu…
;

614 
__ASM
 vﬁ©ûê("qadd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

615 (
ªsu…
);

616 
	}
}

618 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSUB
(
uöt32_t
 
›1
, uöt32_à
›2
)

620 
uöt32_t
 
ªsu…
;

622 
__ASM
 vﬁ©ûê("qsub %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

623 (
ªsu…
);

624 
	}
}

626 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
) \

628 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

629 
	`__ASM
 ("pkhbà%0, %1, %2,Ü¶ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

630 
__RES
; \

631 })

	)

633 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
) \

635 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

636 i‡(
ARG3
 == 0) \

637 
	`__ASM
 ("pkhtb %0, %1, %2" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
) ); \

639 
	`__ASM
 ("pkhtb %0, %1, %2,á§ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

640 
__RES
; \

641 })

	)

643 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMMLA
 (
öt32_t
 
›1
, i¡32_à
›2
, i¡32_à
›3
)

645 
öt32_t
 
ªsu…
;

647 
__ASM
 vﬁ©ûê("smmœ %0, %1, %2, %3" : "Ù" (
ªsu…
): "r" (
›1
), "r" (
›2
), "r" (
›3
) );

648 (
ªsu…
);

649 
	}
}

655 #ñi‡
deföed
 ( 
__TASKING__
 )

671 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/misc.h

30 #i‚de‡
__MISC_H


31 
	#__MISC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt8_t
 
NVIC_IRQCh™√l
;

61 
uöt8_t
 
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

66 
uöt8_t
 
NVIC_IRQCh™√lSubPri‹ôy
;

71 
Fun˘i⁄ÆSèã
 
NVIC_IRQCh™√lCmd
;

74 } 
	tNVIC_InôTy≥Def
;

86 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

87 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

88 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
) || \

89 ((
VECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

	)

98 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

99 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

100 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

101 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
) || \

102 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

103 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

	)

112 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

114 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

116 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

118 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

120 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

123 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
) || \

124 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

125 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

126 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

127 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

	)

129 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

131 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

133 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x000FFFFF)

	)

143 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

144 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

145 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
) || \

146 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

	)

158 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

159 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

160 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

161 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

162 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

164 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_adc.h

30 #i‚de‡
__STM32F4xx_ADC_H


31 
	#__STM32F4xx_ADC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
ADC_Resﬁuti⁄
;

57 
Fun˘i⁄ÆSèã
 
ADC_SˇnC⁄vMode
;

61 
Fun˘i⁄ÆSèã
 
ADC_C⁄töuousC⁄vMode
;

64 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄vEdge
;

68 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄v
;

72 
uöt32_t
 
ADC_D©aAlign
;

75 
uöt8_t
 
ADC_NbrOfC⁄vîsi⁄
;

79 }
	tADC_InôTy≥Def
;

86 
uöt32_t
 
ADC_Mode
;

89 
uöt32_t
 
ADC_PªsˇÀr
;

92 
uöt32_t
 
ADC_DMAAc˚ssMode
;

96 
uöt32_t
 
ADC_TwoSam∂ögDñay
;

100 }
	tADC_Comm⁄InôTy≥Def
;

108 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
) || \

109 ((
PERIPH
Ë=
ADC2
) || \

110 ((
PERIPH
Ë=
ADC3
))

	)

115 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000)

	)

116 
	#ADC_DuÆMode_RegSimu…_InjecSimu…
 ((
uöt32_t
)0x00000001)

	)

117 
	#ADC_DuÆMode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00000002)

	)

118 
	#ADC_DuÆMode_InjecSimu…
 ((
uöt32_t
)0x00000005)

	)

119 
	#ADC_DuÆMode_RegSimu…
 ((
uöt32_t
)0x00000006)

	)

120 
	#ADC_DuÆMode_I¡îl
 ((
uöt32_t
)0x00000007)

	)

121 
	#ADC_DuÆMode_A…îTrig
 ((
uöt32_t
)0x00000009)

	)

122 
	#ADC_TrùÀMode_RegSimu…_InjecSimu…
 ((
uöt32_t
)0x00000011)

	)

123 
	#ADC_TrùÀMode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00000012)

	)

124 
	#ADC_TrùÀMode_InjecSimu…
 ((
uöt32_t
)0x00000015)

	)

125 
	#ADC_TrùÀMode_RegSimu…
 ((
uöt32_t
)0x00000016)

	)

126 
	#ADC_TrùÀMode_I¡îl
 ((
uöt32_t
)0x00000017)

	)

127 
	#ADC_TrùÀMode_A…îTrig
 ((
uöt32_t
)0x00000019)

	)

128 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
) || \

129 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…_InjecSimu…
) || \

130 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…_A…îTrig
) || \

131 ((
MODE
Ë=
ADC_DuÆMode_InjecSimu…
) || \

132 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…
) || \

133 ((
MODE
Ë=
ADC_DuÆMode_I¡îl
) || \

134 ((
MODE
Ë=
ADC_DuÆMode_A…îTrig
) || \

135 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…_InjecSimu…
) || \

136 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…_A…îTrig
) || \

137 ((
MODE
Ë=
ADC_TrùÀMode_InjecSimu…
) || \

138 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…
) || \

139 ((
MODE
Ë=
ADC_TrùÀMode_I¡îl
) || \

140 ((
MODE
Ë=
ADC_TrùÀMode_A…îTrig
))

	)

149 
	#ADC_PªsˇÀr_Div2
 ((
uöt32_t
)0x00000000)

	)

150 
	#ADC_PªsˇÀr_Div4
 ((
uöt32_t
)0x00010000)

	)

151 
	#ADC_PªsˇÀr_Div6
 ((
uöt32_t
)0x00020000)

	)

152 
	#ADC_PªsˇÀr_Div8
 ((
uöt32_t
)0x00030000)

	)

153 
	#IS_ADC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
ADC_PªsˇÀr_Div2
) || \

154 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div4
) || \

155 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div6
) || \

156 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div8
))

	)

165 
	#ADC_DMAAc˚ssMode_DißbÀd
 ((
uöt32_t
)0x00000000Ë

	)

166 
	#ADC_DMAAc˚ssMode_1
 ((
uöt32_t
)0x00004000Ë

	)

167 
	#ADC_DMAAc˚ssMode_2
 ((
uöt32_t
)0x00008000Ë

	)

168 
	#ADC_DMAAc˚ssMode_3
 ((
uöt32_t
)0x0000C000Ë

	)

169 
	#IS_ADC_DMA_ACCESS_MODE
(
MODE
Ë(((MODEË=
ADC_DMAAc˚ssMode_DißbÀd
) || \

170 ((
MODE
Ë=
ADC_DMAAc˚ssMode_1
) || \

171 ((
MODE
Ë=
ADC_DMAAc˚ssMode_2
) || \

172 ((
MODE
Ë=
ADC_DMAAc˚ssMode_3
))

	)

182 
	#ADC_TwoSam∂ögDñay_5Cy˛es
 ((
uöt32_t
)0x00000000)

	)

183 
	#ADC_TwoSam∂ögDñay_6Cy˛es
 ((
uöt32_t
)0x00000100)

	)

184 
	#ADC_TwoSam∂ögDñay_7Cy˛es
 ((
uöt32_t
)0x00000200)

	)

185 
	#ADC_TwoSam∂ögDñay_8Cy˛es
 ((
uöt32_t
)0x00000300)

	)

186 
	#ADC_TwoSam∂ögDñay_9Cy˛es
 ((
uöt32_t
)0x00000400)

	)

187 
	#ADC_TwoSam∂ögDñay_10Cy˛es
 ((
uöt32_t
)0x00000500)

	)

188 
	#ADC_TwoSam∂ögDñay_11Cy˛es
 ((
uöt32_t
)0x00000600)

	)

189 
	#ADC_TwoSam∂ögDñay_12Cy˛es
 ((
uöt32_t
)0x00000700)

	)

190 
	#ADC_TwoSam∂ögDñay_13Cy˛es
 ((
uöt32_t
)0x00000800)

	)

191 
	#ADC_TwoSam∂ögDñay_14Cy˛es
 ((
uöt32_t
)0x00000900)

	)

192 
	#ADC_TwoSam∂ögDñay_15Cy˛es
 ((
uöt32_t
)0x00000A00)

	)

193 
	#ADC_TwoSam∂ögDñay_16Cy˛es
 ((
uöt32_t
)0x00000B00)

	)

194 
	#ADC_TwoSam∂ögDñay_17Cy˛es
 ((
uöt32_t
)0x00000C00)

	)

195 
	#ADC_TwoSam∂ögDñay_18Cy˛es
 ((
uöt32_t
)0x00000D00)

	)

196 
	#ADC_TwoSam∂ögDñay_19Cy˛es
 ((
uöt32_t
)0x00000E00)

	)

197 
	#ADC_TwoSam∂ögDñay_20Cy˛es
 ((
uöt32_t
)0x00000F00)

	)

198 
	#IS_ADC_SAMPLING_DELAY
(
DELAY
Ë(((DELAYË=
ADC_TwoSam∂ögDñay_5Cy˛es
) || \

199 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_6Cy˛es
) || \

200 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_7Cy˛es
) || \

201 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_8Cy˛es
) || \

202 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_9Cy˛es
) || \

203 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_10Cy˛es
) || \

204 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_11Cy˛es
) || \

205 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_12Cy˛es
) || \

206 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_13Cy˛es
) || \

207 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_14Cy˛es
) || \

208 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_15Cy˛es
) || \

209 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_16Cy˛es
) || \

210 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_17Cy˛es
) || \

211 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_18Cy˛es
) || \

212 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_19Cy˛es
) || \

213 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_20Cy˛es
))

	)

223 
	#ADC_Resﬁuti⁄_12b
 ((
uöt32_t
)0x00000000)

	)

224 
	#ADC_Resﬁuti⁄_10b
 ((
uöt32_t
)0x01000000)

	)

225 
	#ADC_Resﬁuti⁄_8b
 ((
uöt32_t
)0x02000000)

	)

226 
	#ADC_Resﬁuti⁄_6b
 ((
uöt32_t
)0x03000000)

	)

227 
	#IS_ADC_RESOLUTION
(
RESOLUTION
Ë(((RESOLUTIONË=
ADC_Resﬁuti⁄_12b
) || \

228 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_10b
) || \

229 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_8b
) || \

230 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_6b
))

	)

240 
	#ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
 ((
uöt32_t
)0x00000000)

	)

241 
	#ADC_Exã∫ÆTrigC⁄vEdge_Risög
 ((
uöt32_t
)0x10000000)

	)

242 
	#ADC_Exã∫ÆTrigC⁄vEdge_FÆlög
 ((
uöt32_t
)0x20000000)

	)

243 
	#ADC_Exã∫ÆTrigC⁄vEdge_RisögFÆlög
 ((
uöt32_t
)0x30000000)

	)

244 
	#IS_ADC_EXT_TRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
) || \

245 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_Risög
) || \

246 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_FÆlög
) || \

247 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_RisögFÆlög
))

	)

256 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC1
 ((
uöt32_t
)0x00000000)

	)

257 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC2
 ((
uöt32_t
)0x01000000)

	)

258 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC3
 ((
uöt32_t
)0x02000000)

	)

259 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x03000000)

	)

260 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x04000000)

	)

261 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC4
 ((
uöt32_t
)0x05000000)

	)

262 
	#ADC_Exã∫ÆTrigC⁄v_T2_TRGO
 ((
uöt32_t
)0x06000000)

	)

263 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x07000000)

	)

264 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x08000000)

	)

265 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x09000000)

	)

266 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC1
 ((
uöt32_t
)0x0A000000)

	)

267 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC2
 ((
uöt32_t
)0x0B000000)

	)

268 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC3
 ((
uöt32_t
)0x0C000000)

	)

269 
	#ADC_Exã∫ÆTrigC⁄v_T8_CC1
 ((
uöt32_t
)0x0D000000)

	)

270 
	#ADC_Exã∫ÆTrigC⁄v_T8_TRGO
 ((
uöt32_t
)0x0E000000)

	)

271 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11
 ((
uöt32_t
)0x0F000000)

	)

272 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T1_CC1
) || \

273 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC2
) || \

274 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC3
) || \

275 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

276 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

277 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC4
) || \

278 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_TRGO
) || \

279 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

280 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

281 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

282 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC1
) || \

283 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC2
) || \

284 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC3
) || \

285 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_CC1
) || \

286 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_TRGO
) || \

287 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11
))

	)

296 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

297 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

298 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
) || \

299 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

	)

308 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

309 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

310 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

311 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

312 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

313 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

314 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

315 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

316 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

317 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

318 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

319 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

320 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

321 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

322 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

323 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

324 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

325 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

326 
	#ADC_Ch™√l_18
 ((
uöt8_t
)0x12)

	)

328 #i‡
deföed
 (
STM32F40_41xxx
)

329 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_16
)

	)

332 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
Ë|| deföed (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

333 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_18
)

	)

336 
	#ADC_Ch™√l_Vªföt
 ((
uöt8_t
)
ADC_Ch™√l_17
)

	)

337 
	#ADC_Ch™√l_Vb©
 ((
uöt8_t
)
ADC_Ch™√l_18
)

	)

339 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
) || \

340 ((
CHANNEL
Ë=
ADC_Ch™√l_1
) || \

341 ((
CHANNEL
Ë=
ADC_Ch™√l_2
) || \

342 ((
CHANNEL
Ë=
ADC_Ch™√l_3
) || \

343 ((
CHANNEL
Ë=
ADC_Ch™√l_4
) || \

344 ((
CHANNEL
Ë=
ADC_Ch™√l_5
) || \

345 ((
CHANNEL
Ë=
ADC_Ch™√l_6
) || \

346 ((
CHANNEL
Ë=
ADC_Ch™√l_7
) || \

347 ((
CHANNEL
Ë=
ADC_Ch™√l_8
) || \

348 ((
CHANNEL
Ë=
ADC_Ch™√l_9
) || \

349 ((
CHANNEL
Ë=
ADC_Ch™√l_10
) || \

350 ((
CHANNEL
Ë=
ADC_Ch™√l_11
) || \

351 ((
CHANNEL
Ë=
ADC_Ch™√l_12
) || \

352 ((
CHANNEL
Ë=
ADC_Ch™√l_13
) || \

353 ((
CHANNEL
Ë=
ADC_Ch™√l_14
) || \

354 ((
CHANNEL
Ë=
ADC_Ch™√l_15
) || \

355 ((
CHANNEL
Ë=
ADC_Ch™√l_16
) || \

356 ((
CHANNEL
Ë=
ADC_Ch™√l_17
) || \

357 ((
CHANNEL
Ë=
ADC_Ch™√l_18
))

	)

366 
	#ADC_Sam∂eTime_3Cy˛es
 ((
uöt8_t
)0x00)

	)

367 
	#ADC_Sam∂eTime_15Cy˛es
 ((
uöt8_t
)0x01)

	)

368 
	#ADC_Sam∂eTime_28Cy˛es
 ((
uöt8_t
)0x02)

	)

369 
	#ADC_Sam∂eTime_56Cy˛es
 ((
uöt8_t
)0x03)

	)

370 
	#ADC_Sam∂eTime_84Cy˛es
 ((
uöt8_t
)0x04)

	)

371 
	#ADC_Sam∂eTime_112Cy˛es
 ((
uöt8_t
)0x05)

	)

372 
	#ADC_Sam∂eTime_144Cy˛es
 ((
uöt8_t
)0x06)

	)

373 
	#ADC_Sam∂eTime_480Cy˛es
 ((
uöt8_t
)0x07)

	)

374 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_3Cy˛es
) || \

375 ((
TIME
Ë=
ADC_Sam∂eTime_15Cy˛es
) || \

376 ((
TIME
Ë=
ADC_Sam∂eTime_28Cy˛es
) || \

377 ((
TIME
Ë=
ADC_Sam∂eTime_56Cy˛es
) || \

378 ((
TIME
Ë=
ADC_Sam∂eTime_84Cy˛es
) || \

379 ((
TIME
Ë=
ADC_Sam∂eTime_112Cy˛es
) || \

380 ((
TIME
Ë=
ADC_Sam∂eTime_144Cy˛es
) || \

381 ((
TIME
Ë=
ADC_Sam∂eTime_480Cy˛es
))

	)

390 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_N⁄e
 ((
uöt32_t
)0x00000000)

	)

391 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_Risög
 ((
uöt32_t
)0x00100000)

	)

392 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_FÆlög
 ((
uöt32_t
)0x00200000)

	)

393 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_RisögFÆlög
 ((
uöt32_t
)0x00300000)

	)

394 
	#IS_ADC_EXT_INJEC_TRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_Exã∫ÆTrigInjecC⁄vEdge_N⁄e
) || \

395 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_Risög
) || \

396 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_FÆlög
) || \

397 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_RisögFÆlög
))

	)

407 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
 ((
uöt32_t
)0x00000000)

	)

408 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
 ((
uöt32_t
)0x00010000)

	)

409 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00020000)

	)

410 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00030000)

	)

411 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC2
 ((
uöt32_t
)0x00040000)

	)

412 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00050000)

	)

413 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC1
 ((
uöt32_t
)0x00060000)

	)

414 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC2
 ((
uöt32_t
)0x00070000)

	)

415 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00080000)

	)

416 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00090000)

	)

417 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
 ((
uöt32_t
)0x000A0000)

	)

418 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
 ((
uöt32_t
)0x000B0000)

	)

419 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
 ((
uöt32_t
)0x000C0000)

	)

420 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC3
 ((
uöt32_t
)0x000D0000)

	)

421 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
 ((
uöt32_t
)0x000E0000)

	)

422 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15
 ((
uöt32_t
)0x000F0000)

	)

423 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
) || \

424 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
) || \

425 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

426 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

427 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC2
) || \

428 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

429 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC1
) || \

430 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC2
) || \

431 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

432 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

433 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
) || \

434 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
) || \

435 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
) || \

436 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC3
) || \

437 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
) || \

438 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15
))

	)

447 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x14)

	)

448 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x18)

	)

449 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x1C)

	)

450 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x20)

	)

451 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
) || \

452 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

453 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

454 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

	)

463 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

464 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

465 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

466 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

467 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

468 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

469 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

470 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
) || \

471 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

472 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

473 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

474 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

475 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

476 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

	)

485 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0205)

	)

486 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0106)

	)

487 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0407)

	)

488 
	#ADC_IT_OVR
 ((
uöt16_t
)0x201A)

	)

489 
	#IS_ADC_IT
(
IT
Ë(((ITË=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_AWD
) || \

490 ((
IT
Ë=
ADC_IT_JEOC
)|| ((ITË=
ADC_IT_OVR
))

	)

499 
	#ADC_FLAG_AWD
 ((
uöt8_t
)0x01)

	)

500 
	#ADC_FLAG_EOC
 ((
uöt8_t
)0x02)

	)

501 
	#ADC_FLAG_JEOC
 ((
uöt8_t
)0x04)

	)

502 
	#ADC_FLAG_JSTRT
 ((
uöt8_t
)0x08)

	)

503 
	#ADC_FLAG_STRT
 ((
uöt8_t
)0x10)

	)

504 
	#ADC_FLAG_OVR
 ((
uöt8_t
)0x20)

	)

506 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt8_t
)0xC0Ë=0x00Ë&& ((FLAGË!0x00))

	)

507 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
) || \

508 ((
FLAG
Ë=
ADC_FLAG_EOC
) || \

509 ((
FLAG
Ë=
ADC_FLAG_JEOC
) || \

510 ((
FLAG
)=
ADC_FLAG_JSTRT
) || \

511 ((
FLAG
Ë=
ADC_FLAG_STRT
) || \

512 ((
FLAG
)=
ADC_FLAG_OVR
))

	)

521 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

530 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

539 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

548 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

557 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

566 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x10))

	)

575 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

589 
ADC_DeInô
();

592 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

593 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

594 
ADC_Comm⁄Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
);

595 
ADC_Comm⁄Såu˘Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
);

596 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

599 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

600 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,uöt16_à
LowThªshﬁd
);

601 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

604 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

605 
ADC_VBATCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

608 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

609 
ADC_So·w¨eSèπC⁄v
(
ADC_Ty≥Def
* 
ADCx
);

610 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

611 
ADC_EOCOnEachReguœrCh™√lCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

612 
ADC_C⁄töuousModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

613 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

614 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

615 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

616 
uöt32_t
 
ADC_GëMu…iModeC⁄vîsi⁄VÆue
();

619 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

620 
ADC_DMAReque°A·îLa°Tøns„rCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

621 
ADC_Mu…iModeDMAReque°A·îLa°Tøns„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

624 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

625 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

626 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

627 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

628 
ADC_Exã∫ÆTrigInje˘edC⁄vEdgeC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄vEdge
);

629 
ADC_So·w¨eSèπInje˘edC⁄v
(
ADC_Ty≥Def
* 
ADCx
);

630 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

631 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

632 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

633 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

636 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

637 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

638 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

639 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

640 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

642 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_can.h

30 #i‚de‡
__STM32F4xx_CAN_H


31 
	#__STM32F4xx_CAN_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

50 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
CAN1
) || \

51 ((
PERIPH
Ë=
CAN2
))

	)

58 
uöt16_t
 
CAN_PªsˇÀr
;

61 
uöt8_t
 
CAN_Mode
;

64 
uöt8_t
 
CAN_SJW
;

69 
uöt8_t
 
CAN_BS1
;

73 
uöt8_t
 
CAN_BS2
;

76 
Fun˘i⁄ÆSèã
 
CAN_TTCM
;

79 
Fun˘i⁄ÆSèã
 
CAN_ABOM
;

82 
Fun˘i⁄ÆSèã
 
CAN_AWUM
;

85 
Fun˘i⁄ÆSèã
 
CAN_NART
;

88 
Fun˘i⁄ÆSèã
 
CAN_RFLM
;

91 
Fun˘i⁄ÆSèã
 
CAN_TXFP
;

93 } 
	tCAN_InôTy≥Def
;

100 
uöt16_t
 
CAN_FûãrIdHigh
;

104 
uöt16_t
 
CAN_FûãrIdLow
;

108 
uöt16_t
 
CAN_FûãrMaskIdHigh
;

113 
uöt16_t
 
CAN_FûãrMaskIdLow
;

118 
uöt16_t
 
CAN_FûãrFIFOAssignmít
;

121 
uöt8_t
 
CAN_FûãrNumbî
;

123 
uöt8_t
 
CAN_FûãrMode
;

126 
uöt8_t
 
CAN_FûãrSˇÀ
;

129 
Fun˘i⁄ÆSèã
 
CAN_FûãrA˘iv©i⁄
;

131 } 
	tCAN_FûãrInôTy≥Def
;

138 
uöt32_t
 
StdId
;

141 
uöt32_t
 
ExtId
;

144 
uöt8_t
 
IDE
;

148 
uöt8_t
 
RTR
;

152 
uöt8_t
 
DLC
;

156 
uöt8_t
 
D©a
[8];

158 } 
	tC™TxMsg
;

165 
uöt32_t
 
StdId
;

168 
uöt32_t
 
ExtId
;

171 
uöt8_t
 
IDE
;

175 
uöt8_t
 
RTR
;

179 
uöt8_t
 
DLC
;

182 
uöt8_t
 
D©a
[8];

185 
uöt8_t
 
FMI
;

188 } 
	tC™RxMsg
;

200 
	#CAN_InôSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

201 
	#CAN_InôSètus_Suc˚ss
 ((
uöt8_t
)0x01Ë

	)

205 
	#CANINITFAILED
 
CAN_InôSètus_Faûed


	)

206 
	#CANINITOK
 
CAN_InôSètus_Suc˚ss


	)

215 
	#CAN_Mode_N‹mÆ
 ((
uöt8_t
)0x00Ë

	)

216 
	#CAN_Mode_Lo›Back
 ((
uöt8_t
)0x01Ë

	)

217 
	#CAN_Mode_Sûít
 ((
uöt8_t
)0x02Ë

	)

218 
	#CAN_Mode_Sûít_Lo›Back
 ((
uöt8_t
)0x03Ë

	)

220 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_Mode_N‹mÆ
) || \

221 ((
MODE
Ë=
CAN_Mode_Lo›Back
)|| \

222 ((
MODE
Ë=
CAN_Mode_Sûít
) || \

223 ((
MODE
Ë=
CAN_Mode_Sûít_Lo›Back
))

	)

233 
	#CAN_O≥øtögMode_Inôüliz©i⁄
 ((
uöt8_t
)0x00Ë

	)

234 
	#CAN_O≥øtögMode_N‹mÆ
 ((
uöt8_t
)0x01Ë

	)

235 
	#CAN_O≥øtögMode_SÀï
 ((
uöt8_t
)0x02Ë

	)

238 
	#IS_CAN_OPERATING_MODE
(
MODE
Ë(((MODEË=
CAN_O≥øtögMode_Inôüliz©i⁄
) ||\

239 ((
MODE
Ë=
CAN_O≥øtögMode_N‹mÆ
)|| \

240 ((
MODE
Ë=
CAN_O≥øtögMode_SÀï
))

	)

250 
	#CAN_ModeSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

251 
	#CAN_ModeSètus_Suc˚ss
 ((
uöt8_t
)!
CAN_ModeSètus_Faûed
Ë

	)

259 
	#CAN_SJW_1tq
 ((
uöt8_t
)0x00Ë

	)

260 
	#CAN_SJW_2tq
 ((
uöt8_t
)0x01Ë

	)

261 
	#CAN_SJW_3tq
 ((
uöt8_t
)0x02Ë

	)

262 
	#CAN_SJW_4tq
 ((
uöt8_t
)0x03Ë

	)

264 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1tq
Ë|| ((SJWË=
CAN_SJW_2tq
)|| \

265 ((
SJW
Ë=
CAN_SJW_3tq
Ë|| ((SJWË=
CAN_SJW_4tq
))

	)

273 
	#CAN_BS1_1tq
 ((
uöt8_t
)0x00Ë

	)

274 
	#CAN_BS1_2tq
 ((
uöt8_t
)0x01Ë

	)

275 
	#CAN_BS1_3tq
 ((
uöt8_t
)0x02Ë

	)

276 
	#CAN_BS1_4tq
 ((
uöt8_t
)0x03Ë

	)

277 
	#CAN_BS1_5tq
 ((
uöt8_t
)0x04Ë

	)

278 
	#CAN_BS1_6tq
 ((
uöt8_t
)0x05Ë

	)

279 
	#CAN_BS1_7tq
 ((
uöt8_t
)0x06Ë

	)

280 
	#CAN_BS1_8tq
 ((
uöt8_t
)0x07Ë

	)

281 
	#CAN_BS1_9tq
 ((
uöt8_t
)0x08Ë

	)

282 
	#CAN_BS1_10tq
 ((
uöt8_t
)0x09Ë

	)

283 
	#CAN_BS1_11tq
 ((
uöt8_t
)0x0AË

	)

284 
	#CAN_BS1_12tq
 ((
uöt8_t
)0x0BË

	)

285 
	#CAN_BS1_13tq
 ((
uöt8_t
)0x0CË

	)

286 
	#CAN_BS1_14tq
 ((
uöt8_t
)0x0DË

	)

287 
	#CAN_BS1_15tq
 ((
uöt8_t
)0x0EË

	)

288 
	#CAN_BS1_16tq
 ((
uöt8_t
)0x0FË

	)

290 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16tq
)

	)

298 
	#CAN_BS2_1tq
 ((
uöt8_t
)0x00Ë

	)

299 
	#CAN_BS2_2tq
 ((
uöt8_t
)0x01Ë

	)

300 
	#CAN_BS2_3tq
 ((
uöt8_t
)0x02Ë

	)

301 
	#CAN_BS2_4tq
 ((
uöt8_t
)0x03Ë

	)

302 
	#CAN_BS2_5tq
 ((
uöt8_t
)0x04Ë

	)

303 
	#CAN_BS2_6tq
 ((
uöt8_t
)0x05Ë

	)

304 
	#CAN_BS2_7tq
 ((
uöt8_t
)0x06Ë

	)

305 
	#CAN_BS2_8tq
 ((
uöt8_t
)0x07Ë

	)

307 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8tq
)

	)

315 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

323 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<27)

	)

331 
	#CAN_FûãrMode_IdMask
 ((
uöt8_t
)0x00Ë

	)

332 
	#CAN_FûãrMode_IdLi°
 ((
uöt8_t
)0x01Ë

	)

334 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FûãrMode_IdMask
) || \

335 ((
MODE
Ë=
CAN_FûãrMode_IdLi°
))

	)

343 
	#CAN_FûãrSˇÀ_16bô
 ((
uöt8_t
)0x00Ë

	)

344 
	#CAN_FûãrSˇÀ_32bô
 ((
uöt8_t
)0x01Ë

	)

346 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FûãrSˇÀ_16bô
) || \

347 ((
SCALE
Ë=
CAN_FûãrSˇÀ_32bô
))

	)

355 
	#CAN_Fûãr_FIFO0
 ((
uöt8_t
)0x00Ë

	)

356 
	#CAN_Fûãr_FIFO1
 ((
uöt8_t
)0x01Ë

	)

357 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FûãrFIFO0
) || \

358 ((
FIFO
Ë=
CAN_FûãrFIFO1
))

	)

361 
	#CAN_FûãrFIFO0
 
CAN_Fûãr_FIFO0


	)

362 
	#CAN_FûãrFIFO1
 
CAN_Fûãr_FIFO1


	)

370 
	#IS_CAN_BANKNUMBER
(
BANKNUMBER
Ë(((BANKNUMBERË>1Ë&& ((BANKNUMBERË<27))

	)

378 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

379 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

380 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

381 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

389 
	#CAN_Id_Sènd¨d
 ((
uöt32_t
)0x00000000Ë

	)

390 
	#CAN_Id_Exãnded
 ((
uöt32_t
)0x00000004Ë

	)

391 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_Id_Sènd¨d
) || \

392 ((
IDTYPE
Ë=
CAN_Id_Exãnded
))

	)

395 
	#CAN_ID_STD
 
CAN_Id_Sènd¨d


	)

396 
	#CAN_ID_EXT
 
CAN_Id_Exãnded


	)

404 
	#CAN_RTR_D©a
 ((
uöt32_t
)0x00000000Ë

	)

405 
	#CAN_RTR_RemŸe
 ((
uöt32_t
)0x00000002Ë

	)

406 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_D©a
Ë|| ((RTRË=
CAN_RTR_RemŸe
))

	)

409 
	#CAN_RTR_DATA
 
CAN_RTR_D©a


	)

410 
	#CAN_RTR_REMOTE
 
CAN_RTR_RemŸe


	)

418 
	#CAN_TxSètus_Faûed
 ((
uöt8_t
)0x00)

	)

419 
	#CAN_TxSètus_Ok
 ((
uöt8_t
)0x01Ë

	)

420 
	#CAN_TxSètus_Pídög
 ((
uöt8_t
)0x02Ë

	)

421 
	#CAN_TxSètus_NoMaûBox
 ((
uöt8_t
)0x04Ë

	)

424 
	#CANTXFAILED
 
CAN_TxSètus_Faûed


	)

425 
	#CANTXOK
 
CAN_TxSètus_Ok


	)

426 
	#CANTXPENDING
 
CAN_TxSètus_Pídög


	)

427 
	#CAN_NO_MB
 
CAN_TxSètus_NoMaûBox


	)

435 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

436 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

438 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

446 
	#CAN_SÀï_Faûed
 ((
uöt8_t
)0x00Ë

	)

447 
	#CAN_SÀï_Ok
 ((
uöt8_t
)0x01Ë

	)

450 
	#CANSLEEPFAILED
 
CAN_SÀï_Faûed


	)

451 
	#CANSLEEPOK
 
CAN_SÀï_Ok


	)

459 
	#CAN_WakeUp_Faûed
 ((
uöt8_t
)0x00Ë

	)

460 
	#CAN_WakeUp_Ok
 ((
uöt8_t
)0x01Ë

	)

463 
	#CANWAKEUPFAILED
 
CAN_WakeUp_Faûed


	)

464 
	#CANWAKEUPOK
 
CAN_WakeUp_Ok


	)

473 
	#CAN_Eº‹Code_NoEº
 ((
uöt8_t
)0x00Ë

	)

474 
	#CAN_Eº‹Code_StuffEº
 ((
uöt8_t
)0x10Ë

	)

475 
	#CAN_Eº‹Code_F‹mEº
 ((
uöt8_t
)0x20Ë

	)

476 
	#CAN_Eº‹Code_ACKEº
 ((
uöt8_t
)0x30Ë

	)

477 
	#CAN_Eº‹Code_BôRe˚ssiveEº
 ((
uöt8_t
)0x40Ë

	)

478 
	#CAN_Eº‹Code_BôDomö™tEº
 ((
uöt8_t
)0x50Ë

	)

479 
	#CAN_Eº‹Code_CRCEº
 ((
uöt8_t
)0x60Ë

	)

480 
	#CAN_Eº‹Code_So·w¨eSëEº
 ((
uöt8_t
)0x70Ë

	)

494 
	#CAN_FLAG_RQCP0
 ((
uöt32_t
)0x38000001Ë

	)

495 
	#CAN_FLAG_RQCP1
 ((
uöt32_t
)0x38000100Ë

	)

496 
	#CAN_FLAG_RQCP2
 ((
uöt32_t
)0x38010000Ë

	)

499 
	#CAN_FLAG_FMP0
 ((
uöt32_t
)0x12000003Ë

	)

500 
	#CAN_FLAG_FF0
 ((
uöt32_t
)0x32000008Ë

	)

501 
	#CAN_FLAG_FOV0
 ((
uöt32_t
)0x32000010Ë

	)

502 
	#CAN_FLAG_FMP1
 ((
uöt32_t
)0x14000003Ë

	)

503 
	#CAN_FLAG_FF1
 ((
uöt32_t
)0x34000008Ë

	)

504 
	#CAN_FLAG_FOV1
 ((
uöt32_t
)0x34000010Ë

	)

507 
	#CAN_FLAG_WKU
 ((
uöt32_t
)0x31000008Ë

	)

508 
	#CAN_FLAG_SLAK
 ((
uöt32_t
)0x31000012Ë

	)

513 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x10F00001Ë

	)

514 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x10F00002Ë

	)

515 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x10F00004Ë

	)

516 
	#CAN_FLAG_LEC
 ((
uöt32_t
)0x30F00070Ë

	)

518 
	#IS_CAN_GET_FLAG
(
FLAG
Ë(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_BOF
) || \

519 ((
FLAG
Ë=
CAN_FLAG_EPV
Ë|| ((FLAGË=
CAN_FLAG_EWG
) || \

520 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) || \

521 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FMP0
) || \

522 ((
FLAG
Ë=
CAN_FLAG_FOV1
Ë|| ((FLAGË=
CAN_FLAG_FF1
) || \

523 ((
FLAG
Ë=
CAN_FLAG_FMP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
) || \

524 ((
FLAG
Ë=
CAN_FLAG_RQCP1
)|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

525 ((
FLAG
Ë=
CAN_FLAG_SLAK
 ))

	)

527 
	#IS_CAN_CLEAR_FLAG
(
FLAG
)(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
) || \

528 ((
FLAG
Ë=
CAN_FLAG_RQCP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

529 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) ||\

530 ((
FLAG
Ë=
CAN_FLAG_FF1
Ë|| ((FLAGË=
CAN_FLAG_FOV1
) || \

531 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_SLAK
))

	)

540 
	#CAN_IT_TME
 ((
uöt32_t
)0x00000001Ë

	)

543 
	#CAN_IT_FMP0
 ((
uöt32_t
)0x00000002Ë

	)

544 
	#CAN_IT_FF0
 ((
uöt32_t
)0x00000004Ë

	)

545 
	#CAN_IT_FOV0
 ((
uöt32_t
)0x00000008Ë

	)

546 
	#CAN_IT_FMP1
 ((
uöt32_t
)0x00000010Ë

	)

547 
	#CAN_IT_FF1
 ((
uöt32_t
)0x00000020Ë

	)

548 
	#CAN_IT_FOV1
 ((
uöt32_t
)0x00000040Ë

	)

551 
	#CAN_IT_WKU
 ((
uöt32_t
)0x00010000Ë

	)

552 
	#CAN_IT_SLK
 ((
uöt32_t
)0x00020000Ë

	)

555 
	#CAN_IT_EWG
 ((
uöt32_t
)0x00000100Ë

	)

556 
	#CAN_IT_EPV
 ((
uöt32_t
)0x00000200Ë

	)

557 
	#CAN_IT_BOF
 ((
uöt32_t
)0x00000400Ë

	)

558 
	#CAN_IT_LEC
 ((
uöt32_t
)0x00000800Ë

	)

559 
	#CAN_IT_ERR
 ((
uöt32_t
)0x00008000Ë

	)

562 
	#CAN_IT_RQCP0
 
CAN_IT_TME


	)

563 
	#CAN_IT_RQCP1
 
CAN_IT_TME


	)

564 
	#CAN_IT_RQCP2
 
CAN_IT_TME


	)

567 
	#IS_CAN_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FMP0
) ||\

568 ((
IT
Ë=
CAN_IT_FF0
Ë|| ((ITË=
CAN_IT_FOV0
) ||\

569 ((
IT
Ë=
CAN_IT_FMP1
Ë|| ((ITË=
CAN_IT_FF1
) ||\

570 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

571 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

572 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

573 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

	)

575 
	#IS_CAN_CLEAR_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FF0
) ||\

576 ((
IT
Ë=
CAN_IT_FOV0
)|| ((ITË=
CAN_IT_FF1
) ||\

577 ((
IT
Ë=
CAN_IT_FOV1
)|| ((ITË=
CAN_IT_EWG
) ||\

578 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

579 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

580 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

	)

593 
CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
);

596 
uöt8_t
 
CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

597 
CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

598 
CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

599 
CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
);

600 
CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

601 
CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

604 
uöt8_t
 
CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
);

605 
uöt8_t
 
CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
TønsmôMaûbox
);

606 
CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
);

609 
CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
);

610 
CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
);

611 
uöt8_t
 
CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
FIFONumbî
);

614 
uöt8_t
 
CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
CAN_O≥øtögMode
);

615 
uöt8_t
 
CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
);

616 
uöt8_t
 
CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
);

619 
uöt8_t
 
CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
);

620 
uöt8_t
 
CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

621 
uöt8_t
 
CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

624 
CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

625 
FœgSètus
 
CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

626 
CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

627 
ITSètus
 
CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

628 
CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

630 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_crc.h

30 #i‚de‡
__STM32F4xx_CRC_H


31 
	#__STM32F4xx_CRC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

62 
CRC_Re£tDR
();

63 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
D©a
);

64 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

65 
uöt32_t
 
CRC_GëCRC
();

66 
CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
);

67 
uöt8_t
 
CRC_GëIDRegi°î
();

69 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_cryp.h

30 #i‚de‡
__STM32F4xx_CRYP_H


31 
	#__STM32F4xx_CRYP_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
CRYP_AlgoDú
;

57 
uöt32_t
 
CRYP_AlgoMode
;

60 
uöt32_t
 
CRYP_D©aTy≥
;

62 
uöt32_t
 
CRYP_KeySize
;

65 }
	tCRYP_InôTy≥Def
;

72 
uöt32_t
 
CRYP_Key0Le·
;

73 
uöt32_t
 
CRYP_Key0Right
;

74 
uöt32_t
 
CRYP_Key1Le·
;

75 
uöt32_t
 
CRYP_Key1Right
;

76 
uöt32_t
 
CRYP_Key2Le·
;

77 
uöt32_t
 
CRYP_Key2Right
;

78 
uöt32_t
 
CRYP_Key3Le·
;

79 
uöt32_t
 
CRYP_Key3Right
;

80 }
	tCRYP_KeyInôTy≥Def
;

86 
uöt32_t
 
CRYP_IV0Le·
;

87 
uöt32_t
 
CRYP_IV0Right
;

88 
uöt32_t
 
CRYP_IV1Le·
;

89 
uöt32_t
 
CRYP_IV1Right
;

90 }
	tCRYP_IVInôTy≥Def
;

98 
uöt32_t
 
CR_CuºítC⁄fig
;

100 
uöt32_t
 
CRYP_IV0LR
;

101 
uöt32_t
 
CRYP_IV0RR
;

102 
uöt32_t
 
CRYP_IV1LR
;

103 
uöt32_t
 
CRYP_IV1RR
;

105 
uöt32_t
 
CRYP_K0LR
;

106 
uöt32_t
 
CRYP_K0RR
;

107 
uöt32_t
 
CRYP_K1LR
;

108 
uöt32_t
 
CRYP_K1RR
;

109 
uöt32_t
 
CRYP_K2LR
;

110 
uöt32_t
 
CRYP_K2RR
;

111 
uöt32_t
 
CRYP_K3LR
;

112 
uöt32_t
 
CRYP_K3RR
;

113 
uöt32_t
 
CRYP_CSGCMCCMR
[8];

114 
uöt32_t
 
CRYP_CSGCMR
[8];

115 }
	tCRYP_C⁄ãxt
;

127 
	#CRYP_AlgoDú_En¸y±
 ((
uöt16_t
)0x0000)

	)

128 
	#CRYP_AlgoDú_De¸y±
 ((
uöt16_t
)0x0004)

	)

129 
	#IS_CRYP_ALGODIR
(
ALGODIR
Ë(((ALGODIRË=
CRYP_AlgoDú_En¸y±
) || \

130 ((
ALGODIR
Ë=
CRYP_AlgoDú_De¸y±
))

	)

141 
	#CRYP_AlgoMode_TDES_ECB
 ((
uöt32_t
)0x00000000)

	)

142 
	#CRYP_AlgoMode_TDES_CBC
 ((
uöt32_t
)0x00000008)

	)

145 
	#CRYP_AlgoMode_DES_ECB
 ((
uöt32_t
)0x00000010)

	)

146 
	#CRYP_AlgoMode_DES_CBC
 ((
uöt32_t
)0x00000018)

	)

149 
	#CRYP_AlgoMode_AES_ECB
 ((
uöt32_t
)0x00000020)

	)

150 
	#CRYP_AlgoMode_AES_CBC
 ((
uöt32_t
)0x00000028)

	)

151 
	#CRYP_AlgoMode_AES_CTR
 ((
uöt32_t
)0x00000030)

	)

152 
	#CRYP_AlgoMode_AES_Key
 ((
uöt32_t
)0x00000038)

	)

153 
	#CRYP_AlgoMode_AES_GCM
 ((
uöt32_t
)0x00080000)

	)

154 
	#CRYP_AlgoMode_AES_CCM
 ((
uöt32_t
)0x00080008)

	)

156 
	#IS_CRYP_ALGOMODE
(
ALGOMODE
Ë(((ALGOMODEË=
CRYP_AlgoMode_TDES_ECB
) || \

157 ((
ALGOMODE
Ë=
CRYP_AlgoMode_TDES_CBC
)|| \

158 ((
ALGOMODE
Ë=
CRYP_AlgoMode_DES_ECB
) || \

159 ((
ALGOMODE
Ë=
CRYP_AlgoMode_DES_CBC
) || \

160 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_ECB
) || \

161 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_CBC
) || \

162 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_CTR
) || \

163 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_Key
) || \

164 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_GCM
) || \

165 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_CCM
))

	)

175 
	#CRYP_Pha£_Inô
 ((
uöt32_t
)0x00000000)

	)

176 
	#CRYP_Pha£_Hódî
 
CRYP_CR_GCM_CCMPH_0


	)

177 
	#CRYP_Pha£_Paylﬂd
 
CRYP_CR_GCM_CCMPH_1


	)

178 
	#CRYP_Pha£_FöÆ
 
CRYP_CR_GCM_CCMPH


	)

180 
	#IS_CRYP_PHASE
(
PHASE
Ë(((PHASEË=
CRYP_Pha£_Inô
) || \

181 ((
PHASE
Ë=
CRYP_Pha£_Hódî
) || \

182 ((
PHASE
Ë=
CRYP_Pha£_Paylﬂd
) || \

183 ((
PHASE
Ë=
CRYP_Pha£_FöÆ
))

	)

192 
	#CRYP_D©aTy≥_32b
 ((
uöt16_t
)0x0000)

	)

193 
	#CRYP_D©aTy≥_16b
 ((
uöt16_t
)0x0040)

	)

194 
	#CRYP_D©aTy≥_8b
 ((
uöt16_t
)0x0080)

	)

195 
	#CRYP_D©aTy≥_1b
 ((
uöt16_t
)0x00C0)

	)

196 
	#IS_CRYP_DATATYPE
(
DATATYPE
Ë(((DATATYPEË=
CRYP_D©aTy≥_32b
) || \

197 ((
DATATYPE
Ë=
CRYP_D©aTy≥_16b
)|| \

198 ((
DATATYPE
Ë=
CRYP_D©aTy≥_8b
)|| \

199 ((
DATATYPE
Ë=
CRYP_D©aTy≥_1b
))

	)

207 
	#CRYP_KeySize_128b
 ((
uöt16_t
)0x0000)

	)

208 
	#CRYP_KeySize_192b
 ((
uöt16_t
)0x0100)

	)

209 
	#CRYP_KeySize_256b
 ((
uöt16_t
)0x0200)

	)

210 
	#IS_CRYP_KEYSIZE
(
KEYSIZE
Ë(((KEYSIZEË=
CRYP_KeySize_128b
)|| \

211 ((
KEYSIZE
Ë=
CRYP_KeySize_192b
)|| \

212 ((
KEYSIZE
Ë=
CRYP_KeySize_256b
))

	)

220 
	#CRYP_FLAG_BUSY
 ((
uöt8_t
)0x10Ë

	)

224 
	#CRYP_FLAG_IFEM
 ((
uöt8_t
)0x01Ë

	)

225 
	#CRYP_FLAG_IFNF
 ((
uöt8_t
)0x02Ë

	)

226 
	#CRYP_FLAG_INRIS
 ((
uöt8_t
)0x22Ë

	)

227 
	#CRYP_FLAG_OFNE
 ((
uöt8_t
)0x04Ë

	)

229 
	#CRYP_FLAG_OFFU
 ((
uöt8_t
)0x08Ë

	)

230 
	#CRYP_FLAG_OUTRIS
 ((
uöt8_t
)0x21Ë

	)

233 
	#IS_CRYP_GET_FLAG
(
FLAG
Ë(((FLAGË=
CRYP_FLAG_IFEM
) || \

234 ((
FLAG
Ë=
CRYP_FLAG_IFNF
) || \

235 ((
FLAG
Ë=
CRYP_FLAG_OFNE
) || \

236 ((
FLAG
Ë=
CRYP_FLAG_OFFU
) || \

237 ((
FLAG
Ë=
CRYP_FLAG_BUSY
) || \

238 ((
FLAG
Ë=
CRYP_FLAG_OUTRIS
)|| \

239 ((
FLAG
Ë=
CRYP_FLAG_INRIS
))

	)

247 
	#CRYP_IT_INI
 ((
uöt8_t
)0x01Ë

	)

248 
	#CRYP_IT_OUTI
 ((
uöt8_t
)0x02Ë

	)

249 
	#IS_CRYP_CONFIG_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xFCË=0x00Ë&& ((ITË!0x00))

	)

250 
	#IS_CRYP_GET_IT
(
IT
Ë(((ITË=
CRYP_IT_INI
Ë|| ((ITË=
CRYP_IT_OUTI
))

	)

259 
	#MODE_ENCRYPT
 ((
uöt8_t
)0x01)

	)

260 
	#MODE_DECRYPT
 ((
uöt8_t
)0x00)

	)

269 
	#CRYP_DMAReq_D©aIN
 ((
uöt8_t
)0x01)

	)

270 
	#CRYP_DMAReq_D©aOUT
 ((
uöt8_t
)0x02)

	)

271 
	#IS_CRYP_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt8_t
)0xFCË=0x00Ë&& ((DMAREQË!0x00))

	)

284 
CRYP_DeInô
();

287 
CRYP_Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
);

288 
CRYP_Såu˘Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
);

289 
CRYP_KeyInô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
);

290 
CRYP_KeySåu˘Inô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
);

291 
CRYP_IVInô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
);

292 
CRYP_IVSåu˘Inô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
);

293 
CRYP_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

294 
CRYP_Pha£C⁄fig
(
uöt32_t
 
CRYP_Pha£
);

295 
CRYP_FIFOFlush
();

297 
CRYP_D©aIn
(
uöt32_t
 
D©a
);

298 
uöt32_t
 
CRYP_D©aOut
();

301 
Eº‹Sètus
 
CRYP_SaveC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtSave
,

302 
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
);

303 
CRYP_Re°‹eC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtRe°‹e
);

306 
CRYP_DMACmd
(
uöt8_t
 
CRYP_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

309 
CRYP_ITC⁄fig
(
uöt8_t
 
CRYP_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

310 
ITSètus
 
CRYP_GëITSètus
(
uöt8_t
 
CRYP_IT
);

311 
Fun˘i⁄ÆSèã
 
CRYP_GëCmdSètus
();

312 
FœgSètus
 
CRYP_GëFœgSètus
(
uöt8_t
 
CRYP_FLAG
);

315 
Eº‹Sètus
 
CRYP_AES_ECB
(
uöt8_t
 
Mode
,

316 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

317 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

318 
uöt8_t
 *
Ouçut
);

320 
Eº‹Sètus
 
CRYP_AES_CBC
(
uöt8_t
 
Mode
,

321 
uöt8_t
 
InôVe˘‹s
[16],

322 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

323 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

324 
uöt8_t
 *
Ouçut
);

326 
Eº‹Sètus
 
CRYP_AES_CTR
(
uöt8_t
 
Mode
,

327 
uöt8_t
 
InôVe˘‹s
[16],

328 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

329 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

330 
uöt8_t
 *
Ouçut
);

332 
Eº‹Sètus
 
CRYP_AES_GCM
(
uöt8_t
 
Mode
, uöt8_à
InôVe˘‹s
[16],

333 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

334 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
ILígth
,

335 
uöt8_t
 *
Hódî
, 
uöt32_t
 
HLígth
,

336 
uöt8_t
 *
Ouçut
, uöt8_à*
AuthTAG
);

338 
Eº‹Sètus
 
CRYP_AES_CCM
(
uöt8_t
 
Mode
,

339 
uöt8_t
* 
N⁄˚
, 
uöt32_t
 
N⁄˚Size
,

340 
uöt8_t
* 
Key
, 
uöt16_t
 
Keysize
,

341 
uöt8_t
* 
I≈ut
, 
uöt32_t
 
ILígth
,

342 
uöt8_t
* 
Hódî
, 
uöt32_t
 
HLígth
, uöt8_à*
HBuf„r
,

343 
uöt8_t
* 
Ouçut
,

344 
uöt8_t
* 
AuthTAG
, 
uöt32_t
 
TAGSize
);

347 
Eº‹Sètus
 
CRYP_TDES_ECB
(
uöt8_t
 
Mode
,

348 
uöt8_t
 
Key
[24],

349 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

350 
uöt8_t
 *
Ouçut
);

352 
Eº‹Sètus
 
CRYP_TDES_CBC
(
uöt8_t
 
Mode
,

353 
uöt8_t
 
Key
[24],

354 
uöt8_t
 
InôVe˘‹s
[8],

355 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

356 
uöt8_t
 *
Ouçut
);

359 
Eº‹Sètus
 
CRYP_DES_ECB
(
uöt8_t
 
Mode
,

360 
uöt8_t
 
Key
[8],

361 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

362 
uöt8_t
 *
Ouçut
);

364 
Eº‹Sètus
 
CRYP_DES_CBC
(
uöt8_t
 
Mode
,

365 
uöt8_t
 
Key
[8],

366 
uöt8_t
 
InôVe˘‹s
[8],

367 
uöt8_t
 *
I≈ut
,
uöt32_t
 
IÀngth
,

368 
uöt8_t
 *
Ouçut
);

370 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dac.h

30 #i‚de‡
__STM32F4xx_DAC_H


31 
	#__STM32F4xx_DAC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
DAC_Triggî
;

59 
uöt32_t
 
DAC_WaveGíî©i⁄
;

63 
uöt32_t
 
DAC_LFSRUnmask_TrüngÀAm∂ôude
;

67 
uöt32_t
 
DAC_OuçutBuf„r
;

69 }
	tDAC_InôTy≥Def
;

81 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

83 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024Ë

	)

84 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002CË

	)

85 
	#DAC_Triggî_T5_TRGO
 ((
uöt32_t
)0x0000001CË

	)

86 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004Ë

	)

87 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014Ë

	)

88 
	#DAC_Triggî_T8_TRGO
 ((
uöt32_t
)0x0000000CË

	)

90 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034Ë

	)

91 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003CË

	)

93 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
) || \

94 ((
TRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

95 ((
TRIGGER
Ë=
DAC_Triggî_T8_TRGO
) || \

96 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

97 ((
TRIGGER
Ë=
DAC_Triggî_T5_TRGO
) || \

98 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

99 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

100 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

101 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

	)

111 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

112 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

113 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

114 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
) || \

115 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

116 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

	)

125 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000Ë

	)

126 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100Ë

	)

127 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200Ë

	)

128 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300Ë

	)

129 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400Ë

	)

130 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500Ë

	)

131 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600Ë

	)

132 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700Ë

	)

133 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800Ë

	)

134 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900Ë

	)

135 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00Ë

	)

136 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00Ë

	)

137 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000Ë

	)

138 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100Ë

	)

139 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200Ë

	)

140 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300Ë

	)

141 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400Ë

	)

142 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500Ë

	)

143 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600Ë

	)

144 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700Ë

	)

145 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800Ë

	)

146 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900Ë

	)

147 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00Ë

	)

148 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00Ë

	)

150 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
) || \

151 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

152 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

153 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

154 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

155 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

156 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

157 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

158 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

159 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

160 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

161 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

162 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

163 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

164 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

165 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

166 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

167 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

168 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

169 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

170 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

171 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

172 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

173 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

	)

182 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

183 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

184 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
) || \

185 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

	)

194 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

195 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

196 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
) || \

197 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

	)

206 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

207 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

208 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

209 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
) || \

210 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

211 ((
ALIGN
Ë=
DAC_Align_8b_R
))

	)

220 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

221 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

222 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
) || \

223 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

	)

232 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

240 
	#DAC_IT_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

241 
	#IS_DAC_IT
(
IT
Ë(((ITË=
DAC_IT_DMAUDR
))

	)

251 
	#DAC_FLAG_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

252 
	#IS_DAC_FLAG
(
FLAG
Ë(((FLAGË=
DAC_FLAG_DMAUDR
))

	)

266 
DAC_DeInô
();

269 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

270 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

271 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

272 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

273 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

274 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

275 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

276 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

277 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

278 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

281 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

284 
DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

285 
FœgSètus
 
DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

286 
DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

287 
ITSètus
 
DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

288 
DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

290 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dbgmcu.h

29 #i‚de‡
__STM32F4xx_DBGMCU_H


30 
	#__STM32F4xx_DBGMCU_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"°m32f4xx.h
"

53 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

54 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

55 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

56 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFF8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

58 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

59 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

60 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

61 
	#DBGMCU_TIM5_STOP
 ((
uöt32_t
)0x00000008)

	)

62 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

63 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

64 
	#DBGMCU_TIM12_STOP
 ((
uöt32_t
)0x00000040)

	)

65 
	#DBGMCU_TIM13_STOP
 ((
uöt32_t
)0x00000080)

	)

66 
	#DBGMCU_TIM14_STOP
 ((
uöt32_t
)0x00000100)

	)

67 
	#DBGMCU_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

68 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

69 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

70 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

71 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

72 
	#DBGMCU_I2C3_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00800000)

	)

73 
	#DBGMCU_CAN1_STOP
 ((
uöt32_t
)0x02000000)

	)

74 
	#DBGMCU_CAN2_STOP
 ((
uöt32_t
)0x04000000)

	)

75 
	#IS_DBGMCU_APB1PERIPH
(
PERIPH
Ë((((PERIPHË& 0xF91FE200Ë=0x00Ë&& ((PERIPHË!0x00))

	)

77 
	#DBGMCU_TIM1_STOP
 ((
uöt32_t
)0x00000001)

	)

78 
	#DBGMCU_TIM8_STOP
 ((
uöt32_t
)0x00000002)

	)

79 
	#DBGMCU_TIM9_STOP
 ((
uöt32_t
)0x00010000)

	)

80 
	#DBGMCU_TIM10_STOP
 ((
uöt32_t
)0x00020000)

	)

81 
	#DBGMCU_TIM11_STOP
 ((
uöt32_t
)0x00040000)

	)

82 
	#IS_DBGMCU_APB2PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFF8FFFCË=0x00Ë&& ((PERIPHË!0x00))

	)

89 
uöt32_t
 
DBGMCU_GëREVID
();

90 
uöt32_t
 
DBGMCU_GëDEVID
();

91 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

92 
DBGMCU_APB1PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

93 
DBGMCU_APB2PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

95 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dcmi.h

29 #i‚de‡
__STM32F4xx_DCMI_H


30 
	#__STM32F4xx_DCMI_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"°m32f4xx.h
"

53 
uöt16_t
 
DCMI_C≠tuªMode
;

56 
uöt16_t
 
DCMI_SynchroMode
;

59 
uöt16_t
 
DCMI_PCKPﬁ¨ôy
;

62 
uöt16_t
 
DCMI_VSPﬁ¨ôy
;

65 
uöt16_t
 
DCMI_HSPﬁ¨ôy
;

68 
uöt16_t
 
DCMI_C≠tuªR©e
;

71 
uöt16_t
 
DCMI_ExãndedD©aMode
;

73 } 
	tDCMI_InôTy≥Def
;

80 
uöt16_t
 
DCMI_VîtiˇlSèπLöe
;

83 
uöt16_t
 
DCMI_H‹iz⁄èlOff£tCou¡
;

86 
uöt16_t
 
DCMI_VîtiˇlLöeCou¡
;

89 
uöt16_t
 
DCMI_C≠tuªCou¡
;

92 } 
	tDCMI_CROPInôTy≥Def
;

99 
uöt8_t
 
DCMI_FømeSèπCode
;

100 
uöt8_t
 
DCMI_LöeSèπCode
;

101 
uöt8_t
 
DCMI_LöeEndCode
;

102 
uöt8_t
 
DCMI_FømeEndCode
;

103 } 
	tDCMI_CodesInôTy≥Def
;

114 
	#DCMI_C≠tuªMode_C⁄töuous
 ((
uöt16_t
)0x0000Ë

	)

116 
	#DCMI_C≠tuªMode_S«pShŸ
 ((
uöt16_t
)0x0002Ë

	)

118 
	#IS_DCMI_CAPTURE_MODE
(
MODE
)(((MODEË=
DCMI_C≠tuªMode_C⁄töuous
) || \

119 ((
MODE
Ë=
DCMI_C≠tuªMode_S«pShŸ
))

	)

128 
	#DCMI_SynchroMode_H¨dw¨e
 ((
uöt16_t
)0x0000Ë

	)

130 
	#DCMI_SynchroMode_Embedded
 ((
uöt16_t
)0x0010Ë

	)

132 
	#IS_DCMI_SYNCHRO
(
MODE
)(((MODEË=
DCMI_SynchroMode_H¨dw¨e
) || \

133 ((
MODE
Ë=
DCMI_SynchroMode_Embedded
))

	)

142 
	#DCMI_PCKPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0000Ë

	)

143 
	#DCMI_PCKPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0020Ë

	)

144 
	#IS_DCMI_PCKPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_PCKPﬁ¨ôy_FÆlög
) || \

145 ((
POLARITY
Ë=
DCMI_PCKPﬁ¨ôy_Risög
))

	)

154 
	#DCMI_VSPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000Ë

	)

155 
	#DCMI_VSPﬁ¨ôy_High
 ((
uöt16_t
)0x0080Ë

	)

156 
	#IS_DCMI_VSPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_VSPﬁ¨ôy_Low
) || \

157 ((
POLARITY
Ë=
DCMI_VSPﬁ¨ôy_High
))

	)

166 
	#DCMI_HSPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000Ë

	)

167 
	#DCMI_HSPﬁ¨ôy_High
 ((
uöt16_t
)0x0040Ë

	)

168 
	#IS_DCMI_HSPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_HSPﬁ¨ôy_Low
) || \

169 ((
POLARITY
Ë=
DCMI_HSPﬁ¨ôy_High
))

	)

178 
	#DCMI_C≠tuªR©e_AŒ_Føme
 ((
uöt16_t
)0x0000Ë

	)

179 
	#DCMI_C≠tuªR©e_1of2_Føme
 ((
uöt16_t
)0x0100Ë

	)

180 
	#DCMI_C≠tuªR©e_1of4_Føme
 ((
uöt16_t
)0x0200Ë

	)

181 
	#IS_DCMI_CAPTURE_RATE
(
RATE
Ë(((RATEË=
DCMI_C≠tuªR©e_AŒ_Føme
) || \

182 ((
RATE
Ë=
DCMI_C≠tuªR©e_1of2_Føme
) ||\

183 ((
RATE
Ë=
DCMI_C≠tuªR©e_1of4_Føme
))

	)

192 
	#DCMI_ExãndedD©aMode_8b
 ((
uöt16_t
)0x0000Ë

	)

193 
	#DCMI_ExãndedD©aMode_10b
 ((
uöt16_t
)0x0400Ë

	)

194 
	#DCMI_ExãndedD©aMode_12b
 ((
uöt16_t
)0x0800Ë

	)

195 
	#DCMI_ExãndedD©aMode_14b
 ((
uöt16_t
)0x0C00Ë

	)

196 
	#IS_DCMI_EXTENDED_DATA
(
DATA
)(((DATAË=
DCMI_ExãndedD©aMode_8b
) || \

197 ((
DATA
Ë=
DCMI_ExãndedD©aMode_10b
) ||\

198 ((
DATA
Ë=
DCMI_ExãndedD©aMode_12b
) ||\

199 ((
DATA
Ë=
DCMI_ExãndedD©aMode_14b
))

	)

208 
	#DCMI_IT_FRAME
 ((
uöt16_t
)0x0001)

	)

209 
	#DCMI_IT_OVF
 ((
uöt16_t
)0x0002)

	)

210 
	#DCMI_IT_ERR
 ((
uöt16_t
)0x0004)

	)

211 
	#DCMI_IT_VSYNC
 ((
uöt16_t
)0x0008)

	)

212 
	#DCMI_IT_LINE
 ((
uöt16_t
)0x0010)

	)

213 
	#IS_DCMI_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFFE0Ë=0x0000Ë&& ((ITË!0x0000))

	)

214 
	#IS_DCMI_GET_IT
(
IT
Ë(((ITË=
DCMI_IT_FRAME
) || \

215 ((
IT
Ë=
DCMI_IT_OVF
) || \

216 ((
IT
Ë=
DCMI_IT_ERR
) || \

217 ((
IT
Ë=
DCMI_IT_VSYNC
) || \

218 ((
IT
Ë=
DCMI_IT_LINE
))

	)

230 
	#DCMI_FLAG_HSYNC
 ((
uöt16_t
)0x2001)

	)

231 
	#DCMI_FLAG_VSYNC
 ((
uöt16_t
)0x2002)

	)

232 
	#DCMI_FLAG_FNE
 ((
uöt16_t
)0x2004)

	)

236 
	#DCMI_FLAG_FRAMERI
 ((
uöt16_t
)0x0001)

	)

237 
	#DCMI_FLAG_OVFRI
 ((
uöt16_t
)0x0002)

	)

238 
	#DCMI_FLAG_ERRRI
 ((
uöt16_t
)0x0004)

	)

239 
	#DCMI_FLAG_VSYNCRI
 ((
uöt16_t
)0x0008)

	)

240 
	#DCMI_FLAG_LINERI
 ((
uöt16_t
)0x0010)

	)

244 
	#DCMI_FLAG_FRAMEMI
 ((
uöt16_t
)0x1001)

	)

245 
	#DCMI_FLAG_OVFMI
 ((
uöt16_t
)0x1002)

	)

246 
	#DCMI_FLAG_ERRMI
 ((
uöt16_t
)0x1004)

	)

247 
	#DCMI_FLAG_VSYNCMI
 ((
uöt16_t
)0x1008)

	)

248 
	#DCMI_FLAG_LINEMI
 ((
uöt16_t
)0x1010)

	)

249 
	#IS_DCMI_GET_FLAG
(
FLAG
Ë(((FLAGË=
DCMI_FLAG_HSYNC
) || \

250 ((
FLAG
Ë=
DCMI_FLAG_VSYNC
) || \

251 ((
FLAG
Ë=
DCMI_FLAG_FNE
) || \

252 ((
FLAG
Ë=
DCMI_FLAG_FRAMERI
) || \

253 ((
FLAG
Ë=
DCMI_FLAG_OVFRI
) || \

254 ((
FLAG
Ë=
DCMI_FLAG_ERRRI
) || \

255 ((
FLAG
Ë=
DCMI_FLAG_VSYNCRI
) || \

256 ((
FLAG
Ë=
DCMI_FLAG_LINERI
) || \

257 ((
FLAG
Ë=
DCMI_FLAG_FRAMEMI
) || \

258 ((
FLAG
Ë=
DCMI_FLAG_OVFMI
) || \

259 ((
FLAG
Ë=
DCMI_FLAG_ERRMI
) || \

260 ((
FLAG
Ë=
DCMI_FLAG_VSYNCMI
) || \

261 ((
FLAG
Ë=
DCMI_FLAG_LINEMI
))

	)

263 
	#IS_DCMI_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFFE0Ë=0x0000Ë&& ((FLAGË!0x0000))

	)

276 
DCMI_DeInô
();

279 
DCMI_Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
);

280 
DCMI_Såu˘Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
);

281 
DCMI_CROPC⁄fig
(
DCMI_CROPInôTy≥Def
* 
DCMI_CROPInôSåu˘
);

282 
DCMI_CROPCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

283 
DCMI_SëEmbeddedSynchroCodes
(
DCMI_CodesInôTy≥Def
* 
DCMI_CodesInôSåu˘
);

284 
DCMI_JPEGCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
DCMI_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

288 
DCMI_C≠tuªCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

289 
uöt32_t
 
DCMI_RódD©a
();

292 
DCMI_ITC⁄fig
(
uöt16_t
 
DCMI_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

293 
FœgSètus
 
DCMI_GëFœgSètus
(
uöt16_t
 
DCMI_FLAG
);

294 
DCMI_CÀ¨Fœg
(
uöt16_t
 
DCMI_FLAG
);

295 
ITSètus
 
DCMI_GëITSètus
(
uöt16_t
 
DCMI_IT
);

296 
DCMI_CÀ¨ITPídögBô
(
uöt16_t
 
DCMI_IT
);

298 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dma.h

30 #i‚de‡
__STM32F4xx_DMA_H


31 
	#__STM32F4xx_DMA_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
DMA_Ch™√l
;

59 
uöt32_t
 
DMA_PîùhîÆBa£Addr
;

61 
uöt32_t
 
DMA_Mem‹y0Ba£Addr
;

65 
uöt32_t
 
DMA_DIR
;

69 
uöt32_t
 
DMA_Buf„rSize
;

73 
uöt32_t
 
DMA_PîùhîÆInc
;

76 
uöt32_t
 
DMA_Mem‹yInc
;

79 
uöt32_t
 
DMA_PîùhîÆD©aSize
;

82 
uöt32_t
 
DMA_Mem‹yD©aSize
;

85 
uöt32_t
 
DMA_Mode
;

90 
uöt32_t
 
DMA_Pri‹ôy
;

93 
uöt32_t
 
DMA_FIFOMode
;

98 
uöt32_t
 
DMA_FIFOThªshﬁd
;

101 
uöt32_t
 
DMA_Mem‹yBur°
;

106 
uöt32_t
 
DMA_PîùhîÆBur°
;

110 }
	tDMA_InôTy≥Def
;

118 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
DMA1_Såóm0
) || \

119 ((
PERIPH
Ë=
DMA1_Såóm1
) || \

120 ((
PERIPH
Ë=
DMA1_Såóm2
) || \

121 ((
PERIPH
Ë=
DMA1_Såóm3
) || \

122 ((
PERIPH
Ë=
DMA1_Såóm4
) || \

123 ((
PERIPH
Ë=
DMA1_Såóm5
) || \

124 ((
PERIPH
Ë=
DMA1_Såóm6
) || \

125 ((
PERIPH
Ë=
DMA1_Såóm7
) || \

126 ((
PERIPH
Ë=
DMA2_Såóm0
) || \

127 ((
PERIPH
Ë=
DMA2_Såóm1
) || \

128 ((
PERIPH
Ë=
DMA2_Såóm2
) || \

129 ((
PERIPH
Ë=
DMA2_Såóm3
) || \

130 ((
PERIPH
Ë=
DMA2_Såóm4
) || \

131 ((
PERIPH
Ë=
DMA2_Såóm5
) || \

132 ((
PERIPH
Ë=
DMA2_Såóm6
) || \

133 ((
PERIPH
Ë=
DMA2_Såóm7
))

	)

135 
	#IS_DMA_ALL_CONTROLLER
(
CONTROLLER
Ë(((CONTROLLERË=
DMA1
) || \

136 ((
CONTROLLER
Ë=
DMA2
))

	)

141 
	#DMA_Ch™√l_0
 ((
uöt32_t
)0x00000000)

	)

142 
	#DMA_Ch™√l_1
 ((
uöt32_t
)0x02000000)

	)

143 
	#DMA_Ch™√l_2
 ((
uöt32_t
)0x04000000)

	)

144 
	#DMA_Ch™√l_3
 ((
uöt32_t
)0x06000000)

	)

145 
	#DMA_Ch™√l_4
 ((
uöt32_t
)0x08000000)

	)

146 
	#DMA_Ch™√l_5
 ((
uöt32_t
)0x0A000000)

	)

147 
	#DMA_Ch™√l_6
 ((
uöt32_t
)0x0C000000)

	)

148 
	#DMA_Ch™√l_7
 ((
uöt32_t
)0x0E000000)

	)

150 
	#IS_DMA_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DMA_Ch™√l_0
) || \

151 ((
CHANNEL
Ë=
DMA_Ch™√l_1
) || \

152 ((
CHANNEL
Ë=
DMA_Ch™√l_2
) || \

153 ((
CHANNEL
Ë=
DMA_Ch™√l_3
) || \

154 ((
CHANNEL
Ë=
DMA_Ch™√l_4
) || \

155 ((
CHANNEL
Ë=
DMA_Ch™√l_5
) || \

156 ((
CHANNEL
Ë=
DMA_Ch™√l_6
) || \

157 ((
CHANNEL
Ë=
DMA_Ch™√l_7
))

	)

166 
	#DMA_DIR_PîùhîÆToMem‹y
 ((
uöt32_t
)0x00000000)

	)

167 
	#DMA_DIR_Mem‹yToPîùhîÆ
 ((
uöt32_t
)0x00000040)

	)

168 
	#DMA_DIR_Mem‹yToMem‹y
 ((
uöt32_t
)0x00000080)

	)

170 
	#IS_DMA_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
DMA_DIR_PîùhîÆToMem‹y
 ) || \

171 ((
DIRECTION
Ë=
DMA_DIR_Mem‹yToPîùhîÆ
) || \

172 ((
DIRECTION
Ë=
DMA_DIR_Mem‹yToMem‹y
))

	)

181 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

190 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

191 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

193 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
) || \

194 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

	)

203 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

204 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

206 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
) || \

207 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

	)

216 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

217 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000800)

	)

218 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00001000)

	)

220 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
) || \

221 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

222 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

	)

231 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

232 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00002000)

	)

233 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00004000)

	)

235 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
) || \

236 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

237 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
 ))

	)

246 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

247 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000100)

	)

249 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_N‹mÆ
 ) || \

250 ((
MODE
Ë=
DMA_Mode_Cúcuœr
))

	)

259 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

260 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00010000)

	)

261 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00020000)

	)

262 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00030000)

	)

264 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_Low
 ) || \

265 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

266 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

267 ((
PRIORITY
Ë=
DMA_Pri‹ôy_VîyHigh
))

	)

276 
	#DMA_FIFOMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

277 
	#DMA_FIFOMode_E«bÀ
 ((
uöt32_t
)0x00000004)

	)

279 
	#IS_DMA_FIFO_MODE_STATE
(
STATE
Ë(((STATEË=
DMA_FIFOMode_DißbÀ
 ) || \

280 ((
STATE
Ë=
DMA_FIFOMode_E«bÀ
))

	)

289 
	#DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000000)

	)

290 
	#DMA_FIFOThªshﬁd_HÆfFuŒ
 ((
uöt32_t
)0x00000001)

	)

291 
	#DMA_FIFOThªshﬁd_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00000002)

	)

292 
	#DMA_FIFOThªshﬁd_FuŒ
 ((
uöt32_t
)0x00000003)

	)

294 
	#IS_DMA_FIFO_THRESHOLD
(
THRESHOLD
Ë(((THRESHOLDË=
DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
 ) || \

295 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_HÆfFuŒ
) || \

296 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_3Qu¨ãrsFuŒ
) || \

297 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_FuŒ
))

	)

306 
	#DMA_Mem‹yBur°_SögÀ
 ((
uöt32_t
)0x00000000)

	)

307 
	#DMA_Mem‹yBur°_INC4
 ((
uöt32_t
)0x00800000)

	)

308 
	#DMA_Mem‹yBur°_INC8
 ((
uöt32_t
)0x01000000)

	)

309 
	#DMA_Mem‹yBur°_INC16
 ((
uöt32_t
)0x01800000)

	)

311 
	#IS_DMA_MEMORY_BURST
(
BURST
Ë(((BURSTË=
DMA_Mem‹yBur°_SögÀ
) || \

312 ((
BURST
Ë=
DMA_Mem‹yBur°_INC4
) || \

313 ((
BURST
Ë=
DMA_Mem‹yBur°_INC8
) || \

314 ((
BURST
Ë=
DMA_Mem‹yBur°_INC16
))

	)

323 
	#DMA_PîùhîÆBur°_SögÀ
 ((
uöt32_t
)0x00000000)

	)

324 
	#DMA_PîùhîÆBur°_INC4
 ((
uöt32_t
)0x00200000)

	)

325 
	#DMA_PîùhîÆBur°_INC8
 ((
uöt32_t
)0x00400000)

	)

326 
	#DMA_PîùhîÆBur°_INC16
 ((
uöt32_t
)0x00600000)

	)

328 
	#IS_DMA_PERIPHERAL_BURST
(
BURST
Ë(((BURSTË=
DMA_PîùhîÆBur°_SögÀ
) || \

329 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC4
) || \

330 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC8
) || \

331 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC16
))

	)

340 
	#DMA_FIFOSètus_Less1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000000 << 3)

	)

341 
	#DMA_FIFOSètus_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000001 << 3)

	)

342 
	#DMA_FIFOSètus_HÆfFuŒ
 ((
uöt32_t
)0x00000002 << 3)

	)

343 
	#DMA_FIFOSètus_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00000003 << 3)

	)

344 
	#DMA_FIFOSètus_Em±y
 ((
uöt32_t
)0x00000004 << 3)

	)

345 
	#DMA_FIFOSètus_FuŒ
 ((
uöt32_t
)0x00000005 << 3)

	)

347 
	#IS_DMA_FIFO_STATUS
(
STATUS
Ë(((STATUSË=
DMA_FIFOSètus_Less1Qu¨ãrFuŒ
 ) || \

348 ((
STATUS
Ë=
DMA_FIFOSètus_HÆfFuŒ
) || \

349 ((
STATUS
Ë=
DMA_FIFOSètus_1Qu¨ãrFuŒ
) || \

350 ((
STATUS
Ë=
DMA_FIFOSètus_3Qu¨ãrsFuŒ
) || \

351 ((
STATUS
Ë=
DMA_FIFOSètus_FuŒ
) || \

352 ((
STATUS
Ë=
DMA_FIFOSètus_Em±y
))

	)

360 
	#DMA_FLAG_FEIF0
 ((
uöt32_t
)0x10800001)

	)

361 
	#DMA_FLAG_DMEIF0
 ((
uöt32_t
)0x10800004)

	)

362 
	#DMA_FLAG_TEIF0
 ((
uöt32_t
)0x10000008)

	)

363 
	#DMA_FLAG_HTIF0
 ((
uöt32_t
)0x10000010)

	)

364 
	#DMA_FLAG_TCIF0
 ((
uöt32_t
)0x10000020)

	)

365 
	#DMA_FLAG_FEIF1
 ((
uöt32_t
)0x10000040)

	)

366 
	#DMA_FLAG_DMEIF1
 ((
uöt32_t
)0x10000100)

	)

367 
	#DMA_FLAG_TEIF1
 ((
uöt32_t
)0x10000200)

	)

368 
	#DMA_FLAG_HTIF1
 ((
uöt32_t
)0x10000400)

	)

369 
	#DMA_FLAG_TCIF1
 ((
uöt32_t
)0x10000800)

	)

370 
	#DMA_FLAG_FEIF2
 ((
uöt32_t
)0x10010000)

	)

371 
	#DMA_FLAG_DMEIF2
 ((
uöt32_t
)0x10040000)

	)

372 
	#DMA_FLAG_TEIF2
 ((
uöt32_t
)0x10080000)

	)

373 
	#DMA_FLAG_HTIF2
 ((
uöt32_t
)0x10100000)

	)

374 
	#DMA_FLAG_TCIF2
 ((
uöt32_t
)0x10200000)

	)

375 
	#DMA_FLAG_FEIF3
 ((
uöt32_t
)0x10400000)

	)

376 
	#DMA_FLAG_DMEIF3
 ((
uöt32_t
)0x11000000)

	)

377 
	#DMA_FLAG_TEIF3
 ((
uöt32_t
)0x12000000)

	)

378 
	#DMA_FLAG_HTIF3
 ((
uöt32_t
)0x14000000)

	)

379 
	#DMA_FLAG_TCIF3
 ((
uöt32_t
)0x18000000)

	)

380 
	#DMA_FLAG_FEIF4
 ((
uöt32_t
)0x20000001)

	)

381 
	#DMA_FLAG_DMEIF4
 ((
uöt32_t
)0x20000004)

	)

382 
	#DMA_FLAG_TEIF4
 ((
uöt32_t
)0x20000008)

	)

383 
	#DMA_FLAG_HTIF4
 ((
uöt32_t
)0x20000010)

	)

384 
	#DMA_FLAG_TCIF4
 ((
uöt32_t
)0x20000020)

	)

385 
	#DMA_FLAG_FEIF5
 ((
uöt32_t
)0x20000040)

	)

386 
	#DMA_FLAG_DMEIF5
 ((
uöt32_t
)0x20000100)

	)

387 
	#DMA_FLAG_TEIF5
 ((
uöt32_t
)0x20000200)

	)

388 
	#DMA_FLAG_HTIF5
 ((
uöt32_t
)0x20000400)

	)

389 
	#DMA_FLAG_TCIF5
 ((
uöt32_t
)0x20000800)

	)

390 
	#DMA_FLAG_FEIF6
 ((
uöt32_t
)0x20010000)

	)

391 
	#DMA_FLAG_DMEIF6
 ((
uöt32_t
)0x20040000)

	)

392 
	#DMA_FLAG_TEIF6
 ((
uöt32_t
)0x20080000)

	)

393 
	#DMA_FLAG_HTIF6
 ((
uöt32_t
)0x20100000)

	)

394 
	#DMA_FLAG_TCIF6
 ((
uöt32_t
)0x20200000)

	)

395 
	#DMA_FLAG_FEIF7
 ((
uöt32_t
)0x20400000)

	)

396 
	#DMA_FLAG_DMEIF7
 ((
uöt32_t
)0x21000000)

	)

397 
	#DMA_FLAG_TEIF7
 ((
uöt32_t
)0x22000000)

	)

398 
	#DMA_FLAG_HTIF7
 ((
uöt32_t
)0x24000000)

	)

399 
	#DMA_FLAG_TCIF7
 ((
uöt32_t
)0x28000000)

	)

401 
	#IS_DMA_CLEAR_FLAG
(
FLAG
) ((((FLAG) & 0x30000000) != 0x30000000) && (((FLAG) & 0x30000000) != 0) && \

402 (((
FLAG
Ë& 0xC002F082Ë=0x00Ë&& ((FLAGË!0x00))

	)

404 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA_FLAG_TCIF0
Ë|| ((FLAGË=
DMA_FLAG_HTIF0
) || \

405 ((
FLAG
Ë=
DMA_FLAG_TEIF0
Ë|| ((FLAGË=
DMA_FLAG_DMEIF0
) || \

406 ((
FLAG
Ë=
DMA_FLAG_FEIF0
Ë|| ((FLAGË=
DMA_FLAG_TCIF1
) || \

407 ((
FLAG
Ë=
DMA_FLAG_HTIF1
Ë|| ((FLAGË=
DMA_FLAG_TEIF1
) || \

408 ((
FLAG
Ë=
DMA_FLAG_DMEIF1
Ë|| ((FLAGË=
DMA_FLAG_FEIF1
) || \

409 ((
FLAG
Ë=
DMA_FLAG_TCIF2
Ë|| ((FLAGË=
DMA_FLAG_HTIF2
) || \

410 ((
FLAG
Ë=
DMA_FLAG_TEIF2
Ë|| ((FLAGË=
DMA_FLAG_DMEIF2
) || \

411 ((
FLAG
Ë=
DMA_FLAG_FEIF2
Ë|| ((FLAGË=
DMA_FLAG_TCIF3
) || \

412 ((
FLAG
Ë=
DMA_FLAG_HTIF3
Ë|| ((FLAGË=
DMA_FLAG_TEIF3
) || \

413 ((
FLAG
Ë=
DMA_FLAG_DMEIF3
Ë|| ((FLAGË=
DMA_FLAG_FEIF3
) || \

414 ((
FLAG
Ë=
DMA_FLAG_TCIF4
Ë|| ((FLAGË=
DMA_FLAG_HTIF4
) || \

415 ((
FLAG
Ë=
DMA_FLAG_TEIF4
Ë|| ((FLAGË=
DMA_FLAG_DMEIF4
) || \

416 ((
FLAG
Ë=
DMA_FLAG_FEIF4
Ë|| ((FLAGË=
DMA_FLAG_TCIF5
) || \

417 ((
FLAG
Ë=
DMA_FLAG_HTIF5
Ë|| ((FLAGË=
DMA_FLAG_TEIF5
) || \

418 ((
FLAG
Ë=
DMA_FLAG_DMEIF5
Ë|| ((FLAGË=
DMA_FLAG_FEIF5
) || \

419 ((
FLAG
Ë=
DMA_FLAG_TCIF6
Ë|| ((FLAGË=
DMA_FLAG_HTIF6
) || \

420 ((
FLAG
Ë=
DMA_FLAG_TEIF6
Ë|| ((FLAGË=
DMA_FLAG_DMEIF6
) || \

421 ((
FLAG
Ë=
DMA_FLAG_FEIF6
Ë|| ((FLAGË=
DMA_FLAG_TCIF7
) || \

422 ((
FLAG
Ë=
DMA_FLAG_HTIF7
Ë|| ((FLAGË=
DMA_FLAG_TEIF7
) || \

423 ((
FLAG
Ë=
DMA_FLAG_DMEIF7
Ë|| ((FLAGË=
DMA_FLAG_FEIF7
))

	)

432 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000010)

	)

433 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000008)

	)

434 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000004)

	)

435 
	#DMA_IT_DME
 ((
uöt32_t
)0x00000002)

	)

436 
	#DMA_IT_FE
 ((
uöt32_t
)0x00000080)

	)

438 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFF61Ë=0x00Ë&& ((ITË!0x00))

	)

447 
	#DMA_IT_FEIF0
 ((
uöt32_t
)0x90000001)

	)

448 
	#DMA_IT_DMEIF0
 ((
uöt32_t
)0x10001004)

	)

449 
	#DMA_IT_TEIF0
 ((
uöt32_t
)0x10002008)

	)

450 
	#DMA_IT_HTIF0
 ((
uöt32_t
)0x10004010)

	)

451 
	#DMA_IT_TCIF0
 ((
uöt32_t
)0x10008020)

	)

452 
	#DMA_IT_FEIF1
 ((
uöt32_t
)0x90000040)

	)

453 
	#DMA_IT_DMEIF1
 ((
uöt32_t
)0x10001100)

	)

454 
	#DMA_IT_TEIF1
 ((
uöt32_t
)0x10002200)

	)

455 
	#DMA_IT_HTIF1
 ((
uöt32_t
)0x10004400)

	)

456 
	#DMA_IT_TCIF1
 ((
uöt32_t
)0x10008800)

	)

457 
	#DMA_IT_FEIF2
 ((
uöt32_t
)0x90010000)

	)

458 
	#DMA_IT_DMEIF2
 ((
uöt32_t
)0x10041000)

	)

459 
	#DMA_IT_TEIF2
 ((
uöt32_t
)0x10082000)

	)

460 
	#DMA_IT_HTIF2
 ((
uöt32_t
)0x10104000)

	)

461 
	#DMA_IT_TCIF2
 ((
uöt32_t
)0x10208000)

	)

462 
	#DMA_IT_FEIF3
 ((
uöt32_t
)0x90400000)

	)

463 
	#DMA_IT_DMEIF3
 ((
uöt32_t
)0x11001000)

	)

464 
	#DMA_IT_TEIF3
 ((
uöt32_t
)0x12002000)

	)

465 
	#DMA_IT_HTIF3
 ((
uöt32_t
)0x14004000)

	)

466 
	#DMA_IT_TCIF3
 ((
uöt32_t
)0x18008000)

	)

467 
	#DMA_IT_FEIF4
 ((
uöt32_t
)0xA0000001)

	)

468 
	#DMA_IT_DMEIF4
 ((
uöt32_t
)0x20001004)

	)

469 
	#DMA_IT_TEIF4
 ((
uöt32_t
)0x20002008)

	)

470 
	#DMA_IT_HTIF4
 ((
uöt32_t
)0x20004010)

	)

471 
	#DMA_IT_TCIF4
 ((
uöt32_t
)0x20008020)

	)

472 
	#DMA_IT_FEIF5
 ((
uöt32_t
)0xA0000040)

	)

473 
	#DMA_IT_DMEIF5
 ((
uöt32_t
)0x20001100)

	)

474 
	#DMA_IT_TEIF5
 ((
uöt32_t
)0x20002200)

	)

475 
	#DMA_IT_HTIF5
 ((
uöt32_t
)0x20004400)

	)

476 
	#DMA_IT_TCIF5
 ((
uöt32_t
)0x20008800)

	)

477 
	#DMA_IT_FEIF6
 ((
uöt32_t
)0xA0010000)

	)

478 
	#DMA_IT_DMEIF6
 ((
uöt32_t
)0x20041000)

	)

479 
	#DMA_IT_TEIF6
 ((
uöt32_t
)0x20082000)

	)

480 
	#DMA_IT_HTIF6
 ((
uöt32_t
)0x20104000)

	)

481 
	#DMA_IT_TCIF6
 ((
uöt32_t
)0x20208000)

	)

482 
	#DMA_IT_FEIF7
 ((
uöt32_t
)0xA0400000)

	)

483 
	#DMA_IT_DMEIF7
 ((
uöt32_t
)0x21001000)

	)

484 
	#DMA_IT_TEIF7
 ((
uöt32_t
)0x22002000)

	)

485 
	#DMA_IT_HTIF7
 ((
uöt32_t
)0x24004000)

	)

486 
	#DMA_IT_TCIF7
 ((
uöt32_t
)0x28008000)

	)

488 
	#IS_DMA_CLEAR_IT
(
IT
) ((((IT) & 0x30000000) != 0x30000000) && \

489 (((
IT
) & 0x30000000) != 0) && ((IT) != 0x00) && \

490 (((
IT
Ë& 0x40820082Ë=0x00))

	)

492 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA_IT_TCIF0
Ë|| ((ITË=
DMA_IT_HTIF0
) || \

493 ((
IT
Ë=
DMA_IT_TEIF0
Ë|| ((ITË=
DMA_IT_DMEIF0
) || \

494 ((
IT
Ë=
DMA_IT_FEIF0
Ë|| ((ITË=
DMA_IT_TCIF1
) || \

495 ((
IT
Ë=
DMA_IT_HTIF1
Ë|| ((ITË=
DMA_IT_TEIF1
) || \

496 ((
IT
Ë=
DMA_IT_DMEIF1
)|| ((ITË=
DMA_IT_FEIF1
) || \

497 ((
IT
Ë=
DMA_IT_TCIF2
Ë|| ((ITË=
DMA_IT_HTIF2
) || \

498 ((
IT
Ë=
DMA_IT_TEIF2
Ë|| ((ITË=
DMA_IT_DMEIF2
) || \

499 ((
IT
Ë=
DMA_IT_FEIF2
Ë|| ((ITË=
DMA_IT_TCIF3
) || \

500 ((
IT
Ë=
DMA_IT_HTIF3
Ë|| ((ITË=
DMA_IT_TEIF3
) || \

501 ((
IT
Ë=
DMA_IT_DMEIF3
)|| ((ITË=
DMA_IT_FEIF3
) || \

502 ((
IT
Ë=
DMA_IT_TCIF4
Ë|| ((ITË=
DMA_IT_HTIF4
) || \

503 ((
IT
Ë=
DMA_IT_TEIF4
Ë|| ((ITË=
DMA_IT_DMEIF4
) || \

504 ((
IT
Ë=
DMA_IT_FEIF4
Ë|| ((ITË=
DMA_IT_TCIF5
) || \

505 ((
IT
Ë=
DMA_IT_HTIF5
Ë|| ((ITË=
DMA_IT_TEIF5
) || \

506 ((
IT
Ë=
DMA_IT_DMEIF5
)|| ((ITË=
DMA_IT_FEIF5
) || \

507 ((
IT
Ë=
DMA_IT_TCIF6
Ë|| ((ITË=
DMA_IT_HTIF6
) || \

508 ((
IT
Ë=
DMA_IT_TEIF6
Ë|| ((ITË=
DMA_IT_DMEIF6
) || \

509 ((
IT
Ë=
DMA_IT_FEIF6
Ë|| ((ITË=
DMA_IT_TCIF7
) || \

510 ((
IT
Ë=
DMA_IT_HTIF7
Ë|| ((ITË=
DMA_IT_TEIF7
) || \

511 ((
IT
Ë=
DMA_IT_DMEIF7
)|| ((ITË=
DMA_IT_FEIF7
))

	)

520 
	#DMA_PINCOS_Psize
 ((
uöt32_t
)0x00000000)

	)

521 
	#DMA_PINCOS_W‹dAlig√d
 ((
uöt32_t
)0x00008000)

	)

523 
	#IS_DMA_PINCOS_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PINCOS_Psize
) || \

524 ((
SIZE
Ë=
DMA_PINCOS_W‹dAlig√d
))

	)

533 
	#DMA_FlowCål_Mem‹y
 ((
uöt32_t
)0x00000000)

	)

534 
	#DMA_FlowCål_PîùhîÆ
 ((
uöt32_t
)0x00000020)

	)

536 
	#IS_DMA_FLOW_CTRL
(
CTRL
Ë(((CTRLË=
DMA_FlowCål_Mem‹y
) || \

537 ((
CTRL
Ë=
DMA_FlowCål_PîùhîÆ
))

	)

546 
	#DMA_Mem‹y_0
 ((
uöt32_t
)0x00000000)

	)

547 
	#DMA_Mem‹y_1
 ((
uöt32_t
)0x00080000)

	)

549 
	#IS_DMA_CURRENT_MEM
(
MEM
Ë(((MEMË=
DMA_Mem‹y_0
Ë|| ((MEMË=
DMA_Mem‹y_1
))

	)

562 
DMA_DeInô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

565 
DMA_Inô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

566 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

567 
DMA_Cmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

570 
DMA_PîùhIncOff£tSizeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_Pöcos
);

571 
DMA_FlowC⁄åﬁÀrC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FlowCål
);

574 
DMA_SëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt16_t
 
Cou¡î
);

575 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

578 
DMA_DoubÀBuf„rModeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹y1Ba£Addr
,

579 
uöt32_t
 
DMA_CuºítMem‹y
);

580 
DMA_DoubÀBuf„rModeCmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

581 
DMA_Mem‹yT¨gëC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹yBa£Addr
,

582 
uöt32_t
 
DMA_Mem‹yT¨gë
);

583 
uöt32_t
 
DMA_GëCuºítMem‹yT¨gë
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

586 
Fun˘i⁄ÆSèã
 
DMA_GëCmdSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

587 
uöt32_t
 
DMA_GëFIFOSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

588 
FœgSètus
 
DMA_GëFœgSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
);

589 
DMA_CÀ¨Fœg
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
);

590 
DMA_ITC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

591 
ITSètus
 
DMA_GëITSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
);

592 
DMA_CÀ¨ITPídögBô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
);

594 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dma2d.h

30 #i‚de‡
__STM32F4xx_DMA2D_H


31 
	#__STM32F4xx_DMA2D_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
DMA2D_Mode
;

59 
uöt32_t
 
DMA2D_CMode
;

62 
uöt32_t
 
DMA2D_OuçutBlue
;

70 
uöt32_t
 
DMA2D_OuçutGªí
;

78 
uöt32_t
 
DMA2D_OuçutRed
;

86 
uöt32_t
 
DMA2D_OuçutAÕha
;

92 
uöt32_t
 
DMA2D_OuçutMem‹yAdd
;

95 
uöt32_t
 
DMA2D_OuçutOff£t
;

98 
uöt32_t
 
DMA2D_NumbîOfLöe
;

101 
uöt32_t
 
DMA2D_PixñPîLöe
;

103 } 
	tDMA2D_InôTy≥Def
;

109 
uöt32_t
 
DMA2D_FGMA
;

112 
uöt32_t
 
DMA2D_FGO
;

115 
uöt32_t
 
DMA2D_FGCM
;

118 
uöt32_t
 
DMA2D_FG_CLUT_CM
;

121 
uöt32_t
 
DMA2D_FG_CLUT_SIZE
;

124 
uöt32_t
 
DMA2D_FGPFC_ALPHA_MODE
;

127 
uöt32_t
 
DMA2D_FGPFC_ALPHA_VALUE
;

130 
uöt32_t
 
DMA2D_FGC_BLUE
;

133 
uöt32_t
 
DMA2D_FGC_GREEN
;

136 
uöt32_t
 
DMA2D_FGC_RED
;

139 
uöt32_t
 
DMA2D_FGCMAR
;

141 } 
	tDMA2D_FG_InôTy≥Def
;

146 
uöt32_t
 
DMA2D_BGMA
;

149 
uöt32_t
 
DMA2D_BGO
;

152 
uöt32_t
 
DMA2D_BGCM
;

155 
uöt32_t
 
DMA2D_BG_CLUT_CM
;

158 
uöt32_t
 
DMA2D_BG_CLUT_SIZE
;

161 
uöt32_t
 
DMA2D_BGPFC_ALPHA_MODE
;

164 
uöt32_t
 
DMA2D_BGPFC_ALPHA_VALUE
;

167 
uöt32_t
 
DMA2D_BGC_BLUE
;

170 
uöt32_t
 
DMA2D_BGC_GREEN
;

173 
uöt32_t
 
DMA2D_BGC_RED
;

176 
uöt32_t
 
DMA2D_BGCMAR
;

178 } 
	tDMA2D_BG_InôTy≥Def
;

193 
	#DMA2D_M2M
 ((
uöt32_t
)0x00000000)

	)

194 
	#DMA2D_M2M_PFC
 ((
uöt32_t
)0x00010000)

	)

195 
	#DMA2D_M2M_BLEND
 ((
uöt32_t
)0x00020000)

	)

196 
	#DMA2D_R2M
 ((
uöt32_t
)0x00030000)

	)

198 
	#IS_DMA2D_MODE
(
MODE
Ë(((MODEË=
DMA2D_M2M
Ë|| ((MODEË=
DMA2D_M2M_PFC
) || \

199 ((
MODE
Ë=
DMA2D_M2M_BLEND
Ë|| ((MODEË=
DMA2D_R2M
))

	)

209 
	#DMA2D_ARGB8888
 ((
uöt32_t
)0x00000000)

	)

210 
	#DMA2D_RGB888
 ((
uöt32_t
)0x00000001)

	)

211 
	#DMA2D_RGB565
 ((
uöt32_t
)0x00000002)

	)

212 
	#DMA2D_ARGB1555
 ((
uöt32_t
)0x00000003)

	)

213 
	#DMA2D_ARGB4444
 ((
uöt32_t
)0x00000004)

	)

215 
	#IS_DMA2D_CMODE
(
MODE_ARGB
Ë(((MODE_ARGBË=
DMA2D_ARGB8888
Ë|| ((MODE_ARGBË=
DMA2D_RGB888
) || \

216 ((
MODE_ARGB
Ë=
DMA2D_RGB565
Ë|| ((MODE_ARGBË=
DMA2D_ARGB1555
) || \

217 ((
MODE_ARGB
Ë=
DMA2D_ARGB4444
))

	)

227 
	#DMA2D_Ouçut_Cﬁ‹
 ((
uöt32_t
)0x000000FF)

	)

229 
	#IS_DMA2D_OGREEN
(
OGREEN
Ë((OGREENË<
DMA2D_Ouçut_Cﬁ‹
)

	)

230 
	#IS_DMA2D_ORED
(
ORED
Ë((OREDË<
DMA2D_Ouçut_Cﬁ‹
)

	)

231 
	#IS_DMA2D_OBLUE
(
OBLUE
Ë((OBLUEË<
DMA2D_Ouçut_Cﬁ‹
)

	)

232 
	#IS_DMA2D_OALPHA
(
OALPHA
Ë((OALPHAË<
DMA2D_Ouçut_Cﬁ‹
)

	)

241 
	#DMA2D_OUTPUT_OFFSET
 ((
uöt32_t
)0x00003FFF)

	)

243 
	#IS_DMA2D_OUTPUT_OFFSET
(
OOFFSET
Ë((OOFFSETË<
DMA2D_OUTPUT_OFFSET
)

	)

254 
	#DMA2D_pixñ
 ((
uöt32_t
)0x00003FFF)

	)

255 
	#DMA2D_Löe
 ((
uöt32_t
)0x0000FFFF)

	)

257 
	#IS_DMA2D_LINE
(
LINE
Ë((LINEË<
DMA2D_Löe
)

	)

258 
	#IS_DMA2D_PIXEL
(
PIXEL
Ë((PIXELË<
DMA2D_pixñ
)

	)

268 
	#OFFSET
 ((
uöt32_t
)0x00003FFF)

	)

270 
	#IS_DMA2D_FGO
(
FGO
Ë((FGOË<
OFFSET
)

	)

272 
	#IS_DMA2D_BGO
(
BGO
Ë((BGOË<
OFFSET
)

	)

283 
	#CM_ARGB8888
 ((
uöt32_t
)0x00000000)

	)

284 
	#CM_RGB888
 ((
uöt32_t
)0x00000001)

	)

285 
	#CM_RGB565
 ((
uöt32_t
)0x00000002)

	)

286 
	#CM_ARGB1555
 ((
uöt32_t
)0x00000003)

	)

287 
	#CM_ARGB4444
 ((
uöt32_t
)0x00000004)

	)

288 
	#CM_L8
 ((
uöt32_t
)0x00000005)

	)

289 
	#CM_AL44
 ((
uöt32_t
)0x00000006)

	)

290 
	#CM_AL88
 ((
uöt32_t
)0x00000007)

	)

291 
	#CM_L4
 ((
uöt32_t
)0x00000008)

	)

292 
	#CM_A8
 ((
uöt32_t
)0x00000009)

	)

293 
	#CM_A4
 ((
uöt32_t
)0x0000000A)

	)

295 
	#IS_DMA2D_FGCM
(
FGCM
Ë(((FGCMË=
CM_ARGB8888
Ë|| ((FGCMË=
CM_RGB888
) || \

296 ((
FGCM
Ë=
CM_RGB565
Ë|| ((FGCMË=
CM_ARGB1555
) || \

297 ((
FGCM
Ë=
CM_ARGB4444
Ë|| ((FGCMË=
CM_L8
) || \

298 ((
FGCM
Ë=
CM_AL44
Ë|| ((FGCMË=
CM_AL88
) || \

299 ((
FGCM
Ë=
CM_L4
Ë|| ((FGCMË=
CM_A8
) || \

300 ((
FGCM
Ë=
CM_A4
))

	)

302 
	#IS_DMA2D_BGCM
(
BGCM
Ë(((BGCMË=
CM_ARGB8888
Ë|| ((BGCMË=
CM_RGB888
) || \

303 ((
BGCM
Ë=
CM_RGB565
Ë|| ((BGCMË=
CM_ARGB1555
) || \

304 ((
BGCM
Ë=
CM_ARGB4444
Ë|| ((BGCMË=
CM_L8
) || \

305 ((
BGCM
Ë=
CM_AL44
Ë|| ((BGCMË=
CM_AL88
) || \

306 ((
BGCM
Ë=
CM_L4
Ë|| ((BGCMË=
CM_A8
) || \

307 ((
BGCM
Ë=
CM_A4
))

	)

317 
	#CLUT_CM_ARGB8888
 ((
uöt32_t
)0x00000000)

	)

318 
	#CLUT_CM_RGB888
 ((
uöt32_t
)0x00000001)

	)

320 
	#IS_DMA2D_FG_CLUT_CM
(
FG_CLUT_CM
Ë(((FG_CLUT_CMË=
CLUT_CM_ARGB8888
Ë|| ((FG_CLUT_CMË=
CLUT_CM_RGB888
))

	)

322 
	#IS_DMA2D_BG_CLUT_CM
(
BG_CLUT_CM
Ë(((BG_CLUT_CMË=
CLUT_CM_ARGB8888
Ë|| ((BG_CLUT_CMË=
CLUT_CM_RGB888
))

	)

332 
	#COLOR_VALUE
 ((
uöt32_t
)0x000000FF)

	)

334 
	#IS_DMA2D_FG_CLUT_SIZE
(
FG_CLUT_SIZE
Ë((FG_CLUT_SIZEË<
COLOR_VALUE
)

	)

336 
	#IS_DMA2D_FG_ALPHA_VALUE
(
FG_ALPHA_VALUE
Ë((FG_ALPHA_VALUEË<
COLOR_VALUE
)

	)

337 
	#IS_DMA2D_FGC_BLUE
(
FGC_BLUE
Ë((FGC_BLUEË<
COLOR_VALUE
)

	)

338 
	#IS_DMA2D_FGC_GREEN
(
FGC_GREEN
Ë((FGC_GREENË<
COLOR_VALUE
)

	)

339 
	#IS_DMA2D_FGC_RED
(
FGC_RED
Ë((FGC_REDË<
COLOR_VALUE
)

	)

341 
	#IS_DMA2D_BG_CLUT_SIZE
(
BG_CLUT_SIZE
Ë((BG_CLUT_SIZEË<
COLOR_VALUE
)

	)

343 
	#IS_DMA2D_BG_ALPHA_VALUE
(
BG_ALPHA_VALUE
Ë((BG_ALPHA_VALUEË<
COLOR_VALUE
)

	)

344 
	#IS_DMA2D_BGC_BLUE
(
BGC_BLUE
Ë((BGC_BLUEË<
COLOR_VALUE
)

	)

345 
	#IS_DMA2D_BGC_GREEN
(
BGC_GREEN
Ë((BGC_GREENË<
COLOR_VALUE
)

	)

346 
	#IS_DMA2D_BGC_RED
(
BGC_RED
Ë((BGC_REDË<
COLOR_VALUE
)

	)

356 
	#NO_MODIF_ALPHA_VALUE
 ((
uöt32_t
)0x00000000)

	)

357 
	#REPLACE_ALPHA_VALUE
 ((
uöt32_t
)0x00000001)

	)

358 
	#COMBINE_ALPHA_VALUE
 ((
uöt32_t
)0x00000002)

	)

360 
	#IS_DMA2D_FG_ALPHA_MODE
(
FG_ALPHA_MODE
Ë(((FG_ALPHA_MODEË=
NO_MODIF_ALPHA_VALUE
) || \

361 ((
FG_ALPHA_MODE
Ë=
REPLACE_ALPHA_VALUE
) || \

362 ((
FG_ALPHA_MODE
Ë=
COMBINE_ALPHA_VALUE
))

	)

364 
	#IS_DMA2D_BG_ALPHA_MODE
(
BG_ALPHA_MODE
Ë(((BG_ALPHA_MODEË=
NO_MODIF_ALPHA_VALUE
) || \

365 ((
BG_ALPHA_MODE
Ë=
REPLACE_ALPHA_VALUE
) || \

366 ((
BG_ALPHA_MODE
Ë=
COMBINE_ALPHA_VALUE
))

	)

376 
	#DMA2D_IT_CE
 
DMA2D_CR_CEIE


	)

377 
	#DMA2D_IT_CTC
 
DMA2D_CR_CTCIE


	)

378 
	#DMA2D_IT_CAE
 
DMA2D_CR_CAEIE


	)

379 
	#DMA2D_IT_TW
 
DMA2D_CR_TWIE


	)

380 
	#DMA2D_IT_TC
 
DMA2D_CR_TCIE


	)

381 
	#DMA2D_IT_TE
 
DMA2D_CR_TEIE


	)

383 
	#IS_DMA2D_IT
(
IT
Ë(((ITË=
DMA2D_IT_CTC
Ë|| ((ITË=
DMA2D_IT_CAE
) || \

384 ((
IT
Ë=
DMA2D_IT_TW
Ë|| ((ITË=
DMA2D_IT_TC
) || \

385 ((
IT
Ë=
DMA2D_IT_TE
Ë|| ((ITË=
DMA2D_IT_CE
))

	)

395 
	#DMA2D_FLAG_CE
 
DMA2D_ISR_CEIF


	)

396 
	#DMA2D_FLAG_CTC
 
DMA2D_ISR_CTCIF


	)

397 
	#DMA2D_FLAG_CAE
 
DMA2D_ISR_CAEIF


	)

398 
	#DMA2D_FLAG_TW
 
DMA2D_ISR_TWIF


	)

399 
	#DMA2D_FLAG_TC
 
DMA2D_ISR_TCIF


	)

400 
	#DMA2D_FLAG_TE
 
DMA2D_ISR_TEIF


	)

403 
	#IS_DMA2D_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA2D_FLAG_CTC
Ë|| ((FLAGË=
DMA2D_FLAG_CAE
) || \

404 ((
FLAG
Ë=
DMA2D_FLAG_TW
Ë|| ((FLAGË=
DMA2D_FLAG_TC
) || \

405 ((
FLAG
Ë=
DMA2D_FLAG_TE
Ë|| ((FLAGË=
DMA2D_FLAG_CE
))

	)

416 
	#DEADTIME
 ((
uöt32_t
)0x000000FF)

	)

418 
	#IS_DMA2D_DEAD_TIME
(
DEAD_TIME
Ë((DEAD_TIMEË<
DEADTIME
)

	)

421 
	#LINE_WATERMARK
 
DMA2D_LWR_LW


	)

423 
	#IS_DMA2D_LöeW©îm¨k
(
LöeW©îm¨k
Ë((LöeW©îm¨kË<
LINE_WATERMARK
)

	)

437 
DMA2D_DeInô
();

440 
DMA2D_Inô
(
DMA2D_InôTy≥Def
* 
DMA2D_InôSåu˘
);

441 
DMA2D_Såu˘Inô
(
DMA2D_InôTy≥Def
* 
DMA2D_InôSåu˘
);

442 
DMA2D_SèπTøns„r
();

443 
DMA2D_Ab‹tTøns„r
();

444 
DMA2D_Su•íd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

445 
DMA2D_FGC⁄fig
(
DMA2D_FG_InôTy≥Def
* 
DMA2D_FG_InôSåu˘
);

446 
DMA2D_FG_Såu˘Inô
(
DMA2D_FG_InôTy≥Def
* 
DMA2D_FG_InôSåu˘
);

447 
DMA2D_BGC⁄fig
(
DMA2D_BG_InôTy≥Def
* 
DMA2D_BG_InôSåu˘
);

448 
DMA2D_BG_Såu˘Inô
(
DMA2D_BG_InôTy≥Def
* 
DMA2D_BG_InôSåu˘
);

449 
DMA2D_FGSèπ
(
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
DMA2D_BGSèπ
(
Fun˘i⁄ÆSèã
 
NewSèã
);

451 
DMA2D_DódTimeC⁄fig
(
uöt32_t
 
DMA2D_DódTime
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

452 
DMA2D_LöeW©îm¨kC⁄fig
(
uöt32_t
 
DMA2D_LW©îm¨kC⁄fig
);

455 
DMA2D_ITC⁄fig
(
uöt32_t
 
DMA2D_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

456 
FœgSètus
 
DMA2D_GëFœgSètus
(
uöt32_t
 
DMA2D_FLAG
);

457 
DMA2D_CÀ¨Fœg
(
uöt32_t
 
DMA2D_FLAG
);

458 
ITSètus
 
DMA2D_GëITSètus
(
uöt32_t
 
DMA2D_IT
);

459 
DMA2D_CÀ¨ITPídögBô
(
uöt32_t
 
DMA2D_IT
);

461 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_exti.h

30 #i‚de‡
__STM32F4xx_EXTI_H


31 
	#__STM32F4xx_EXTI_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
EXTI_Mode_I¡îru±
 = 0x00,

57 
EXTI_Mode_Evít
 = 0x04

58 }
	tEXTIMode_Ty≥Def
;

60 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

68 
EXTI_Triggî_Risög
 = 0x08,

69 
EXTI_Triggî_FÆlög
 = 0x0C,

70 
EXTI_Triggî_Risög_FÆlög
 = 0x10

71 }
	tEXTITriggî_Ty≥Def
;

73 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
) || \

74 ((
TRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

75 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

	)

82 
uöt32_t
 
EXTI_Löe
;

85 
EXTIMode_Ty≥Def
 
EXTI_Mode
;

88 
EXTITriggî_Ty≥Def
 
EXTI_Triggî
;

91 
Fun˘i⁄ÆSèã
 
EXTI_LöeCmd
;

93 }
	tEXTI_InôTy≥Def
;

105 
	#EXTI_Löe0
 ((
uöt32_t
)0x00001Ë

	)

106 
	#EXTI_Löe1
 ((
uöt32_t
)0x00002Ë

	)

107 
	#EXTI_Löe2
 ((
uöt32_t
)0x00004Ë

	)

108 
	#EXTI_Löe3
 ((
uöt32_t
)0x00008Ë

	)

109 
	#EXTI_Löe4
 ((
uöt32_t
)0x00010Ë

	)

110 
	#EXTI_Löe5
 ((
uöt32_t
)0x00020Ë

	)

111 
	#EXTI_Löe6
 ((
uöt32_t
)0x00040Ë

	)

112 
	#EXTI_Löe7
 ((
uöt32_t
)0x00080Ë

	)

113 
	#EXTI_Löe8
 ((
uöt32_t
)0x00100Ë

	)

114 
	#EXTI_Löe9
 ((
uöt32_t
)0x00200Ë

	)

115 
	#EXTI_Löe10
 ((
uöt32_t
)0x00400Ë

	)

116 
	#EXTI_Löe11
 ((
uöt32_t
)0x00800Ë

	)

117 
	#EXTI_Löe12
 ((
uöt32_t
)0x01000Ë

	)

118 
	#EXTI_Löe13
 ((
uöt32_t
)0x02000Ë

	)

119 
	#EXTI_Löe14
 ((
uöt32_t
)0x04000Ë

	)

120 
	#EXTI_Löe15
 ((
uöt32_t
)0x08000Ë

	)

121 
	#EXTI_Löe16
 ((
uöt32_t
)0x10000Ë

	)

122 
	#EXTI_Löe17
 ((
uöt32_t
)0x20000Ë

	)

123 
	#EXTI_Löe18
 ((
uöt32_t
)0x40000Ë

	)

124 
	#EXTI_Löe19
 ((
uöt32_t
)0x80000Ë

	)

125 
	#EXTI_Löe20
 ((
uöt32_t
)0x00100000Ë

	)

126 
	#EXTI_Löe21
 ((
uöt32_t
)0x00200000Ë

	)

127 
	#EXTI_Löe22
 ((
uöt32_t
)0x00400000Ë

	)

129 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFF800000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

131 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
) || \

132 ((
LINE
Ë=
EXTI_Löe2
Ë|| ((LINEË=
EXTI_Löe3
) || \

133 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

134 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

135 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

136 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

137 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

138 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

139 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

140 ((
LINE
Ë=
EXTI_Löe18
Ë|| ((LINEË=
EXTI_Löe19
) || \

141 ((
LINE
Ë=
EXTI_Löe20
Ë|| ((LINEË=
EXTI_Löe21
) ||\

142 ((
LINE
Ë=
EXTI_Löe22
))

	)

156 
EXTI_DeInô
();

159 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

160 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

161 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

164 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

165 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

166 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

167 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

169 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_flash.h

30 #i‚de‡
__STM32F4xx_FLASH_H


31 
	#__STM32F4xx_FLASH_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

54 
FLASH_BUSY
 = 1,

55 
FLASH_ERROR_RD
,

56 
FLASH_ERROR_PGS
,

57 
FLASH_ERROR_PGP
,

58 
FLASH_ERROR_PGA
,

59 
FLASH_ERROR_WRP
,

60 
FLASH_ERROR_PROGRAM
,

61 
FLASH_ERROR_OPERATION
,

62 
FLASH_COMPLETE


63 }
	tFLASH_Sètus
;

74 
	#FLASH_L©ícy_0
 ((
uöt8_t
)0x0000Ë

	)

75 
	#FLASH_L©ícy_1
 ((
uöt8_t
)0x0001Ë

	)

76 
	#FLASH_L©ícy_2
 ((
uöt8_t
)0x0002Ë

	)

77 
	#FLASH_L©ícy_3
 ((
uöt8_t
)0x0003Ë

	)

78 
	#FLASH_L©ícy_4
 ((
uöt8_t
)0x0004Ë

	)

79 
	#FLASH_L©ícy_5
 ((
uöt8_t
)0x0005Ë

	)

80 
	#FLASH_L©ícy_6
 ((
uöt8_t
)0x0006Ë

	)

81 
	#FLASH_L©ícy_7
 ((
uöt8_t
)0x0007Ë

	)

82 
	#FLASH_L©ícy_8
 ((
uöt8_t
)0x0008Ë

	)

83 
	#FLASH_L©ícy_9
 ((
uöt8_t
)0x0009Ë

	)

84 
	#FLASH_L©ícy_10
 ((
uöt8_t
)0x000AË

	)

85 
	#FLASH_L©ícy_11
 ((
uöt8_t
)0x000BË

	)

86 
	#FLASH_L©ícy_12
 ((
uöt8_t
)0x000CË

	)

87 
	#FLASH_L©ícy_13
 ((
uöt8_t
)0x000DË

	)

88 
	#FLASH_L©ícy_14
 ((
uöt8_t
)0x000EË

	)

89 
	#FLASH_L©ícy_15
 ((
uöt8_t
)0x000FË

	)

92 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
) || \

93 ((
LATENCY
Ë=
FLASH_L©ícy_1
) || \

94 ((
LATENCY
Ë=
FLASH_L©ícy_2
) || \

95 ((
LATENCY
Ë=
FLASH_L©ícy_3
) || \

96 ((
LATENCY
Ë=
FLASH_L©ícy_4
) || \

97 ((
LATENCY
Ë=
FLASH_L©ícy_5
) || \

98 ((
LATENCY
Ë=
FLASH_L©ícy_6
) || \

99 ((
LATENCY
Ë=
FLASH_L©ícy_7
) || \

100 ((
LATENCY
Ë=
FLASH_L©ícy_8
) || \

101 ((
LATENCY
Ë=
FLASH_L©ícy_9
) || \

102 ((
LATENCY
Ë=
FLASH_L©ícy_10
) || \

103 ((
LATENCY
Ë=
FLASH_L©ícy_11
) || \

104 ((
LATENCY
Ë=
FLASH_L©ícy_12
) || \

105 ((
LATENCY
Ë=
FLASH_L©ícy_13
) || \

106 ((
LATENCY
Ë=
FLASH_L©ícy_14
) || \

107 ((
LATENCY
Ë=
FLASH_L©ícy_15
))

	)

115 
	#VﬁègeR™ge_1
 ((
uöt8_t
)0x00Ë

	)

116 
	#VﬁègeR™ge_2
 ((
uöt8_t
)0x01Ë

	)

117 
	#VﬁègeR™ge_3
 ((
uöt8_t
)0x02Ë

	)

118 
	#VﬁègeR™ge_4
 ((
uöt8_t
)0x03Ë

	)

120 
	#IS_VOLTAGERANGE
(
RANGE
)(((RANGEË=
VﬁègeR™ge_1
) || \

121 ((
RANGE
Ë=
VﬁègeR™ge_2
) || \

122 ((
RANGE
Ë=
VﬁègeR™ge_3
) || \

123 ((
RANGE
Ë=
VﬁègeR™ge_4
))

	)

131 
	#FLASH_Se˘‹_0
 ((
uöt16_t
)0x0000Ë

	)

132 
	#FLASH_Se˘‹_1
 ((
uöt16_t
)0x0008Ë

	)

133 
	#FLASH_Se˘‹_2
 ((
uöt16_t
)0x0010Ë

	)

134 
	#FLASH_Se˘‹_3
 ((
uöt16_t
)0x0018Ë

	)

135 
	#FLASH_Se˘‹_4
 ((
uöt16_t
)0x0020Ë

	)

136 
	#FLASH_Se˘‹_5
 ((
uöt16_t
)0x0028Ë

	)

137 
	#FLASH_Se˘‹_6
 ((
uöt16_t
)0x0030Ë

	)

138 
	#FLASH_Se˘‹_7
 ((
uöt16_t
)0x0038Ë

	)

139 
	#FLASH_Se˘‹_8
 ((
uöt16_t
)0x0040Ë

	)

140 
	#FLASH_Se˘‹_9
 ((
uöt16_t
)0x0048Ë

	)

141 
	#FLASH_Se˘‹_10
 ((
uöt16_t
)0x0050Ë

	)

142 
	#FLASH_Se˘‹_11
 ((
uöt16_t
)0x0058Ë

	)

143 
	#FLASH_Se˘‹_12
 ((
uöt16_t
)0x0080Ë

	)

144 
	#FLASH_Se˘‹_13
 ((
uöt16_t
)0x0088Ë

	)

145 
	#FLASH_Se˘‹_14
 ((
uöt16_t
)0x0090Ë

	)

146 
	#FLASH_Se˘‹_15
 ((
uöt16_t
)0x0098Ë

	)

147 
	#FLASH_Se˘‹_16
 ((
uöt16_t
)0x00A0Ë

	)

148 
	#FLASH_Se˘‹_17
 ((
uöt16_t
)0x00A8Ë

	)

149 
	#FLASH_Se˘‹_18
 ((
uöt16_t
)0x00B0Ë

	)

150 
	#FLASH_Se˘‹_19
 ((
uöt16_t
)0x00B8Ë

	)

151 
	#FLASH_Se˘‹_20
 ((
uöt16_t
)0x00C0Ë

	)

152 
	#FLASH_Se˘‹_21
 ((
uöt16_t
)0x00C8Ë

	)

153 
	#FLASH_Se˘‹_22
 ((
uöt16_t
)0x00D0Ë

	)

154 
	#FLASH_Se˘‹_23
 ((
uöt16_t
)0x00D8Ë

	)

156 
	#IS_FLASH_SECTOR
(
SECTOR
Ë(((SECTORË=
FLASH_Se˘‹_0
Ë|| ((SECTORË=
FLASH_Se˘‹_1
) ||\

157 ((
SECTOR
Ë=
FLASH_Se˘‹_2
Ë|| ((SECTORË=
FLASH_Se˘‹_3
) ||\

158 ((
SECTOR
Ë=
FLASH_Se˘‹_4
Ë|| ((SECTORË=
FLASH_Se˘‹_5
) ||\

159 ((
SECTOR
Ë=
FLASH_Se˘‹_6
Ë|| ((SECTORË=
FLASH_Se˘‹_7
) ||\

160 ((
SECTOR
Ë=
FLASH_Se˘‹_8
Ë|| ((SECTORË=
FLASH_Se˘‹_9
) ||\

161 ((
SECTOR
Ë=
FLASH_Se˘‹_10
Ë|| ((SECTORË=
FLASH_Se˘‹_11
) ||\

162 ((
SECTOR
Ë=
FLASH_Se˘‹_12
Ë|| ((SECTORË=
FLASH_Se˘‹_13
) ||\

163 ((
SECTOR
Ë=
FLASH_Se˘‹_14
Ë|| ((SECTORË=
FLASH_Se˘‹_15
) ||\

164 ((
SECTOR
Ë=
FLASH_Se˘‹_16
Ë|| ((SECTORË=
FLASH_Se˘‹_17
) ||\

165 ((
SECTOR
Ë=
FLASH_Se˘‹_18
Ë|| ((SECTORË=
FLASH_Se˘‹_19
) ||\

166 ((
SECTOR
Ë=
FLASH_Se˘‹_20
Ë|| ((SECTORË=
FLASH_Se˘‹_21
) ||\

167 ((
SECTOR
Ë=
FLASH_Se˘‹_22
Ë|| ((SECTORË=
FLASH_Se˘‹_23
))

	)

169 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

170 
	#IS_FLASH_ADDRESS
(
ADDRESS
) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) <= 0x081FFFFF)) ||\

171 (((
ADDRESS
Ë>0x1FFF7800Ë&& ((ADDRESSË<0x1FFF7A0F)))

	)

174 #i‡
deföed
 (
STM32F40_41xxx
)

175 
	#IS_FLASH_ADDRESS
(
ADDRESS
) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) <= 0x080FFFFF)) ||\

176 (((
ADDRESS
Ë>0x1FFF7800Ë&& ((ADDRESSË<0x1FFF7A0F)))

	)

179 #i‡
deföed
 (
STM32F401xx
)

180 
	#IS_FLASH_ADDRESS
(
ADDRESS
) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) <= 0x0803FFFF)) ||\

181 (((
ADDRESS
Ë>0x1FFF7800Ë&& ((ADDRESSË<0x1FFF7A0F)))

	)

184 #i‡
deföed
 (
STM32F411xE
)

185 
	#IS_FLASH_ADDRESS
(
ADDRESS
) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) <= 0x0807FFFF)) ||\

186 (((
ADDRESS
Ë>0x1FFF7800Ë&& ((ADDRESSË<0x1FFF7A0F)))

	)

196 
	#OB_WRP_Se˘‹_0
 ((
uöt32_t
)0x00000001Ë

	)

197 
	#OB_WRP_Se˘‹_1
 ((
uöt32_t
)0x00000002Ë

	)

198 
	#OB_WRP_Se˘‹_2
 ((
uöt32_t
)0x00000004Ë

	)

199 
	#OB_WRP_Se˘‹_3
 ((
uöt32_t
)0x00000008Ë

	)

200 
	#OB_WRP_Se˘‹_4
 ((
uöt32_t
)0x00000010Ë

	)

201 
	#OB_WRP_Se˘‹_5
 ((
uöt32_t
)0x00000020Ë

	)

202 
	#OB_WRP_Se˘‹_6
 ((
uöt32_t
)0x00000040Ë

	)

203 
	#OB_WRP_Se˘‹_7
 ((
uöt32_t
)0x00000080Ë

	)

204 
	#OB_WRP_Se˘‹_8
 ((
uöt32_t
)0x00000100Ë

	)

205 
	#OB_WRP_Se˘‹_9
 ((
uöt32_t
)0x00000200Ë

	)

206 
	#OB_WRP_Se˘‹_10
 ((
uöt32_t
)0x00000400Ë

	)

207 
	#OB_WRP_Se˘‹_11
 ((
uöt32_t
)0x00000800Ë

	)

208 
	#OB_WRP_Se˘‹_12
 ((
uöt32_t
)0x00000001Ë

	)

209 
	#OB_WRP_Se˘‹_13
 ((
uöt32_t
)0x00000002Ë

	)

210 
	#OB_WRP_Se˘‹_14
 ((
uöt32_t
)0x00000004Ë

	)

211 
	#OB_WRP_Se˘‹_15
 ((
uöt32_t
)0x00000008Ë

	)

212 
	#OB_WRP_Se˘‹_16
 ((
uöt32_t
)0x00000010Ë

	)

213 
	#OB_WRP_Se˘‹_17
 ((
uöt32_t
)0x00000020Ë

	)

214 
	#OB_WRP_Se˘‹_18
 ((
uöt32_t
)0x00000040Ë

	)

215 
	#OB_WRP_Se˘‹_19
 ((
uöt32_t
)0x00000080Ë

	)

216 
	#OB_WRP_Se˘‹_20
 ((
uöt32_t
)0x00000100Ë

	)

217 
	#OB_WRP_Se˘‹_21
 ((
uöt32_t
)0x00000200Ë

	)

218 
	#OB_WRP_Se˘‹_22
 ((
uöt32_t
)0x00000400Ë

	)

219 
	#OB_WRP_Se˘‹_23
 ((
uöt32_t
)0x00000800Ë

	)

220 
	#OB_WRP_Se˘‹_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

222 
	#IS_OB_WRP
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

230 
	#OB_PcROP_DißbÀ
 ((
uöt8_t
)0x00Ë

	)

231 
	#OB_PcROP_E«bÀ
 ((
uöt8_t
)0x80Ë

	)

232 
	#IS_OB_PCROP_SELECT
(
PCROP
Ë(((PCROPË=
OB_PcROP_DißbÀ
Ë|| ((PCROPË=
OB_PcROP_E«bÀ
))

	)

240 
	#OB_PCROP_Se˘‹_0
 ((
uöt32_t
)0x00000001Ë

	)

241 
	#OB_PCROP_Se˘‹_1
 ((
uöt32_t
)0x00000002Ë

	)

242 
	#OB_PCROP_Se˘‹_2
 ((
uöt32_t
)0x00000004Ë

	)

243 
	#OB_PCROP_Se˘‹_3
 ((
uöt32_t
)0x00000008Ë

	)

244 
	#OB_PCROP_Se˘‹_4
 ((
uöt32_t
)0x00000010Ë

	)

245 
	#OB_PCROP_Se˘‹_5
 ((
uöt32_t
)0x00000020Ë

	)

246 
	#OB_PCROP_Se˘‹_6
 ((
uöt32_t
)0x00000040Ë

	)

247 
	#OB_PCROP_Se˘‹_7
 ((
uöt32_t
)0x00000080Ë

	)

248 
	#OB_PCROP_Se˘‹_8
 ((
uöt32_t
)0x00000100Ë

	)

249 
	#OB_PCROP_Se˘‹_9
 ((
uöt32_t
)0x00000200Ë

	)

250 
	#OB_PCROP_Se˘‹_10
 ((
uöt32_t
)0x00000400Ë

	)

251 
	#OB_PCROP_Se˘‹_11
 ((
uöt32_t
)0x00000800Ë

	)

252 
	#OB_PCROP_Se˘‹_12
 ((
uöt32_t
)0x00000001Ë

	)

253 
	#OB_PCROP_Se˘‹_13
 ((
uöt32_t
)0x00000002Ë

	)

254 
	#OB_PCROP_Se˘‹_14
 ((
uöt32_t
)0x00000004Ë

	)

255 
	#OB_PCROP_Se˘‹_15
 ((
uöt32_t
)0x00000008Ë

	)

256 
	#OB_PCROP_Se˘‹_16
 ((
uöt32_t
)0x00000010Ë

	)

257 
	#OB_PCROP_Se˘‹_17
 ((
uöt32_t
)0x00000020Ë

	)

258 
	#OB_PCROP_Se˘‹_18
 ((
uöt32_t
)0x00000040Ë

	)

259 
	#OB_PCROP_Se˘‹_19
 ((
uöt32_t
)0x00000080Ë

	)

260 
	#OB_PCROP_Se˘‹_20
 ((
uöt32_t
)0x00000100Ë

	)

261 
	#OB_PCROP_Se˘‹_21
 ((
uöt32_t
)0x00000200Ë

	)

262 
	#OB_PCROP_Se˘‹_22
 ((
uöt32_t
)0x00000400Ë

	)

263 
	#OB_PCROP_Se˘‹_23
 ((
uöt32_t
)0x00000800Ë

	)

264 
	#OB_PCROP_Se˘‹_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

266 
	#IS_OB_PCROP
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

274 
	#OB_RDP_Levñ_0
 ((
uöt8_t
)0xAA)

	)

275 
	#OB_RDP_Levñ_1
 ((
uöt8_t
)0x55)

	)

278 
	#IS_OB_RDP
(
LEVEL
Ë(((LEVELË=
OB_RDP_Levñ_0
)||\

279 ((
LEVEL
Ë=
OB_RDP_Levñ_1
))

	)

288 
	#OB_IWDG_SW
 ((
uöt8_t
)0x20Ë

	)

289 
	#OB_IWDG_HW
 ((
uöt8_t
)0x00Ë

	)

290 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

298 
	#OB_STOP_NoRST
 ((
uöt8_t
)0x40Ë

	)

299 
	#OB_STOP_RST
 ((
uöt8_t
)0x00Ë

	)

300 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

309 
	#OB_STDBY_NoRST
 ((
uöt8_t
)0x80Ë

	)

310 
	#OB_STDBY_RST
 ((
uöt8_t
)0x00Ë

	)

311 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

319 
	#OB_BOR_LEVEL3
 ((
uöt8_t
)0x00Ë

	)

320 
	#OB_BOR_LEVEL2
 ((
uöt8_t
)0x04Ë

	)

321 
	#OB_BOR_LEVEL1
 ((
uöt8_t
)0x08Ë

	)

322 
	#OB_BOR_OFF
 ((
uöt8_t
)0x0CË

	)

323 
	#IS_OB_BOR
(
LEVEL
Ë(((LEVELË=
OB_BOR_LEVEL1
Ë|| ((LEVELË=
OB_BOR_LEVEL2
) ||\

324 ((
LEVEL
Ë=
OB_BOR_LEVEL3
Ë|| ((LEVELË=
OB_BOR_OFF
))

	)

332 
	#OB_DuÆ_BoŸE«bÀd
 ((
uöt8_t
)0x10Ë

	)

333 
	#OB_DuÆ_BoŸDißbÀd
 ((
uöt8_t
)0x00Ë

	)

334 
	#IS_OB_BOOT
(
BOOT
Ë(((BOOTË=
OB_DuÆ_BoŸE«bÀd
Ë|| ((BOOTË=
OB_DuÆ_BoŸDißbÀd
))

	)

342 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x01000000Ë

	)

343 
	#FLASH_IT_ERR
 ((
uöt32_t
)0x02000000Ë

	)

344 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFCFFFFFFË=0x00000000Ë&& ((ITË!0x00000000))

	)

352 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000001Ë

	)

353 
	#FLASH_FLAG_OPERR
 ((
uöt32_t
)0x00000002Ë

	)

354 
	#FLASH_FLAG_WRPERR
 ((
uöt32_t
)0x00000010Ë

	)

355 
	#FLASH_FLAG_PGAERR
 ((
uöt32_t
)0x00000020Ë

	)

356 
	#FLASH_FLAG_PGPERR
 ((
uöt32_t
)0x00000040Ë

	)

357 
	#FLASH_FLAG_PGSERR
 ((
uöt32_t
)0x00000080Ë

	)

358 
	#FLASH_FLAG_RDERR
 ((
uöt32_t
)0x00000100Ë

	)

359 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00010000Ë

	)

360 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFE0CË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

361 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_EOP
Ë|| ((FLAGË=
FLASH_FLAG_OPERR
) || \

362 ((
FLAG
Ë=
FLASH_FLAG_WRPERR
Ë|| ((FLAGË=
FLASH_FLAG_PGAERR
) || \

363 ((
FLAG
Ë=
FLASH_FLAG_PGPERR
Ë|| ((FLAGË=
FLASH_FLAG_PGSERR
) || \

364 ((
FLAG
Ë=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_RDERR
))

	)

372 
	#FLASH_PSIZE_BYTE
 ((
uöt32_t
)0x00000000)

	)

373 
	#FLASH_PSIZE_HALF_WORD
 ((
uöt32_t
)0x00000100)

	)

374 
	#FLASH_PSIZE_WORD
 ((
uöt32_t
)0x00000200)

	)

375 
	#FLASH_PSIZE_DOUBLE_WORD
 ((
uöt32_t
)0x00000300)

	)

376 
	#CR_PSIZE_MASK
 ((
uöt32_t
)0xFFFFFCFF)

	)

384 
	#RDP_KEY
 ((
uöt16_t
)0x00A5)

	)

385 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123)

	)

386 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89AB)

	)

387 
	#FLASH_OPT_KEY1
 ((
uöt32_t
)0x08192A3B)

	)

388 
	#FLASH_OPT_KEY2
 ((
uöt32_t
)0x4C5D6E7F)

	)

396 
	#ACR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C00)

	)

400 
	#OPTCR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C14)

	)

404 
	#OPTCR_BYTE1_ADDRESS
 ((
uöt32_t
)0x40023C15)

	)

408 
	#OPTCR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C16)

	)

412 
	#OPTCR_BYTE3_ADDRESS
 ((
uöt32_t
)0x40023C17)

	)

417 
	#OPTCR1_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C1A)

	)

427 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

428 
FLASH_Pª„tchBuf„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

429 
FLASH_In°ru˘i⁄CacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

430 
FLASH_D©aCacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

431 
FLASH_In°ru˘i⁄CacheRe£t
();

432 
FLASH_D©aCacheRe£t
();

435 
FLASH_U∆ock
();

436 
FLASH_Lock
();

437 
FLASH_Sètus
 
FLASH_Eø£Se˘‹
(
uöt32_t
 
FLASH_Se˘‹
, 
uöt8_t
 
VﬁègeR™ge
);

438 
FLASH_Sètus
 
FLASH_Eø£AŒSe˘‹s
(
uöt8_t
 
VﬁègeR™ge
);

439 
FLASH_Sètus
 
FLASH_Eø£AŒB™k1Se˘‹s
(
uöt8_t
 
VﬁègeR™ge
);

440 
FLASH_Sètus
 
FLASH_Eø£AŒB™k2Se˘‹s
(
uöt8_t
 
VﬁègeR™ge
);

441 
FLASH_Sètus
 
FLASH_ProgømDoubÀW‹d
(
uöt32_t
 
Addªss
, 
uöt64_t
 
D©a
);

442 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

443 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

444 
FLASH_Sètus
 
FLASH_ProgømByã
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

447 
FLASH_OB_U∆ock
();

448 
FLASH_OB_Lock
();

449 
FLASH_OB_WRPC⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
FLASH_OB_WRP1C⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

451 
FLASH_OB_PCROPSñe˘i⁄C⁄fig
(
uöt8_t
 
OB_PcROP
);

452 
FLASH_OB_PCROPC⁄fig
(
uöt32_t
 
OB_PCROP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

453 
FLASH_OB_PCROP1C⁄fig
(
uöt32_t
 
OB_PCROP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

454 
FLASH_OB_RDPC⁄fig
(
uöt8_t
 
OB_RDP
);

455 
FLASH_OB_U£rC⁄fig
(
uöt8_t
 
OB_IWDG
, uöt8_à
OB_STOP
, uöt8_à
OB_STDBY
);

456 
FLASH_OB_BORC⁄fig
(
uöt8_t
 
OB_BOR
);

457 
FLASH_OB_BoŸC⁄fig
(
uöt8_t
 
OB_BOOT
);

458 
FLASH_Sètus
 
FLASH_OB_Launch
();

459 
uöt8_t
 
FLASH_OB_GëU£r
();

460 
uöt16_t
 
FLASH_OB_GëWRP
();

461 
uöt16_t
 
FLASH_OB_GëWRP1
();

462 
uöt16_t
 
FLASH_OB_GëPCROP
();

463 
uöt16_t
 
FLASH_OB_GëPCROP1
();

464 
FœgSètus
 
FLASH_OB_GëRDP
();

465 
uöt8_t
 
FLASH_OB_GëBOR
();

468 
FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

469 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
);

470 
FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
);

471 
FLASH_Sètus
 
FLASH_GëSètus
();

472 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
();

474 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_flash_ramfunc.h

30 #i‚de‡
__STM32F4xx_FLASH_RAMFUNC_H


31 
	#__STM32F4xx_FLASH_RAMFUNC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

53 #i‡
deföed
 ( 
__CC_ARM
 )

63 
	#__RAM_FUNC
 

	)

65 #ñi‡
deföed
 ( 
__ICCARM__
 )

70 
	#__RAM_FUNC
 
__ømfunc
 

	)

72 #ñi‡
deföed
 ( 
__GNUC__
 )

78 
	#__RAM_FUNC
 
	`__©åibuã__
((
	`£˘i⁄
(".RamFunc")))

	)

84 
__RAM_FUNC
 
FLASH_FœshI¡îÁ˚Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

85 
__RAM_FUNC
 
FLASH_FœshSÀïModeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

88 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_fmc.h

30 #i‚de‡
__STM32F4xx_FMC_H


31 
	#__STM32F4xx_FMC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
FMC_AddªssSëupTime
;

60 
uöt32_t
 
FMC_AddªssHﬁdTime
;

65 
uöt32_t
 
FMC_D©aSëupTime
;

70 
uöt32_t
 
FMC_BusTu∫AroundDuøti⁄
;

75 
uöt32_t
 
FMC_CLKDivisi⁄
;

79 
uöt32_t
 
FMC_D©aL©ícy
;

87 
uöt32_t
 
FMC_Ac˚ssMode
;

89 }
	tFMC_NORSRAMTimögInôTy≥Def
;

96 
uöt32_t
 
FMC_B™k
;

99 
uöt32_t
 
FMC_D©aAddªssMux
;

103 
uöt32_t
 
FMC_Mem‹yTy≥
;

107 
uöt32_t
 
FMC_Mem‹yD©aWidth
;

110 
uöt32_t
 
FMC_Bur°Ac˚ssMode
;

114 
uöt32_t
 
FMC_WaôSig«lPﬁ¨ôy
;

118 
uöt32_t
 
FMC_WøpMode
;

122 
uöt32_t
 
FMC_WaôSig«lA˘ive
;

127 
uöt32_t
 
FMC_WrôeO≥øti⁄
;

130 
uöt32_t
 
FMC_WaôSig«l
;

134 
uöt32_t
 
FMC_ExãndedMode
;

137 
uöt32_t
 
FMC_Asynchr⁄ousWaô
;

141 
uöt32_t
 
FMC_WrôeBur°
;

144 
uöt32_t
 
FMC_C⁄töousClock
;

150 
FMC_NORSRAMTimögInôTy≥Def
* 
FMC_RódWrôeTimögSåu˘
;

152 
FMC_NORSRAMTimögInôTy≥Def
* 
FMC_WrôeTimögSåu˘
;

153 }
	tFMC_NORSRAMInôTy≥Def
;

160 
uöt32_t
 
FMC_SëupTime
;

166 
uöt32_t
 
FMC_WaôSëupTime
;

172 
uöt32_t
 
FMC_HﬁdSëupTime
;

179 
uöt32_t
 
FMC_HiZSëupTime
;

184 }
	tFMC_NAND_PCCARDTimögInôTy≥Def
;

191 
uöt32_t
 
FMC_B™k
;

194 
uöt32_t
 
FMC_Waô„©uª
;

197 
uöt32_t
 
FMC_Mem‹yD©aWidth
;

200 
uöt32_t
 
FMC_ECC
;

203 
uöt32_t
 
FMC_ECCPageSize
;

206 
uöt32_t
 
FMC_TCLRSëupTime
;

210 
uöt32_t
 
FMC_TARSëupTime
;

214 
FMC_NAND_PCCARDTimögInôTy≥Def
* 
FMC_Comm⁄S∑˚TimögSåu˘
;

216 
FMC_NAND_PCCARDTimögInôTy≥Def
* 
FMC_AâribuãS∑˚TimögSåu˘
;

217 }
	tFMC_NANDInôTy≥Def
;

225 
uöt32_t
 
FMC_Waô„©uª
;

228 
uöt32_t
 
FMC_TCLRSëupTime
;

232 
uöt32_t
 
FMC_TARSëupTime
;

237 
FMC_NAND_PCCARDTimögInôTy≥Def
* 
FMC_Comm⁄S∑˚TimögSåu˘
;

239 
FMC_NAND_PCCARDTimögInôTy≥Def
* 
FMC_AâribuãS∑˚TimögSåu˘
;

241 
FMC_NAND_PCCARDTimögInôTy≥Def
* 
FMC_IOS∑˚TimögSåu˘
;

242 }
	tFMC_PCCARDInôTy≥Def
;

250 
uöt32_t
 
FMC_LﬂdToA˘iveDñay
;

254 
uöt32_t
 
FMC_ExôSñfRe‰eshDñay
;

258 
uöt32_t
 
FMC_SñfRe‰eshTime
;

262 
uöt32_t
 
FMC_RowCy˛eDñay
;

267 
uöt32_t
 
FMC_WrôeRecovîyTime
;

270 
uöt32_t
 
FMC_RPDñay
;

274 
uöt32_t
 
FMC_RCDDñay
;

278 }
	tFMC_SDRAMTimögInôTy≥Def
;

287 
uöt32_t
 
FMC_Comm™dMode
;

290 
uöt32_t
 
FMC_Comm™dT¨gë
;

293 
uöt32_t
 
FMC_AutoRe‰eshNumbî
;

297 
uöt32_t
 
FMC_ModeRegi°îDeföôi⁄
;

299 }
	tFMC_SDRAMComm™dTy≥Def
;

307 
uöt32_t
 
FMC_B™k
;

310 
uöt32_t
 
FMC_CﬁumnBôsNumbî
;

313 
uöt32_t
 
FMC_RowBôsNumbî
;

316 
uöt32_t
 
FMC_SDMem‹yD©aWidth
;

319 
uöt32_t
 
FMC_I¡î«lB™kNumbî
;

322 
uöt32_t
 
FMC_CASL©ícy
;

325 
uöt32_t
 
FMC_WrôePrŸe˘i⁄
;

328 
uöt32_t
 
FMC_SDClockPîiod
;

332 
uöt32_t
 
FMC_RódBur°
;

336 
uöt32_t
 
FMC_RódPùeDñay
;

339 
FMC_SDRAMTimögInôTy≥Def
* 
FMC_SDRAMTimögSåu˘
;

341 }
	tFMC_SDRAMInôTy≥Def
;

353 
	#FMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

354 
	#FMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

355 
	#FMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

356 
	#FMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

358 
	#IS_FMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FMC_B™k1_NORSRAM1
) || \

359 ((
BANK
Ë=
FMC_B™k1_NORSRAM2
) || \

360 ((
BANK
Ë=
FMC_B™k1_NORSRAM3
) || \

361 ((
BANK
Ë=
FMC_B™k1_NORSRAM4
))

	)

369 
	#FMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

370 
	#FMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

372 
	#IS_FMC_NAND_BANK
(
BANK
Ë(((BANKË=
FMC_B™k2_NAND
) || \

373 ((
BANK
Ë=
FMC_B™k3_NAND
))

	)

381 
	#FMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

389 
	#FMC_B™k1_SDRAM
 ((
uöt32_t
)0x00000000)

	)

390 
	#FMC_B™k2_SDRAM
 ((
uöt32_t
)0x00000001)

	)

392 
	#IS_FMC_SDRAM_BANK
(
BANK
Ë(((BANKË=
FMC_B™k1_SDRAM
) || \

393 ((
BANK
Ë=
FMC_B™k2_SDRAM
))

	)

408 
	#FMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

409 
	#FMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

411 
	#IS_FMC_MUX
(
MUX
Ë(((MUXË=
FMC_D©aAddªssMux_DißbÀ
) || \

412 ((
MUX
Ë=
FMC_D©aAddªssMux_E«bÀ
))

	)

421 
	#FMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

422 
	#FMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

423 
	#FMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

425 
	#IS_FMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FMC_Mem‹yTy≥_SRAM
) || \

426 ((
MEMORY
Ë=
FMC_Mem‹yTy≥_PSRAM
)|| \

427 ((
MEMORY
Ë=
FMC_Mem‹yTy≥_NOR
))

	)

436 
	#FMC_NORSRAM_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

437 
	#FMC_NORSRAM_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

438 
	#FMC_NORSRAM_Mem‹yD©aWidth_32b
 ((
uöt32_t
)0x00000020)

	)

440 
	#IS_FMC_NORSRAM_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FMC_NORSRAM_Mem‹yD©aWidth_8b
) || \

441 ((
WIDTH
Ë=
FMC_NORSRAM_Mem‹yD©aWidth_16b
) || \

442 ((
WIDTH
Ë=
FMC_NORSRAM_Mem‹yD©aWidth_32b
))

	)

451 
	#FMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

452 
	#FMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

454 
	#IS_FMC_BURSTMODE
(
STATE
Ë(((STATEË=
FMC_Bur°Ac˚ssMode_DißbÀ
) || \

455 ((
STATE
Ë=
FMC_Bur°Ac˚ssMode_E«bÀ
))

	)

463 
	#FMC_Asynchr⁄ousWaô_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

464 
	#FMC_Asynchr⁄ousWaô_E«bÀ
 ((
uöt32_t
)0x00008000)

	)

466 
	#IS_FMC_ASYNWAIT
(
STATE
Ë(((STATEË=
FMC_Asynchr⁄ousWaô_DißbÀ
) || \

467 ((
STATE
Ë=
FMC_Asynchr⁄ousWaô_E«bÀ
))

	)

475 
	#FMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

476 
	#FMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

478 
	#IS_FMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FMC_WaôSig«lPﬁ¨ôy_Low
) || \

479 ((
POLARITY
Ë=
FMC_WaôSig«lPﬁ¨ôy_High
))

	)

487 
	#FMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

488 
	#FMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

490 
	#IS_FMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FMC_WøpMode_DißbÀ
) || \

491 ((
MODE
Ë=
FMC_WøpMode_E«bÀ
))

	)

499 
	#FMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

500 
	#FMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

502 
	#IS_FMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FMC_WaôSig«lA˘ive_Bef‹eWaôSèã
) || \

503 ((
ACTIVE
Ë=
FMC_WaôSig«lA˘ive_DurögWaôSèã
))

	)

511 
	#FMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

512 
	#FMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

514 
	#IS_FMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FMC_WrôeO≥øti⁄_DißbÀ
) || \

515 ((
OPERATION
Ë=
FMC_WrôeO≥øti⁄_E«bÀ
))

	)

523 
	#FMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

524 
	#FMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

526 
	#IS_FMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FMC_WaôSig«l_DißbÀ
) || \

527 ((
SIGNAL
Ë=
FMC_WaôSig«l_E«bÀ
))

	)

535 
	#FMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

536 
	#FMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

538 
	#IS_FMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FMC_ExãndedMode_DißbÀ
) || \

539 ((
MODE
Ë=
FMC_ExãndedMode_E«bÀ
))

	)

548 
	#FMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

549 
	#FMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

551 
	#IS_FMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FMC_WrôeBur°_DißbÀ
) || \

552 ((
BURST
Ë=
FMC_WrôeBur°_E«bÀ
))

	)

561 
	#FMC_CClock_SyncO∆y
 ((
uöt32_t
)0x00000000)

	)

562 
	#FMC_CClock_SyncAsync
 ((
uöt32_t
)0x00100000)

	)

564 
	#IS_FMC_CONTINOUS_CLOCK
(
CCLOCK
Ë(((CCLOCKË=
FMC_CClock_SyncO∆y
) || \

565 ((
CCLOCK
Ë=
FMC_CClock_SyncAsync
))

	)

573 
	#IS_FMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<15)

	)

581 
	#IS_FMC_ADDRESS_HOLD_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<15))

	)

589 
	#IS_FMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<255))

	)

597 
	#IS_FMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<15)

	)

605 
	#IS_FMC_CLK_DIV
(
DIV
Ë(((DIVË> 0Ë&& ((DIVË<15))

	)

613 
	#IS_FMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<15)

	)

621 
	#FMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

622 
	#FMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

623 
	#FMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

624 
	#FMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

626 
	#IS_FMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FMC_Ac˚ssMode_A
) || \

627 ((
MODE
Ë=
FMC_Ac˚ssMode_B
) || \

628 ((
MODE
Ë=
FMC_Ac˚ssMode_C
) || \

629 ((
MODE
Ë=
FMC_Ac˚ssMode_D
))

	)

645 
	#FMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

646 
	#FMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

648 
	#IS_FMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FMC_Waô„©uª_DißbÀ
) || \

649 ((
FEATURE
Ë=
FMC_Waô„©uª_E«bÀ
))

	)

657 
	#FMC_NAND_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

658 
	#FMC_NAND_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

660 
	#IS_FMC_NAND_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FMC_NAND_Mem‹yD©aWidth_8b
) || \

661 ((
WIDTH
Ë=
FMC_NAND_Mem‹yD©aWidth_16b
))

	)

669 
	#FMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

670 
	#FMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

672 
	#IS_FMC_ECC_STATE
(
STATE
Ë(((STATEË=
FMC_ECC_DißbÀ
) || \

673 ((
STATE
Ë=
FMC_ECC_E«bÀ
))

	)

681 
	#FMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

682 
	#FMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

683 
	#FMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

684 
	#FMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

685 
	#FMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

686 
	#FMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

688 
	#IS_FMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FMC_ECCPageSize_256Byãs
) || \

689 ((
SIZE
Ë=
FMC_ECCPageSize_512Byãs
) || \

690 ((
SIZE
Ë=
FMC_ECCPageSize_1024Byãs
) || \

691 ((
SIZE
Ë=
FMC_ECCPageSize_2048Byãs
) || \

692 ((
SIZE
Ë=
FMC_ECCPageSize_4096Byãs
) || \

693 ((
SIZE
Ë=
FMC_ECCPageSize_8192Byãs
))

	)

701 
	#IS_FMC_TCLR_TIME
(
TIME
Ë((TIMEË<255)

	)

709 
	#IS_FMC_TAR_TIME
(
TIME
Ë((TIMEË<255)

	)

717 
	#IS_FMC_SETUP_TIME
(
TIME
Ë((TIMEË<255)

	)

725 
	#IS_FMC_WAIT_TIME
(
TIME
Ë((TIMEË<255)

	)

733 
	#IS_FMC_HOLD_TIME
(
TIME
Ë((TIMEË<255)

	)

741 
	#IS_FMC_HIZ_TIME
(
TIME
Ë((TIMEË<255)

	)

758 
	#FMC_CﬁumnBôs_Numbî_8b
 ((
uöt32_t
)0x00000000)

	)

759 
	#FMC_CﬁumnBôs_Numbî_9b
 ((
uöt32_t
)0x00000001)

	)

760 
	#FMC_CﬁumnBôs_Numbî_10b
 ((
uöt32_t
)0x00000002)

	)

761 
	#FMC_CﬁumnBôs_Numbî_11b
 ((
uöt32_t
)0x00000003)

	)

763 
	#IS_FMC_COLUMNBITS_NUMBER
(
COLUMN
Ë(((COLUMNË=
FMC_CﬁumnBôs_Numbî_8b
) || \

764 ((
COLUMN
Ë=
FMC_CﬁumnBôs_Numbî_9b
) || \

765 ((
COLUMN
Ë=
FMC_CﬁumnBôs_Numbî_10b
) || \

766 ((
COLUMN
Ë=
FMC_CﬁumnBôs_Numbî_11b
))

	)

775 
	#FMC_RowBôs_Numbî_11b
 ((
uöt32_t
)0x00000000)

	)

776 
	#FMC_RowBôs_Numbî_12b
 ((
uöt32_t
)0x00000004)

	)

777 
	#FMC_RowBôs_Numbî_13b
 ((
uöt32_t
)0x00000008)

	)

779 
	#IS_FMC_ROWBITS_NUMBER
(
ROW
Ë(((ROWË=
FMC_RowBôs_Numbî_11b
) || \

780 ((
ROW
Ë=
FMC_RowBôs_Numbî_12b
) || \

781 ((
ROW
Ë=
FMC_RowBôs_Numbî_13b
))

	)

790 
	#FMC_SDMem‹y_Width_8b
 ((
uöt32_t
)0x00000000)

	)

791 
	#FMC_SDMem‹y_Width_16b
 ((
uöt32_t
)0x00000010)

	)

792 
	#FMC_SDMem‹y_Width_32b
 ((
uöt32_t
)0x00000020)

	)

794 
	#IS_FMC_SDMEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FMC_SDMem‹y_Width_8b
) || \

795 ((
WIDTH
Ë=
FMC_SDMem‹y_Width_16b
) || \

796 ((
WIDTH
Ë=
FMC_SDMem‹y_Width_32b
))

	)

805 
	#FMC_I¡î«lB™k_Numbî_2
 ((
uöt32_t
)0x00000000)

	)

806 
	#FMC_I¡î«lB™k_Numbî_4
 ((
uöt32_t
)0x00000040)

	)

808 
	#IS_FMC_INTERNALBANK_NUMBER
(
NUMBER
Ë(((NUMBERË=
FMC_I¡î«lB™k_Numbî_2
) || \

809 ((
NUMBER
Ë=
FMC_I¡î«lB™k_Numbî_4
))

	)

819 
	#FMC_CAS_L©ícy_1
 ((
uöt32_t
)0x00000080)

	)

820 
	#FMC_CAS_L©ícy_2
 ((
uöt32_t
)0x00000100)

	)

821 
	#FMC_CAS_L©ícy_3
 ((
uöt32_t
)0x00000180)

	)

823 
	#IS_FMC_CAS_LATENCY
(
LATENCY
Ë(((LATENCYË=
FMC_CAS_L©ícy_1
) || \

824 ((
LATENCY
Ë=
FMC_CAS_L©ícy_2
) || \

825 ((
LATENCY
Ë=
FMC_CAS_L©ícy_3
))

	)

834 
	#FMC_Wrôe_PrŸe˘i⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

835 
	#FMC_Wrôe_PrŸe˘i⁄_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

837 
	#IS_FMC_WRITE_PROTECTION
(
WRITE
Ë(((WRITEË=
FMC_Wrôe_PrŸe˘i⁄_DißbÀ
) || \

838 ((
WRITE
Ë=
FMC_Wrôe_PrŸe˘i⁄_E«bÀ
))

	)

848 
	#FMC_SDClock_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

849 
	#FMC_SDClock_Pîiod_2
 ((
uöt32_t
)0x00000800)

	)

850 
	#FMC_SDClock_Pîiod_3
 ((
uöt32_t
)0x00000C00)

	)

852 
	#IS_FMC_SDCLOCK_PERIOD
(
PERIOD
Ë(((PERIODË=
FMC_SDClock_DißbÀ
) || \

853 ((
PERIOD
Ë=
FMC_SDClock_Pîiod_2
) || \

854 ((
PERIOD
Ë=
FMC_SDClock_Pîiod_3
))

	)

863 
	#FMC_Ród_Bur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

864 
	#FMC_Ród_Bur°_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

866 
	#IS_FMC_READ_BURST
(
RBURST
Ë(((RBURSTË=
FMC_Ród_Bur°_DißbÀ
) || \

867 ((
RBURST
Ë=
FMC_Ród_Bur°_E«bÀ
))

	)

876 
	#FMC_RódPùe_Dñay_0
 ((
uöt32_t
)0x00000000)

	)

877 
	#FMC_RódPùe_Dñay_1
 ((
uöt32_t
)0x00002000)

	)

878 
	#FMC_RódPùe_Dñay_2
 ((
uöt32_t
)0x00004000)

	)

880 
	#IS_FMC_READPIPE_DELAY
(
DELAY
Ë(((DELAYË=
FMC_RódPùe_Dñay_0
) || \

881 ((
DELAY
Ë=
FMC_RódPùe_Dñay_1
) || \

882 ((
DELAY
Ë=
FMC_RódPùe_Dñay_2
))

	)

891 
	#IS_FMC_LOADTOACTIVE_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

899 
	#IS_FMC_EXITSELFREFRESH_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

907 
	#IS_FMC_SELFREFRESH_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<16))

	)

915 
	#IS_FMC_ROWCYCLE_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

923 
	#IS_FMC_WRITE_RECOVERY_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<16))

	)

931 
	#IS_FMC_RP_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

939 
	#IS_FMC_RCD_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

948 
	#FMC_Comm™d_Mode_n‹mÆ
 ((
uöt32_t
)0x00000000)

	)

949 
	#FMC_Comm™d_Mode_CLK_E«bÀd
 ((
uöt32_t
)0x00000001)

	)

950 
	#FMC_Comm™d_Mode_PALL
 ((
uöt32_t
)0x00000002)

	)

951 
	#FMC_Comm™d_Mode_AutoRe‰esh
 ((
uöt32_t
)0x00000003)

	)

952 
	#FMC_Comm™d_Mode_LﬂdMode
 ((
uöt32_t
)0x00000004)

	)

953 
	#FMC_Comm™d_Mode_Sñ‰e‰esh
 ((
uöt32_t
)0x00000005)

	)

954 
	#FMC_Comm™d_Mode_PowîDown
 ((
uöt32_t
)0x00000006)

	)

956 
	#IS_FMC_COMMAND_MODE
(
COMMAND
Ë(((COMMANDË=
FMC_Comm™d_Mode_n‹mÆ
) || \

957 ((
COMMAND
Ë=
FMC_Comm™d_Mode_CLK_E«bÀd
) || \

958 ((
COMMAND
Ë=
FMC_Comm™d_Mode_PALL
) || \

959 ((
COMMAND
Ë=
FMC_Comm™d_Mode_AutoRe‰esh
) || \

960 ((
COMMAND
Ë=
FMC_Comm™d_Mode_LﬂdMode
) || \

961 ((
COMMAND
Ë=
FMC_Comm™d_Mode_Sñ‰e‰esh
) || \

962 ((
COMMAND
Ë=
FMC_Comm™d_Mode_PowîDown
))

	)

971 
	#FMC_Comm™d_T¨gë_b™k2
 ((
uöt32_t
)0x00000008)

	)

972 
	#FMC_Comm™d_T¨gë_b™k1
 ((
uöt32_t
)0x00000010)

	)

973 
	#FMC_Comm™d_T¨gë_b™k1_2
 ((
uöt32_t
)0x00000018)

	)

975 
	#IS_FMC_COMMAND_TARGET
(
TARGET
Ë(((TARGETË=
FMC_Comm™d_T¨gë_b™k1
) || \

976 ((
TARGET
Ë=
FMC_Comm™d_T¨gë_b™k2
) || \

977 ((
TARGET
Ë=
FMC_Comm™d_T¨gë_b™k1_2
))

	)

986 
	#IS_FMC_AUTOREFRESH_NUMBER
(
NUMBER
Ë(((NUMBERË> 0Ë&& ((NUMBERË<16))

	)

995 
	#IS_FMC_MODE_REGISTER
(
CONTENT
Ë((CONTENTË<8191)

	)

1005 
	#FMC_N‹mÆMode_Sètus
 ((
uöt32_t
)0x00000000)

	)

1006 
	#FMC_SñfRe‰eshMode_Sètus
 
FMC_SDSR_MODES1_0


	)

1007 
	#FMC_PowîDownMode_Sètus
 
FMC_SDSR_MODES1_1


	)

1009 
	#IS_FMC_MODE_STATUS
(
STATUS
Ë(((STATUSË=
FMC_N‹mÆMode_Sètus
) || \

1010 ((
STATUS
Ë=
FMC_SñfRe‰eshMode_Sètus
) || \

1011 ((
STATUS
Ë=
FMC_PowîDownMode_Sètus
))

	)

1025 
	#FMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

1026 
	#FMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

1027 
	#FMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

1028 
	#FMC_IT_Re‰esh
 ((
uöt32_t
)0x00004000)

	)

1030 
	#IS_FMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFBFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

1031 
	#IS_FMC_GET_IT
(
IT
Ë(((ITË=
FMC_IT_RisögEdge
) || \

1032 ((
IT
Ë=
FMC_IT_Levñ
) || \

1033 ((
IT
Ë=
FMC_IT_FÆlögEdge
) || \

1034 ((
IT
Ë=
FMC_IT_Re‰esh
))

	)

1036 
	#IS_FMC_IT_BANK
(
BANK
Ë(((BANKË=
FMC_B™k2_NAND
) || \

1037 ((
BANK
Ë=
FMC_B™k3_NAND
) || \

1038 ((
BANK
Ë=
FMC_B™k4_PCCARD
) || \

1039 ((
BANK
Ë=
FMC_B™k1_SDRAM
) || \

1040 ((
BANK
Ë=
FMC_B™k2_SDRAM
))

	)

1048 
	#FMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

1049 
	#FMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

1050 
	#FMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

1051 
	#FMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

1052 
	#FMC_FLAG_Re‰esh
 
FMC_SDSR_RE


	)

1053 
	#FMC_FLAG_Busy
 
FMC_SDSR_BUSY


	)

1055 
	#IS_FMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FMC_FLAG_RisögEdge
) || \

1056 ((
FLAG
Ë=
FMC_FLAG_Levñ
) || \

1057 ((
FLAG
Ë=
FMC_FLAG_FÆlögEdge
) || \

1058 ((
FLAG
Ë=
FMC_FLAG_FEMPT
) || \

1059 ((
FLAG
Ë=
FMC_FLAG_Re‰esh
) || \

1060 ((
FLAG
Ë=
FMC_SDSR_BUSY
))

	)

1062 
	#IS_FMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FMC_B™k2_NAND
) || \

1063 ((
BANK
Ë=
FMC_B™k3_NAND
) || \

1064 ((
BANK
Ë=
FMC_B™k4_PCCARD
) || \

1065 ((
BANK
Ë=
FMC_B™k1_SDRAM
) || \

1066 ((
BANK
Ë=
FMC_B™k2_SDRAM
) || \

1067 ((
BANK
Ë=(
FMC_B™k1_SDRAM
 | 
FMC_B™k2_SDRAM
)))

	)

1069 
	#IS_FMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

1079 
	#IS_FMC_REFRESH_COUNT
(
COUNT
Ë((COUNTË<8191)

	)

1094 
FMC_NORSRAMDeInô
(
uöt32_t
 
FMC_B™k
);

1095 
FMC_NORSRAMInô
(
FMC_NORSRAMInôTy≥Def
* 
FMC_NORSRAMInôSåu˘
);

1096 
FMC_NORSRAMSåu˘Inô
(
FMC_NORSRAMInôTy≥Def
* 
FMC_NORSRAMInôSåu˘
);

1097 
FMC_NORSRAMCmd
(
uöt32_t
 
FMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1100 
FMC_NANDDeInô
(
uöt32_t
 
FMC_B™k
);

1101 
FMC_NANDInô
(
FMC_NANDInôTy≥Def
* 
FMC_NANDInôSåu˘
);

1102 
FMC_NANDSåu˘Inô
(
FMC_NANDInôTy≥Def
* 
FMC_NANDInôSåu˘
);

1103 
FMC_NANDCmd
(
uöt32_t
 
FMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1104 
FMC_NANDECCCmd
(
uöt32_t
 
FMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1105 
uöt32_t
 
FMC_GëECC
(uöt32_à
FMC_B™k
);

1108 
FMC_PCCARDDeInô
();

1109 
FMC_PCCARDInô
(
FMC_PCCARDInôTy≥Def
* 
FMC_PCCARDInôSåu˘
);

1110 
FMC_PCCARDSåu˘Inô
(
FMC_PCCARDInôTy≥Def
* 
FMC_PCCARDInôSåu˘
);

1111 
FMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

1114 
FMC_SDRAMDeInô
(
uöt32_t
 
FMC_B™k
);

1115 
FMC_SDRAMInô
(
FMC_SDRAMInôTy≥Def
* 
FMC_SDRAMInôSåu˘
);

1116 
FMC_SDRAMSåu˘Inô
(
FMC_SDRAMInôTy≥Def
* 
FMC_SDRAMInôSåu˘
);

1117 
FMC_SDRAMCmdC⁄fig
(
FMC_SDRAMComm™dTy≥Def
* 
FMC_SDRAMComm™dSåu˘
);

1118 
uöt32_t
 
FMC_GëModeSètus
(uöt32_à
SDRAM_B™k
);

1119 
FMC_SëRe‰eshCou¡
(
uöt32_t
 
FMC_Cou¡
);

1120 
FMC_SëAutoRe‰esh_Numbî
(
uöt32_t
 
FMC_Numbî
);

1121 
FMC_SDRAMWrôePrŸe˘i⁄C⁄fig
(
uöt32_t
 
SDRAM_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1124 
FMC_ITC⁄fig
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1125 
FœgSètus
 
FMC_GëFœgSètus
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_FLAG
);

1126 
FMC_CÀ¨Fœg
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_FLAG
);

1127 
ITSètus
 
FMC_GëITSètus
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_IT
);

1128 
FMC_CÀ¨ITPídögBô
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_IT
);

1130 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_fsmc.h

30 #i‚de‡
__STM32F4xx_FSMC_H


31 
	#__STM32F4xx_FSMC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
FSMC_AddªssSëupTime
;

60 
uöt32_t
 
FSMC_AddªssHﬁdTime
;

65 
uöt32_t
 
FSMC_D©aSëupTime
;

70 
uöt32_t
 
FSMC_BusTu∫AroundDuøti⁄
;

75 
uöt32_t
 
FSMC_CLKDivisi⁄
;

79 
uöt32_t
 
FSMC_D©aL©ícy
;

87 
uöt32_t
 
FSMC_Ac˚ssMode
;

89 }
	tFSMC_NORSRAMTimögInôTy≥Def
;

96 
uöt32_t
 
FSMC_B™k
;

99 
uöt32_t
 
FSMC_D©aAddªssMux
;

103 
uöt32_t
 
FSMC_Mem‹yTy≥
;

107 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

110 
uöt32_t
 
FSMC_Bur°Ac˚ssMode
;

114 
uöt32_t
 
FSMC_Asynchr⁄ousWaô
;

118 
uöt32_t
 
FSMC_WaôSig«lPﬁ¨ôy
;

122 
uöt32_t
 
FSMC_WøpMode
;

126 
uöt32_t
 
FSMC_WaôSig«lA˘ive
;

131 
uöt32_t
 
FSMC_WrôeO≥øti⁄
;

134 
uöt32_t
 
FSMC_WaôSig«l
;

138 
uöt32_t
 
FSMC_ExãndedMode
;

141 
uöt32_t
 
FSMC_WrôeBur°
;

144 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_RódWrôeTimögSåu˘
;

146 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_WrôeTimögSåu˘
;

147 }
	tFSMC_NORSRAMInôTy≥Def
;

154 
uöt32_t
 
FSMC_SëupTime
;

160 
uöt32_t
 
FSMC_WaôSëupTime
;

166 
uöt32_t
 
FSMC_HﬁdSëupTime
;

173 
uöt32_t
 
FSMC_HiZSëupTime
;

178 }
	tFSMC_NAND_PCCARDTimögInôTy≥Def
;

185 
uöt32_t
 
FSMC_B™k
;

188 
uöt32_t
 
FSMC_Waô„©uª
;

191 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

194 
uöt32_t
 
FSMC_ECC
;

197 
uöt32_t
 
FSMC_ECCPageSize
;

200 
uöt32_t
 
FSMC_TCLRSëupTime
;

204 
uöt32_t
 
FSMC_TARSëupTime
;

208 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

210 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

211 }
	tFSMC_NANDInôTy≥Def
;

219 
uöt32_t
 
FSMC_Waô„©uª
;

222 
uöt32_t
 
FSMC_TCLRSëupTime
;

226 
uöt32_t
 
FSMC_TARSëupTime
;

231 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

233 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

235 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_IOS∑˚TimögSåu˘
;

236 }
	tFSMC_PCCARDInôTy≥Def
;

247 
	#FSMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

248 
	#FSMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

249 
	#FSMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

250 
	#FSMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

258 
	#FSMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

259 
	#FSMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

267 
	#FSMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

272 
	#IS_FSMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k1_NORSRAM1
) || \

273 ((
BANK
Ë=
FSMC_B™k1_NORSRAM2
) || \

274 ((
BANK
Ë=
FSMC_B™k1_NORSRAM3
) || \

275 ((
BANK
Ë=
FSMC_B™k1_NORSRAM4
))

	)

277 
	#IS_FSMC_NAND_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

278 ((
BANK
Ë=
FSMC_B™k3_NAND
))

	)

280 
	#IS_FSMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

281 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

282 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

	)

284 
	#IS_FSMC_IT_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

285 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

286 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

	)

296 
	#FSMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

297 
	#FSMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

298 
	#IS_FSMC_MUX
(
MUX
Ë(((MUXË=
FSMC_D©aAddªssMux_DißbÀ
) || \

299 ((
MUX
Ë=
FSMC_D©aAddªssMux_E«bÀ
))

	)

308 
	#FSMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

309 
	#FSMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

310 
	#FSMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

311 
	#IS_FSMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FSMC_Mem‹yTy≥_SRAM
) || \

312 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_PSRAM
)|| \

313 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_NOR
))

	)

322 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

323 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

324 
	#IS_FSMC_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
) || \

325 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

	)

334 
	#FSMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

335 
	#FSMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

336 
	#IS_FSMC_BURSTMODE
(
STATE
Ë(((STATEË=
FSMC_Bur°Ac˚ssMode_DißbÀ
) || \

337 ((
STATE
Ë=
FSMC_Bur°Ac˚ssMode_E«bÀ
))

	)

345 
	#FSMC_Asynchr⁄ousWaô_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

346 
	#FSMC_Asynchr⁄ousWaô_E«bÀ
 ((
uöt32_t
)0x00008000)

	)

347 
	#IS_FSMC_ASYNWAIT
(
STATE
Ë(((STATEË=
FSMC_Asynchr⁄ousWaô_DißbÀ
) || \

348 ((
STATE
Ë=
FSMC_Asynchr⁄ousWaô_E«bÀ
))

	)

356 
	#FSMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

357 
	#FSMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

358 
	#IS_FSMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FSMC_WaôSig«lPﬁ¨ôy_Low
) || \

359 ((
POLARITY
Ë=
FSMC_WaôSig«lPﬁ¨ôy_High
))

	)

367 
	#FSMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

368 
	#FSMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

369 
	#IS_FSMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FSMC_WøpMode_DißbÀ
) || \

370 ((
MODE
Ë=
FSMC_WøpMode_E«bÀ
))

	)

378 
	#FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

379 
	#FSMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

380 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
) || \

381 ((
ACTIVE
Ë=
FSMC_WaôSig«lA˘ive_DurögWaôSèã
))

	)

389 
	#FSMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

390 
	#FSMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

391 
	#IS_FSMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FSMC_WrôeO≥øti⁄_DißbÀ
) || \

392 ((
OPERATION
Ë=
FSMC_WrôeO≥øti⁄_E«bÀ
))

	)

400 
	#FSMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

401 
	#FSMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

402 
	#IS_FSMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FSMC_WaôSig«l_DißbÀ
) || \

403 ((
SIGNAL
Ë=
FSMC_WaôSig«l_E«bÀ
))

	)

411 
	#FSMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

412 
	#FSMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

414 
	#IS_FSMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FSMC_ExãndedMode_DißbÀ
) || \

415 ((
MODE
Ë=
FSMC_ExãndedMode_E«bÀ
))

	)

424 
	#FSMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

425 
	#FSMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

426 
	#IS_FSMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FSMC_WrôeBur°_DißbÀ
) || \

427 ((
BURST
Ë=
FSMC_WrôeBur°_E«bÀ
))

	)

435 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<0xF)

	)

443 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
TIME
Ë((TIMEË<0xF)

	)

451 
	#IS_FSMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<0xFF))

	)

459 
	#IS_FSMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<0xF)

	)

467 
	#IS_FSMC_CLK_DIV
(
DIV
Ë((DIVË<0xF)

	)

475 
	#IS_FSMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<0xF)

	)

483 
	#FSMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

484 
	#FSMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

485 
	#FSMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

486 
	#FSMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

487 
	#IS_FSMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FSMC_Ac˚ssMode_A
) || \

488 ((
MODE
Ë=
FSMC_Ac˚ssMode_B
) || \

489 ((
MODE
Ë=
FSMC_Ac˚ssMode_C
) || \

490 ((
MODE
Ë=
FSMC_Ac˚ssMode_D
))

	)

506 
	#FSMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

507 
	#FSMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

508 
	#IS_FSMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FSMC_Waô„©uª_DißbÀ
) || \

509 ((
FEATURE
Ë=
FSMC_Waô„©uª_E«bÀ
))

	)

518 
	#FSMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

519 
	#FSMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

520 
	#IS_FSMC_ECC_STATE
(
STATE
Ë(((STATEË=
FSMC_ECC_DißbÀ
) || \

521 ((
STATE
Ë=
FSMC_ECC_E«bÀ
))

	)

529 
	#FSMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

530 
	#FSMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

531 
	#FSMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

532 
	#FSMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

533 
	#FSMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

534 
	#FSMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

535 
	#IS_FSMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FSMC_ECCPageSize_256Byãs
) || \

536 ((
SIZE
Ë=
FSMC_ECCPageSize_512Byãs
) || \

537 ((
SIZE
Ë=
FSMC_ECCPageSize_1024Byãs
) || \

538 ((
SIZE
Ë=
FSMC_ECCPageSize_2048Byãs
) || \

539 ((
SIZE
Ë=
FSMC_ECCPageSize_4096Byãs
) || \

540 ((
SIZE
Ë=
FSMC_ECCPageSize_8192Byãs
))

	)

548 
	#IS_FSMC_TCLR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

556 
	#IS_FSMC_TAR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

564 
	#IS_FSMC_SETUP_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

572 
	#IS_FSMC_WAIT_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

580 
	#IS_FSMC_HOLD_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

588 
	#IS_FSMC_HIZ_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

596 
	#FSMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

597 
	#FSMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

598 
	#FSMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

599 
	#IS_FSMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

600 
	#IS_FSMC_GET_IT
(
IT
Ë(((ITË=
FSMC_IT_RisögEdge
) || \

601 ((
IT
Ë=
FSMC_IT_Levñ
) || \

602 ((
IT
Ë=
FSMC_IT_FÆlögEdge
))

	)

610 
	#FSMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

611 
	#FSMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

612 
	#FSMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

613 
	#FSMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

614 
	#IS_FSMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FSMC_FLAG_RisögEdge
) || \

615 ((
FLAG
Ë=
FSMC_FLAG_Levñ
) || \

616 ((
FLAG
Ë=
FSMC_FLAG_FÆlögEdge
) || \

617 ((
FLAG
Ë=
FSMC_FLAG_FEMPT
))

	)

619 
	#IS_FSMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

636 
FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
);

637 
FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

638 
FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

639 
FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

642 
FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
);

643 
FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

644 
FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

645 
FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

646 
FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

647 
uöt32_t
 
FSMC_GëECC
(uöt32_à
FSMC_B™k
);

650 
FSMC_PCCARDDeInô
();

651 
FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

652 
FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

653 
FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

656 
FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

657 
FœgSètus
 
FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

658 
FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

659 
ITSètus
 
FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

660 
FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

662 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_gpio.h

30 #i‚de‡
__STM32F4xx_GPIO_H


31 
	#__STM32F4xx_GPIO_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

50 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
GPIOA
) || \

51 ((
PERIPH
Ë=
GPIOB
) || \

52 ((
PERIPH
Ë=
GPIOC
) || \

53 ((
PERIPH
Ë=
GPIOD
) || \

54 ((
PERIPH
Ë=
GPIOE
) || \

55 ((
PERIPH
Ë=
GPIOF
) || \

56 ((
PERIPH
Ë=
GPIOG
) || \

57 ((
PERIPH
Ë=
GPIOH
) || \

58 ((
PERIPH
Ë=
GPIOI
) || \

59 ((
PERIPH
Ë=
GPIOJ
) || \

60 ((
PERIPH
Ë=
GPIOK
))

	)

67 
GPIO_Mode_IN
 = 0x00,

68 
GPIO_Mode_OUT
 = 0x01,

69 
GPIO_Mode_AF
 = 0x02,

70 
GPIO_Mode_AN
 = 0x03

71 }
	tGPIOMode_Ty≥Def
;

72 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_IN
Ë|| ((MODEË=
GPIO_Mode_OUT
) || \

73 ((
MODE
Ë=
GPIO_Mode_AF
)|| ((MODEË=
GPIO_Mode_AN
))

	)

80 
GPIO_OTy≥_PP
 = 0x00,

81 
GPIO_OTy≥_OD
 = 0x01

82 }
	tGPIOOTy≥_Ty≥Def
;

83 
	#IS_GPIO_OTYPE
(
OTYPE
Ë(((OTYPEË=
GPIO_OTy≥_PP
Ë|| ((OTYPEË=
GPIO_OTy≥_OD
))

	)

91 
GPIO_Low_S≥ed
 = 0x00,

92 
GPIO_Medium_S≥ed
 = 0x01,

93 
GPIO_Fa°_S≥ed
 = 0x02,

94 
GPIO_High_S≥ed
 = 0x03

95 }
	tGPIOS≥ed_Ty≥Def
;

98 
	#GPIO_S≥ed_2MHz
 
GPIO_Low_S≥ed


	)

99 
	#GPIO_S≥ed_25MHz
 
GPIO_Medium_S≥ed


	)

100 
	#GPIO_S≥ed_50MHz
 
GPIO_Fa°_S≥ed


	)

101 
	#GPIO_S≥ed_100MHz
 
GPIO_High_S≥ed


	)

103 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_Low_S≥ed
Ë|| ((SPEEDË=
GPIO_Medium_S≥ed
) || \

104 ((
SPEED
Ë=
GPIO_Fa°_S≥ed
)|| ((SPEEDË=
GPIO_High_S≥ed
))

	)

111 
GPIO_PuPd_NOPULL
 = 0x00,

112 
GPIO_PuPd_UP
 = 0x01,

113 
GPIO_PuPd_DOWN
 = 0x02

114 }
	tGPIOPuPd_Ty≥Def
;

115 
	#IS_GPIO_PUPD
(
PUPD
Ë(((PUPDË=
GPIO_PuPd_NOPULL
Ë|| ((PUPDË=
GPIO_PuPd_UP
) || \

116 ((
PUPD
Ë=
GPIO_PuPd_DOWN
))

	)

123 
Bô_RESET
 = 0,

124 
Bô_SET


125 }
	tBôA˘i⁄
;

126 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

134 
uöt32_t
 
GPIO_Pö
;

137 
GPIOMode_Ty≥Def
 
GPIO_Mode
;

140 
GPIOS≥ed_Ty≥Def
 
GPIO_S≥ed
;

143 
GPIOOTy≥_Ty≥Def
 
GPIO_OTy≥
;

146 
GPIOPuPd_Ty≥Def
 
GPIO_PuPd
;

148 }
	tGPIO_InôTy≥Def
;

159 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

160 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

161 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

162 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

163 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

164 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

165 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

166 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

167 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

168 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

169 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

170 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

171 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

172 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

173 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

174 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

175 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

177 
	#GPIO_PIN_MASK
 ((
uöt32_t
)0x0000FFFFË

	)

178 
	#IS_GPIO_PIN
(
PIN
Ë(((PINË& 
GPIO_PIN_MASK
 ) !(
uöt32_t
)0x00)

	)

179 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
) || \

180 ((
PIN
Ë=
GPIO_Pö_1
) || \

181 ((
PIN
Ë=
GPIO_Pö_2
) || \

182 ((
PIN
Ë=
GPIO_Pö_3
) || \

183 ((
PIN
Ë=
GPIO_Pö_4
) || \

184 ((
PIN
Ë=
GPIO_Pö_5
) || \

185 ((
PIN
Ë=
GPIO_Pö_6
) || \

186 ((
PIN
Ë=
GPIO_Pö_7
) || \

187 ((
PIN
Ë=
GPIO_Pö_8
) || \

188 ((
PIN
Ë=
GPIO_Pö_9
) || \

189 ((
PIN
Ë=
GPIO_Pö_10
) || \

190 ((
PIN
Ë=
GPIO_Pö_11
) || \

191 ((
PIN
Ë=
GPIO_Pö_12
) || \

192 ((
PIN
Ë=
GPIO_Pö_13
) || \

193 ((
PIN
Ë=
GPIO_Pö_14
) || \

194 ((
PIN
Ë=
GPIO_Pö_15
))

	)

203 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

204 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

205 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

206 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

207 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

208 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

209 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

210 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

211 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

212 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

213 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

214 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

215 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

216 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

217 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

218 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

220 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
) || \

221 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

222 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

223 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

224 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

225 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

226 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

227 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

228 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

229 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

230 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

231 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

232 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

233 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

234 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

235 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

	)

246 
	#GPIO_AF_RTC_50Hz
 ((
uöt8_t
)0x00Ë

	)

247 
	#GPIO_AF_MCO
 ((
uöt8_t
)0x00Ë

	)

248 
	#GPIO_AF_TAMPER
 ((
uöt8_t
)0x00Ë

	)

249 
	#GPIO_AF_SWJ
 ((
uöt8_t
)0x00Ë

	)

250 
	#GPIO_AF_TRACE
 ((
uöt8_t
)0x00Ë

	)

255 
	#GPIO_AF_TIM1
 ((
uöt8_t
)0x01Ë

	)

256 
	#GPIO_AF_TIM2
 ((
uöt8_t
)0x01Ë

	)

261 
	#GPIO_AF_TIM3
 ((
uöt8_t
)0x02Ë

	)

262 
	#GPIO_AF_TIM4
 ((
uöt8_t
)0x02Ë

	)

263 
	#GPIO_AF_TIM5
 ((
uöt8_t
)0x02Ë

	)

268 
	#GPIO_AF_TIM8
 ((
uöt8_t
)0x03Ë

	)

269 
	#GPIO_AF_TIM9
 ((
uöt8_t
)0x03Ë

	)

270 
	#GPIO_AF_TIM10
 ((
uöt8_t
)0x03Ë

	)

271 
	#GPIO_AF_TIM11
 ((
uöt8_t
)0x03Ë

	)

276 
	#GPIO_AF_I2C1
 ((
uöt8_t
)0x04Ë

	)

277 
	#GPIO_AF_I2C2
 ((
uöt8_t
)0x04Ë

	)

278 
	#GPIO_AF_I2C3
 ((
uöt8_t
)0x04Ë

	)

283 
	#GPIO_AF_SPI1
 ((
uöt8_t
)0x05Ë

	)

284 
	#GPIO_AF_SPI2
 ((
uöt8_t
)0x05Ë

	)

285 
	#GPIO_AF5_SPI3
 ((
uöt8_t
)0x05Ë

	)

286 
	#GPIO_AF_SPI4
 ((
uöt8_t
)0x05Ë

	)

287 
	#GPIO_AF_SPI5
 ((
uöt8_t
)0x05Ë

	)

288 
	#GPIO_AF_SPI6
 ((
uöt8_t
)0x05Ë

	)

293 
	#GPIO_AF_SPI3
 ((
uöt8_t
)0x06Ë

	)

294 
	#GPIO_AF6_SPI2
 ((
uöt8_t
)0x06Ë

	)

295 
	#GPIO_AF6_SPI4
 ((
uöt8_t
)0x06Ë

	)

296 
	#GPIO_AF6_SPI5
 ((
uöt8_t
)0x06Ë

	)

297 
	#GPIO_AF_SAI1
 ((
uöt8_t
)0x06Ë

	)

302 
	#GPIO_AF_USART1
 ((
uöt8_t
)0x07Ë

	)

303 
	#GPIO_AF_USART2
 ((
uöt8_t
)0x07Ë

	)

304 
	#GPIO_AF_USART3
 ((
uöt8_t
)0x07Ë

	)

305 
	#GPIO_AF7_SPI3
 ((
uöt8_t
)0x07Ë

	)

310 
	#GPIO_AF_I2S3ext
 
GPIO_AF7_SPI3


	)

315 
	#GPIO_AF_UART4
 ((
uöt8_t
)0x08Ë

	)

316 
	#GPIO_AF_UART5
 ((
uöt8_t
)0x08Ë

	)

317 
	#GPIO_AF_USART6
 ((
uöt8_t
)0x08Ë

	)

318 
	#GPIO_AF_UART7
 ((
uöt8_t
)0x08Ë

	)

319 
	#GPIO_AF_UART8
 ((
uöt8_t
)0x08Ë

	)

324 
	#GPIO_AF_CAN1
 ((
uöt8_t
)0x09Ë

	)

325 
	#GPIO_AF_CAN2
 ((
uöt8_t
)0x09Ë

	)

326 
	#GPIO_AF_TIM12
 ((
uöt8_t
)0x09Ë

	)

327 
	#GPIO_AF_TIM13
 ((
uöt8_t
)0x09Ë

	)

328 
	#GPIO_AF_TIM14
 ((
uöt8_t
)0x09Ë

	)

330 
	#GPIO_AF9_I2C2
 ((
uöt8_t
)0x09Ë

	)

331 
	#GPIO_AF9_I2C3
 ((
uöt8_t
)0x09Ë

	)

336 
	#GPIO_AF_OTG_FS
 ((
uöt8_t
)0xAË

	)

337 
	#GPIO_AF_OTG_HS
 ((
uöt8_t
)0xAË

	)

342 
	#GPIO_AF_ETH
 ((
uöt8_t
)0x0BË

	)

347 #i‡
deföed
 (
STM32F40_41xxx
)

348 
	#GPIO_AF_FSMC
 ((
uöt8_t
)0xCË

	)

351 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

352 
	#GPIO_AF_FMC
 ((
uöt8_t
)0xCË

	)

355 
	#GPIO_AF_OTG_HS_FS
 ((
uöt8_t
)0xCË

	)

356 
	#GPIO_AF_SDIO
 ((
uöt8_t
)0xCË

	)

361 
	#GPIO_AF_DCMI
 ((
uöt8_t
)0x0DË

	)

367 
	#GPIO_AF_LTDC
 ((
uöt8_t
)0x0EË

	)

372 
	#GPIO_AF_EVENTOUT
 ((
uöt8_t
)0x0FË

	)

374 #i‡
deföed
 (
STM32F40_41xxx
)

375 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF_RTC_50Hz
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

376 ((
AF
Ë=
GPIO_AF_MCO
Ë|| ((AFË=
GPIO_AF_TAMPER
) || \

377 ((
AF
Ë=
GPIO_AF_SWJ
Ë|| ((AFË=
GPIO_AF_TRACE
) || \

378 ((
AF
Ë=
GPIO_AF_TIM1
Ë|| ((AFË=
GPIO_AF_TIM2
) || \

379 ((
AF
Ë=
GPIO_AF_TIM3
Ë|| ((AFË=
GPIO_AF_TIM4
) || \

380 ((
AF
Ë=
GPIO_AF_TIM5
Ë|| ((AFË=
GPIO_AF_TIM8
) || \

381 ((
AF
Ë=
GPIO_AF_I2C1
Ë|| ((AFË=
GPIO_AF_I2C2
) || \

382 ((
AF
Ë=
GPIO_AF_I2C3
Ë|| ((AFË=
GPIO_AF_SPI1
) || \

383 ((
AF
Ë=
GPIO_AF_SPI2
Ë|| ((AFË=
GPIO_AF_TIM13
) || \

384 ((
AF
Ë=
GPIO_AF_SPI3
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

385 ((
AF
Ë=
GPIO_AF_USART1
Ë|| ((AFË=
GPIO_AF_USART2
) || \

386 ((
AF
Ë=
GPIO_AF_USART3
Ë|| ((AFË=
GPIO_AF_UART4
) || \

387 ((
AF
Ë=
GPIO_AF_UART5
Ë|| ((AFË=
GPIO_AF_USART6
) || \

388 ((
AF
Ë=
GPIO_AF_CAN1
Ë|| ((AFË=
GPIO_AF_CAN2
) || \

389 ((
AF
Ë=
GPIO_AF_OTG_FS
Ë|| ((AFË=
GPIO_AF_OTG_HS
) || \

390 ((
AF
Ë=
GPIO_AF_ETH
Ë|| ((AFË=
GPIO_AF_OTG_HS_FS
) || \

391 ((
AF
Ë=
GPIO_AF_SDIO
Ë|| ((AFË=
GPIO_AF_DCMI
) || \

392 ((
AF
Ë=
GPIO_AF_EVENTOUT
Ë|| ((AFË=
GPIO_AF_FSMC
))

	)

395 #i‡
deföed
 (
STM32F401xx
)

396 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF_RTC_50Hz
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

397 ((
AF
Ë=
GPIO_AF_MCO
Ë|| ((AFË=
GPIO_AF_TAMPER
) || \

398 ((
AF
Ë=
GPIO_AF_SWJ
Ë|| ((AFË=
GPIO_AF_TRACE
) || \

399 ((
AF
Ë=
GPIO_AF_TIM1
Ë|| ((AFË=
GPIO_AF_TIM2
) || \

400 ((
AF
Ë=
GPIO_AF_TIM3
Ë|| ((AFË=
GPIO_AF_TIM4
) || \

401 ((
AF
Ë=
GPIO_AF_TIM5
Ë|| ((AFË=
GPIO_AF_TIM8
) || \

402 ((
AF
Ë=
GPIO_AF_I2C1
Ë|| ((AFË=
GPIO_AF_I2C2
) || \

403 ((
AF
Ë=
GPIO_AF_I2C3
Ë|| ((AFË=
GPIO_AF_SPI1
) || \

404 ((
AF
Ë=
GPIO_AF_SPI2
Ë|| ((AFË=
GPIO_AF_TIM13
) || \

405 ((
AF
Ë=
GPIO_AF_SPI3
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

406 ((
AF
Ë=
GPIO_AF_USART1
Ë|| ((AFË=
GPIO_AF_USART2
) || \

407 ((
AF
Ë=
GPIO_AF_SDIO
Ë|| ((AFË=
GPIO_AF_USART6
) || \

408 ((
AF
Ë=
GPIO_AF_OTG_FS
Ë|| ((AFË=
GPIO_AF_OTG_HS
) || \

409 ((
AF
Ë=
GPIO_AF_EVENTOUT
Ë|| ((AFË=
GPIO_AF_SPI4
))

	)

412 #i‡
deföed
 (
STM32F411xE
)

413 
	#IS_GPIO_AF
(
AF
Ë(((AFË< 16Ë&& ((AFË!11Ë&& ((AFË!13Ë&& ((AFË!14))

	)

416 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

417 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF_RTC_50Hz
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

418 ((
AF
Ë=
GPIO_AF_MCO
Ë|| ((AFË=
GPIO_AF_TAMPER
) || \

419 ((
AF
Ë=
GPIO_AF_SWJ
Ë|| ((AFË=
GPIO_AF_TRACE
) || \

420 ((
AF
Ë=
GPIO_AF_TIM1
Ë|| ((AFË=
GPIO_AF_TIM2
) || \

421 ((
AF
Ë=
GPIO_AF_TIM3
Ë|| ((AFË=
GPIO_AF_TIM4
) || \

422 ((
AF
Ë=
GPIO_AF_TIM5
Ë|| ((AFË=
GPIO_AF_TIM8
) || \

423 ((
AF
Ë=
GPIO_AF_I2C1
Ë|| ((AFË=
GPIO_AF_I2C2
) || \

424 ((
AF
Ë=
GPIO_AF_I2C3
Ë|| ((AFË=
GPIO_AF_SPI1
) || \

425 ((
AF
Ë=
GPIO_AF_SPI2
Ë|| ((AFË=
GPIO_AF_TIM13
) || \

426 ((
AF
Ë=
GPIO_AF_SPI3
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

427 ((
AF
Ë=
GPIO_AF_USART1
Ë|| ((AFË=
GPIO_AF_USART2
) || \

428 ((
AF
Ë=
GPIO_AF_USART3
Ë|| ((AFË=
GPIO_AF_UART4
) || \

429 ((
AF
Ë=
GPIO_AF_UART5
Ë|| ((AFË=
GPIO_AF_USART6
) || \

430 ((
AF
Ë=
GPIO_AF_CAN1
Ë|| ((AFË=
GPIO_AF_CAN2
) || \

431 ((
AF
Ë=
GPIO_AF_OTG_FS
Ë|| ((AFË=
GPIO_AF_OTG_HS
) || \

432 ((
AF
Ë=
GPIO_AF_ETH
Ë|| ((AFË=
GPIO_AF_OTG_HS_FS
) || \

433 ((
AF
Ë=
GPIO_AF_SDIO
Ë|| ((AFË=
GPIO_AF_DCMI
) || \

434 ((
AF
Ë=
GPIO_AF_EVENTOUT
Ë|| ((AFË=
GPIO_AF_SPI4
) || \

435 ((
AF
Ë=
GPIO_AF_SPI5
Ë|| ((AFË=
GPIO_AF_SPI6
) || \

436 ((
AF
Ë=
GPIO_AF_UART7
Ë|| ((AFË=
GPIO_AF_UART8
) || \

437 ((
AF
Ë=
GPIO_AF_FMC
Ë|| ((AFË=
GPIO_AF_SAI1
) || \

438 ((
AF
Ë=
GPIO_AF_LTDC
))

	)

449 
	#GPIO_Mode_AIN
 
GPIO_Mode_AN


	)

451 
	#GPIO_AF_OTG1_FS
 
GPIO_AF_OTG_FS


	)

452 
	#GPIO_AF_OTG2_HS
 
GPIO_AF_OTG_HS


	)

453 
	#GPIO_AF_OTG2_FS
 
GPIO_AF_OTG_HS_FS


	)

467 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

470 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

471 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

472 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

475 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

476 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

477 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

478 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

479 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

480 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

481 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

482 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

483 
GPIO_ToggÀBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

486 
GPIO_PöAFC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_PöSour˚
, 
uöt8_t
 
GPIO_AF
);

488 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_hash.h

30 #i‚de‡
__STM32F4xx_HASH_H


31 
	#__STM32F4xx_HASH_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
HASH_AlgoSñe˘i⁄
;

57 
uöt32_t
 
HASH_AlgoMode
;

59 
uöt32_t
 
HASH_D©aTy≥
;

62 
uöt32_t
 
HASH_HMACKeyTy≥
;

64 }
	tHASH_InôTy≥Def
;

71 
uöt32_t
 
D©a
[8];

75 } 
	tHASH_MsgDige°
;

82 
uöt32_t
 
HASH_IMR
;

83 
uöt32_t
 
HASH_STR
;

84 
uöt32_t
 
HASH_CR
;

85 
uöt32_t
 
HASH_CSR
[54];

86 }
	tHASH_C⁄ãxt
;

97 
	#HASH_AlgoSñe˘i⁄_SHA1
 ((
uöt32_t
)0x0000Ë

	)

98 
	#HASH_AlgoSñe˘i⁄_SHA224
 
HASH_CR_ALGO_1


	)

99 
	#HASH_AlgoSñe˘i⁄_SHA256
 
HASH_CR_ALGO


	)

100 
	#HASH_AlgoSñe˘i⁄_MD5
 
HASH_CR_ALGO_0


	)

102 
	#IS_HASH_ALGOSELECTION
(
ALGOSELECTION
Ë(((ALGOSELECTIONË=
HASH_AlgoSñe˘i⁄_SHA1
) || \

103 ((
ALGOSELECTION
Ë=
HASH_AlgoSñe˘i⁄_SHA224
) || \

104 ((
ALGOSELECTION
Ë=
HASH_AlgoSñe˘i⁄_SHA256
) || \

105 ((
ALGOSELECTION
Ë=
HASH_AlgoSñe˘i⁄_MD5
))

	)

113 
	#HASH_AlgoMode_HASH
 ((
uöt32_t
)0x00000000Ë

	)

114 
	#HASH_AlgoMode_HMAC
 
HASH_CR_MODE


	)

116 
	#IS_HASH_ALGOMODE
(
ALGOMODE
Ë(((ALGOMODEË=
HASH_AlgoMode_HASH
) || \

117 ((
ALGOMODE
Ë=
HASH_AlgoMode_HMAC
))

	)

125 
	#HASH_D©aTy≥_32b
 ((
uöt32_t
)0x0000Ë

	)

126 
	#HASH_D©aTy≥_16b
 
HASH_CR_DATATYPE_0


	)

127 
	#HASH_D©aTy≥_8b
 
HASH_CR_DATATYPE_1


	)

128 
	#HASH_D©aTy≥_1b
 
HASH_CR_DATATYPE


	)

130 
	#IS_HASH_DATATYPE
(
DATATYPE
Ë(((DATATYPEË=
HASH_D©aTy≥_32b
)|| \

131 ((
DATATYPE
Ë=
HASH_D©aTy≥_16b
)|| \

132 ((
DATATYPE
Ë=
HASH_D©aTy≥_8b
) || \

133 ((
DATATYPE
Ë=
HASH_D©aTy≥_1b
))

	)

141 
	#HASH_HMACKeyTy≥_Sh‹tKey
 ((
uöt32_t
)0x00000000Ë

	)

142 
	#HASH_HMACKeyTy≥_L⁄gKey
 
HASH_CR_LKEY


	)

144 
	#IS_HASH_HMAC_KEYTYPE
(
KEYTYPE
Ë(((KEYTYPEË=
HASH_HMACKeyTy≥_Sh‹tKey
) || \

145 ((
KEYTYPE
Ë=
HASH_HMACKeyTy≥_L⁄gKey
))

	)

153 
	#IS_HASH_VALIDBITSNUMBER
(
VALIDBITS
Ë((VALIDBITSË<0x1F)

	)

162 
	#HASH_IT_DINI
 
HASH_IMR_DINIM


	)

163 
	#HASH_IT_DCI
 
HASH_IMR_DCIM


	)

165 
	#IS_HASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFFCË=0x00000000Ë&& ((ITË!0x00000000))

	)

166 
	#IS_HASH_GET_IT
(
IT
Ë(((ITË=
HASH_IT_DINI
Ë|| ((ITË=
HASH_IT_DCI
))

	)

175 
	#HASH_FLAG_DINIS
 
HASH_SR_DINIS


	)

176 
	#HASH_FLAG_DCIS
 
HASH_SR_DCIS


	)

177 
	#HASH_FLAG_DMAS
 
HASH_SR_DMAS


	)

178 
	#HASH_FLAG_BUSY
 
HASH_SR_BUSY


	)

179 
	#HASH_FLAG_DINNE
 
HASH_CR_DINNE


	)

181 
	#IS_HASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
HASH_FLAG_DINIS
) || \

182 ((
FLAG
Ë=
HASH_FLAG_DCIS
) || \

183 ((
FLAG
Ë=
HASH_FLAG_DMAS
) || \

184 ((
FLAG
Ë=
HASH_FLAG_BUSY
) || \

185 ((
FLAG
Ë=
HASH_FLAG_DINNE
))

	)

187 
	#IS_HASH_CLEAR_FLAG
(
FLAG
)(((FLAGË=
HASH_FLAG_DINIS
) || \

188 ((
FLAG
Ë=
HASH_FLAG_DCIS
))

	)

202 
HASH_DeInô
();

205 
HASH_Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
);

206 
HASH_Såu˘Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
);

207 
HASH_Re£t
();

210 
HASH_D©aIn
(
uöt32_t
 
D©a
);

211 
uöt8_t
 
HASH_GëInFIFOW‹dsNbr
();

212 
HASH_SëLa°W‹dVÆidBôsNbr
(
uöt16_t
 
VÆidNumbî
);

213 
HASH_SèπDige°
();

214 
HASH_AutoSèπDige°
(
Fun˘i⁄ÆSèã
 
NewSèã
);

215 
HASH_GëDige°
(
HASH_MsgDige°
* 
HASH_MesßgeDige°
);

218 
HASH_SaveC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtSave
);

219 
HASH_Re°‹eC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtRe°‹e
);

222 
HASH_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

225 
HASH_ITC⁄fig
(
uöt32_t
 
HASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

226 
FœgSètus
 
HASH_GëFœgSètus
(
uöt32_t
 
HASH_FLAG
);

227 
HASH_CÀ¨Fœg
(
uöt32_t
 
HASH_FLAG
);

228 
ITSètus
 
HASH_GëITSètus
(
uöt32_t
 
HASH_IT
);

229 
HASH_CÀ¨ITPídögBô
(
uöt32_t
 
HASH_IT
);

232 
Eº‹Sètus
 
HASH_SHA1
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[20]);

233 
Eº‹Sètus
 
HMAC_SHA1
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
,

234 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
,

235 
uöt8_t
 
Ouçut
[20]);

238 
Eº‹Sètus
 
HASH_MD5
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[16]);

239 
Eº‹Sètus
 
HMAC_MD5
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
,

240 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
,

241 
uöt8_t
 
Ouçut
[16]);

243 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_i2c.h

30 #i‚de‡
__STM32F4xx_I2C_H


31 
	#__STM32F4xx_I2C_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
I2C_ClockS≥ed
;

59 
uöt16_t
 
I2C_Mode
;

62 
uöt16_t
 
I2C_DutyCy˛e
;

65 
uöt16_t
 
I2C_OwnAddªss1
;

68 
uöt16_t
 
I2C_Ack
;

71 
uöt16_t
 
I2C_AcknowÀdgedAddªss
;

73 }
	tI2C_InôTy≥Def
;

82 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2C1
) || \

83 ((
PERIPH
Ë=
I2C2
) || \

84 ((
PERIPH
Ë=
I2C3
))

	)

90 
	#IS_I2C_DIGITAL_FILTER
(
FILTER
Ë((FILTERË<0x0000000F)

	)

100 
	#I2C_Mode_I2C
 ((
uöt16_t
)0x0000)

	)

101 
	#I2C_Mode_SMBusDevi˚
 ((
uöt16_t
)0x0002)

	)

102 
	#I2C_Mode_SMBusHo°
 ((
uöt16_t
)0x000A)

	)

103 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
) || \

104 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

105 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

	)

114 
	#I2C_DutyCy˛e_16_9
 ((
uöt16_t
)0x4000Ë

	)

115 
	#I2C_DutyCy˛e_2
 ((
uöt16_t
)0xBFFFË

	)

116 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DutyCy˛e_16_9
) || \

117 ((
CYCLE
Ë=
I2C_DutyCy˛e_2
))

	)

126 
	#I2C_Ack_E«bÀ
 ((
uöt16_t
)0x0400)

	)

127 
	#I2C_Ack_DißbÀ
 ((
uöt16_t
)0x0000)

	)

128 
	#IS_I2C_ACK_STATE
(
STATE
Ë(((STATEË=
I2C_Ack_E«bÀ
) || \

129 ((
STATE
Ë=
I2C_Ack_DißbÀ
))

	)

138 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt8_t
)0x00)

	)

139 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt8_t
)0x01)

	)

140 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
) || \

141 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

	)

150 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt16_t
)0x4000)

	)

151 
	#I2C_AcknowÀdgedAddªss_10bô
 ((
uöt16_t
)0xC000)

	)

152 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
) || \

153 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

	)

162 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

163 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

164 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

165 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

166 
	#I2C_Regi°î_DR
 ((
uöt8_t
)0x10)

	)

167 
	#I2C_Regi°î_SR1
 ((
uöt8_t
)0x14)

	)

168 
	#I2C_Regi°î_SR2
 ((
uöt8_t
)0x18)

	)

169 
	#I2C_Regi°î_CCR
 ((
uöt8_t
)0x1C)

	)

170 
	#I2C_Regi°î_TRISE
 ((
uöt8_t
)0x20)

	)

171 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
) || \

172 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

173 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

174 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

175 ((
REGISTER
Ë=
I2C_Regi°î_DR
) || \

176 ((
REGISTER
Ë=
I2C_Regi°î_SR1
) || \

177 ((
REGISTER
Ë=
I2C_Regi°î_SR2
) || \

178 ((
REGISTER
Ë=
I2C_Regi°î_CCR
) || \

179 ((
REGISTER
Ë=
I2C_Regi°î_TRISE
))

	)

188 
	#I2C_NACKPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

189 
	#I2C_NACKPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

190 
	#IS_I2C_NACK_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_NACKPosôi⁄_Next
) || \

191 ((
POSITION
Ë=
I2C_NACKPosôi⁄_Cuºít
))

	)

200 
	#I2C_SMBusAÀπ_Low
 ((
uöt16_t
)0x2000)

	)

201 
	#I2C_SMBusAÀπ_High
 ((
uöt16_t
)0xDFFF)

	)

202 
	#IS_I2C_SMBUS_ALERT
(
ALERT
Ë(((ALERTË=
I2C_SMBusAÀπ_Low
) || \

203 ((
ALERT
Ë=
I2C_SMBusAÀπ_High
))

	)

212 
	#I2C_PECPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

213 
	#I2C_PECPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

214 
	#IS_I2C_PEC_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_PECPosôi⁄_Next
) || \

215 ((
POSITION
Ë=
I2C_PECPosôi⁄_Cuºít
))

	)

224 
	#I2C_IT_BUF
 ((
uöt16_t
)0x0400)

	)

225 
	#I2C_IT_EVT
 ((
uöt16_t
)0x0200)

	)

226 
	#I2C_IT_ERR
 ((
uöt16_t
)0x0100)

	)

227 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF8FFË=0x00Ë&& ((ITË!0x00))

	)

236 
	#I2C_IT_SMBALERT
 ((
uöt32_t
)0x01008000)

	)

237 
	#I2C_IT_TIMEOUT
 ((
uöt32_t
)0x01004000)

	)

238 
	#I2C_IT_PECERR
 ((
uöt32_t
)0x01001000)

	)

239 
	#I2C_IT_OVR
 ((
uöt32_t
)0x01000800)

	)

240 
	#I2C_IT_AF
 ((
uöt32_t
)0x01000400)

	)

241 
	#I2C_IT_ARLO
 ((
uöt32_t
)0x01000200)

	)

242 
	#I2C_IT_BERR
 ((
uöt32_t
)0x01000100)

	)

243 
	#I2C_IT_TXE
 ((
uöt32_t
)0x06000080)

	)

244 
	#I2C_IT_RXNE
 ((
uöt32_t
)0x06000040)

	)

245 
	#I2C_IT_STOPF
 ((
uöt32_t
)0x02000010)

	)

246 
	#I2C_IT_ADD10
 ((
uöt32_t
)0x02000008)

	)

247 
	#I2C_IT_BTF
 ((
uöt32_t
)0x02000004)

	)

248 
	#I2C_IT_ADDR
 ((
uöt32_t
)0x02000002)

	)

249 
	#I2C_IT_SB
 ((
uöt32_t
)0x02000001)

	)

251 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt16_t
)0x20FFË=0x00Ë&& ((ITË!(uöt16_t)0x00))

	)

253 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_SMBALERT
Ë|| ((ITË=
I2C_IT_TIMEOUT
) || \

254 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_OVR
) || \

255 ((
IT
Ë=
I2C_IT_AF
Ë|| ((ITË=
I2C_IT_ARLO
) || \

256 ((
IT
Ë=
I2C_IT_BERR
Ë|| ((ITË=
I2C_IT_TXE
) || \

257 ((
IT
Ë=
I2C_IT_RXNE
Ë|| ((ITË=
I2C_IT_STOPF
) || \

258 ((
IT
Ë=
I2C_IT_ADD10
Ë|| ((ITË=
I2C_IT_BTF
) || \

259 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_SB
))

	)

272 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00800000)

	)

273 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00400000)

	)

274 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00200000)

	)

275 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100000)

	)

276 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00040000)

	)

277 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00020000)

	)

278 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00010000)

	)

284 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x10008000)

	)

285 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x10004000)

	)

286 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x10001000)

	)

287 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x10000800)

	)

288 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x10000400)

	)

289 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x10000200)

	)

290 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x10000100)

	)

291 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x10000080)

	)

292 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x10000040)

	)

293 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x10000010)

	)

294 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x10000008)

	)

295 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x10000004)

	)

296 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x10000002)

	)

297 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x10000001)

	)

299 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0x20FFË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

301 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_DUALF
Ë|| ((FLAGË=
I2C_FLAG_SMBHOST
) || \

302 ((
FLAG
Ë=
I2C_FLAG_SMBDEFAULT
Ë|| ((FLAGË=
I2C_FLAG_GENCALL
) || \

303 ((
FLAG
Ë=
I2C_FLAG_TRA
Ë|| ((FLAGË=
I2C_FLAG_BUSY
) || \

304 ((
FLAG
Ë=
I2C_FLAG_MSL
Ë|| ((FLAGË=
I2C_FLAG_SMBALERT
) || \

305 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

306 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_AF
) || \

307 ((
FLAG
Ë=
I2C_FLAG_ARLO
Ë|| ((FLAGË=
I2C_FLAG_BERR
) || \

308 ((
FLAG
Ë=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_RXNE
) || \

309 ((
FLAG
Ë=
I2C_FLAG_STOPF
Ë|| ((FLAGË=
I2C_FLAG_ADD10
) || \

310 ((
FLAG
Ë=
I2C_FLAG_BTF
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

311 ((
FLAG
Ë=
I2C_FLAG_SB
))

	)

335 
	#I2C_EVENT_MASTER_MODE_SELECT
 ((
uöt32_t
)0x00030001Ë

	)

363 
	#I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
 ((
uöt32_t
)0x00070082Ë

	)

364 
	#I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
 ((
uöt32_t
)0x00030002Ë

	)

366 
	#I2C_EVENT_MASTER_MODE_ADDRESS10
 ((
uöt32_t
)0x00030008Ë

	)

399 
	#I2C_EVENT_MASTER_BYTE_RECEIVED
 ((
uöt32_t
)0x00030040Ë

	)

403 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00070080Ë

	)

405 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00070084Ë

	)

442 
	#I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00020002Ë

	)

443 
	#I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00060082Ë

	)

446 
	#I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00820000Ë

	)

447 
	#I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00860080Ë

	)

450 
	#I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
 ((
uöt32_t
)0x00120000Ë

	)

481 
	#I2C_EVENT_SLAVE_BYTE_RECEIVED
 ((
uöt32_t
)0x00020040Ë

	)

483 
	#I2C_EVENT_SLAVE_STOP_DETECTED
 ((
uöt32_t
)0x00000010Ë

	)

487 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00060084Ë

	)

488 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00060080Ë

	)

490 
	#I2C_EVENT_SLAVE_ACK_FAILURE
 ((
uöt32_t
)0x00000400Ë

	)

498 
	#IS_I2C_EVENT
(
EVENT
Ë(((EVENTË=
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
) || \

499 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
) || \

500 ((
EVENT
Ë=
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
) || \

501 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
) || \

502 ((
EVENT
Ë=
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
) || \

503 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_RECEIVED
) || \

504 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_DUALF
)) || \

505 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_GENCALL
)) || \

506 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
) || \

507 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_DUALF
)) || \

508 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_GENCALL
)) || \

509 ((
EVENT
Ë=
I2C_EVENT_SLAVE_STOP_DETECTED
) || \

510 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_SELECT
) || \

511 ((
EVENT
Ë=
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
) || \

512 ((
EVENT
Ë=
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
) || \

513 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_RECEIVED
) || \

514 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTED
) || \

515 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTING
) || \

516 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_ADDRESS10
) || \

517 ((
EVENT
Ë=
I2C_EVENT_SLAVE_ACK_FAILURE
))

	)

526 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x3FF)

	)

535 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË>0x1Ë&& ((SPEEDË<400000))

	)

548 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

551 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

552 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

553 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

554 
I2C_DigôÆFûãrC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DigôÆFûãr
);

555 
I2C_A«logFûãrCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

556 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

557 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

558 
I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
);

559 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

560 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
);

561 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

562 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

563 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

564 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

565 
I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
);

566 
I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
);

567 
I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
);

568 
I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

571 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

572 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

575 
I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

576 
I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
);

577 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

578 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

581 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

582 
I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

585 
uöt16_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

586 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

678 
Eº‹Sètus
 
I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
);

684 
uöt32_t
 
I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
);

690 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

693 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

694 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

695 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

697 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_iwdg.h

30 #i‚de‡
__STM32F4xx_IWDG_H


31 
	#__STM32F4xx_IWDG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

58 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

59 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

60 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
) || \

61 ((
ACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

	)

69 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

70 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

71 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

72 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

73 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

74 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

75 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

76 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
) || \

77 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

78 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

79 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

80 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

81 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

82 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

	)

90 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

91 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

92 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
))

	)

93 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

106 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

107 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

108 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

109 
IWDG_RñﬂdCou¡î
();

112 
IWDG_E«bÀ
();

115 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

117 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_ltdc.h

30 #i‚de‡
__STM32F4xx_LTDC_H


31 
	#__STM32F4xx_LTDC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
LTDC_HSPﬁ¨ôy
;

59 
uöt32_t
 
LTDC_VSPﬁ¨ôy
;

62 
uöt32_t
 
LTDC_DEPﬁ¨ôy
;

65 
uöt32_t
 
LTDC_PCPﬁ¨ôy
;

68 
uöt32_t
 
LTDC_H‹iz⁄èlSync
;

71 
uöt32_t
 
LTDC_VîtiˇlSync
;

74 
uöt32_t
 
LTDC_AccumuœãdHBP
;

77 
uöt32_t
 
LTDC_AccumuœãdVBP
;

80 
uöt32_t
 
LTDC_AccumuœãdA˘iveW
;

83 
uöt32_t
 
LTDC_AccumuœãdA˘iveH
;

86 
uöt32_t
 
LTDC_TŸÆWidth
;

89 
uöt32_t
 
LTDC_TŸÆHeigh
;

92 
uöt32_t
 
LTDC_BackgroundRedVÆue
;

95 
uöt32_t
 
LTDC_BackgroundGªíVÆue
;

98 
uöt32_t
 
LTDC_BackgroundBlueVÆue
;

100 } 
	tLTDC_InôTy≥Def
;

108 
uöt32_t
 
LTDC_H‹iz⁄èlSèπ
;

111 
uöt32_t
 
LTDC_H‹iz⁄èlSt›
;

114 
uöt32_t
 
LTDC_VîtiˇlSèπ
;

117 
uöt32_t
 
LTDC_VîtiˇlSt›
;

120 
uöt32_t
 
LTDC_PixñF‹m©
;

123 
uöt32_t
 
LTDC_C⁄°™tAÕha
;

126 
uöt32_t
 
LTDC_DeÁu…Cﬁ‹Blue
;

129 
uöt32_t
 
LTDC_DeÁu…Cﬁ‹Gªí
;

132 
uöt32_t
 
LTDC_DeÁu…Cﬁ‹Red
;

135 
uöt32_t
 
LTDC_DeÁu…Cﬁ‹AÕha
;

138 
uöt32_t
 
LTDC_BÀndögFa˘‹_1
;

141 
uöt32_t
 
LTDC_BÀndögFa˘‹_2
;

144 
uöt32_t
 
LTDC_CFBSèπAdªss
;

146 
uöt32_t
 
LTDC_CFBLöeLígth
;

149 
uöt32_t
 
LTDC_CFBPôch
;

152 
uöt32_t
 
LTDC_CFBLöeNumbî
;

154 } 
	tLTDC_Layî_InôTy≥Def
;

162 
uöt32_t
 
LTDC_POSX
;

163 
uöt32_t
 
LTDC_POSY
;

164 } 
	tLTDC_PosTy≥Def
;

168 
uöt32_t
 
LTDC_BlueWidth
;

169 
uöt32_t
 
LTDC_GªíWidth
;

170 
uöt32_t
 
LTDC_RedWidth
;

171 } 
	tLTDC_RGBTy≥Def
;

175 
uöt32_t
 
LTDC_Cﬁ‹KeyBlue
;

178 
uöt32_t
 
LTDC_Cﬁ‹KeyGªí
;

181 
uöt32_t
 
LTDC_Cﬁ‹KeyRed
;

183 } 
	tLTDC_Cﬁ‹Keyög_InôTy≥Def
;

187 
uöt32_t
 
LTDC_CLUTAdªss
;

190 
uöt32_t
 
LTDC_BlueVÆue
;

193 
uöt32_t
 
LTDC_GªíVÆue
;

196 
uöt32_t
 
LTDC_RedVÆue
;

198 } 
	tLTDC_CLUT_InôTy≥Def
;

210 
	#LTDC_H‹iz⁄èlSYNC
 ((
uöt32_t
)0x00000FFF)

	)

211 
	#LTDC_VîtiˇlSYNC
 ((
uöt32_t
)0x000007FF)

	)

213 
	#IS_LTDC_HSYNC
(
HSYNC
Ë((HSYNCË<
LTDC_H‹iz⁄èlSYNC
)

	)

214 
	#IS_LTDC_VSYNC
(
VSYNC
Ë((VSYNCË<
LTDC_VîtiˇlSYNC
)

	)

215 
	#IS_LTDC_AHBP
(
AHBP
Ë((AHBPË<
LTDC_H‹iz⁄èlSYNC
)

	)

216 
	#IS_LTDC_AVBP
(
AVBP
Ë((AVBPË<
LTDC_VîtiˇlSYNC
)

	)

217 
	#IS_LTDC_AAW
(
AAW
Ë((AAWË<
LTDC_H‹iz⁄èlSYNC
)

	)

218 
	#IS_LTDC_AAH
(
AAH
Ë((AAHË<
LTDC_VîtiˇlSYNC
)

	)

219 
	#IS_LTDC_TOTALW
(
TOTALW
Ë((TOTALWË<
LTDC_H‹iz⁄èlSYNC
)

	)

220 
	#IS_LTDC_TOTALH
(
TOTALH
Ë((TOTALHË<
LTDC_VîtiˇlSYNC
)

	)

229 
	#LTDC_HSPﬁ¨ôy_AL
 ((
uöt32_t
)0x00000000Ë

	)

230 
	#LTDC_HSPﬁ¨ôy_AH
 
LTDC_GCR_HSPOL


	)

232 
	#IS_LTDC_HSPOL
(
HSPOL
Ë(((HSPOLË=
LTDC_HSPﬁ¨ôy_AL
) || \

233 ((
HSPOL
Ë=
LTDC_HSPﬁ¨ôy_AH
))

	)

242 
	#LTDC_VSPﬁ¨ôy_AL
 ((
uöt32_t
)0x00000000Ë

	)

243 
	#LTDC_VSPﬁ¨ôy_AH
 
LTDC_GCR_VSPOL


	)

245 
	#IS_LTDC_VSPOL
(
VSPOL
Ë(((VSPOLË=
LTDC_VSPﬁ¨ôy_AL
) || \

246 ((
VSPOL
Ë=
LTDC_VSPﬁ¨ôy_AH
))

	)

255 
	#LTDC_DEPﬁ¨ôy_AL
 ((
uöt32_t
)0x00000000Ë

	)

256 
	#LTDC_DEPﬁ¨ôy_AH
 
LTDC_GCR_DEPOL


	)

258 
	#IS_LTDC_DEPOL
(
DEPOL
Ë(((DEPOLË=
LTDC_VSPﬁ¨ôy_AL
) || \

259 ((
DEPOL
Ë=
LTDC_DEPﬁ¨ôy_AH
))

	)

268 
	#LTDC_PCPﬁ¨ôy_IPC
 ((
uöt32_t
)0x00000000Ë

	)

269 
	#LTDC_PCPﬁ¨ôy_IIPC
 
LTDC_GCR_PCPOL


	)

271 
	#IS_LTDC_PCPOL
(
PCPOL
Ë(((PCPOLË=
LTDC_PCPﬁ¨ôy_IPC
) || \

272 ((
PCPOL
Ë=
LTDC_PCPﬁ¨ôy_IIPC
))

	)

281 
	#LTDC_IMRñﬂd
 
LTDC_SRCR_IMR


	)

282 
	#LTDC_VBRñﬂd
 
LTDC_SRCR_VBR


	)

284 
	#IS_LTDC_RELOAD
(
RELOAD
Ë(((RELOADË=
LTDC_IMRñﬂd
) || \

285 ((
RELOAD
Ë=
LTDC_VBRñﬂd
))

	)

295 
	#LTDC_Back_Cﬁ‹
 ((
uöt32_t
)0x000000FF)

	)

297 
	#IS_LTDC_BackBlueVÆue
(
BBLUE
Ë((BBLUEË<
LTDC_Back_Cﬁ‹
)

	)

298 
	#IS_LTDC_BackGªíVÆue
(
BGREEN
Ë((BGREENË<
LTDC_Back_Cﬁ‹
)

	)

299 
	#IS_LTDC_BackRedVÆue
(
BRED
Ë((BREDË<
LTDC_Back_Cﬁ‹
)

	)

309 
	#LTDC_POS_CY
 
LTDC_CPSR_CYPOS


	)

310 
	#LTDC_POS_CX
 
LTDC_CPSR_CXPOS


	)

312 
	#IS_LTDC_GET_POS
(
POS
Ë(((POSË<
LTDC_POS_CY
))

	)

323 
	#IS_LTDC_LIPOS
(
LIPOS
Ë((LIPOSË<0x7FF)

	)

333 
	#LTDC_CD_VDES
 
LTDC_CDSR_VDES


	)

334 
	#LTDC_CD_HDES
 
LTDC_CDSR_HDES


	)

335 
	#LTDC_CD_VSYNC
 
LTDC_CDSR_VSYNCS


	)

336 
	#LTDC_CD_HSYNC
 
LTDC_CDSR_HSYNCS


	)

339 
	#IS_LTDC_GET_CD
(
CD
Ë(((CDË=
LTDC_CD_VDES
Ë|| ((CDË=
LTDC_CD_HDES
) || \

340 ((
CD
Ë=
LTDC_CD_VSYNC
Ë|| ((CDË=
LTDC_CD_HSYNC
))

	)

351 
	#LTDC_IT_LI
 
LTDC_IER_LIE


	)

352 
	#LTDC_IT_FU
 
LTDC_IER_FUIE


	)

353 
	#LTDC_IT_TERR
 
LTDC_IER_TERRIE


	)

354 
	#LTDC_IT_RR
 
LTDC_IER_RRIE


	)

356 
	#IS_LTDC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFF0Ë=0x00Ë&& ((ITË!0x00))

	)

366 
	#LTDC_FLAG_LI
 
LTDC_ISR_LIF


	)

367 
	#LTDC_FLAG_FU
 
LTDC_ISR_FUIF


	)

368 
	#LTDC_FLAG_TERR
 
LTDC_ISR_TERRIF


	)

369 
	#LTDC_FLAG_RR
 
LTDC_ISR_RRIF


	)

372 
	#IS_LTDC_FLAG
(
FLAG
Ë(((FLAGË=
LTDC_FLAG_LI
Ë|| ((FLAGË=
LTDC_FLAG_FU
) || \

373 ((
FLAG
Ë=
LTDC_FLAG_TERR
Ë|| ((FLAGË=
LTDC_FLAG_RR
))

	)

382 
	#LTDC_Pixñf‹m©_ARGB8888
 ((
uöt32_t
)0x00000000)

	)

383 
	#LTDC_Pixñf‹m©_RGB888
 ((
uöt32_t
)0x00000001)

	)

384 
	#LTDC_Pixñf‹m©_RGB565
 ((
uöt32_t
)0x00000002)

	)

385 
	#LTDC_Pixñf‹m©_ARGB1555
 ((
uöt32_t
)0x00000003)

	)

386 
	#LTDC_Pixñf‹m©_ARGB4444
 ((
uöt32_t
)0x00000004)

	)

387 
	#LTDC_Pixñf‹m©_L8
 ((
uöt32_t
)0x00000005)

	)

388 
	#LTDC_Pixñf‹m©_AL44
 ((
uöt32_t
)0x00000006)

	)

389 
	#LTDC_Pixñf‹m©_AL88
 ((
uöt32_t
)0x00000007)

	)

391 
	#IS_LTDC_Pixñf‹m©
(
Pixñf‹m©
Ë(((Pixñf‹m©Ë=
LTDC_Pixñf‹m©_ARGB8888
Ë|| ((Pixñf‹m©Ë=
LTDC_Pixñf‹m©_RGB888
) || \

392 ((
Pixñf‹m©
Ë=
LTDC_Pixñf‹m©_RGB565
Ë|| ((Pixñf‹m©Ë=
LTDC_Pixñf‹m©_ARGB1555
) || \

393 ((
Pixñf‹m©
Ë=
LTDC_Pixñf‹m©_ARGB4444
Ë|| ((Pixñf‹m©Ë=
LTDC_Pixñf‹m©_L8
) || \

394 ((
Pixñf‹m©
Ë=
LTDC_Pixñf‹m©_AL44
Ë|| ((Pixñf‹m©Ë=
LTDC_Pixñf‹m©_AL88
))

	)

404 
	#LTDC_BÀndögFa˘‹1_CA
 ((
uöt32_t
)0x00000400)

	)

405 
	#LTDC_BÀndögFa˘‹1_PAxCA
 ((
uöt32_t
)0x00000600)

	)

407 
	#IS_LTDC_BÀndögFa˘‹1
(
BÀndögFa˘‹1
Ë(((BÀndögFa˘‹1Ë=
LTDC_BÀndögFa˘‹1_CA
Ë|| ((BÀndögFa˘‹1Ë=
LTDC_BÀndögFa˘‹1_PAxCA
))

	)

417 
	#LTDC_BÀndögFa˘‹2_CA
 ((
uöt32_t
)0x00000005)

	)

418 
	#LTDC_BÀndögFa˘‹2_PAxCA
 ((
uöt32_t
)0x00000007)

	)

420 
	#IS_LTDC_BÀndögFa˘‹2
(
BÀndögFa˘‹2
Ë(((BÀndögFa˘‹2Ë=
LTDC_BÀndögFa˘‹2_CA
Ë|| ((BÀndögFa˘‹2Ë=
LTDC_BÀndögFa˘‹2_PAxCA
))

	)

432 
	#LTDC_STOPPosôi⁄
 ((
uöt32_t
)0x0000FFFF)

	)

433 
	#LTDC_STARTPosôi⁄
 ((
uöt32_t
)0x00000FFF)

	)

435 
	#LTDC_DeÁu…Cﬁ‹C⁄fig
 ((
uöt32_t
)0x000000FF)

	)

436 
	#LTDC_Cﬁ‹FømeBuf„r
 ((
uöt32_t
)0x00001FFF)

	)

437 
	#LTDC_LöeNumbî
 ((
uöt32_t
)0x000007FF)

	)

439 
	#IS_LTDC_HCONFIGST
(
HCONFIGST
Ë((HCONFIGSTË<
LTDC_STARTPosôi⁄
)

	)

440 
	#IS_LTDC_HCONFIGSP
(
HCONFIGSP
Ë((HCONFIGSPË<
LTDC_STOPPosôi⁄
)

	)

441 
	#IS_LTDC_VCONFIGST
(
VCONFIGST
Ë((VCONFIGSTË<
LTDC_STARTPosôi⁄
)

	)

442 
	#IS_LTDC_VCONFIGSP
(
VCONFIGSP
Ë((VCONFIGSPË<
LTDC_STOPPosôi⁄
)

	)

444 
	#IS_LTDC_DEFAULTCOLOR
(
DEFAULTCOLOR
Ë((DEFAULTCOLORË<
LTDC_DeÁu…Cﬁ‹C⁄fig
)

	)

446 
	#IS_LTDC_CFBP
(
CFBP
Ë((CFBPË<
LTDC_Cﬁ‹FømeBuf„r
)

	)

447 
	#IS_LTDC_CFBLL
(
CFBLL
Ë((CFBLLË<
LTDC_Cﬁ‹FømeBuf„r
)

	)

449 
	#IS_LTDC_CFBLNBR
(
CFBLNBR
Ë((CFBLNBRË<
LTDC_LöeNumbî
)

	)

461 
	#LTDC_cﬁ‹keyögC⁄fig
 ((
uöt32_t
)0x000000FF)

	)

463 
	#IS_LTDC_CKEYING
(
CKEYING
Ë((CKEYINGË<
LTDC_cﬁ‹keyögC⁄fig
)

	)

474 
	#LTDC_CLUTWR
 ((
uöt32_t
)0x000000FF)

	)

476 
	#IS_LTDC_CLUTWR
(
CLUTWR
Ë((CLUTWRË<
LTDC_CLUTWR
)

	)

482 
LTDC_DeInô
();

485 
LTDC_Inô
(
LTDC_InôTy≥Def
* 
LTDC_InôSåu˘
);

486 
LTDC_Såu˘Inô
(
LTDC_InôTy≥Def
* 
LTDC_InôSåu˘
);

487 
LTDC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

488 
LTDC_DôhîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

489 
LTDC_RGBTy≥Def
 
LTDC_GëRGBWidth
();

490 
LTDC_RGBSåu˘Inô
(
LTDC_RGBTy≥Def
* 
LTDC_RGB_InôSåu˘
);

491 
LTDC_LIPC⁄fig
(
uöt32_t
 
LTDC_LIPosôi⁄C⁄fig
);

492 
LTDC_RñﬂdC⁄fig
(
uöt32_t
 
LTDC_Rñﬂd
);

493 
LTDC_LayîInô
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
LTDC_Layî_InôTy≥Def
* 
LTDC_Layî_InôSåu˘
);

494 
LTDC_LayîSåu˘Inô
(
LTDC_Layî_InôTy≥Def
 * 
LTDC_Layî_InôSåu˘
);

495 
LTDC_LayîCmd
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

496 
LTDC_PosTy≥Def
 
LTDC_GëPosSètus
();

497 
LTDC_PosSåu˘Inô
(
LTDC_PosTy≥Def
* 
LTDC_Pos_InôSåu˘
);

498 
FœgSètus
 
LTDC_GëCDSètus
(
uöt32_t
 
LTDC_CD
);

499 
LTDC_Cﬁ‹KeyögC⁄fig
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
LTDC_Cﬁ‹Keyög_InôTy≥Def
* 
LTDC_cﬁ‹keyög_InôSåu˘
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

500 
LTDC_Cﬁ‹KeyögSåu˘Inô
(
LTDC_Cﬁ‹Keyög_InôTy≥Def
* 
LTDC_cﬁ‹keyög_InôSåu˘
);

501 
LTDC_CLUTCmd
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

502 
LTDC_CLUTInô
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
LTDC_CLUT_InôTy≥Def
* 
LTDC_CLUT_InôSåu˘
);

503 
LTDC_CLUTSåu˘Inô
(
LTDC_CLUT_InôTy≥Def
* 
LTDC_CLUT_InôSåu˘
);

504 
LTDC_LayîPosôi⁄
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt16_t
 
Off£tX
, uöt16_à
Off£tY
);

505 
LTDC_LayîAÕha
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt8_t
 
C⁄°™tAÕha
);

506 
LTDC_LayîAddªss
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt32_t
 
Addªss
);

507 
LTDC_LayîSize
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt32_t
 
Width
, uöt32_à
Height
);

508 
LTDC_LayîPixñF‹m©
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt32_t
 
PixñF‹m©
);

511 
LTDC_ITC⁄fig
(
uöt32_t
 
LTDC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

512 
FœgSètus
 
LTDC_GëFœgSètus
(
uöt32_t
 
LTDC_FLAG
);

513 
LTDC_CÀ¨Fœg
(
uöt32_t
 
LTDC_FLAG
);

514 
ITSètus
 
LTDC_GëITSètus
(
uöt32_t
 
LTDC_IT
);

515 
LTDC_CÀ¨ITPídögBô
(
uöt32_t
 
LTDC_IT
);

517 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_pwr.h

30 #i‚de‡
__STM32F4xx_PWR_H


31 
	#__STM32F4xx_PWR_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

58 
	#PWR_PVDLevñ_0
 
PWR_CR_PLS_LEV0


	)

59 
	#PWR_PVDLevñ_1
 
PWR_CR_PLS_LEV1


	)

60 
	#PWR_PVDLevñ_2
 
PWR_CR_PLS_LEV2


	)

61 
	#PWR_PVDLevñ_3
 
PWR_CR_PLS_LEV3


	)

62 
	#PWR_PVDLevñ_4
 
PWR_CR_PLS_LEV4


	)

63 
	#PWR_PVDLevñ_5
 
PWR_CR_PLS_LEV5


	)

64 
	#PWR_PVDLevñ_6
 
PWR_CR_PLS_LEV6


	)

65 
	#PWR_PVDLevñ_7
 
PWR_CR_PLS_LEV7


	)

67 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_0
Ë|| ((LEVELË=
PWR_PVDLevñ_1
)|| \

68 ((
LEVEL
Ë=
PWR_PVDLevñ_2
Ë|| ((LEVELË=
PWR_PVDLevñ_3
)|| \

69 ((
LEVEL
Ë=
PWR_PVDLevñ_4
Ë|| ((LEVELË=
PWR_PVDLevñ_5
)|| \

70 ((
LEVEL
Ë=
PWR_PVDLevñ_6
Ë|| ((LEVELË=
PWR_PVDLevñ_7
))

	)

79 
	#PWR_MaöReguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

80 
	#PWR_LowPowîReguœt‹_ON
 
PWR_CR_LPDS


	)

83 
	#PWR_Reguœt‹_ON
 
PWR_MaöReguœt‹_ON


	)

84 
	#PWR_Reguœt‹_LowPowî
 
PWR_LowPowîReguœt‹_ON


	)

86 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_MaöReguœt‹_ON
) || \

87 ((
REGULATOR
Ë=
PWR_LowPowîReguœt‹_ON
))

	)

96 
	#PWR_MaöReguœt‹_UndîDrive_ON
 
PWR_CR_MRUDS


	)

97 
	#PWR_LowPowîReguœt‹_UndîDrive_ON
 ((
uöt32_t
)(
PWR_CR_LPDS
 | 
PWR_CR_LPUDS
))

	)

99 
	#IS_PWR_REGULATOR_UNDERDRIVE
(
REGULATOR
Ë(((REGULATORË=
PWR_MaöReguœt‹_UndîDrive_ON
) || \

100 ((
REGULATOR
Ë=
PWR_LowPowîReguœt‹_UndîDrive_ON
))

	)

109 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

110 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

111 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

119 
	#PWR_Reguœt‹_Vﬁège_SˇÀ1
 ((
uöt32_t
)0x0000C000)

	)

120 
	#PWR_Reguœt‹_Vﬁège_SˇÀ2
 ((
uöt32_t
)0x00008000)

	)

121 
	#PWR_Reguœt‹_Vﬁège_SˇÀ3
 ((
uöt32_t
)0x00004000)

	)

122 
	#IS_PWR_REGULATOR_VOLTAGE
(
VOLTAGE
Ë(((VOLTAGEË=
PWR_Reguœt‹_Vﬁège_SˇÀ1
) || \

123 ((
VOLTAGE
Ë=
PWR_Reguœt‹_Vﬁège_SˇÀ2
) || \

124 ((
VOLTAGE
Ë=
PWR_Reguœt‹_Vﬁège_SˇÀ3
))

	)

132 
	#PWR_FLAG_WU
 
PWR_CSR_WUF


	)

133 
	#PWR_FLAG_SB
 
PWR_CSR_SBF


	)

134 
	#PWR_FLAG_PVDO
 
PWR_CSR_PVDO


	)

135 
	#PWR_FLAG_BRR
 
PWR_CSR_BRR


	)

136 
	#PWR_FLAG_VOSRDY
 
PWR_CSR_VOSRDY


	)

137 
	#PWR_FLAG_ODRDY
 
PWR_CSR_ODRDY


	)

138 
	#PWR_FLAG_ODSWRDY
 
PWR_CSR_ODSWRDY


	)

139 
	#PWR_FLAG_UDRDY
 
PWR_CSR_UDSWRDY


	)

142 
	#PWR_FLAG_REGRDY
 
PWR_FLAG_VOSRDY


	)

144 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
) || \

145 ((
FLAG
Ë=
PWR_FLAG_PVDO
Ë|| ((FLAGË=
PWR_FLAG_BRR
) || \

146 ((
FLAG
Ë=
PWR_FLAG_VOSRDY
Ë|| ((FLAGË=
PWR_FLAG_ODRDY
) || \

147 ((
FLAG
Ë=
PWR_FLAG_ODSWRDY
Ë|| ((FLAGË=
PWR_FLAG_UDRDY
))

	)

150 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
) || \

151 ((
FLAG
Ë=
PWR_FLAG_UDRDY
))

	)

165 
PWR_DeInô
();

168 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

171 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

172 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

175 
PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

178 
PWR_BackupReguœt‹Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

179 
PWR_MaöReguœt‹ModeC⁄fig
(
uöt32_t
 
PWR_Reguœt‹_Vﬁège
);

180 
PWR_OvîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

181 
PWR_OvîDriveSWCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

182 
PWR_UndîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

183 
PWR_MaöReguœt‹LowVﬁègeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

184 
PWR_LowReguœt‹LowVﬁègeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

187 
PWR_FœshPowîDownCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

190 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

191 
PWR_E¡îUndîDriveSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

192 
PWR_E¡îSTANDBYMode
();

195 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

196 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

198 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h

29 #i‚de‡
__STM32F4xx_RCC_H


30 
	#__STM32F4xx_RCC_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"°m32f4xx.h
"

50 
uöt32_t
 
SYSCLK_Fªquícy
;

51 
uöt32_t
 
HCLK_Fªquícy
;

52 
uöt32_t
 
PCLK1_Fªquícy
;

53 
uöt32_t
 
PCLK2_Fªquícy
;

54 }
	tRCC_ClocksTy≥Def
;

65 
	#RCC_HSE_OFF
 ((
uöt8_t
)0x00)

	)

66 
	#RCC_HSE_ON
 ((
uöt8_t
)0x01)

	)

67 
	#RCC_HSE_By∑ss
 ((
uöt8_t
)0x05)

	)

68 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
) || \

69 ((
HSE
Ë=
RCC_HSE_By∑ss
))

	)

77 
	#RCC_LSE_LOWPOWER_MODE
 ((
uöt8_t
)0x00)

	)

78 
	#RCC_LSE_HIGHDRIVE_MODE
 ((
uöt8_t
)0x01)

	)

79 
	#IS_RCC_LSE_MODE
(
MODE
Ë(((MODEË=
RCC_LSE_LOWPOWER_MODE
) || \

80 ((
MODE
Ë=
RCC_LSE_HIGHDRIVE_MODE
))

	)

88 
	#RCC_PLLSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

89 
	#RCC_PLLSour˚_HSE
 ((
uöt32_t
)0x00400000)

	)

90 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI
) || \

91 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE
))

	)

92 
	#IS_RCC_PLLM_VALUE
(
VALUE
Ë((VALUEË<63)

	)

93 
	#IS_RCC_PLLN_VALUE
(
VALUE
Ë((192 <(VALUE)Ë&& ((VALUEË<432))

	)

94 
	#IS_RCC_PLLP_VALUE
(
VALUE
Ë(((VALUEË=2Ë|| ((VALUEË=4Ë|| ((VALUEË=6Ë|| ((VALUEË=8))

	)

95 
	#IS_RCC_PLLQ_VALUE
(
VALUE
Ë((4 <(VALUE)Ë&& ((VALUEË<15))

	)

97 
	#IS_RCC_PLLI2SN_VALUE
(
VALUE
Ë((192 <(VALUE)Ë&& ((VALUEË<432))

	)

98 
	#IS_RCC_PLLI2SR_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<7))

	)

99 
	#IS_RCC_PLLI2SM_VALUE
(
VALUE
Ë((VALUEË<63)

	)

101 
	#IS_RCC_PLLI2SQ_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<15))

	)

102 
	#IS_RCC_PLLSAIN_VALUE
(
VALUE
Ë((192 <(VALUE)Ë&& ((VALUEË<432))

	)

103 
	#IS_RCC_PLLSAIQ_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<15))

	)

104 
	#IS_RCC_PLLSAIR_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<7))

	)

106 
	#IS_RCC_PLLSAI_DIVQ_VALUE
(
VALUE
Ë((1 <(VALUE)Ë&& ((VALUEË<32))

	)

107 
	#IS_RCC_PLLI2S_DIVQ_VALUE
(
VALUE
Ë((1 <(VALUE)Ë&& ((VALUEË<32))

	)

109 
	#RCC_PLLSAIDivR_Div2
 ((
uöt32_t
)0x00000000)

	)

110 
	#RCC_PLLSAIDivR_Div4
 ((
uöt32_t
)0x00010000)

	)

111 
	#RCC_PLLSAIDivR_Div8
 ((
uöt32_t
)0x00020000)

	)

112 
	#RCC_PLLSAIDivR_Div16
 ((
uöt32_t
)0x00030000)

	)

113 
	#IS_RCC_PLLSAI_DIVR_VALUE
(
VALUE
Ë(((VALUEË=
RCC_PLLSAIDivR_Div2
) ||\

114 ((
VALUE
Ë=
RCC_PLLSAIDivR_Div4
) ||\

115 ((
VALUE
Ë=
RCC_PLLSAIDivR_Div8
) ||\

116 ((
VALUE
Ë=
RCC_PLLSAIDivR_Div16
))

	)

125 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

126 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

127 
	#RCC_SYSCLKSour˚_PLLCLK
 ((
uöt32_t
)0x00000002)

	)

128 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
) || \

129 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

130 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

	)

138 
	#RCC_SYSCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

139 
	#RCC_SYSCLK_Div2
 ((
uöt32_t
)0x00000080)

	)

140 
	#RCC_SYSCLK_Div4
 ((
uöt32_t
)0x00000090)

	)

141 
	#RCC_SYSCLK_Div8
 ((
uöt32_t
)0x000000A0)

	)

142 
	#RCC_SYSCLK_Div16
 ((
uöt32_t
)0x000000B0)

	)

143 
	#RCC_SYSCLK_Div64
 ((
uöt32_t
)0x000000C0)

	)

144 
	#RCC_SYSCLK_Div128
 ((
uöt32_t
)0x000000D0)

	)

145 
	#RCC_SYSCLK_Div256
 ((
uöt32_t
)0x000000E0)

	)

146 
	#RCC_SYSCLK_Div512
 ((
uöt32_t
)0x000000F0)

	)

147 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
) || \

148 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

149 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

150 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

151 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

	)

159 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

160 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00001000)

	)

161 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00001400)

	)

162 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00001800)

	)

163 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00001C00)

	)

164 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
) || \

165 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

166 ((
PCLK
Ë=
RCC_HCLK_Div16
))

	)

174 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

175 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

176 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

177 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

178 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

179 
	#RCC_IT_PLLI2SRDY
 ((
uöt8_t
)0x20)

	)

180 
	#RCC_IT_PLLSAIRDY
 ((
uöt8_t
)0x40)

	)

181 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

183 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x80Ë=0x00Ë&& ((ITË!0x00))

	)

184 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
) || \

185 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

186 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
) || \

187 ((
IT
Ë=
RCC_IT_PLLSAIRDY
Ë|| ((ITË=
RCC_IT_PLLI2SRDY
))

	)

188 
	#IS_RCC_CLEAR_IT
(
IT
)((ITË!0x00)

	)

197 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

198 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

199 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x04)

	)

200 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
) || \

201 ((
LSE
Ë=
RCC_LSE_By∑ss
))

	)

209 
	#RCC_RTCCLKSour˚_LSE
 ((
uöt32_t
)0x00000100)

	)

210 
	#RCC_RTCCLKSour˚_LSI
 ((
uöt32_t
)0x00000200)

	)

211 
	#RCC_RTCCLKSour˚_HSE_Div2
 ((
uöt32_t
)0x00020300)

	)

212 
	#RCC_RTCCLKSour˚_HSE_Div3
 ((
uöt32_t
)0x00030300)

	)

213 
	#RCC_RTCCLKSour˚_HSE_Div4
 ((
uöt32_t
)0x00040300)

	)

214 
	#RCC_RTCCLKSour˚_HSE_Div5
 ((
uöt32_t
)0x00050300)

	)

215 
	#RCC_RTCCLKSour˚_HSE_Div6
 ((
uöt32_t
)0x00060300)

	)

216 
	#RCC_RTCCLKSour˚_HSE_Div7
 ((
uöt32_t
)0x00070300)

	)

217 
	#RCC_RTCCLKSour˚_HSE_Div8
 ((
uöt32_t
)0x00080300)

	)

218 
	#RCC_RTCCLKSour˚_HSE_Div9
 ((
uöt32_t
)0x00090300)

	)

219 
	#RCC_RTCCLKSour˚_HSE_Div10
 ((
uöt32_t
)0x000A0300)

	)

220 
	#RCC_RTCCLKSour˚_HSE_Div11
 ((
uöt32_t
)0x000B0300)

	)

221 
	#RCC_RTCCLKSour˚_HSE_Div12
 ((
uöt32_t
)0x000C0300)

	)

222 
	#RCC_RTCCLKSour˚_HSE_Div13
 ((
uöt32_t
)0x000D0300)

	)

223 
	#RCC_RTCCLKSour˚_HSE_Div14
 ((
uöt32_t
)0x000E0300)

	)

224 
	#RCC_RTCCLKSour˚_HSE_Div15
 ((
uöt32_t
)0x000F0300)

	)

225 
	#RCC_RTCCLKSour˚_HSE_Div16
 ((
uöt32_t
)0x00100300)

	)

226 
	#RCC_RTCCLKSour˚_HSE_Div17
 ((
uöt32_t
)0x00110300)

	)

227 
	#RCC_RTCCLKSour˚_HSE_Div18
 ((
uöt32_t
)0x00120300)

	)

228 
	#RCC_RTCCLKSour˚_HSE_Div19
 ((
uöt32_t
)0x00130300)

	)

229 
	#RCC_RTCCLKSour˚_HSE_Div20
 ((
uöt32_t
)0x00140300)

	)

230 
	#RCC_RTCCLKSour˚_HSE_Div21
 ((
uöt32_t
)0x00150300)

	)

231 
	#RCC_RTCCLKSour˚_HSE_Div22
 ((
uöt32_t
)0x00160300)

	)

232 
	#RCC_RTCCLKSour˚_HSE_Div23
 ((
uöt32_t
)0x00170300)

	)

233 
	#RCC_RTCCLKSour˚_HSE_Div24
 ((
uöt32_t
)0x00180300)

	)

234 
	#RCC_RTCCLKSour˚_HSE_Div25
 ((
uöt32_t
)0x00190300)

	)

235 
	#RCC_RTCCLKSour˚_HSE_Div26
 ((
uöt32_t
)0x001A0300)

	)

236 
	#RCC_RTCCLKSour˚_HSE_Div27
 ((
uöt32_t
)0x001B0300)

	)

237 
	#RCC_RTCCLKSour˚_HSE_Div28
 ((
uöt32_t
)0x001C0300)

	)

238 
	#RCC_RTCCLKSour˚_HSE_Div29
 ((
uöt32_t
)0x001D0300)

	)

239 
	#RCC_RTCCLKSour˚_HSE_Div30
 ((
uöt32_t
)0x001E0300)

	)

240 
	#RCC_RTCCLKSour˚_HSE_Div31
 ((
uöt32_t
)0x001F0300)

	)

241 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
) || \

242 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

243 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div2
) || \

244 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div3
) || \

245 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div4
) || \

246 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div5
) || \

247 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div6
) || \

248 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div7
) || \

249 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div8
) || \

250 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div9
) || \

251 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div10
) || \

252 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div11
) || \

253 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div12
) || \

254 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div13
) || \

255 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div14
) || \

256 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div15
) || \

257 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div16
) || \

258 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div17
) || \

259 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div18
) || \

260 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div19
) || \

261 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div20
) || \

262 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div21
) || \

263 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div22
) || \

264 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div23
) || \

265 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div24
) || \

266 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div25
) || \

267 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div26
) || \

268 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div27
) || \

269 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div28
) || \

270 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div29
) || \

271 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div30
) || \

272 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div31
))

	)

280 
	#RCC_I2S2CLKSour˚_PLLI2S
 ((
uöt8_t
)0x00)

	)

281 
	#RCC_I2S2CLKSour˚_Ext
 ((
uöt8_t
)0x01)

	)

283 
	#IS_RCC_I2SCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S2CLKSour˚_PLLI2S
Ë|| ((SOURCEË=
RCC_I2S2CLKSour˚_Ext
))

	)

291 
	#RCC_SAIACLKSour˚_PLLSAI
 ((
uöt32_t
)0x00000000)

	)

292 
	#RCC_SAIACLKSour˚_PLLI2S
 ((
uöt32_t
)0x00100000)

	)

293 
	#RCC_SAIACLKSour˚_Ext
 ((
uöt32_t
)0x00200000)

	)

295 
	#IS_RCC_SAIACLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SAIACLKSour˚_PLLI2S
) ||\

296 ((
SOURCE
Ë=
RCC_SAIACLKSour˚_PLLSAI
) ||\

297 ((
SOURCE
Ë=
RCC_SAIACLKSour˚_Ext
))

	)

305 
	#RCC_SAIBCLKSour˚_PLLSAI
 ((
uöt32_t
)0x00000000)

	)

306 
	#RCC_SAIBCLKSour˚_PLLI2S
 ((
uöt32_t
)0x00400000)

	)

307 
	#RCC_SAIBCLKSour˚_Ext
 ((
uöt32_t
)0x00800000)

	)

309 
	#IS_RCC_SAIBCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SAIBCLKSour˚_PLLI2S
) ||\

310 ((
SOURCE
Ë=
RCC_SAIBCLKSour˚_PLLSAI
) ||\

311 ((
SOURCE
Ë=
RCC_SAIBCLKSour˚_Ext
))

	)

319 
	#RCC_TIMPªscDeß˘iv©ed
 ((
uöt8_t
)0x00)

	)

320 
	#RCC_TIMPªscA˘iv©ed
 ((
uöt8_t
)0x01)

	)

322 
	#IS_RCC_TIMCLK_PRESCALER
(
VALUE
Ë(((VALUEË=
RCC_TIMPªscDeß˘iv©ed
Ë|| ((VALUEË=
RCC_TIMPªscA˘iv©ed
))

	)

330 
	#RCC_AHB1Pîùh_GPIOA
 ((
uöt32_t
)0x00000001)

	)

331 
	#RCC_AHB1Pîùh_GPIOB
 ((
uöt32_t
)0x00000002)

	)

332 
	#RCC_AHB1Pîùh_GPIOC
 ((
uöt32_t
)0x00000004)

	)

333 
	#RCC_AHB1Pîùh_GPIOD
 ((
uöt32_t
)0x00000008)

	)

334 
	#RCC_AHB1Pîùh_GPIOE
 ((
uöt32_t
)0x00000010)

	)

335 
	#RCC_AHB1Pîùh_GPIOF
 ((
uöt32_t
)0x00000020)

	)

336 
	#RCC_AHB1Pîùh_GPIOG
 ((
uöt32_t
)0x00000040)

	)

337 
	#RCC_AHB1Pîùh_GPIOH
 ((
uöt32_t
)0x00000080)

	)

338 
	#RCC_AHB1Pîùh_GPIOI
 ((
uöt32_t
)0x00000100)

	)

339 
	#RCC_AHB1Pîùh_GPIOJ
 ((
uöt32_t
)0x00000200)

	)

340 
	#RCC_AHB1Pîùh_GPIOK
 ((
uöt32_t
)0x00000400)

	)

341 
	#RCC_AHB1Pîùh_CRC
 ((
uöt32_t
)0x00001000)

	)

342 
	#RCC_AHB1Pîùh_FLITF
 ((
uöt32_t
)0x00008000)

	)

343 
	#RCC_AHB1Pîùh_SRAM1
 ((
uöt32_t
)0x00010000)

	)

344 
	#RCC_AHB1Pîùh_SRAM2
 ((
uöt32_t
)0x00020000)

	)

345 
	#RCC_AHB1Pîùh_BKPSRAM
 ((
uöt32_t
)0x00040000)

	)

346 
	#RCC_AHB1Pîùh_SRAM3
 ((
uöt32_t
)0x00080000)

	)

347 
	#RCC_AHB1Pîùh_CCMDATARAMEN
 ((
uöt32_t
)0x00100000)

	)

348 
	#RCC_AHB1Pîùh_DMA1
 ((
uöt32_t
)0x00200000)

	)

349 
	#RCC_AHB1Pîùh_DMA2
 ((
uöt32_t
)0x00400000)

	)

350 
	#RCC_AHB1Pîùh_DMA2D
 ((
uöt32_t
)0x00800000)

	)

351 
	#RCC_AHB1Pîùh_ETH_MAC
 ((
uöt32_t
)0x02000000)

	)

352 
	#RCC_AHB1Pîùh_ETH_MAC_Tx
 ((
uöt32_t
)0x04000000)

	)

353 
	#RCC_AHB1Pîùh_ETH_MAC_Rx
 ((
uöt32_t
)0x08000000)

	)

354 
	#RCC_AHB1Pîùh_ETH_MAC_PTP
 ((
uöt32_t
)0x10000000)

	)

355 
	#RCC_AHB1Pîùh_OTG_HS
 ((
uöt32_t
)0x20000000)

	)

356 
	#RCC_AHB1Pîùh_OTG_HS_ULPI
 ((
uöt32_t
)0x40000000)

	)

358 
	#IS_RCC_AHB1_CLOCK_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x810BE800Ë=0x00Ë&& ((PERIPHË!0x00))

	)

359 
	#IS_RCC_AHB1_RESET_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xDD1FE800Ë=0x00Ë&& ((PERIPHË!0x00))

	)

360 
	#IS_RCC_AHB1_LPMODE_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x81106800Ë=0x00Ë&& ((PERIPHË!0x00))

	)

369 
	#RCC_AHB2Pîùh_DCMI
 ((
uöt32_t
)0x00000001)

	)

370 
	#RCC_AHB2Pîùh_CRYP
 ((
uöt32_t
)0x00000010)

	)

371 
	#RCC_AHB2Pîùh_HASH
 ((
uöt32_t
)0x00000020)

	)

372 
	#RCC_AHB2Pîùh_RNG
 ((
uöt32_t
)0x00000040)

	)

373 
	#RCC_AHB2Pîùh_OTG_FS
 ((
uöt32_t
)0x00000080)

	)

374 
	#IS_RCC_AHB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFF0EË=0x00Ë&& ((PERIPHË!0x00))

	)

382 #i‡
deföed
 (
STM32F40_41xxx
)

383 
	#RCC_AHB3Pîùh_FSMC
 ((
uöt32_t
)0x00000001)

	)

386 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

387 
	#RCC_AHB3Pîùh_FMC
 ((
uöt32_t
)0x00000001)

	)

390 
	#IS_RCC_AHB3_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFFEË=0x00Ë&& ((PERIPHË!0x00))

	)

398 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

399 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

400 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

401 
	#RCC_APB1Pîùh_TIM5
 ((
uöt32_t
)0x00000008)

	)

402 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

403 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

404 
	#RCC_APB1Pîùh_TIM12
 ((
uöt32_t
)0x00000040)

	)

405 
	#RCC_APB1Pîùh_TIM13
 ((
uöt32_t
)0x00000080)

	)

406 
	#RCC_APB1Pîùh_TIM14
 ((
uöt32_t
)0x00000100)

	)

407 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

408 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

409 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

410 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

411 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

412 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

413 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

414 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

415 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

416 
	#RCC_APB1Pîùh_I2C3
 ((
uöt32_t
)0x00800000)

	)

417 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

418 
	#RCC_APB1Pîùh_CAN2
 ((
uöt32_t
)0x04000000)

	)

419 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

420 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

421 
	#RCC_APB1Pîùh_UART7
 ((
uöt32_t
)0x40000000)

	)

422 
	#RCC_APB1Pîùh_UART8
 ((
uöt32_t
)0x80000000)

	)

423 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x09013600Ë=0x00Ë&& ((PERIPHË!0x00))

	)

431 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000001)

	)

432 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00000002)

	)

433 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00000010)

	)

434 
	#RCC_APB2Pîùh_USART6
 ((
uöt32_t
)0x00000020)

	)

435 
	#RCC_APB2Pîùh_ADC
 ((
uöt32_t
)0x00000100)

	)

436 
	#RCC_APB2Pîùh_ADC1
 ((
uöt32_t
)0x00000100)

	)

437 
	#RCC_APB2Pîùh_ADC2
 ((
uöt32_t
)0x00000200)

	)

438 
	#RCC_APB2Pîùh_ADC3
 ((
uöt32_t
)0x00000400)

	)

439 
	#RCC_APB2Pîùh_SDIO
 ((
uöt32_t
)0x00000800)

	)

440 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

441 
	#RCC_APB2Pîùh_SPI4
 ((
uöt32_t
)0x00002000)

	)

442 
	#RCC_APB2Pîùh_SYSCFG
 ((
uöt32_t
)0x00004000)

	)

443 
	#RCC_APB2Pîùh_TIM9
 ((
uöt32_t
)0x00010000)

	)

444 
	#RCC_APB2Pîùh_TIM10
 ((
uöt32_t
)0x00020000)

	)

445 
	#RCC_APB2Pîùh_TIM11
 ((
uöt32_t
)0x00040000)

	)

446 
	#RCC_APB2Pîùh_SPI5
 ((
uöt32_t
)0x00100000)

	)

447 
	#RCC_APB2Pîùh_SPI6
 ((
uöt32_t
)0x00200000)

	)

448 
	#RCC_APB2Pîùh_SAI1
 ((
uöt32_t
)0x00400000)

	)

449 
	#RCC_APB2Pîùh_LTDC
 ((
uöt32_t
)0x04000000)

	)

451 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFB8880CCË=0x00Ë&& ((PERIPHË!0x00))

	)

452 
	#IS_RCC_APB2_RESET_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFB8886CCË=0x00Ë&& ((PERIPHË!0x00))

	)

461 
	#RCC_MCO1Sour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

462 
	#RCC_MCO1Sour˚_LSE
 ((
uöt32_t
)0x00200000)

	)

463 
	#RCC_MCO1Sour˚_HSE
 ((
uöt32_t
)0x00400000)

	)

464 
	#RCC_MCO1Sour˚_PLLCLK
 ((
uöt32_t
)0x00600000)

	)

465 
	#RCC_MCO1Div_1
 ((
uöt32_t
)0x00000000)

	)

466 
	#RCC_MCO1Div_2
 ((
uöt32_t
)0x04000000)

	)

467 
	#RCC_MCO1Div_3
 ((
uöt32_t
)0x05000000)

	)

468 
	#RCC_MCO1Div_4
 ((
uöt32_t
)0x06000000)

	)

469 
	#RCC_MCO1Div_5
 ((
uöt32_t
)0x07000000)

	)

470 
	#IS_RCC_MCO1SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_MCO1Sour˚_HSI
Ë|| ((SOURCEË=
RCC_MCO1Sour˚_LSE
) || \

471 ((
SOURCE
Ë=
RCC_MCO1Sour˚_HSE
Ë|| ((SOURCEË=
RCC_MCO1Sour˚_PLLCLK
))

	)

473 
	#IS_RCC_MCO1DIV
(
DIV
Ë(((DIVË=
RCC_MCO1Div_1
Ë|| ((DIVË=
RCC_MCO1Div_2
) || \

474 ((
DIV
Ë=
RCC_MCO1Div_3
Ë|| ((DIVË=
RCC_MCO1Div_4
) || \

475 ((
DIV
Ë=
RCC_MCO1Div_5
))

	)

483 
	#RCC_MCO2Sour˚_SYSCLK
 ((
uöt32_t
)0x00000000)

	)

484 
	#RCC_MCO2Sour˚_PLLI2SCLK
 ((
uöt32_t
)0x40000000)

	)

485 
	#RCC_MCO2Sour˚_HSE
 ((
uöt32_t
)0x80000000)

	)

486 
	#RCC_MCO2Sour˚_PLLCLK
 ((
uöt32_t
)0xC0000000)

	)

487 
	#RCC_MCO2Div_1
 ((
uöt32_t
)0x00000000)

	)

488 
	#RCC_MCO2Div_2
 ((
uöt32_t
)0x20000000)

	)

489 
	#RCC_MCO2Div_3
 ((
uöt32_t
)0x28000000)

	)

490 
	#RCC_MCO2Div_4
 ((
uöt32_t
)0x30000000)

	)

491 
	#RCC_MCO2Div_5
 ((
uöt32_t
)0x38000000)

	)

492 
	#IS_RCC_MCO2SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_MCO2Sour˚_SYSCLK
Ë|| ((SOURCEË=
RCC_MCO2Sour˚_PLLI2SCLK
)|| \

493 ((
SOURCE
Ë=
RCC_MCO2Sour˚_HSE
Ë|| ((SOURCEË=
RCC_MCO2Sour˚_PLLCLK
))

	)

495 
	#IS_RCC_MCO2DIV
(
DIV
Ë(((DIVË=
RCC_MCO2Div_1
Ë|| ((DIVË=
RCC_MCO2Div_2
) || \

496 ((
DIV
Ë=
RCC_MCO2Div_3
Ë|| ((DIVË=
RCC_MCO2Div_4
) || \

497 ((
DIV
Ë=
RCC_MCO2Div_5
))

	)

505 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

506 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

507 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

508 
	#RCC_FLAG_PLLI2SRDY
 ((
uöt8_t
)0x3B)

	)

509 
	#RCC_FLAG_PLLSAIRDY
 ((
uöt8_t
)0x3D)

	)

510 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

511 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

512 
	#RCC_FLAG_BORRST
 ((
uöt8_t
)0x79)

	)

513 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

514 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

515 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

516 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

517 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

518 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

520 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
) || \

521 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

522 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_BORRST
) || \

523 ((
FLAG
Ë=
RCC_FLAG_PINRST
Ë|| ((FLAGË=
RCC_FLAG_PORRST
) || \

524 ((
FLAG
Ë=
RCC_FLAG_SFTRST
Ë|| ((FLAGË=
RCC_FLAG_IWDGRST
)|| \

525 ((
FLAG
Ë=
RCC_FLAG_WWDGRST
Ë|| ((FLAGË=
RCC_FLAG_LPWRRST
)|| \

526 ((
FLAG
Ë=
RCC_FLAG_PLLI2SRDY
)|| ((FLAGË=
RCC_FLAG_PLLSAIRDY
))

	)

528 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

541 
RCC_DeInô
();

544 
RCC_HSEC⁄fig
(
uöt8_t
 
RCC_HSE
);

545 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

546 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

547 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

548 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

549 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

550 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
PLLM
, uöt32_à
PLLN
, uöt32_à
PLLP
, uöt32_à
PLLQ
);

551 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

553 #i‡
deföed
 (
STM32F40_41xxx
Ë|| deföed (
STM32F401xx
)

554 
RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
);

555 #ñi‡
deföed
 (
STM32F411xE
)

556 
RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
, uöt32_à
PLLI2SM
);

557 #ñi‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

558 
RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SQ
, uöt32_à
PLLI2SR
);

562 
RCC_PLLI2SCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

563 
RCC_PLLSAIC⁄fig
(
uöt32_t
 
PLLSAIN
, uöt32_à
PLLSAIQ
, uöt32_à
PLLSAIR
);

564 
RCC_PLLSAICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

565 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

566 
RCC_MCO1C⁄fig
(
uöt32_t
 
RCC_MCO1Sour˚
, uöt32_à
RCC_MCO1Div
);

567 
RCC_MCO2C⁄fig
(
uöt32_t
 
RCC_MCO2Sour˚
, uöt32_à
RCC_MCO2Div
);

570 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

571 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

572 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

573 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

574 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

575 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

578 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

579 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

580 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

581 
RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SCLKSour˚
);

582 
RCC_SAIPLLI2SClkDivC⁄fig
(
uöt32_t
 
RCC_PLLI2SDivQ
);

583 
RCC_SAIPLLSAIClkDivC⁄fig
(
uöt32_t
 
RCC_PLLSAIDivQ
);

584 
RCC_SAIBlockACLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockACLKSour˚
);

585 
RCC_SAIBlockBCLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockBCLKSour˚
);

586 
RCC_LTDCCLKDivC⁄fig
(
uöt32_t
 
RCC_PLLSAIDivR
);

587 
RCC_TIMCLKPªsC⁄fig
(
uöt32_t
 
RCC_TIMCLKPªsˇÀr
);

589 
RCC_AHB1PîùhClockCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

590 
RCC_AHB2PîùhClockCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

591 
RCC_AHB3PîùhClockCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

592 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

593 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

595 
RCC_AHB1PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

596 
RCC_AHB2PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

597 
RCC_AHB3PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

598 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

599 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

601 
RCC_AHB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

602 
RCC_AHB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

603 
RCC_AHB3PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

604 
RCC_APB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

605 
RCC_APB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

607 
RCC_LSEModeC⁄fig
(
uöt8_t
 
Mode
);

610 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

611 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

612 
RCC_CÀ¨Fœg
();

613 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

614 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

616 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rng.h

30 #i‚de‡
__STM32F4xx_RNG_H


31 
	#__STM32F4xx_RNG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

58 
	#RNG_FLAG_DRDY
 ((
uöt8_t
)0x0001Ë

	)

59 
	#RNG_FLAG_CECS
 ((
uöt8_t
)0x0002Ë

	)

60 
	#RNG_FLAG_SECS
 ((
uöt8_t
)0x0004Ë

	)

62 
	#IS_RNG_GET_FLAG
(
RNG_FLAG
Ë(((RNG_FLAGË=
RNG_FLAG_DRDY
) || \

63 ((
RNG_FLAG
Ë=
RNG_FLAG_CECS
) || \

64 ((
RNG_FLAG
Ë=
RNG_FLAG_SECS
))

	)

65 
	#IS_RNG_CLEAR_FLAG
(
RNG_FLAG
Ë(((RNG_FLAGË=
RNG_FLAG_CECS
) || \

66 ((
RNG_FLAG
Ë=
RNG_FLAG_SECS
))

	)

74 
	#RNG_IT_CEI
 ((
uöt8_t
)0x20Ë

	)

75 
	#RNG_IT_SEI
 ((
uöt8_t
)0x40Ë

	)

77 
	#IS_RNG_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x9FË=0x00Ë&& ((ITË!0x00))

	)

78 
	#IS_RNG_GET_IT
(
RNG_IT
Ë(((RNG_ITË=
RNG_IT_CEI
Ë|| ((RNG_ITË=
RNG_IT_SEI
))

	)

91 
RNG_DeInô
();

94 
RNG_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

97 
uöt32_t
 
RNG_GëR™domNumbî
();

100 
RNG_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

101 
FœgSètus
 
RNG_GëFœgSètus
(
uöt8_t
 
RNG_FLAG
);

102 
RNG_CÀ¨Fœg
(
uöt8_t
 
RNG_FLAG
);

103 
ITSètus
 
RNG_GëITSètus
(
uöt8_t
 
RNG_IT
);

104 
RNG_CÀ¨ITPídögBô
(
uöt8_t
 
RNG_IT
);

106 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rtc.h

30 #i‚de‡
__STM32F4xx_RTC_H


31 
	#__STM32F4xx_RTC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
RTC_HourF‹m©
;

58 
uöt32_t
 
RTC_AsynchPªdiv
;

61 
uöt32_t
 
RTC_SynchPªdiv
;

63 }
	tRTC_InôTy≥Def
;

70 
uöt8_t
 
RTC_Hours
;

75 
uöt8_t
 
RTC_Möuãs
;

78 
uöt8_t
 
RTC_Sec⁄ds
;

81 
uöt8_t
 
RTC_H12
;

83 }
	tRTC_TimeTy≥Def
;

90 
uöt8_t
 
RTC_WìkDay
;

93 
uöt8_t
 
RTC_M⁄th
;

96 
uöt8_t
 
RTC_D©e
;

99 
uöt8_t
 
RTC_Yór
;

101 }
	tRTC_D©eTy≥Def
;

108 
RTC_TimeTy≥Def
 
RTC_AœrmTime
;

110 
uöt32_t
 
RTC_AœrmMask
;

113 
uöt32_t
 
RTC_AœrmD©eWìkDaySñ
;

116 
uöt8_t
 
RTC_AœrmD©eWìkDay
;

121 }
	tRTC_AœrmTy≥Def
;

133 
	#RTC_HourF‹m©_24
 ((
uöt32_t
)0x00000000)

	)

134 
	#RTC_HourF‹m©_12
 ((
uöt32_t
)0x00000040)

	)

135 
	#IS_RTC_HOUR_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_HourF‹m©_12
) || \

136 ((
FORMAT
Ë=
RTC_HourF‹m©_24
))

	)

144 
	#IS_RTC_ASYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<0x7F)

	)

154 
	#IS_RTC_SYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<0x7FFF)

	)

163 
	#IS_RTC_HOUR12
(
HOUR
Ë(((HOURË> 0Ë&& ((HOURË<12))

	)

164 
	#IS_RTC_HOUR24
(
HOUR
Ë((HOURË<23)

	)

165 
	#IS_RTC_MINUTES
(
MINUTES
Ë((MINUTESË<59)

	)

166 
	#IS_RTC_SECONDS
(
SECONDS
Ë((SECONDSË<59)

	)

175 
	#RTC_H12_AM
 ((
uöt8_t
)0x00)

	)

176 
	#RTC_H12_PM
 ((
uöt8_t
)0x40)

	)

177 
	#IS_RTC_H12
(
PM
Ë(((PMË=
RTC_H12_AM
Ë|| ((PMË=
RTC_H12_PM
))

	)

186 
	#IS_RTC_YEAR
(
YEAR
Ë((YEARË<99)

	)

197 
	#RTC_M⁄th_J™u¨y
 ((
uöt8_t
)0x01)

	)

198 
	#RTC_M⁄th_Febru¨y
 ((
uöt8_t
)0x02)

	)

199 
	#RTC_M⁄th_M¨ch
 ((
uöt8_t
)0x03)

	)

200 
	#RTC_M⁄th_A¥û
 ((
uöt8_t
)0x04)

	)

201 
	#RTC_M⁄th_May
 ((
uöt8_t
)0x05)

	)

202 
	#RTC_M⁄th_Ju√
 ((
uöt8_t
)0x06)

	)

203 
	#RTC_M⁄th_July
 ((
uöt8_t
)0x07)

	)

204 
	#RTC_M⁄th_Augu°
 ((
uöt8_t
)0x08)

	)

205 
	#RTC_M⁄th_Sïãmbî
 ((
uöt8_t
)0x09)

	)

206 
	#RTC_M⁄th_O˘obî
 ((
uöt8_t
)0x10)

	)

207 
	#RTC_M⁄th_Novembî
 ((
uöt8_t
)0x11)

	)

208 
	#RTC_M⁄th_De˚mbî
 ((
uöt8_t
)0x12)

	)

209 
	#IS_RTC_MONTH
(
MONTH
Ë(((MONTHË>1Ë&& ((MONTHË<12))

	)

210 
	#IS_RTC_DATE
(
DATE
Ë(((DATEË>1Ë&& ((DATEË<31))

	)

220 
	#RTC_Wìkday_M⁄day
 ((
uöt8_t
)0x01)

	)

221 
	#RTC_Wìkday_Tuesday
 ((
uöt8_t
)0x02)

	)

222 
	#RTC_Wìkday_Wed√sday
 ((
uöt8_t
)0x03)

	)

223 
	#RTC_Wìkday_Thursday
 ((
uöt8_t
)0x04)

	)

224 
	#RTC_Wìkday_Friday
 ((
uöt8_t
)0x05)

	)

225 
	#RTC_Wìkday_S©urday
 ((
uöt8_t
)0x06)

	)

226 
	#RTC_Wìkday_Sunday
 ((
uöt8_t
)0x07)

	)

227 
	#IS_RTC_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_Wìkday_M⁄day
) || \

228 ((
WEEKDAY
Ë=
RTC_Wìkday_Tuesday
) || \

229 ((
WEEKDAY
Ë=
RTC_Wìkday_Wed√sday
) || \

230 ((
WEEKDAY
Ë=
RTC_Wìkday_Thursday
) || \

231 ((
WEEKDAY
Ë=
RTC_Wìkday_Friday
) || \

232 ((
WEEKDAY
Ë=
RTC_Wìkday_S©urday
) || \

233 ((
WEEKDAY
Ë=
RTC_Wìkday_Sunday
))

	)

242 
	#IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
DATE
Ë(((DATEË> 0Ë&& ((DATEË<31))

	)

243 
	#IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_Wìkday_M⁄day
) || \

244 ((
WEEKDAY
Ë=
RTC_Wìkday_Tuesday
) || \

245 ((
WEEKDAY
Ë=
RTC_Wìkday_Wed√sday
) || \

246 ((
WEEKDAY
Ë=
RTC_Wìkday_Thursday
) || \

247 ((
WEEKDAY
Ë=
RTC_Wìkday_Friday
) || \

248 ((
WEEKDAY
Ë=
RTC_Wìkday_S©urday
) || \

249 ((
WEEKDAY
Ë=
RTC_Wìkday_Sunday
))

	)

259 
	#RTC_AœrmD©eWìkDaySñ_D©e
 ((
uöt32_t
)0x00000000)

	)

260 
	#RTC_AœrmD©eWìkDaySñ_WìkDay
 ((
uöt32_t
)0x40000000)

	)

262 
	#IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
SEL
Ë(((SELË=
RTC_AœrmD©eWìkDaySñ_D©e
) || \

263 ((
SEL
Ë=
RTC_AœrmD©eWìkDaySñ_WìkDay
))

	)

273 
	#RTC_AœrmMask_N⁄e
 ((
uöt32_t
)0x00000000)

	)

274 
	#RTC_AœrmMask_D©eWìkDay
 ((
uöt32_t
)0x80000000)

	)

275 
	#RTC_AœrmMask_Hours
 ((
uöt32_t
)0x00800000)

	)

276 
	#RTC_AœrmMask_Möuãs
 ((
uöt32_t
)0x00008000)

	)

277 
	#RTC_AœrmMask_Sec⁄ds
 ((
uöt32_t
)0x00000080)

	)

278 
	#RTC_AœrmMask_AŒ
 ((
uöt32_t
)0x80808080)

	)

279 
	#IS_ALARM_MASK
(
MASK
Ë(((MASKË& 0x7F7F7F7FË=(
uöt32_t
)
RESET
)

	)

288 
	#RTC_Aœrm_A
 ((
uöt32_t
)0x00000100)

	)

289 
	#RTC_Aœrm_B
 ((
uöt32_t
)0x00000200)

	)

290 
	#IS_RTC_ALARM
(
ALARM
Ë(((ALARMË=
RTC_Aœrm_A
Ë|| ((ALARMË=
RTC_Aœrm_B
))

	)

291 
	#IS_RTC_CMD_ALARM
(
ALARM
Ë(((ALARMË& (
RTC_Aœrm_A
 | 
RTC_Aœrm_B
)Ë!(
uöt32_t
)
RESET
)

	)

300 
	#RTC_AœrmSubSec⁄dMask_AŒ
 ((
uöt32_t
)0x00000000Ë

	)

303 
	#RTC_AœrmSubSec⁄dMask_SS14_1
 ((
uöt32_t
)0x01000000Ë

	)

305 
	#RTC_AœrmSubSec⁄dMask_SS14_2
 ((
uöt32_t
)0x02000000Ë

	)

307 
	#RTC_AœrmSubSec⁄dMask_SS14_3
 ((
uöt32_t
)0x03000000Ë

	)

309 
	#RTC_AœrmSubSec⁄dMask_SS14_4
 ((
uöt32_t
)0x04000000Ë

	)

311 
	#RTC_AœrmSubSec⁄dMask_SS14_5
 ((
uöt32_t
)0x05000000Ë

	)

313 
	#RTC_AœrmSubSec⁄dMask_SS14_6
 ((
uöt32_t
)0x06000000Ë

	)

315 
	#RTC_AœrmSubSec⁄dMask_SS14_7
 ((
uöt32_t
)0x07000000Ë

	)

317 
	#RTC_AœrmSubSec⁄dMask_SS14_8
 ((
uöt32_t
)0x08000000Ë

	)

319 
	#RTC_AœrmSubSec⁄dMask_SS14_9
 ((
uöt32_t
)0x09000000Ë

	)

321 
	#RTC_AœrmSubSec⁄dMask_SS14_10
 ((
uöt32_t
)0x0A000000Ë

	)

323 
	#RTC_AœrmSubSec⁄dMask_SS14_11
 ((
uöt32_t
)0x0B000000Ë

	)

325 
	#RTC_AœrmSubSec⁄dMask_SS14_12
 ((
uöt32_t
)0x0C000000Ë

	)

327 
	#RTC_AœrmSubSec⁄dMask_SS14_13
 ((
uöt32_t
)0x0D000000Ë

	)

329 
	#RTC_AœrmSubSec⁄dMask_SS14
 ((
uöt32_t
)0x0E000000Ë

	)

331 
	#RTC_AœrmSubSec⁄dMask_N⁄e
 ((
uöt32_t
)0x0F000000Ë

	)

333 
	#IS_RTC_ALARM_SUB_SECOND_MASK
(
MASK
Ë(((MASKË=
RTC_AœrmSubSec⁄dMask_AŒ
) || \

334 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_1
) || \

335 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_2
) || \

336 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_3
) || \

337 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_4
) || \

338 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_5
) || \

339 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_6
) || \

340 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_7
) || \

341 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_8
) || \

342 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_9
) || \

343 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_10
) || \

344 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_11
) || \

345 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_12
) || \

346 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_13
) || \

347 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14
) || \

348 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_N⁄e
))

	)

357 
	#IS_RTC_ALARM_SUB_SECOND_VALUE
(
VALUE
Ë((VALUEË<0x00007FFF)

	)

366 
	#RTC_WakeUpClock_RTCCLK_Div16
 ((
uöt32_t
)0x00000000)

	)

367 
	#RTC_WakeUpClock_RTCCLK_Div8
 ((
uöt32_t
)0x00000001)

	)

368 
	#RTC_WakeUpClock_RTCCLK_Div4
 ((
uöt32_t
)0x00000002)

	)

369 
	#RTC_WakeUpClock_RTCCLK_Div2
 ((
uöt32_t
)0x00000003)

	)

370 
	#RTC_WakeUpClock_CK_SPRE_16bôs
 ((
uöt32_t
)0x00000004)

	)

371 
	#RTC_WakeUpClock_CK_SPRE_17bôs
 ((
uöt32_t
)0x00000006)

	)

372 
	#IS_RTC_WAKEUP_CLOCK
(
CLOCK
Ë(((CLOCKË=
RTC_WakeUpClock_RTCCLK_Div16
) || \

373 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div8
) || \

374 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div4
) || \

375 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div2
) || \

376 ((
CLOCK
Ë=
RTC_WakeUpClock_CK_SPRE_16bôs
) || \

377 ((
CLOCK
Ë=
RTC_WakeUpClock_CK_SPRE_17bôs
))

	)

378 
	#IS_RTC_WAKEUP_COUNTER
(
COUNTER
Ë((COUNTERË<0xFFFF)

	)

386 
	#RTC_TimeSèmpEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

387 
	#RTC_TimeSèmpEdge_FÆlög
 ((
uöt32_t
)0x00000008)

	)

388 
	#IS_RTC_TIMESTAMP_EDGE
(
EDGE
Ë(((EDGEË=
RTC_TimeSèmpEdge_Risög
) || \

389 ((
EDGE
Ë=
RTC_TimeSèmpEdge_FÆlög
))

	)

397 
	#RTC_Ouçut_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

398 
	#RTC_Ouçut_AœrmA
 ((
uöt32_t
)0x00200000)

	)

399 
	#RTC_Ouçut_AœrmB
 ((
uöt32_t
)0x00400000)

	)

400 
	#RTC_Ouçut_WakeUp
 ((
uöt32_t
)0x00600000)

	)

402 
	#IS_RTC_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_Ouçut_DißbÀ
) || \

403 ((
OUTPUT
Ë=
RTC_Ouçut_AœrmA
) || \

404 ((
OUTPUT
Ë=
RTC_Ouçut_AœrmB
) || \

405 ((
OUTPUT
Ë=
RTC_Ouçut_WakeUp
))

	)

414 
	#RTC_OuçutPﬁ¨ôy_High
 ((
uöt32_t
)0x00000000)

	)

415 
	#RTC_OuçutPﬁ¨ôy_Low
 ((
uöt32_t
)0x00100000)

	)

416 
	#IS_RTC_OUTPUT_POL
(
POL
Ë(((POLË=
RTC_OuçutPﬁ¨ôy_High
) || \

417 ((
POL
Ë=
RTC_OuçutPﬁ¨ôy_Low
))

	)

426 
	#RTC_CÆibSign_Posôive
 ((
uöt32_t
)0x00000000)

	)

427 
	#RTC_CÆibSign_Neg©ive
 ((
uöt32_t
)0x00000080)

	)

428 
	#IS_RTC_CALIB_SIGN
(
SIGN
Ë(((SIGNË=
RTC_CÆibSign_Posôive
) || \

429 ((
SIGN
Ë=
RTC_CÆibSign_Neg©ive
))

	)

430 
	#IS_RTC_CALIB_VALUE
(
VALUE
Ë((VALUEË< 0x20)

	)

439 
	#RTC_CÆibOuçut_512Hz
 ((
uöt32_t
)0x00000000)

	)

440 
	#RTC_CÆibOuçut_1Hz
 ((
uöt32_t
)0x00080000)

	)

441 
	#IS_RTC_CALIB_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_CÆibOuçut_512Hz
) || \

442 ((
OUTPUT
Ë=
RTC_CÆibOuçut_1Hz
))

	)

450 
	#RTC_SmoŸhCÆibPîiod_32£c
 ((
uöt32_t
)0x00000000Ë

	)

452 
	#RTC_SmoŸhCÆibPîiod_16£c
 ((
uöt32_t
)0x00002000Ë

	)

454 
	#RTC_SmoŸhCÆibPîiod_8£c
 ((
uöt32_t
)0x00004000Ë

	)

456 
	#IS_RTC_SMOOTH_CALIB_PERIOD
(
PERIOD
Ë(((PERIODË=
RTC_SmoŸhCÆibPîiod_32£c
) || \

457 ((
PERIOD
Ë=
RTC_SmoŸhCÆibPîiod_16£c
) || \

458 ((
PERIOD
Ë=
RTC_SmoŸhCÆibPîiod_8£c
))

	)

467 
	#RTC_SmoŸhCÆibPlusPul£s_Së
 ((
uöt32_t
)0x00008000Ë

	)

470 
	#RTC_SmoŸhCÆibPlusPul£s_Re£t
 ((
uöt32_t
)0x00000000Ë

	)

472 
	#IS_RTC_SMOOTH_CALIB_PLUS
(
PLUS
Ë(((PLUSË=
RTC_SmoŸhCÆibPlusPul£s_Së
) || \

473 ((
PLUS
Ë=
RTC_SmoŸhCÆibPlusPul£s_Re£t
))

	)

482 
	#IS_RTC_SMOOTH_CALIB_MINUS
(
VALUE
Ë((VALUEË<0x000001FF)

	)

491 
	#RTC_DayLightSavög_SUB1H
 ((
uöt32_t
)0x00020000)

	)

492 
	#RTC_DayLightSavög_ADD1H
 ((
uöt32_t
)0x00010000)

	)

493 
	#IS_RTC_DAYLIGHT_SAVING
(
SAVE
Ë(((SAVEË=
RTC_DayLightSavög_SUB1H
) || \

494 ((
SAVE
Ë=
RTC_DayLightSavög_ADD1H
))

	)

496 
	#RTC_St‹eO≥øti⁄_Re£t
 ((
uöt32_t
)0x00000000)

	)

497 
	#RTC_St‹eO≥øti⁄_Së
 ((
uöt32_t
)0x00040000)

	)

498 
	#IS_RTC_STORE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
RTC_St‹eO≥øti⁄_Re£t
) || \

499 ((
OPERATION
Ë=
RTC_St‹eO≥øti⁄_Së
))

	)

507 
	#RTC_Tam≥rTriggî_RisögEdge
 ((
uöt32_t
)0x00000000)

	)

508 
	#RTC_Tam≥rTriggî_FÆlögEdge
 ((
uöt32_t
)0x00000001)

	)

509 
	#RTC_Tam≥rTriggî_LowLevñ
 ((
uöt32_t
)0x00000000)

	)

510 
	#RTC_Tam≥rTriggî_HighLevñ
 ((
uöt32_t
)0x00000001)

	)

511 
	#IS_RTC_TAMPER_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
RTC_Tam≥rTriggî_RisögEdge
) || \

512 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_FÆlögEdge
) || \

513 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_LowLevñ
) || \

514 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_HighLevñ
))

	)

523 
	#RTC_Tam≥rFûãr_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

525 
	#RTC_Tam≥rFûãr_2Sam∂e
 ((
uöt32_t
)0x00000800Ë

	)

527 
	#RTC_Tam≥rFûãr_4Sam∂e
 ((
uöt32_t
)0x00001000Ë

	)

529 
	#RTC_Tam≥rFûãr_8Sam∂e
 ((
uöt32_t
)0x00001800Ë

	)

531 
	#IS_RTC_TAMPER_FILTER
(
FILTER
Ë(((FILTERË=
RTC_Tam≥rFûãr_DißbÀ
) || \

532 ((
FILTER
Ë=
RTC_Tam≥rFûãr_2Sam∂e
) || \

533 ((
FILTER
Ë=
RTC_Tam≥rFûãr_4Sam∂e
) || \

534 ((
FILTER
Ë=
RTC_Tam≥rFûãr_8Sam∂e
))

	)

542 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div32768
 ((
uöt32_t
)0x00000000Ë

	)

544 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div16384
 ((
uöt32_t
)0x000000100Ë

	)

546 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div8192
 ((
uöt32_t
)0x00000200Ë

	)

548 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div4096
 ((
uöt32_t
)0x00000300Ë

	)

550 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div2048
 ((
uöt32_t
)0x00000400Ë

	)

552 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div1024
 ((
uöt32_t
)0x00000500Ë

	)

554 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div512
 ((
uöt32_t
)0x00000600Ë

	)

556 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div256
 ((
uöt32_t
)0x00000700Ë

	)

558 
	#IS_RTC_TAMPER_SAMPLING_FREQ
(
FREQ
Ë(((FREQË==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div32768
) || \

559 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div16384
) || \

560 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div8192
) || \

561 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div4096
) || \

562 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div2048
) || \

563 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div1024
) || \

564 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div512
) || \

565 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div256
))

	)

574 
	#RTC_Tam≥rPªch¨geDuøti⁄_1RTCCLK
 ((
uöt32_t
)0x00000000Ë

	)

576 
	#RTC_Tam≥rPªch¨geDuøti⁄_2RTCCLK
 ((
uöt32_t
)0x00002000Ë

	)

578 
	#RTC_Tam≥rPªch¨geDuøti⁄_4RTCCLK
 ((
uöt32_t
)0x00004000Ë

	)

580 
	#RTC_Tam≥rPªch¨geDuøti⁄_8RTCCLK
 ((
uöt32_t
)0x00006000Ë

	)

583 
	#IS_RTC_TAMPER_PRECHARGE_DURATION
(
DURATION
Ë(((DURATIONË=
RTC_Tam≥rPªch¨geDuøti⁄_1RTCCLK
) || \

584 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_2RTCCLK
) || \

585 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_4RTCCLK
) || \

586 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_8RTCCLK
))

	)

594 
	#RTC_Tam≥r_1
 
RTC_TAFCR_TAMP1E


	)

595 
	#IS_RTC_TAMPER
(
TAMPER
Ë(((TAMPERË=
RTC_Tam≥r_1
))

	)

604 
	#RTC_Tam≥rPö_PC13
 ((
uöt32_t
)0x00000000)

	)

605 
	#RTC_Tam≥rPö_PI8
 ((
uöt32_t
)0x00010000)

	)

606 
	#IS_RTC_TAMPER_PIN
(
PIN
Ë(((PINË=
RTC_Tam≥rPö_PC13
) || \

607 ((
PIN
Ë=
RTC_Tam≥rPö_PI8
))

	)

615 
	#RTC_TimeSèmpPö_PC13
 ((
uöt32_t
)0x00000000)

	)

616 
	#RTC_TimeSèmpPö_PI8
 ((
uöt32_t
)0x00020000)

	)

617 
	#IS_RTC_TIMESTAMP_PIN
(
PIN
Ë(((PINË=
RTC_TimeSèmpPö_PC13
) || \

618 ((
PIN
Ë=
RTC_TimeSèmpPö_PI8
))

	)

626 
	#RTC_OuçutTy≥_O≥nDøö
 ((
uöt32_t
)0x00000000)

	)

627 
	#RTC_OuçutTy≥_PushPuŒ
 ((
uöt32_t
)0x00040000)

	)

628 
	#IS_RTC_OUTPUT_TYPE
(
TYPE
Ë(((TYPEË=
RTC_OuçutTy≥_O≥nDøö
) || \

629 ((
TYPE
Ë=
RTC_OuçutTy≥_PushPuŒ
))

	)

638 
	#RTC_Shi·Add1S_Re£t
 ((
uöt32_t
)0x00000000)

	)

639 
	#RTC_Shi·Add1S_Së
 ((
uöt32_t
)0x80000000)

	)

640 
	#IS_RTC_SHIFT_ADD1S
(
SEL
Ë(((SELË=
RTC_Shi·Add1S_Re£t
) || \

641 ((
SEL
Ë=
RTC_Shi·Add1S_Së
))

	)

649 
	#IS_RTC_SHIFT_SUBFS
(
FS
Ë((FSË<0x00007FFF)

	)

659 
	#RTC_BKP_DR0
 ((
uöt32_t
)0x00000000)

	)

660 
	#RTC_BKP_DR1
 ((
uöt32_t
)0x00000001)

	)

661 
	#RTC_BKP_DR2
 ((
uöt32_t
)0x00000002)

	)

662 
	#RTC_BKP_DR3
 ((
uöt32_t
)0x00000003)

	)

663 
	#RTC_BKP_DR4
 ((
uöt32_t
)0x00000004)

	)

664 
	#RTC_BKP_DR5
 ((
uöt32_t
)0x00000005)

	)

665 
	#RTC_BKP_DR6
 ((
uöt32_t
)0x00000006)

	)

666 
	#RTC_BKP_DR7
 ((
uöt32_t
)0x00000007)

	)

667 
	#RTC_BKP_DR8
 ((
uöt32_t
)0x00000008)

	)

668 
	#RTC_BKP_DR9
 ((
uöt32_t
)0x00000009)

	)

669 
	#RTC_BKP_DR10
 ((
uöt32_t
)0x0000000A)

	)

670 
	#RTC_BKP_DR11
 ((
uöt32_t
)0x0000000B)

	)

671 
	#RTC_BKP_DR12
 ((
uöt32_t
)0x0000000C)

	)

672 
	#RTC_BKP_DR13
 ((
uöt32_t
)0x0000000D)

	)

673 
	#RTC_BKP_DR14
 ((
uöt32_t
)0x0000000E)

	)

674 
	#RTC_BKP_DR15
 ((
uöt32_t
)0x0000000F)

	)

675 
	#RTC_BKP_DR16
 ((
uöt32_t
)0x00000010)

	)

676 
	#RTC_BKP_DR17
 ((
uöt32_t
)0x00000011)

	)

677 
	#RTC_BKP_DR18
 ((
uöt32_t
)0x00000012)

	)

678 
	#RTC_BKP_DR19
 ((
uöt32_t
)0x00000013)

	)

679 
	#IS_RTC_BKP
(
BKP
Ë(((BKPË=
RTC_BKP_DR0
) || \

680 ((
BKP
Ë=
RTC_BKP_DR1
) || \

681 ((
BKP
Ë=
RTC_BKP_DR2
) || \

682 ((
BKP
Ë=
RTC_BKP_DR3
) || \

683 ((
BKP
Ë=
RTC_BKP_DR4
) || \

684 ((
BKP
Ë=
RTC_BKP_DR5
) || \

685 ((
BKP
Ë=
RTC_BKP_DR6
) || \

686 ((
BKP
Ë=
RTC_BKP_DR7
) || \

687 ((
BKP
Ë=
RTC_BKP_DR8
) || \

688 ((
BKP
Ë=
RTC_BKP_DR9
) || \

689 ((
BKP
Ë=
RTC_BKP_DR10
) || \

690 ((
BKP
Ë=
RTC_BKP_DR11
) || \

691 ((
BKP
Ë=
RTC_BKP_DR12
) || \

692 ((
BKP
Ë=
RTC_BKP_DR13
) || \

693 ((
BKP
Ë=
RTC_BKP_DR14
) || \

694 ((
BKP
Ë=
RTC_BKP_DR15
) || \

695 ((
BKP
Ë=
RTC_BKP_DR16
) || \

696 ((
BKP
Ë=
RTC_BKP_DR17
) || \

697 ((
BKP
Ë=
RTC_BKP_DR18
) || \

698 ((
BKP
Ë=
RTC_BKP_DR19
))

	)

706 
	#RTC_F‹m©_BIN
 ((
uöt32_t
)0x000000000)

	)

707 
	#RTC_F‹m©_BCD
 ((
uöt32_t
)0x000000001)

	)

708 
	#IS_RTC_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_F‹m©_BIN
Ë|| ((FORMATË=
RTC_F‹m©_BCD
))

	)

717 
	#RTC_FLAG_RECALPF
 ((
uöt32_t
)0x00010000)

	)

718 
	#RTC_FLAG_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

719 
	#RTC_FLAG_TSOVF
 ((
uöt32_t
)0x00001000)

	)

720 
	#RTC_FLAG_TSF
 ((
uöt32_t
)0x00000800)

	)

721 
	#RTC_FLAG_WUTF
 ((
uöt32_t
)0x00000400)

	)

722 
	#RTC_FLAG_ALRBF
 ((
uöt32_t
)0x00000200)

	)

723 
	#RTC_FLAG_ALRAF
 ((
uöt32_t
)0x00000100)

	)

724 
	#RTC_FLAG_INITF
 ((
uöt32_t
)0x00000040)

	)

725 
	#RTC_FLAG_RSF
 ((
uöt32_t
)0x00000020)

	)

726 
	#RTC_FLAG_INITS
 ((
uöt32_t
)0x00000010)

	)

727 
	#RTC_FLAG_SHPF
 ((
uöt32_t
)0x00000008)

	)

728 
	#RTC_FLAG_WUTWF
 ((
uöt32_t
)0x00000004)

	)

729 
	#RTC_FLAG_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

730 
	#RTC_FLAG_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

731 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_TSOVF
Ë|| ((FLAGË=
RTC_FLAG_TSF
) || \

732 ((
FLAG
Ë=
RTC_FLAG_WUTF
Ë|| ((FLAGË=
RTC_FLAG_ALRBF
) || \

733 ((
FLAG
Ë=
RTC_FLAG_ALRAF
Ë|| ((FLAGË=
RTC_FLAG_INITF
) || \

734 ((
FLAG
Ë=
RTC_FLAG_RSF
Ë|| ((FLAGË=
RTC_FLAG_WUTWF
) || \

735 ((
FLAG
Ë=
RTC_FLAG_ALRBWF
Ë|| ((FLAGË=
RTC_FLAG_ALRAWF
) || \

736 ((
FLAG
Ë=
RTC_FLAG_TAMP1F
Ë|| ((FLAGË=
RTC_FLAG_RECALPF
) || \

737 ((
FLAG
Ë=
RTC_FLAG_SHPF
))

	)

738 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë(((FLAGË!(
uöt32_t
)
RESET
Ë&& (((FLAGË& 0xFFFF00DFË=(uöt32_t)RESET))

	)

746 
	#RTC_IT_TS
 ((
uöt32_t
)0x00008000)

	)

747 
	#RTC_IT_WUT
 ((
uöt32_t
)0x00004000)

	)

748 
	#RTC_IT_ALRB
 ((
uöt32_t
)0x00002000)

	)

749 
	#RTC_IT_ALRA
 ((
uöt32_t
)0x00001000)

	)

750 
	#RTC_IT_TAMP
 ((
uöt32_t
)0x00000004Ë

	)

751 
	#RTC_IT_TAMP1
 ((
uöt32_t
)0x00020000)

	)

753 
	#IS_RTC_CONFIG_IT
(
IT
Ë(((ITË!(
uöt32_t
)
RESET
Ë&& (((ITË& 0xFFFF0FFBË=(uöt32_t)RESET))

	)

754 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_TS
Ë|| ((ITË=
RTC_IT_WUT
) || \

755 ((
IT
Ë=
RTC_IT_ALRB
Ë|| ((ITË=
RTC_IT_ALRA
) || \

756 ((
IT
Ë=
RTC_IT_TAMP1
))

	)

757 
	#IS_RTC_CLEAR_IT
(
IT
Ë(((ITË!(
uöt32_t
)
RESET
Ë&& (((ITË& 0xFFFD0FFFË=(uöt32_t)RESET))

	)

766 
	#RTC_DigôÆCÆibC⁄fig
 
RTC_Cﬂr£CÆibC⁄fig


	)

767 
	#RTC_DigôÆCÆibCmd
 
RTC_Cﬂr£CÆibCmd


	)

781 
Eº‹Sètus
 
RTC_DeInô
();

784 
Eº‹Sètus
 
RTC_Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
);

785 
RTC_Såu˘Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
);

786 
RTC_WrôePrŸe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

787 
Eº‹Sètus
 
RTC_E¡îInôMode
();

788 
RTC_ExôInôMode
();

789 
Eº‹Sètus
 
RTC_WaôF‹Synchro
();

790 
Eº‹Sètus
 
RTC_RefClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

791 
RTC_By∑ssShadowCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

794 
Eº‹Sètus
 
RTC_SëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

795 
RTC_TimeSåu˘Inô
(
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

796 
RTC_GëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

797 
uöt32_t
 
RTC_GëSubSec⁄d
();

798 
Eº‹Sètus
 
RTC_SëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

799 
RTC_D©eSåu˘Inô
(
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

800 
RTC_GëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

803 
RTC_SëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

804 
RTC_AœrmSåu˘Inô
(
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

805 
RTC_GëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

806 
Eº‹Sètus
 
RTC_AœrmCmd
(
uöt32_t
 
RTC_Aœrm
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

807 
RTC_AœrmSubSec⁄dC⁄fig
(
uöt32_t
 
RTC_Aœrm
, uöt32_à
RTC_AœrmSubSec⁄dVÆue
, uöt32_à
RTC_AœrmSubSec⁄dMask
);

808 
uöt32_t
 
RTC_GëAœrmSubSec⁄d
(uöt32_à
RTC_Aœrm
);

811 
RTC_WakeUpClockC⁄fig
(
uöt32_t
 
RTC_WakeUpClock
);

812 
RTC_SëWakeUpCou¡î
(
uöt32_t
 
RTC_WakeUpCou¡î
);

813 
uöt32_t
 
RTC_GëWakeUpCou¡î
();

814 
Eº‹Sètus
 
RTC_WakeUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

817 
RTC_DayLightSavögC⁄fig
(
uöt32_t
 
RTC_DayLightSavög
, uöt32_à
RTC_St‹eO≥øti⁄
);

818 
uöt32_t
 
RTC_GëSt‹eO≥øti⁄
();

821 
RTC_OuçutC⁄fig
(
uöt32_t
 
RTC_Ouçut
, uöt32_à
RTC_OuçutPﬁ¨ôy
);

824 
Eº‹Sètus
 
RTC_Cﬂr£CÆibC⁄fig
(
uöt32_t
 
RTC_CÆibSign
, uöt32_à
VÆue
);

825 
Eº‹Sètus
 
RTC_Cﬂr£CÆibCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

826 
RTC_CÆibOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

827 
RTC_CÆibOuçutC⁄fig
(
uöt32_t
 
RTC_CÆibOuçut
);

828 
Eº‹Sètus
 
RTC_SmoŸhCÆibC⁄fig
(
uöt32_t
 
RTC_SmoŸhCÆibPîiod
,

829 
uöt32_t
 
RTC_SmoŸhCÆibPlusPul£s
,

830 
uöt32_t
 
RTC_SmouthCÆibMöusPul£sVÆue
);

833 
RTC_TimeSèmpCmd
(
uöt32_t
 
RTC_TimeSèmpEdge
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

834 
RTC_GëTimeSèmp
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_SèmpTimeSåu˘
,

835 
RTC_D©eTy≥Def
* 
RTC_SèmpD©eSåu˘
);

836 
uöt32_t
 
RTC_GëTimeSèmpSubSec⁄d
();

839 
RTC_Tam≥rTriggîC⁄fig
(
uöt32_t
 
RTC_Tam≥r
, uöt32_à
RTC_Tam≥rTriggî
);

840 
RTC_Tam≥rCmd
(
uöt32_t
 
RTC_Tam≥r
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

841 
RTC_Tam≥rFûãrC⁄fig
(
uöt32_t
 
RTC_Tam≥rFûãr
);

842 
RTC_Tam≥rSam∂ögFªqC⁄fig
(
uöt32_t
 
RTC_Tam≥rSam∂ögFªq
);

843 
RTC_Tam≥rPösPªch¨geDuøti⁄
(
uöt32_t
 
RTC_Tam≥rPªch¨geDuøti⁄
);

844 
RTC_TimeSèmpOnTam≥rDëe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

845 
RTC_Tam≥rPuŒUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

848 
RTC_WrôeBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
, uöt32_à
D©a
);

849 
uöt32_t
 
RTC_RódBackupRegi°î
(uöt32_à
RTC_BKP_DR
);

853 
RTC_Tam≥rPöSñe˘i⁄
(
uöt32_t
 
RTC_Tam≥rPö
);

854 
RTC_TimeSèmpPöSñe˘i⁄
(
uöt32_t
 
RTC_TimeSèmpPö
);

855 
RTC_OuçutTy≥C⁄fig
(
uöt32_t
 
RTC_OuçutTy≥
);

858 
Eº‹Sètus
 
RTC_SynchroShi·C⁄fig
(
uöt32_t
 
RTC_Shi·Add1S
, uöt32_à
RTC_Shi·SubFS
);

861 
RTC_ITC⁄fig
(
uöt32_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

862 
FœgSètus
 
RTC_GëFœgSètus
(
uöt32_t
 
RTC_FLAG
);

863 
RTC_CÀ¨Fœg
(
uöt32_t
 
RTC_FLAG
);

864 
ITSètus
 
RTC_GëITSètus
(
uöt32_t
 
RTC_IT
);

865 
RTC_CÀ¨ITPídögBô
(
uöt32_t
 
RTC_IT
);

867 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_sai.h

30 #i‚de‡
__STM32F4xx_SAI_H


31 
	#__STM32F4xx_SAI_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
SAI_AudioMode
;

59 
uöt32_t
 
SAI_PrŸocﬁ
;

62 
uöt32_t
 
SAI_D©aSize
;

66 
uöt32_t
 
SAI_Fú°Bô
;

70 
uöt32_t
 
SAI_ClockSåobög
;

73 
uöt32_t
 
SAI_Synchro
;

76 
uöt32_t
 
SAI_OUTDRIV
;

81 
uöt32_t
 
SAI_NoDividî
;

84 
uöt32_t
 
SAI_Ma°îDividî
;

88 
uöt32_t
 
SAI_FIFOThªshﬁd
;

90 }
	tSAI_InôTy≥Def
;

99 
uöt32_t
 
SAI_FømeLígth
;

107 
uöt32_t
 
SAI_A˘iveFømeLígth
;

113 
uöt32_t
 
SAI_FSDeföôi⁄
;

117 
uöt32_t
 
SAI_FSPﬁ¨ôy
;

121 
uöt32_t
 
SAI_FSOff£t
;

125 }
	tSAI_FømeInôTy≥Def
;

133 
uöt32_t
 
SAI_Fú°BôOff£t
;

137 
uöt32_t
 
SAI_SlŸSize
;

141 
uöt32_t
 
SAI_SlŸNumbî
;

145 
uöt32_t
 
SAI_SlŸA˘ive
;

148 }
	tSAI_SlŸInôTy≥Def
;

156 
	#IS_SAI_PERIPH
(
PERIPH
Ë((PERIPHË=
SAI1
)

	)

158 
	#IS_SAI_BLOCK_PERIPH
(
PERIPH
Ë(((PERIPHË=
SAI1_Block_A
) || \

159 ((
PERIPH
Ë=
SAI1_Block_B
))

	)

165 
	#SAI_Mode_Ma°îTx
 ((
uöt32_t
)0x00000000)

	)

166 
	#SAI_Mode_Ma°îRx
 ((
uöt32_t
)0x00000001)

	)

167 
	#SAI_Mode_SœveTx
 ((
uöt32_t
)0x00000002)

	)

168 
	#SAI_Mode_SœveRx
 ((
uöt32_t
)0x00000003)

	)

169 
	#IS_SAI_BLOCK_MODE
(
MODE
Ë(((MODEË=
SAI_Mode_Ma°îTx
) || \

170 ((
MODE
Ë=
SAI_Mode_Ma°îRx
) || \

171 ((
MODE
Ë=
SAI_Mode_SœveTx
) || \

172 ((
MODE
Ë=
SAI_Mode_SœveRx
))

	)

181 
	#SAI_Fªe_PrŸocﬁ
 ((
uöt32_t
)0x00000000)

	)

182 
	#SAI_SPDIF_PrŸocﬁ
 ((
uöt32_t
)
SAI_xCR1_PRTCFG_0
)

	)

183 
	#SAI_AC97_PrŸocﬁ
 ((
uöt32_t
)
SAI_xCR1_PRTCFG_1
)

	)

184 
	#IS_SAI_BLOCK_PROTOCOL
(
PROTOCOL
Ë(((PROTOCOLË=
SAI_Fªe_PrŸocﬁ
) || \

185 ((
PROTOCOL
Ë=
SAI_SPDIF_PrŸocﬁ
) || \

186 ((
PROTOCOL
Ë=
SAI_AC97_PrŸocﬁ
))

	)

195 
	#SAI_D©aSize_8b
 ((
uöt32_t
)0x00000040)

	)

196 
	#SAI_D©aSize_10b
 ((
uöt32_t
)0x00000060)

	)

197 
	#SAI_D©aSize_16b
 ((
uöt32_t
)0x00000080)

	)

198 
	#SAI_D©aSize_20b
 ((
uöt32_t
)0x000000A0)

	)

199 
	#SAI_D©aSize_24b
 ((
uöt32_t
)0x000000C0)

	)

200 
	#SAI_D©aSize_32b
 ((
uöt32_t
)0x000000E0)

	)

201 
	#IS_SAI_BLOCK_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SAI_D©aSize_8b
) || \

202 ((
DATASIZE
Ë=
SAI_D©aSize_10b
) || \

203 ((
DATASIZE
Ë=
SAI_D©aSize_16b
) || \

204 ((
DATASIZE
Ë=
SAI_D©aSize_20b
) || \

205 ((
DATASIZE
Ë=
SAI_D©aSize_24b
) || \

206 ((
DATASIZE
Ë=
SAI_D©aSize_32b
))

	)

215 
	#SAI_Fú°Bô_MSB
 ((
uöt32_t
)0x00000000)

	)

216 
	#SAI_Fú°Bô_LSB
 ((
uöt32_t
)
SAI_xCR1_LSBFIRST
)

	)

217 
	#IS_SAI_BLOCK_FIRST_BIT
(
BIT
Ë(((BITË=
SAI_Fú°Bô_MSB
) || \

218 ((
BIT
Ë=
SAI_Fú°Bô_LSB
))

	)

227 
	#SAI_ClockSåobög_FÆlögEdge
 ((
uöt32_t
)0x00000000)

	)

228 
	#SAI_ClockSåobög_RisögEdge
 ((
uöt32_t
)
SAI_xCR1_CKSTR
)

	)

229 
	#IS_SAI_BLOCK_CLOCK_STROBING
(
CLOCK
Ë(((CLOCKË=
SAI_ClockSåobög_FÆlögEdge
) || \

230 ((
CLOCK
Ë=
SAI_ClockSåobög_RisögEdge
))

	)

239 
	#SAI_Asynchr⁄ous
 ((
uöt32_t
)0x00000000)

	)

240 
	#SAI_Synchr⁄ous
 ((
uöt32_t
)
SAI_xCR1_SYNCEN_0
)

	)

241 
	#IS_SAI_BLOCK_SYNCHRO
(
SYNCHRO
Ë(((SYNCHROË=
SAI_Synchr⁄ous
) || \

242 ((
SYNCHRO
Ë=
SAI_Asynchr⁄ous
))

	)

251 
	#SAI_OuçutDrive_DißbÀd
 ((
uöt32_t
)0x00000000)

	)

252 
	#SAI_OuçutDrive_E«bÀd
 ((
uöt32_t
)
SAI_xCR1_OUTDRIV
)

	)

253 
	#IS_SAI_BLOCK_OUTPUT_DRIVE
(
DRIVE
Ë(((DRIVEË=
SAI_OuçutDrive_DißbÀd
) || \

254 ((
DRIVE
Ë=
SAI_OuçutDrive_E«bÀd
))

	)

265 
	#SAI_Ma°îDividî_E«bÀd
 ((
uöt32_t
)0x00000000)

	)

266 
	#SAI_Ma°îDividî_DißbÀd
 ((
uöt32_t
)
SAI_xCR1_NODIV
)

	)

267 
	#IS_SAI_BLOCK_NODIVIDER
(
NODIVIDER
Ë(((NODIVIDERË=
SAI_Ma°îDividî_E«bÀd
) || \

268 ((
NODIVIDER
Ë=
SAI_Ma°îDividî_DißbÀd
))

	)

277 
	#IS_SAI_BLOCK_MASTER_DIVIDER
(
DIVIDER
Ë((DIVIDERË<15)

	)

286 
	#IS_SAI_BLOCK_FRAME_LENGTH
(
LENGTH
Ë((8 <(LENGTH)Ë&& ((LENGTHË<256))

	)

295 
	#IS_SAI_BLOCK_ACTIVE_FRAME
(
LENGTH
Ë((1 <(LENGTH)Ë&& ((LENGTHË<128))

	)

305 
	#SAI_FS_SèπFøme
 ((
uöt32_t
)0x00000000)

	)

306 
	#I2S_FS_Ch™√lIdítifiˇti⁄
 ((
uöt32_t
)
SAI_xFRCR_FSDEF
)

	)

307 
	#IS_SAI_BLOCK_FS_DEFINITION
(
DEFINITION
Ë(((DEFINITIONË=
SAI_FS_SèπFøme
) || \

308 ((
DEFINITION
Ë=
I2S_FS_Ch™√lIdítifiˇti⁄
))

	)

317 
	#SAI_FS_A˘iveLow
 ((
uöt32_t
)0x00000000)

	)

318 
	#SAI_FS_A˘iveHigh
 ((
uöt32_t
)
SAI_xFRCR_FSPO
)

	)

319 
	#IS_SAI_BLOCK_FS_POLARITY
(
POLARITY
Ë(((POLARITYË=
SAI_FS_A˘iveLow
) || \

320 ((
POLARITY
Ë=
SAI_FS_A˘iveHigh
))

	)

329 
	#SAI_FS_Fú°Bô
 ((
uöt32_t
)0x00000000)

	)

330 
	#SAI_FS_Bef‹eFú°Bô
 ((
uöt32_t
)
SAI_xFRCR_FSOFF
)

	)

331 
	#IS_SAI_BLOCK_FS_OFFSET
(
OFFSET
Ë(((OFFSETË=
SAI_FS_Fú°Bô
) || \

332 ((
OFFSET
Ë=
SAI_FS_Bef‹eFú°Bô
))

	)

340 
	#IS_SAI_BLOCK_FIRSTBIT_OFFSET
(
OFFSET
Ë((OFFSETË<24)

	)

349 
	#SAI_SlŸSize_D©aSize
 ((
uöt32_t
)0x00000000)

	)

350 
	#SAI_SlŸSize_16b
 ((
uöt32_t
)
SAI_xSLOTR_SLOTSZ_0
)

	)

351 
	#SAI_SlŸSize_32b
 ((
uöt32_t
)
SAI_xSLOTR_SLOTSZ_1
)

	)

352 
	#IS_SAI_BLOCK_SLOT_SIZE
(
SIZE
Ë(((SIZEË=
SAI_SlŸSize_D©aSize
) || \

353 ((
SIZE
Ë=
SAI_SlŸSize_16b
) || \

354 ((
SIZE
Ë=
SAI_SlŸSize_32b
))

	)

363 
	#IS_SAI_BLOCK_SLOT_NUMBER
(
NUMBER
Ë((1 <(NUMBER)Ë&& ((NUMBERË<16))

	)

372 
	#SAI_SlŸ_NŸA˘ive
 ((
uöt32_t
)0x00000000)

	)

373 
	#SAI_SlŸA˘ive_0
 ((
uöt32_t
)0x00010000)

	)

374 
	#SAI_SlŸA˘ive_1
 ((
uöt32_t
)0x00020000)

	)

375 
	#SAI_SlŸA˘ive_2
 ((
uöt32_t
)0x00040000)

	)

376 
	#SAI_SlŸA˘ive_3
 ((
uöt32_t
)0x00080000)

	)

377 
	#SAI_SlŸA˘ive_4
 ((
uöt32_t
)0x00100000)

	)

378 
	#SAI_SlŸA˘ive_5
 ((
uöt32_t
)0x00200000)

	)

379 
	#SAI_SlŸA˘ive_6
 ((
uöt32_t
)0x00400000)

	)

380 
	#SAI_SlŸA˘ive_7
 ((
uöt32_t
)0x00800000)

	)

381 
	#SAI_SlŸA˘ive_8
 ((
uöt32_t
)0x01000000)

	)

382 
	#SAI_SlŸA˘ive_9
 ((
uöt32_t
)0x02000000)

	)

383 
	#SAI_SlŸA˘ive_10
 ((
uöt32_t
)0x04000000)

	)

384 
	#SAI_SlŸA˘ive_11
 ((
uöt32_t
)0x08000000)

	)

385 
	#SAI_SlŸA˘ive_12
 ((
uöt32_t
)0x10000000)

	)

386 
	#SAI_SlŸA˘ive_13
 ((
uöt32_t
)0x20000000)

	)

387 
	#SAI_SlŸA˘ive_14
 ((
uöt32_t
)0x40000000)

	)

388 
	#SAI_SlŸA˘ive_15
 ((
uöt32_t
)0x80000000)

	)

389 
	#SAI_SlŸA˘ive_ALL
 ((
uöt32_t
)0xFFFF0000)

	)

391 
	#IS_SAI_SLOT_ACTIVE
(
ACTIVE
Ë((ACTIVEË!0)

	)

401 
	#SAI_M⁄oMode
 ((
uöt32_t
)
SAI_xCR1_MONO
)

	)

402 
	#SAI_SåeoMode
 ((
uöt32_t
)0x00000000)

	)

403 
	#IS_SAI_BLOCK_MONO_STREO_MODE
(
MODE
Ë(((MODEË=
SAI_M⁄oMode
) ||\

404 ((
MODE
Ë=
SAI_SåeoMode
))

	)

413 
	#SAI_Ouçut_NŸRñó£d
 ((
uöt32_t
)0x00000000)

	)

414 
	#SAI_Ouçut_Rñó£d
 ((
uöt32_t
)
SAI_xCR2_TRIS
)

	)

415 
	#IS_SAI_BLOCK_TRISTATE_MANAGEMENT
(
STATE
Ë(((STATEË=
SAI_Ouçut_NŸRñó£d
) ||\

416 ((
STATE
Ë=
SAI_Ouçut_Rñó£d
))

	)

425 
	#SAI_Thªshﬁd_FIFOEm±y
 ((
uöt32_t
)0x00000000)

	)

426 
	#SAI_FIFOThªshﬁd_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000001)

	)

427 
	#SAI_FIFOThªshﬁd_HÆfFuŒ
 ((
uöt32_t
)0x00000002)

	)

428 
	#SAI_FIFOThªshﬁd_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00000003)

	)

429 
	#SAI_FIFOThªshﬁd_FuŒ
 ((
uöt32_t
)0x00000004)

	)

430 
	#IS_SAI_BLOCK_FIFO_THRESHOLD
(
THRESHOLD
Ë(((THRESHOLDË=
SAI_Thªshﬁd_FIFOEm±y
) || \

431 ((
THRESHOLD
Ë=
SAI_FIFOThªshﬁd_1Qu¨ãrFuŒ
) || \

432 ((
THRESHOLD
Ë=
SAI_FIFOThªshﬁd_HÆfFuŒ
) || \

433 ((
THRESHOLD
Ë=
SAI_FIFOThªshﬁd_3Qu¨ãrsFuŒ
) || \

434 ((
THRESHOLD
Ë=
SAI_FIFOThªshﬁd_FuŒ
))

	)

443 
	#SAI_NoCom∑ndög
 ((
uöt32_t
)0x00000000)

	)

444 
	#SAI_ULaw_1CPL_Com∑ndög
 ((
uöt32_t
)0x00008000)

	)

445 
	#SAI_ALaw_1CPL_Com∑ndög
 ((
uöt32_t
)0x0000C000)

	)

446 
	#SAI_ULaw_2CPL_Com∑ndög
 ((
uöt32_t
)0x0000A000)

	)

447 
	#SAI_ALaw_2CPL_Com∑ndög
 ((
uöt32_t
)0x0000E000)

	)

448 
	#IS_SAI_BLOCK_COMPANDING_MODE
(
MODE
Ë(((MODEË=
SAI_NoCom∑ndög
) || \

449 ((
MODE
Ë=
SAI_ULaw_1CPL_Com∑ndög
) || \

450 ((
MODE
Ë=
SAI_ALaw_1CPL_Com∑ndög
) || \

451 ((
MODE
Ë=
SAI_ULaw_2CPL_Com∑ndög
) || \

452 ((
MODE
Ë=
SAI_ALaw_2CPL_Com∑ndög
))

	)

461 
	#SAI_ZîoVÆue
 ((
uöt32_t
)0x00000000)

	)

462 
	#SAI_La°SítVÆue
 ((
uöt32_t
)
SAI_xCR2_MUTEVAL
)

	)

463 
	#IS_SAI_BLOCK_MUTE_VALUE
(
VALUE
Ë(((VALUEË=
SAI_ZîoVÆue
) || \

464 ((
VALUE
Ë=
SAI_La°SítVÆue
))

	)

473 
	#IS_SAI_BLOCK_MUTE_COUNTER
(
COUNTER
Ë((COUNTERË<63)

	)

483 
	#SAI_IT_OVRUDR
 ((
uöt32_t
)
SAI_xIMR_OVRUDRIE
)

	)

484 
	#SAI_IT_MUTEDET
 ((
uöt32_t
)
SAI_xIMR_MUTEDETIE
)

	)

485 
	#SAI_IT_WCKCFG
 ((
uöt32_t
)
SAI_xIMR_WCKCFGIE
)

	)

486 
	#SAI_IT_FREQ
 ((
uöt32_t
)
SAI_xIMR_FREQIE
)

	)

487 
	#SAI_IT_CNRDY
 ((
uöt32_t
)
SAI_xIMR_CNRDYIE
)

	)

488 
	#SAI_IT_AFSDET
 ((
uöt32_t
)
SAI_xIMR_AFSDETIE
)

	)

489 
	#SAI_IT_LFSDET
 ((
uöt32_t
)
SAI_xIMR_LFSDETIE
)

	)

491 
	#IS_SAI_BLOCK_CONFIG_IT
(
IT
Ë(((ITË=
SAI_IT_OVRUDR
) || \

492 ((
IT
Ë=
SAI_IT_MUTEDET
) || \

493 ((
IT
Ë=
SAI_IT_WCKCFG
) || \

494 ((
IT
Ë=
SAI_IT_FREQ
) || \

495 ((
IT
Ë=
SAI_IT_CNRDY
) || \

496 ((
IT
Ë=
SAI_IT_AFSDET
) || \

497 ((
IT
Ë=
SAI_IT_LFSDET
))

	)

506 
	#SAI_FLAG_OVRUDR
 ((
uöt32_t
)
SAI_xSR_OVRUDR
)

	)

507 
	#SAI_FLAG_MUTEDET
 ((
uöt32_t
)
SAI_xSR_MUTEDET
)

	)

508 
	#SAI_FLAG_WCKCFG
 ((
uöt32_t
)
SAI_xSR_WCKCFG
)

	)

509 
	#SAI_FLAG_FREQ
 ((
uöt32_t
)
SAI_xSR_FREQ
)

	)

510 
	#SAI_FLAG_CNRDY
 ((
uöt32_t
)
SAI_xSR_CNRDY
)

	)

511 
	#SAI_FLAG_AFSDET
 ((
uöt32_t
)
SAI_xSR_AFSDET
)

	)

512 
	#SAI_FLAG_LFSDET
 ((
uöt32_t
)
SAI_xSR_LFSDET
)

	)

514 
	#IS_SAI_BLOCK_GET_FLAG
(
FLAG
Ë(((FLAGË=
SAI_FLAG_OVRUDR
) || \

515 ((
FLAG
Ë=
SAI_FLAG_MUTEDET
) || \

516 ((
FLAG
Ë=
SAI_FLAG_WCKCFG
) || \

517 ((
FLAG
Ë=
SAI_FLAG_FREQ
) || \

518 ((
FLAG
Ë=
SAI_FLAG_CNRDY
) || \

519 ((
FLAG
Ë=
SAI_FLAG_AFSDET
) || \

520 ((
FLAG
Ë=
SAI_FLAG_LFSDET
))

	)

522 
	#IS_SAI_BLOCK_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SAI_FLAG_OVRUDR
) || \

523 ((
FLAG
Ë=
SAI_FLAG_MUTEDET
) || \

524 ((
FLAG
Ë=
SAI_FLAG_WCKCFG
) || \

525 ((
FLAG
Ë=
SAI_FLAG_FREQ
) || \

526 ((
FLAG
Ë=
SAI_FLAG_CNRDY
) || \

527 ((
FLAG
Ë=
SAI_FLAG_AFSDET
) || \

528 ((
FLAG
Ë=
SAI_FLAG_LFSDET
))

	)

536 
	#SAI_FIFOSètus_Em±y
 ((
uöt32_t
)0x00000000)

	)

537 
	#SAI_FIFOSètus_Less1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00010000)

	)

538 
	#SAI_FIFOSètus_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00020000)

	)

539 
	#SAI_FIFOSètus_HÆfFuŒ
 ((
uöt32_t
)0x00030000)

	)

540 
	#SAI_FIFOSètus_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00040000)

	)

541 
	#SAI_FIFOSètus_FuŒ
 ((
uöt32_t
)0x00050000)

	)

543 
	#IS_SAI_BLOCK_FIFO_STATUS
(
STATUS
Ë(((STATUSË=
SAI_FIFOSètus_Less1Qu¨ãrFuŒ
 ) || \

544 ((
STATUS
Ë=
SAI_FIFOSètus_HÆfFuŒ
) || \

545 ((
STATUS
Ë=
SAI_FIFOSètus_1Qu¨ãrFuŒ
) || \

546 ((
STATUS
Ë=
SAI_FIFOSètus_3Qu¨ãrsFuŒ
) || \

547 ((
STATUS
Ë=
SAI_FIFOSètus_FuŒ
) || \

548 ((
STATUS
Ë=
SAI_FIFOSètus_Em±y
))

	)

562 
SAI_DeInô
(
SAI_Ty≥Def
* 
SAIx
);

565 
SAI_Inô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
SAI_InôTy≥Def
* 
SAI_InôSåu˘
);

566 
SAI_FømeInô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
SAI_FømeInôTy≥Def
* 
SAI_FømeInôSåu˘
);

567 
SAI_SlŸInô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
SAI_SlŸInôTy≥Def
* 
SAI_SlŸInôSåu˘
);

568 
SAI_Såu˘Inô
(
SAI_InôTy≥Def
* 
SAI_InôSåu˘
);

569 
SAI_FømeSåu˘Inô
(
SAI_FømeInôTy≥Def
* 
SAI_FømeInôSåu˘
);

570 
SAI_SlŸSåu˘Inô
(
SAI_SlŸInôTy≥Def
* 
SAI_SlŸInôSåu˘
);

572 
SAI_Cmd
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

573 
SAI_M⁄oModeC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_M⁄o_SåeoMode
);

574 
SAI_TRISèãC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_TRISèã
);

575 
SAI_Com∑ndögModeC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_Com∑ndögMode
);

576 
SAI_MuãModeCmd
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

577 
SAI_MuãVÆueC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_MuãVÆue
);

578 
SAI_MuãFømeCou¡îC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_MuãCou¡î
);

579 
SAI_FlushFIFO
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
);

582 
SAI_SídD©a
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
D©a
);

583 
uöt32_t
 
SAI_Re˚iveD©a
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
);

586 
SAI_DMACmd
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

589 
SAI_ITC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

590 
FœgSètus
 
SAI_GëFœgSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_FLAG
);

591 
SAI_CÀ¨Fœg
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_FLAG
);

592 
ITSètus
 
SAI_GëITSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_IT
);

593 
SAI_CÀ¨ITPídögBô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_IT
);

594 
Fun˘i⁄ÆSèã
 
SAI_GëCmdSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
);

595 
uöt32_t
 
SAI_GëFIFOSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
);

597 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_sdio.h

30 #i‚de‡
__STM32F4xx_SDIO_H


31 
	#__STM32F4xx_SDIO_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

52 
uöt32_t
 
SDIO_ClockEdge
;

55 
uöt32_t
 
SDIO_ClockBy∑ss
;

59 
uöt32_t
 
SDIO_ClockPowîSave
;

63 
uöt32_t
 
SDIO_BusWide
;

66 
uöt32_t
 
SDIO_H¨dw¨eFlowC⁄åﬁ
;

69 
uöt8_t
 
SDIO_ClockDiv
;

72 } 
	tSDIO_InôTy≥Def
;

76 
uöt32_t
 
SDIO_Argumít
;

81 
uöt32_t
 
SDIO_CmdIndex
;

83 
uöt32_t
 
SDIO_Re•⁄£
;

86 
uöt32_t
 
SDIO_Waô
;

89 
uöt32_t
 
SDIO_CPSM
;

92 } 
	tSDIO_CmdInôTy≥Def
;

96 
uöt32_t
 
SDIO_D©aTimeOut
;

98 
uöt32_t
 
SDIO_D©aLígth
;

100 
uöt32_t
 
SDIO_D©aBlockSize
;

103 
uöt32_t
 
SDIO_Tøns„rDú
;

107 
uöt32_t
 
SDIO_Tøns„rMode
;

110 
uöt32_t
 
SDIO_DPSM
;

113 } 
	tSDIO_D©aInôTy≥Def
;

126 
	#SDIO_ClockEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

127 
	#SDIO_ClockEdge_FÆlög
 ((
uöt32_t
)0x00002000)

	)

128 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_ClockEdge_Risög
) || \

129 ((
EDGE
Ë=
SDIO_ClockEdge_FÆlög
))

	)

138 
	#SDIO_ClockBy∑ss_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

139 
	#SDIO_ClockBy∑ss_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

140 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_ClockBy∑ss_DißbÀ
) || \

141 ((
BYPASS
Ë=
SDIO_ClockBy∑ss_E«bÀ
))

	)

150 
	#SDIO_ClockPowîSave_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

151 
	#SDIO_ClockPowîSave_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

152 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_ClockPowîSave_DißbÀ
) || \

153 ((
SAVE
Ë=
SDIO_ClockPowîSave_E«bÀ
))

	)

162 
	#SDIO_BusWide_1b
 ((
uöt32_t
)0x00000000)

	)

163 
	#SDIO_BusWide_4b
 ((
uöt32_t
)0x00000800)

	)

164 
	#SDIO_BusWide_8b
 ((
uöt32_t
)0x00001000)

	)

165 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BusWide_1b
Ë|| ((WIDEË=
SDIO_BusWide_4b
) || \

166 ((
WIDE
Ë=
SDIO_BusWide_8b
))

	)

176 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

177 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

178 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
) || \

179 ((
CONTROL
Ë=
SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
))

	)

188 
	#SDIO_PowîSèã_OFF
 ((
uöt32_t
)0x00000000)

	)

189 
	#SDIO_PowîSèã_ON
 ((
uöt32_t
)0x00000003)

	)

190 
	#IS_SDIO_POWER_STATE
(
STATE
Ë(((STATEË=
SDIO_PowîSèã_OFF
Ë|| ((STATEË=
SDIO_PowîSèã_ON
))

	)

200 
	#SDIO_IT_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

201 
	#SDIO_IT_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

202 
	#SDIO_IT_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

203 
	#SDIO_IT_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

204 
	#SDIO_IT_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

205 
	#SDIO_IT_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

206 
	#SDIO_IT_CMDREND
 ((
uöt32_t
)0x00000040)

	)

207 
	#SDIO_IT_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

208 
	#SDIO_IT_DATAEND
 ((
uöt32_t
)0x00000100)

	)

209 
	#SDIO_IT_STBITERR
 ((
uöt32_t
)0x00000200)

	)

210 
	#SDIO_IT_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

211 
	#SDIO_IT_CMDACT
 ((
uöt32_t
)0x00000800)

	)

212 
	#SDIO_IT_TXACT
 ((
uöt32_t
)0x00001000)

	)

213 
	#SDIO_IT_RXACT
 ((
uöt32_t
)0x00002000)

	)

214 
	#SDIO_IT_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

215 
	#SDIO_IT_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

216 
	#SDIO_IT_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

217 
	#SDIO_IT_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

218 
	#SDIO_IT_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

219 
	#SDIO_IT_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

220 
	#SDIO_IT_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

221 
	#SDIO_IT_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

222 
	#SDIO_IT_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

223 
	#SDIO_IT_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

224 
	#IS_SDIO_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

233 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

242 
	#SDIO_Re•⁄£_No
 ((
uöt32_t
)0x00000000)

	)

243 
	#SDIO_Re•⁄£_Sh‹t
 ((
uöt32_t
)0x00000040)

	)

244 
	#SDIO_Re•⁄£_L⁄g
 ((
uöt32_t
)0x000000C0)

	)

245 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_Re•⁄£_No
) || \

246 ((
RESPONSE
Ë=
SDIO_Re•⁄£_Sh‹t
) || \

247 ((
RESPONSE
Ë=
SDIO_Re•⁄£_L⁄g
))

	)

256 
	#SDIO_Waô_No
 ((
uöt32_t
)0x00000000Ë

	)

257 
	#SDIO_Waô_IT
 ((
uöt32_t
)0x00000100Ë

	)

258 
	#SDIO_Waô_Píd
 ((
uöt32_t
)0x00000200Ë

	)

259 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_Waô_No
Ë|| ((WAITË=
SDIO_Waô_IT
) || \

260 ((
WAIT
Ë=
SDIO_Waô_Píd
))

	)

269 
	#SDIO_CPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

270 
	#SDIO_CPSM_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

271 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_E«bÀ
Ë|| ((CPSMË=
SDIO_CPSM_DißbÀ
))

	)

280 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

281 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

282 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

283 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

284 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
Ë|| ((RESPË=
SDIO_RESP2
) || \

285 ((
RESP
Ë=
SDIO_RESP3
Ë|| ((RESPË=
SDIO_RESP4
))

	)

294 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

303 
	#SDIO_D©aBlockSize_1b
 ((
uöt32_t
)0x00000000)

	)

304 
	#SDIO_D©aBlockSize_2b
 ((
uöt32_t
)0x00000010)

	)

305 
	#SDIO_D©aBlockSize_4b
 ((
uöt32_t
)0x00000020)

	)

306 
	#SDIO_D©aBlockSize_8b
 ((
uöt32_t
)0x00000030)

	)

307 
	#SDIO_D©aBlockSize_16b
 ((
uöt32_t
)0x00000040)

	)

308 
	#SDIO_D©aBlockSize_32b
 ((
uöt32_t
)0x00000050)

	)

309 
	#SDIO_D©aBlockSize_64b
 ((
uöt32_t
)0x00000060)

	)

310 
	#SDIO_D©aBlockSize_128b
 ((
uöt32_t
)0x00000070)

	)

311 
	#SDIO_D©aBlockSize_256b
 ((
uöt32_t
)0x00000080)

	)

312 
	#SDIO_D©aBlockSize_512b
 ((
uöt32_t
)0x00000090)

	)

313 
	#SDIO_D©aBlockSize_1024b
 ((
uöt32_t
)0x000000A0)

	)

314 
	#SDIO_D©aBlockSize_2048b
 ((
uöt32_t
)0x000000B0)

	)

315 
	#SDIO_D©aBlockSize_4096b
 ((
uöt32_t
)0x000000C0)

	)

316 
	#SDIO_D©aBlockSize_8192b
 ((
uöt32_t
)0x000000D0)

	)

317 
	#SDIO_D©aBlockSize_16384b
 ((
uöt32_t
)0x000000E0)

	)

318 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_D©aBlockSize_1b
) || \

319 ((
SIZE
Ë=
SDIO_D©aBlockSize_2b
) || \

320 ((
SIZE
Ë=
SDIO_D©aBlockSize_4b
) || \

321 ((
SIZE
Ë=
SDIO_D©aBlockSize_8b
) || \

322 ((
SIZE
Ë=
SDIO_D©aBlockSize_16b
) || \

323 ((
SIZE
Ë=
SDIO_D©aBlockSize_32b
) || \

324 ((
SIZE
Ë=
SDIO_D©aBlockSize_64b
) || \

325 ((
SIZE
Ë=
SDIO_D©aBlockSize_128b
) || \

326 ((
SIZE
Ë=
SDIO_D©aBlockSize_256b
) || \

327 ((
SIZE
Ë=
SDIO_D©aBlockSize_512b
) || \

328 ((
SIZE
Ë=
SDIO_D©aBlockSize_1024b
) || \

329 ((
SIZE
Ë=
SDIO_D©aBlockSize_2048b
) || \

330 ((
SIZE
Ë=
SDIO_D©aBlockSize_4096b
) || \

331 ((
SIZE
Ë=
SDIO_D©aBlockSize_8192b
) || \

332 ((
SIZE
Ë=
SDIO_D©aBlockSize_16384b
))

	)

341 
	#SDIO_Tøns„rDú_ToC¨d
 ((
uöt32_t
)0x00000000)

	)

342 
	#SDIO_Tøns„rDú_ToSDIO
 ((
uöt32_t
)0x00000002)

	)

343 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_Tøns„rDú_ToC¨d
) || \

344 ((
DIR
Ë=
SDIO_Tøns„rDú_ToSDIO
))

	)

353 
	#SDIO_Tøns„rMode_Block
 ((
uöt32_t
)0x00000000)

	)

354 
	#SDIO_Tøns„rMode_Såóm
 ((
uöt32_t
)0x00000004)

	)

355 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_Tøns„rMode_Såóm
) || \

356 ((
MODE
Ë=
SDIO_Tøns„rMode_Block
))

	)

365 
	#SDIO_DPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

366 
	#SDIO_DPSM_E«bÀ
 ((
uöt32_t
)0x00000001)

	)

367 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_E«bÀ
Ë|| ((DPSMË=
SDIO_DPSM_DißbÀ
))

	)

376 
	#SDIO_FLAG_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

377 
	#SDIO_FLAG_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

378 
	#SDIO_FLAG_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

379 
	#SDIO_FLAG_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

380 
	#SDIO_FLAG_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

381 
	#SDIO_FLAG_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

382 
	#SDIO_FLAG_CMDREND
 ((
uöt32_t
)0x00000040)

	)

383 
	#SDIO_FLAG_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

384 
	#SDIO_FLAG_DATAEND
 ((
uöt32_t
)0x00000100)

	)

385 
	#SDIO_FLAG_STBITERR
 ((
uöt32_t
)0x00000200)

	)

386 
	#SDIO_FLAG_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

387 
	#SDIO_FLAG_CMDACT
 ((
uöt32_t
)0x00000800)

	)

388 
	#SDIO_FLAG_TXACT
 ((
uöt32_t
)0x00001000)

	)

389 
	#SDIO_FLAG_RXACT
 ((
uöt32_t
)0x00002000)

	)

390 
	#SDIO_FLAG_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

391 
	#SDIO_FLAG_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

392 
	#SDIO_FLAG_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

393 
	#SDIO_FLAG_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

394 
	#SDIO_FLAG_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

395 
	#SDIO_FLAG_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

396 
	#SDIO_FLAG_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

397 
	#SDIO_FLAG_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

398 
	#SDIO_FLAG_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

399 
	#SDIO_FLAG_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

400 
	#IS_SDIO_FLAG
(
FLAG
Ë(((FLAGË=
SDIO_FLAG_CCRCFAIL
) || \

401 ((
FLAG
Ë=
SDIO_FLAG_DCRCFAIL
) || \

402 ((
FLAG
Ë=
SDIO_FLAG_CTIMEOUT
) || \

403 ((
FLAG
Ë=
SDIO_FLAG_DTIMEOUT
) || \

404 ((
FLAG
Ë=
SDIO_FLAG_TXUNDERR
) || \

405 ((
FLAG
Ë=
SDIO_FLAG_RXOVERR
) || \

406 ((
FLAG
Ë=
SDIO_FLAG_CMDREND
) || \

407 ((
FLAG
Ë=
SDIO_FLAG_CMDSENT
) || \

408 ((
FLAG
Ë=
SDIO_FLAG_DATAEND
) || \

409 ((
FLAG
Ë=
SDIO_FLAG_STBITERR
) || \

410 ((
FLAG
Ë=
SDIO_FLAG_DBCKEND
) || \

411 ((
FLAG
Ë=
SDIO_FLAG_CMDACT
) || \

412 ((
FLAG
Ë=
SDIO_FLAG_TXACT
) || \

413 ((
FLAG
Ë=
SDIO_FLAG_RXACT
) || \

414 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOHE
) || \

415 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOHF
) || \

416 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOF
) || \

417 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOF
) || \

418 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOE
) || \

419 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOE
) || \

420 ((
FLAG
Ë=
SDIO_FLAG_TXDAVL
) || \

421 ((
FLAG
Ë=
SDIO_FLAG_RXDAVL
) || \

422 ((
FLAG
Ë=
SDIO_FLAG_SDIOIT
) || \

423 ((
FLAG
Ë=
SDIO_FLAG_CEATAEND
))

	)

425 
	#IS_SDIO_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((FLAGË!(uöt32_t)0x00))

	)

427 
	#IS_SDIO_GET_IT
(
IT
Ë(((ITË=
SDIO_IT_CCRCFAIL
) || \

428 ((
IT
Ë=
SDIO_IT_DCRCFAIL
) || \

429 ((
IT
Ë=
SDIO_IT_CTIMEOUT
) || \

430 ((
IT
Ë=
SDIO_IT_DTIMEOUT
) || \

431 ((
IT
Ë=
SDIO_IT_TXUNDERR
) || \

432 ((
IT
Ë=
SDIO_IT_RXOVERR
) || \

433 ((
IT
Ë=
SDIO_IT_CMDREND
) || \

434 ((
IT
Ë=
SDIO_IT_CMDSENT
) || \

435 ((
IT
Ë=
SDIO_IT_DATAEND
) || \

436 ((
IT
Ë=
SDIO_IT_STBITERR
) || \

437 ((
IT
Ë=
SDIO_IT_DBCKEND
) || \

438 ((
IT
Ë=
SDIO_IT_CMDACT
) || \

439 ((
IT
Ë=
SDIO_IT_TXACT
) || \

440 ((
IT
Ë=
SDIO_IT_RXACT
) || \

441 ((
IT
Ë=
SDIO_IT_TXFIFOHE
) || \

442 ((
IT
Ë=
SDIO_IT_RXFIFOHF
) || \

443 ((
IT
Ë=
SDIO_IT_TXFIFOF
) || \

444 ((
IT
Ë=
SDIO_IT_RXFIFOF
) || \

445 ((
IT
Ë=
SDIO_IT_TXFIFOE
) || \

446 ((
IT
Ë=
SDIO_IT_RXFIFOE
) || \

447 ((
IT
Ë=
SDIO_IT_TXDAVL
) || \

448 ((
IT
Ë=
SDIO_IT_RXDAVL
) || \

449 ((
IT
Ë=
SDIO_IT_SDIOIT
) || \

450 ((
IT
Ë=
SDIO_IT_CEATAEND
))

	)

452 
	#IS_SDIO_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

462 
	#SDIO_RódWaôMode_DATA2
 ((
uöt32_t
)0x00000000)

	)

463 
	#SDIO_RódWaôMode_CLK
 ((
uöt32_t
)0x00000001)

	)

464 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_RódWaôMode_CLK
) || \

465 ((
MODE
Ë=
SDIO_RódWaôMode_DATA2
))

	)

477 
SDIO_DeInô
();

480 
SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

481 
SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

482 
SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

483 
SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
);

484 
uöt32_t
 
SDIO_GëPowîSèã
();

487 
SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

488 
SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
);

489 
uöt8_t
 
SDIO_GëComm™dRe•⁄£
();

490 
uöt32_t
 
SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

493 
SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

494 
SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

495 
uöt32_t
 
SDIO_GëD©aCou¡î
();

496 
uöt32_t
 
SDIO_RódD©a
();

497 
SDIO_WrôeD©a
(
uöt32_t
 
D©a
);

498 
uöt32_t
 
SDIO_GëFIFOCou¡
();

501 
SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

502 
SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

503 
SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

504 
SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

505 
SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

508 
SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

509 
SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

510 
SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

513 
SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

516 
SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

517 
FœgSètus
 
SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
);

518 
SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
);

519 
ITSètus
 
SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
);

520 
SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
);

522 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_spi.h

30 #i‚de‡
__STM32F4xx_SPI_H


31 
	#__STM32F4xx_SPI_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt16_t
 
SPI_Dúe˘i⁄
;

59 
uöt16_t
 
SPI_Mode
;

62 
uöt16_t
 
SPI_D©aSize
;

65 
uöt16_t
 
SPI_CPOL
;

68 
uöt16_t
 
SPI_CPHA
;

71 
uöt16_t
 
SPI_NSS
;

75 
uöt16_t
 
SPI_BaudR©ePªsˇÀr
;

81 
uöt16_t
 
SPI_Fú°Bô
;

84 
uöt16_t
 
SPI_CRCPﬁynomül
;

85 }
	tSPI_InôTy≥Def
;

94 
uöt16_t
 
I2S_Mode
;

97 
uöt16_t
 
I2S_Sènd¨d
;

100 
uöt16_t
 
I2S_D©aF‹m©
;

103 
uöt16_t
 
I2S_MCLKOuçut
;

106 
uöt32_t
 
I2S_AudioFªq
;

109 
uöt16_t
 
I2S_CPOL
;

111 }
	tI2S_InôTy≥Def
;

119 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI1
) || \

120 ((
PERIPH
Ë=
SPI2
) || \

121 ((
PERIPH
Ë=
SPI3
) || \

122 ((
PERIPH
Ë=
SPI4
) || \

123 ((
PERIPH
Ë=
SPI5
) || \

124 ((
PERIPH
Ë=
SPI6
))

	)

126 
	#IS_SPI_ALL_PERIPH_EXT
(
PERIPH
Ë(((PERIPHË=
SPI1
) || \

127 ((
PERIPH
Ë=
SPI2
) || \

128 ((
PERIPH
Ë=
SPI3
) || \

129 ((
PERIPH
Ë=
SPI4
) || \

130 ((
PERIPH
Ë=
SPI5
) || \

131 ((
PERIPH
Ë=
SPI6
) || \

132 ((
PERIPH
Ë=
I2S2ext
) || \

133 ((
PERIPH
Ë=
I2S3ext
))

	)

135 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI2
) || \

136 ((
PERIPH
Ë=
SPI3
))

	)

138 
	#IS_SPI_23_PERIPH_EXT
(
PERIPH
Ë(((PERIPHË=
SPI2
) || \

139 ((
PERIPH
Ë=
SPI3
) || \

140 ((
PERIPH
Ë=
I2S2ext
) || \

141 ((
PERIPH
Ë=
I2S3ext
))

	)

143 
	#IS_I2S_EXT_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2S2ext
) || \

144 ((
PERIPH
Ë=
I2S3ext
))

	)

151 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

152 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

153 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

154 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

155 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
) || \

156 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

157 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

158 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

	)

167 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

168 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

169 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
) || \

170 ((
MODE
Ë=
SPI_Mode_Sœve
))

	)

179 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

180 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

181 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
) || \

182 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

	)

191 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

192 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

193 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
) || \

194 ((
CPOL
Ë=
SPI_CPOL_High
))

	)

203 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

204 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

205 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
) || \

206 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

	)

215 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

216 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

217 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
) || \

218 ((
NSS
Ë=
SPI_NSS_H¨d
))

	)

227 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

228 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

229 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

230 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

231 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

232 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

233 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

234 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

235 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
) || \

236 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

237 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

238 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

239 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

240 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

241 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

242 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

	)

251 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

252 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

253 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
) || \

254 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

	)

263 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

264 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

265 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

266 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

267 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
) || \

268 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

269 ((
MODE
Ë=
I2S_Mode_Ma°îTx
)|| \

270 ((
MODE
Ë=
I2S_Mode_Ma°îRx
))

	)

280 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

281 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

282 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

283 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

284 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

285 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
) || \

286 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

287 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

288 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

289 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

	)

298 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

299 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

300 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

301 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

302 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
) || \

303 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

304 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

305 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

	)

314 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

315 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

316 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
) || \

317 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

	)

326 
	#I2S_AudioFªq_192k
 ((
uöt32_t
)192000)

	)

327 
	#I2S_AudioFªq_96k
 ((
uöt32_t
)96000)

	)

328 
	#I2S_AudioFªq_48k
 ((
uöt32_t
)48000)

	)

329 
	#I2S_AudioFªq_44k
 ((
uöt32_t
)44100)

	)

330 
	#I2S_AudioFªq_32k
 ((
uöt32_t
)32000)

	)

331 
	#I2S_AudioFªq_22k
 ((
uöt32_t
)22050)

	)

332 
	#I2S_AudioFªq_16k
 ((
uöt32_t
)16000)

	)

333 
	#I2S_AudioFªq_11k
 ((
uöt32_t
)11025)

	)

334 
	#I2S_AudioFªq_8k
 ((
uöt32_t
)8000)

	)

335 
	#I2S_AudioFªq_DeÁu…
 ((
uöt32_t
)2)

	)

337 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë((((FREQË>
I2S_AudioFªq_8k
) && \

338 ((
FREQ
Ë<
I2S_AudioFªq_192k
)) || \

339 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

	)

348 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

349 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

350 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
) || \

351 ((
CPOL
Ë=
I2S_CPOL_High
))

	)

360 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

361 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

362 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

371 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

372 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

373 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
) || \

374 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

	)

383 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

384 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

385 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

394 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

395 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

396 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
) || \

397 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

	)

406 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

407 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

408 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

409 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

410 
	#SPI_I2S_IT_TIFRFE
 ((
uöt8_t
)0x58)

	)

412 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
) || \

413 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

414 ((
IT
Ë=
SPI_I2S_IT_ERR
))

	)

416 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

417 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

418 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

420 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

422 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
)|| ((ITË=
SPI_I2S_IT_TXE
) || \

423 ((
IT
Ë=
SPI_IT_CRCERR
Ë|| ((ITË=
SPI_IT_MODF
) || \

424 ((
IT
Ë=
SPI_I2S_IT_OVR
Ë|| ((ITË=
I2S_IT_UDR
) ||\

425 ((
IT
Ë=
SPI_I2S_IT_TIFRFE
))

	)

434 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

435 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

436 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

437 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

438 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

439 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

440 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

441 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

442 
	#SPI_I2S_FLAG_TIFRFE
 ((
uöt16_t
)0x0100)

	)

444 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

445 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
) || \

446 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

447 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

448 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
)|| \

449 ((
FLAG
Ë=
SPI_I2S_FLAG_TIFRFE
))

	)

458 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

467 
	#SPI_DMAReq_Tx
 
SPI_I2S_DMAReq_Tx


	)

468 
	#SPI_DMAReq_Rx
 
SPI_I2S_DMAReq_Rx


	)

469 
	#SPI_IT_TXE
 
SPI_I2S_IT_TXE


	)

470 
	#SPI_IT_RXNE
 
SPI_I2S_IT_RXNE


	)

471 
	#SPI_IT_ERR
 
SPI_I2S_IT_ERR


	)

472 
	#SPI_IT_OVR
 
SPI_I2S_IT_OVR


	)

473 
	#SPI_FLAG_RXNE
 
SPI_I2S_FLAG_RXNE


	)

474 
	#SPI_FLAG_TXE
 
SPI_I2S_FLAG_TXE


	)

475 
	#SPI_FLAG_OVR
 
SPI_I2S_FLAG_OVR


	)

476 
	#SPI_FLAG_BSY
 
SPI_I2S_FLAG_BSY


	)

477 
	#SPI_DeInô
 
SPI_I2S_DeInô


	)

478 
	#SPI_ITC⁄fig
 
SPI_I2S_ITC⁄fig


	)

479 
	#SPI_DMACmd
 
SPI_I2S_DMACmd


	)

480 
	#SPI_SídD©a
 
SPI_I2S_SídD©a


	)

481 
	#SPI_Re˚iveD©a
 
SPI_I2S_Re˚iveD©a


	)

482 
	#SPI_GëFœgSètus
 
SPI_I2S_GëFœgSètus


	)

483 
	#SPI_CÀ¨Fœg
 
SPI_I2S_CÀ¨Fœg


	)

484 
	#SPI_GëITSètus
 
SPI_I2S_GëITSètus


	)

485 
	#SPI_CÀ¨ITPídögBô
 
SPI_I2S_CÀ¨ITPídögBô


	)

498 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

501 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

502 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

503 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

504 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

505 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

506 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

507 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

508 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

509 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

510 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

511 
SPI_TIModeCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

513 
I2S_FuŒDu∂exC⁄fig
(
SPI_Ty≥Def
* 
I2Sxext
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

516 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

517 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

520 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

521 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

522 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

523 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

526 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

529 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

530 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

531 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

532 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

533 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

535 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_syscfg.h

30 #i‚de‡
__STM32F4xx_SYSCFG_H


31 
	#__STM32F4xx_SYSCFG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

58 
	#EXTI_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

59 
	#EXTI_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

60 
	#EXTI_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

61 
	#EXTI_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

62 
	#EXTI_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

63 
	#EXTI_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

64 
	#EXTI_P‹tSour˚GPIOG
 ((
uöt8_t
)0x06)

	)

65 
	#EXTI_P‹tSour˚GPIOH
 ((
uöt8_t
)0x07)

	)

66 
	#EXTI_P‹tSour˚GPIOI
 ((
uöt8_t
)0x08)

	)

67 
	#EXTI_P‹tSour˚GPIOJ
 ((
uöt8_t
)0x09)

	)

68 
	#EXTI_P‹tSour˚GPIOK
 ((
uöt8_t
)0x0A)

	)

70 
	#IS_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
EXTI_P‹tSour˚GPIOA
) || \

71 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOB
) || \

72 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOC
) || \

73 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOD
) || \

74 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOE
) || \

75 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOF
) || \

76 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOG
) || \

77 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOH
) || \

78 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOI
) || \

79 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOJ
) || \

80 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOK
))

	)

90 
	#EXTI_PöSour˚0
 ((
uöt8_t
)0x00)

	)

91 
	#EXTI_PöSour˚1
 ((
uöt8_t
)0x01)

	)

92 
	#EXTI_PöSour˚2
 ((
uöt8_t
)0x02)

	)

93 
	#EXTI_PöSour˚3
 ((
uöt8_t
)0x03)

	)

94 
	#EXTI_PöSour˚4
 ((
uöt8_t
)0x04)

	)

95 
	#EXTI_PöSour˚5
 ((
uöt8_t
)0x05)

	)

96 
	#EXTI_PöSour˚6
 ((
uöt8_t
)0x06)

	)

97 
	#EXTI_PöSour˚7
 ((
uöt8_t
)0x07)

	)

98 
	#EXTI_PöSour˚8
 ((
uöt8_t
)0x08)

	)

99 
	#EXTI_PöSour˚9
 ((
uöt8_t
)0x09)

	)

100 
	#EXTI_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

101 
	#EXTI_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

102 
	#EXTI_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

103 
	#EXTI_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

104 
	#EXTI_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

105 
	#EXTI_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

106 
	#IS_EXTI_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
EXTI_PöSour˚0
) || \

107 ((
PINSOURCE
Ë=
EXTI_PöSour˚1
) || \

108 ((
PINSOURCE
Ë=
EXTI_PöSour˚2
) || \

109 ((
PINSOURCE
Ë=
EXTI_PöSour˚3
) || \

110 ((
PINSOURCE
Ë=
EXTI_PöSour˚4
) || \

111 ((
PINSOURCE
Ë=
EXTI_PöSour˚5
) || \

112 ((
PINSOURCE
Ë=
EXTI_PöSour˚6
) || \

113 ((
PINSOURCE
Ë=
EXTI_PöSour˚7
) || \

114 ((
PINSOURCE
Ë=
EXTI_PöSour˚8
) || \

115 ((
PINSOURCE
Ë=
EXTI_PöSour˚9
) || \

116 ((
PINSOURCE
Ë=
EXTI_PöSour˚10
) || \

117 ((
PINSOURCE
Ë=
EXTI_PöSour˚11
) || \

118 ((
PINSOURCE
Ë=
EXTI_PöSour˚12
) || \

119 ((
PINSOURCE
Ë=
EXTI_PöSour˚13
) || \

120 ((
PINSOURCE
Ë=
EXTI_PöSour˚14
) || \

121 ((
PINSOURCE
Ë=
EXTI_PöSour˚15
))

	)

130 
	#SYSCFG_Mem‹yRem≠_Fœsh
 ((
uöt8_t
)0x00)

	)

131 
	#SYSCFG_Mem‹yRem≠_Sy°emFœsh
 ((
uöt8_t
)0x01)

	)

132 
	#SYSCFG_Mem‹yRem≠_SRAM
 ((
uöt8_t
)0x03)

	)

133 
	#SYSCFG_Mem‹yRem≠_SDRAM
 ((
uöt8_t
)0x04)

	)

135 #i‡
deföed
 (
STM32F40_41xxx
)

136 
	#SYSCFG_Mem‹yRem≠_FSMC
 ((
uöt8_t
)0x02)

	)

139 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

140 
	#SYSCFG_Mem‹yRem≠_FMC
 ((
uöt8_t
)0x02)

	)

143 #i‡
deföed
 (
STM32F40_41xxx
)

144 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
) || \

145 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

146 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
) || \

147 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_FSMC
))

	)

150 #i‡
deföed
 (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

151 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
) || \

152 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

153 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
))

	)

156 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

157 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
) || \

158 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

159 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
) || \

160 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SDRAM
) || \

161 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_FMC
))

	)

172 
	#SYSCFG_ETH_MedüI¡îÁ˚_MII
 ((
uöt32_t
)0x00000000)

	)

173 
	#SYSCFG_ETH_MedüI¡îÁ˚_RMII
 ((
uöt32_t
)0x00000001)

	)

175 
	#IS_SYSCFG_ETH_MEDIA_INTERFACE
(
INTERFACE
Ë(((INTERFACEË=
SYSCFG_ETH_MedüI¡îÁ˚_MII
) || \

176 ((
INTERFACE
Ë=
SYSCFG_ETH_MedüI¡îÁ˚_RMII
))

	)

188 
SYSCFG_DeInô
();

189 
SYSCFG_Mem‹yRem≠C⁄fig
(
uöt8_t
 
SYSCFG_Mem‹yRem≠
);

190 
SYSCFG_Mem‹ySw≠pögB™k
(
Fun˘i⁄ÆSèã
 
NewSèã
);

191 
SYSCFG_EXTILöeC⁄fig
(
uöt8_t
 
EXTI_P‹tSour˚GPIOx
, uöt8_à
EXTI_PöSour˚x
);

192 
SYSCFG_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
SYSCFG_ETH_MedüI¡îÁ˚
);

193 
SYSCFG_Com≥nßti⁄CñlCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

194 
FœgSètus
 
SYSCFG_GëCom≥nßti⁄CñlSètus
();

196 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_tim.h

30 #i‚de‡
__STM32F4xx_TIM_H


31 
	#__STM32F4xx_TIM_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

57 
uöt16_t
 
TIM_PªsˇÀr
;

60 
uöt16_t
 
TIM_Cou¡îMode
;

63 
uöt32_t
 
TIM_Pîiod
;

67 
uöt16_t
 
TIM_ClockDivisi⁄
;

70 
uöt8_t
 
TIM_Rïëôi⁄Cou¡î
;

78 } 
	tTIM_TimeBa£InôTy≥Def
;

86 
uöt16_t
 
TIM_OCMode
;

89 
uöt16_t
 
TIM_OuçutSèã
;

92 
uöt16_t
 
TIM_OuçutNSèã
;

96 
uöt32_t
 
TIM_Pul£
;

99 
uöt16_t
 
TIM_OCPﬁ¨ôy
;

102 
uöt16_t
 
TIM_OCNPﬁ¨ôy
;

106 
uöt16_t
 
TIM_OCIdÀSèã
;

110 
uöt16_t
 
TIM_OCNIdÀSèã
;

113 } 
	tTIM_OCInôTy≥Def
;

122 
uöt16_t
 
TIM_Ch™√l
;

125 
uöt16_t
 
TIM_ICPﬁ¨ôy
;

128 
uöt16_t
 
TIM_ICSñe˘i⁄
;

131 
uöt16_t
 
TIM_ICPªsˇÀr
;

134 
uöt16_t
 
TIM_ICFûãr
;

136 } 
	tTIM_ICInôTy≥Def
;

146 
uöt16_t
 
TIM_OSSRSèã
;

149 
uöt16_t
 
TIM_OSSISèã
;

152 
uöt16_t
 
TIM_LOCKLevñ
;

155 
uöt16_t
 
TIM_DódTime
;

159 
uöt16_t
 
TIM_Bªak
;

162 
uöt16_t
 
TIM_BªakPﬁ¨ôy
;

165 
uöt16_t
 
TIM_Autom©icOuçut
;

167 } 
	tTIM_BDTRInôTy≥Def
;

175 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

176 ((
PERIPH
Ë=
TIM2
) || \

177 ((
PERIPH
Ë=
TIM3
) || \

178 ((
PERIPH
Ë=
TIM4
) || \

179 ((
PERIPH
Ë=
TIM5
) || \

180 ((
PERIPH
Ë=
TIM6
) || \

181 ((
PERIPH
Ë=
TIM7
) || \

182 ((
PERIPH
Ë=
TIM8
) || \

183 ((
PERIPH
Ë=
TIM9
) || \

184 ((
PERIPH
Ë=
TIM10
) || \

185 ((
PERIPH
Ë=
TIM11
) || \

186 ((
PERIPH
Ë=
TIM12
) || \

187 (((
PERIPH
Ë=
TIM13
) || \

188 ((
PERIPH
Ë=
TIM14
)))

	)

190 
	#IS_TIM_LIST1_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

191 ((
PERIPH
Ë=
TIM2
) || \

192 ((
PERIPH
Ë=
TIM3
) || \

193 ((
PERIPH
Ë=
TIM4
) || \

194 ((
PERIPH
Ë=
TIM5
) || \

195 ((
PERIPH
Ë=
TIM8
) || \

196 ((
PERIPH
Ë=
TIM9
) || \

197 ((
PERIPH
Ë=
TIM10
) || \

198 ((
PERIPH
Ë=
TIM11
) || \

199 ((
PERIPH
Ë=
TIM12
) || \

200 ((
PERIPH
Ë=
TIM13
) || \

201 ((
PERIPH
Ë=
TIM14
))

	)

204 
	#IS_TIM_LIST2_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

205 ((
PERIPH
Ë=
TIM2
) || \

206 ((
PERIPH
Ë=
TIM3
) || \

207 ((
PERIPH
Ë=
TIM4
) || \

208 ((
PERIPH
Ë=
TIM5
) || \

209 ((
PERIPH
Ë=
TIM8
) || \

210 ((
PERIPH
Ë=
TIM9
) || \

211 ((
PERIPH
Ë=
TIM12
))

	)

213 
	#IS_TIM_LIST3_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

214 ((
PERIPH
Ë=
TIM2
) || \

215 ((
PERIPH
Ë=
TIM3
) || \

216 ((
PERIPH
Ë=
TIM4
) || \

217 ((
PERIPH
Ë=
TIM5
) || \

218 ((
PERIPH
Ë=
TIM8
))

	)

220 
	#IS_TIM_LIST4_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

221 ((
PERIPH
Ë=
TIM8
))

	)

223 
	#IS_TIM_LIST5_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

224 ((
PERIPH
Ë=
TIM2
) || \

225 ((
PERIPH
Ë=
TIM3
) || \

226 ((
PERIPH
Ë=
TIM4
) || \

227 ((
PERIPH
Ë=
TIM5
) || \

228 ((
PERIPH
Ë=
TIM6
) || \

229 ((
PERIPH
Ë=
TIM7
) || \

230 ((
PERIPH
Ë=
TIM8
))

	)

232 
	#IS_TIM_LIST6_PERIPH
(
TIMx
)(((TIMxË=
TIM2
) || \

233 ((
TIMx
Ë=
TIM5
) || \

234 ((
TIMx
Ë=
TIM11
))

	)

240 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

241 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

242 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

243 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

244 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

245 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

246 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

247 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

248 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

249 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

250 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

251 ((
MODE
Ë=
TIM_OCMode_PWM2
))

	)

252 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

253 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

254 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

255 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

256 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

257 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

258 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

259 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

268 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

269 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

270 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
) || \

271 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

	)

280 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

281 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

282 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

283 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

285 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

286 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

287 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

288 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

	)

290 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

291 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

	)

292 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

293 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

294 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

	)

303 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

304 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

305 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

306 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
) || \

307 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

308 ((
DIV
Ë=
TIM_CKD_DIV4
))

	)

317 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

318 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

319 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

320 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

321 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

322 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
) || \

323 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

324 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

325 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

326 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

	)

335 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

336 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

337 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
) || \

338 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

	)

347 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

348 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

349 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
) || \

350 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

	)

359 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

360 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

361 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
) || \

362 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

	)

371 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

372 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

373 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
) || \

374 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

	)

383 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

384 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

385 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
) || \

386 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

	)

395 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

396 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

397 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
) || \

398 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

	)

407 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

408 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

409 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
) || \

410 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

	)

419 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

420 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

421 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
) || \

422 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

	)

431 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

432 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

433 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
) || \

434 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

	)

443 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

444 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

445 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

446 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

447 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
) || \

448 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

449 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

450 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

	)

459 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

460 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

461 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
) || \

462 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

	)

471 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

472 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

473 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
) || \

474 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

	)

483 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

484 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

485 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
) || \

486 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

	)

495 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

496 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

497 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
) || \

498 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

	)

507 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

508 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

509 
	#TIM_ICPﬁ¨ôy_BŸhEdge
 ((
uöt16_t
)0x000A)

	)

510 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
) || \

511 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
)|| \

512 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_BŸhEdge
))

	)

521 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001Ë

	)

523 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002Ë

	)

525 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003Ë

	)

526 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
) || \

527 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

528 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

	)

537 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000Ë

	)

538 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004Ë

	)

539 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008Ë

	)

540 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000CË

	)

541 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
) || \

542 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

543 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

544 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

	)

553 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

554 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

555 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

556 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

557 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

558 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

559 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

560 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

561 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

563 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
) || \

564 ((
IT
Ë=
TIM_IT_CC1
) || \

565 ((
IT
Ë=
TIM_IT_CC2
) || \

566 ((
IT
Ë=
TIM_IT_CC3
) || \

567 ((
IT
Ë=
TIM_IT_CC4
) || \

568 ((
IT
Ë=
TIM_IT_COM
) || \

569 ((
IT
Ë=
TIM_IT_Triggî
) || \

570 ((
IT
Ë=
TIM_IT_Bªak
))

	)

579 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

580 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

581 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

582 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

583 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

584 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

585 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

586 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

587 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

588 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

589 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

590 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

591 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

592 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

593 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

594 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

595 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

596 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

597 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

598 
	#TIM_DMABa£_OR
 ((
uöt16_t
)0x0013)

	)

599 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
) || \

600 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

601 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

602 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

603 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

604 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

605 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

606 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

607 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

608 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

609 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

610 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

611 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

612 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

613 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

614 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

615 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

616 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

617 ((
BASE
Ë=
TIM_DMABa£_DCR
) || \

618 ((
BASE
Ë=
TIM_DMABa£_OR
))

	)

627 
	#TIM_DMABur°Lígth_1Tøns„r
 ((
uöt16_t
)0x0000)

	)

628 
	#TIM_DMABur°Lígth_2Tøns„rs
 ((
uöt16_t
)0x0100)

	)

629 
	#TIM_DMABur°Lígth_3Tøns„rs
 ((
uöt16_t
)0x0200)

	)

630 
	#TIM_DMABur°Lígth_4Tøns„rs
 ((
uöt16_t
)0x0300)

	)

631 
	#TIM_DMABur°Lígth_5Tøns„rs
 ((
uöt16_t
)0x0400)

	)

632 
	#TIM_DMABur°Lígth_6Tøns„rs
 ((
uöt16_t
)0x0500)

	)

633 
	#TIM_DMABur°Lígth_7Tøns„rs
 ((
uöt16_t
)0x0600)

	)

634 
	#TIM_DMABur°Lígth_8Tøns„rs
 ((
uöt16_t
)0x0700)

	)

635 
	#TIM_DMABur°Lígth_9Tøns„rs
 ((
uöt16_t
)0x0800)

	)

636 
	#TIM_DMABur°Lígth_10Tøns„rs
 ((
uöt16_t
)0x0900)

	)

637 
	#TIM_DMABur°Lígth_11Tøns„rs
 ((
uöt16_t
)0x0A00)

	)

638 
	#TIM_DMABur°Lígth_12Tøns„rs
 ((
uöt16_t
)0x0B00)

	)

639 
	#TIM_DMABur°Lígth_13Tøns„rs
 ((
uöt16_t
)0x0C00)

	)

640 
	#TIM_DMABur°Lígth_14Tøns„rs
 ((
uöt16_t
)0x0D00)

	)

641 
	#TIM_DMABur°Lígth_15Tøns„rs
 ((
uöt16_t
)0x0E00)

	)

642 
	#TIM_DMABur°Lígth_16Tøns„rs
 ((
uöt16_t
)0x0F00)

	)

643 
	#TIM_DMABur°Lígth_17Tøns„rs
 ((
uöt16_t
)0x1000)

	)

644 
	#TIM_DMABur°Lígth_18Tøns„rs
 ((
uöt16_t
)0x1100)

	)

645 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Tøns„r
) || \

646 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Tøns„rs
) || \

647 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Tøns„rs
) || \

648 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Tøns„rs
) || \

649 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Tøns„rs
) || \

650 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Tøns„rs
) || \

651 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Tøns„rs
) || \

652 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Tøns„rs
) || \

653 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Tøns„rs
) || \

654 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Tøns„rs
) || \

655 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Tøns„rs
) || \

656 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Tøns„rs
) || \

657 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Tøns„rs
) || \

658 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Tøns„rs
) || \

659 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Tøns„rs
) || \

660 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Tøns„rs
) || \

661 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Tøns„rs
) || \

662 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Tøns„rs
))

	)

671 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

672 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

673 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

674 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

675 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

676 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

677 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

678 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

688 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

689 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

690 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

691 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

692 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
) || \

693 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

694 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

695 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

	)

704 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

705 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

706 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

707 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

708 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

709 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

710 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

711 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

712 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

713 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

714 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

715 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

716 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

717 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

718 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

719 ((
SELECTION
Ë=
TIM_TS_ETRF
))

	)

720 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

721 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

722 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

723 ((
SELECTION
Ë=
TIM_TS_ITR3
))

	)

732 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

733 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

734 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

743 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

744 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

745 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
) || \

746 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

	)

755 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

756 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

757 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
) || \

758 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

	)

767 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

768 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

769 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

770 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

779 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

780 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

781 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

782 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
) || \

783 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

784 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

	)

794 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

795 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

796 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

797 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

798 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

799 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

800 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

801 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

802 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

812 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000Ë

	)

815 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001Ë

	)

816 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
) || \

817 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

	)

826 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

827 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

828 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
) || \

829 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

	)

838 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

839 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

840 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
) || \

841 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

	)

851 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

852 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

853 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
) || \

854 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

	)

863 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

864 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

865 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

866 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

867 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

868 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

869 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

870 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

871 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
) || \

872 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

873 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

874 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

875 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

876 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

877 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

878 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

	)

887 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

888 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

889 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

890 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

891 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
) || \

892 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

893 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

894 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

	)

903 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

904 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

905 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
) || \

906 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

	)

914 
	#TIM2_TIM8_TRGO
 ((
uöt16_t
)0x0000)

	)

915 
	#TIM2_ETH_PTP
 ((
uöt16_t
)0x0400)

	)

916 
	#TIM2_USBFS_SOF
 ((
uöt16_t
)0x0800)

	)

917 
	#TIM2_USBHS_SOF
 ((
uöt16_t
)0x0C00)

	)

919 
	#TIM5_GPIO
 ((
uöt16_t
)0x0000)

	)

920 
	#TIM5_LSI
 ((
uöt16_t
)0x0040)

	)

921 
	#TIM5_LSE
 ((
uöt16_t
)0x0080)

	)

922 
	#TIM5_RTC
 ((
uöt16_t
)0x00C0)

	)

924 
	#TIM11_GPIO
 ((
uöt16_t
)0x0000)

	)

925 
	#TIM11_HSE
 ((
uöt16_t
)0x0002)

	)

927 
	#IS_TIM_REMAP
(
TIM_REMAP
Ë(((TIM_REMAPË=
TIM2_TIM8_TRGO
)||\

928 ((
TIM_REMAP
Ë=
TIM2_ETH_PTP
)||\

929 ((
TIM_REMAP
Ë=
TIM2_USBFS_SOF
)||\

930 ((
TIM_REMAP
Ë=
TIM2_USBHS_SOF
)||\

931 ((
TIM_REMAP
Ë=
TIM5_GPIO
)||\

932 ((
TIM_REMAP
Ë=
TIM5_LSI
)||\

933 ((
TIM_REMAP
Ë=
TIM5_LSE
)||\

934 ((
TIM_REMAP
Ë=
TIM5_RTC
)||\

935 ((
TIM_REMAP
Ë=
TIM11_GPIO
)||\

936 ((
TIM_REMAP
Ë=
TIM11_HSE
))

	)

945 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

946 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

947 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

948 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

949 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

950 
	#TIM_FLAG_COM
 ((
uöt16_t
)0x0020)

	)

951 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

952 
	#TIM_FLAG_Bªak
 ((
uöt16_t
)0x0080)

	)

953 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

954 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

955 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

956 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

957 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
) || \

958 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

959 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

960 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

961 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

962 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

963 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

964 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

965 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

966 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

967 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

968 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

	)

978 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

987 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

996 
	#TIM_DMABur°Lígth_1Byã
 
TIM_DMABur°Lígth_1Tøns„r


	)

997 
	#TIM_DMABur°Lígth_2Byãs
 
TIM_DMABur°Lígth_2Tøns„rs


	)

998 
	#TIM_DMABur°Lígth_3Byãs
 
TIM_DMABur°Lígth_3Tøns„rs


	)

999 
	#TIM_DMABur°Lígth_4Byãs
 
TIM_DMABur°Lígth_4Tøns„rs


	)

1000 
	#TIM_DMABur°Lígth_5Byãs
 
TIM_DMABur°Lígth_5Tøns„rs


	)

1001 
	#TIM_DMABur°Lígth_6Byãs
 
TIM_DMABur°Lígth_6Tøns„rs


	)

1002 
	#TIM_DMABur°Lígth_7Byãs
 
TIM_DMABur°Lígth_7Tøns„rs


	)

1003 
	#TIM_DMABur°Lígth_8Byãs
 
TIM_DMABur°Lígth_8Tøns„rs


	)

1004 
	#TIM_DMABur°Lígth_9Byãs
 
TIM_DMABur°Lígth_9Tøns„rs


	)

1005 
	#TIM_DMABur°Lígth_10Byãs
 
TIM_DMABur°Lígth_10Tøns„rs


	)

1006 
	#TIM_DMABur°Lígth_11Byãs
 
TIM_DMABur°Lígth_11Tøns„rs


	)

1007 
	#TIM_DMABur°Lígth_12Byãs
 
TIM_DMABur°Lígth_12Tøns„rs


	)

1008 
	#TIM_DMABur°Lígth_13Byãs
 
TIM_DMABur°Lígth_13Tøns„rs


	)

1009 
	#TIM_DMABur°Lígth_14Byãs
 
TIM_DMABur°Lígth_14Tøns„rs


	)

1010 
	#TIM_DMABur°Lígth_15Byãs
 
TIM_DMABur°Lígth_15Tøns„rs


	)

1011 
	#TIM_DMABur°Lígth_16Byãs
 
TIM_DMABur°Lígth_16Tøns„rs


	)

1012 
	#TIM_DMABur°Lígth_17Byãs
 
TIM_DMABur°Lígth_17Tøns„rs


	)

1013 
	#TIM_DMABur°Lígth_18Byãs
 
TIM_DMABur°Lígth_18Tøns„rs


	)

1026 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

1027 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1028 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1029 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

1030 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

1031 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Cou¡î
);

1032 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Aut‹ñﬂd
);

1033 
uöt32_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1034 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1035 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1036 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

1037 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1038 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

1039 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1040 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1043 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1044 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1045 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1046 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1047 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1048 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

1049 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª1
);

1050 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª2
);

1051 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª3
);

1052 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª4
);

1053 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1054 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1055 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1056 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1057 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1058 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1059 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1060 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1061 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1062 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1063 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1064 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1065 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1066 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1067 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1068 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1069 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1070 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1071 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1072 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1073 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1074 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1075 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1076 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

1077 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

1080 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1081 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1082 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1083 
uöt32_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1084 
uöt32_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1085 
uöt32_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1086 
uöt32_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1087 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1088 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1089 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1090 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1093 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

1094 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

1095 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1096 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1097 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1100 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1101 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

1102 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1103 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1104 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1105 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1106 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

1107 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1108 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1111 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

1112 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1113 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1114 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

1115 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1116 
uöt16_t
 
ExtTRGFûãr
);

1117 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1118 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

1121 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1122 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

1123 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

1124 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1125 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1126 
uöt16_t
 
ExtTRGFûãr
);

1129 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1130 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

1131 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1134 
TIM_Rem≠C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Rem≠
);

1136 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h

30 #i‚de‡
__STM32F4xx_USART_H


31 
	#__STM32F4xx_USART_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
USART_BaudR©e
;

62 
uöt16_t
 
USART_W‹dLígth
;

65 
uöt16_t
 
USART_St›Bôs
;

68 
uöt16_t
 
USART_P¨ôy
;

75 
uöt16_t
 
USART_Mode
;

78 
uöt16_t
 
USART_H¨dw¨eFlowC⁄åﬁ
;

81 } 
	tUSART_InôTy≥Def
;

90 
uöt16_t
 
USART_Clock
;

93 
uöt16_t
 
USART_CPOL
;

96 
uöt16_t
 
USART_CPHA
;

99 
uöt16_t
 
USART_La°Bô
;

102 } 
	tUSART_ClockInôTy≥Def
;

110 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

111 ((
PERIPH
Ë=
USART2
) || \

112 ((
PERIPH
Ë=
USART3
) || \

113 ((
PERIPH
Ë=
UART4
) || \

114 ((
PERIPH
Ë=
UART5
) || \

115 ((
PERIPH
Ë=
USART6
) || \

116 ((
PERIPH
Ë=
UART7
) || \

117 ((
PERIPH
Ë=
UART8
))

	)

119 
	#IS_USART_1236_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

120 ((
PERIPH
Ë=
USART2
) || \

121 ((
PERIPH
Ë=
USART3
) || \

122 ((
PERIPH
Ë=
USART6
))

	)

128 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

129 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

131 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
) || \

132 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

	)

141 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

142 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

143 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

144 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

145 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
) || \

146 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

147 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

148 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

	)

157 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

158 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

159 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

160 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
) || \

161 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

162 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

	)

171 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

172 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

173 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

181 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

182 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

183 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

184 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

185 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

186 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

187 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

188 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

189 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

	)

197 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

198 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

199 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
) || \

200 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

	)

209 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

210 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

211 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

221 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

222 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

223 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

233 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

234 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

235 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
) || \

236 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

	)

245 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

246 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

247 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

248 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

249 
	#USART_IT_ORE_RX
 ((
uöt16_t
)0x0325Ë

	)

250 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

251 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

252 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

253 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

254 
	#USART_IT_ORE_ER
 ((
uöt16_t
)0x0360Ë

	)

255 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

256 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

261 
	#USART_IT_ORE
 
USART_IT_ORE_ER


	)

266 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

267 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

268 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

269 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

	)

270 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

271 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

272 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

273 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

274 ((
IT
Ë=
USART_IT_ORE_RX
Ë|| ((ITË=
USART_IT_ORE_ER
) || \

275 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
))

	)

276 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

277 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

	)

286 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

287 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

288 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

298 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

299 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

300 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
) || \

301 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

	)

310 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

311 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

312 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
) \

313 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

314 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

	)

323 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

324 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

325 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
) || \

326 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

	)

335 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

336 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

337 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

338 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

339 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

340 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

341 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

342 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

343 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

344 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

345 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
) || \

346 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

347 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

348 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

349 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

	)

351 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

353 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 7500001))

	)

354 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

355 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

369 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

372 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

373 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

374 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

375 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

376 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

377 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

378 
USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

379 
USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

382 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

383 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

386 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

387 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

388 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

391 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

392 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

393 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

396 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

399 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

400 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

401 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

404 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

405 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

408 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

411 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

412 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

413 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

414 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

415 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

417 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_wwdg.h

30 #i‚de‡
__STM32F4xx_WWDG_H


31 
	#__STM32F4xx_WWDG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

59 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

60 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

61 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

62 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

63 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
) || \

64 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

65 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

66 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

	)

67 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

68 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

82 
WWDG_DeInô
();

85 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

86 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

87 
WWDG_E«bÀIT
();

88 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

91 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

94 
FœgSètus
 
WWDG_GëFœgSètus
();

95 
WWDG_CÀ¨Fœg
();

97 #ifde‡
__˝lu•lus


	@FWLIB/STM32F4xx_StdPeriph_Driver/src/misc.c

76 
	~"misc.h
"

89 
	#AIRCR_VECTKEY_MASK
 ((
uöt32_t
)0x05FA0000)

	)

118 
	$NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
)

121 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
NVIC_Pri‹ôyGroup
));

124 
SCB
->
AIRCR
 = 
AIRCR_VECTKEY_MASK
 | 
NVIC_Pri‹ôyGroup
;

125 
	}
}

136 
	$NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
)

138 
uöt8_t
 
tmµri‹ôy
 = 0x00, 
tmµª
 = 0x00, 
tmpsub
 = 0x0F;

141 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
));

142 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
));

143 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
));

145 i‡(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
 !
DISABLE
)

148 
tmµri‹ôy
 = (0x700 - ((
SCB
->
AIRCR
Ë& (
uöt32_t
)0x700))>> 0x08;

149 
tmµª
 = (0x4 - 
tmµri‹ôy
);

150 
tmpsub
 =Åmpsub >> 
tmµri‹ôy
;

152 
tmµri‹ôy
 = 
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 << 
tmµª
;

153 
tmµri‹ôy
 |(
uöt8_t
)(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
 & 
tmpsub
);

155 
tmµri‹ôy
 =Åmppriority << 0x04;

157 
NVIC
->
IP
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
] = 
tmµri‹ôy
;

160 
NVIC
->
ISER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

161 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

166 
NVIC
->
ICER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

167 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

169 
	}
}

180 
	$NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
)

183 
	`as£π_∑øm
(
	`IS_NVIC_VECTTAB
(
NVIC_Ve˘Tab
));

184 
	`as£π_∑øm
(
	`IS_NVIC_OFFSET
(
Off£t
));

186 
SCB
->
VTOR
 = 
NVIC_Ve˘Tab
 | (
Off£t
 & (
uöt32_t
)0x1FFFFF80);

187 
	}
}

199 
	$NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

202 
	`as£π_∑øm
(
	`IS_NVIC_LP
(
LowPowîMode
));

203 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

205 i‡(
NewSèã
 !
DISABLE
)

207 
SCB
->
SCR
 |
LowPowîMode
;

211 
SCB
->
SCR
 &(
uöt32_t
)(~(uöt32_t)
LowPowîMode
);

213 
	}
}

223 
	$SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
)

226 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
SysTick_CLKSour˚
));

227 i‡(
SysTick_CLKSour˚
 =
SysTick_CLKSour˚_HCLK
)

229 
SysTick
->
CTRL
 |
SysTick_CLKSour˚_HCLK
;

233 
SysTick
->
CTRL
 &
SysTick_CLKSour˚_HCLK_Div8
;

235 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c

106 
	~"°m32f4xx_adc.h
"

107 
	~"°m32f4xx_rcc.h
"

122 
	#CR1_DISCNUM_RESET
 ((
uöt32_t
)0xFFFF1FFF)

	)

125 
	#CR1_AWDCH_RESET
 ((
uöt32_t
)0xFFFFFFE0)

	)

128 
	#CR1_AWDMode_RESET
 ((
uöt32_t
)0xFF3FFDFF)

	)

131 
	#CR1_CLEAR_MASK
 ((
uöt32_t
)0xFCFFFEFF)

	)

134 
	#CR2_EXTEN_RESET
 ((
uöt32_t
)0xCFFFFFFF)

	)

137 
	#CR2_JEXTEN_RESET
 ((
uöt32_t
)0xFFCFFFFF)

	)

140 
	#CR2_JEXTSEL_RESET
 ((
uöt32_t
)0xFFF0FFFF)

	)

143 
	#CR2_CLEAR_MASK
 ((
uöt32_t
)0xC0FFF7FD)

	)

146 
	#SQR3_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

147 
	#SQR2_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

148 
	#SQR1_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

151 
	#SQR1_L_RESET
 ((
uöt32_t
)0xFF0FFFFF)

	)

154 
	#JSQR_JSQ_SET
 ((
uöt32_t
)0x0000001F)

	)

157 
	#JSQR_JL_SET
 ((
uöt32_t
)0x00300000)

	)

158 
	#JSQR_JL_RESET
 ((
uöt32_t
)0xFFCFFFFF)

	)

161 
	#SMPR1_SMP_SET
 ((
uöt32_t
)0x00000007)

	)

162 
	#SMPR2_SMP_SET
 ((
uöt32_t
)0x00000007)

	)

165 
	#JDR_OFFSET
 ((
uöt8_t
)0x28)

	)

168 
	#CDR_ADDRESS
 ((
uöt32_t
)0x40012308)

	)

171 
	#CR_CLEAR_MASK
 ((
uöt32_t
)0xFFFC30E0)

	)

213 
	$ADC_DeInô
()

216 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC
, 
ENABLE
);

219 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC
, 
DISABLE
);

220 
	}
}

235 
	$ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

237 
uöt32_t
 
tm¥eg1
 = 0;

238 
uöt8_t
 
tm¥eg2
 = 0;

240 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

241 
	`as£π_∑øm
(
	`IS_ADC_RESOLUTION
(
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
));

242 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
));

243 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
));

244 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG_EDGE
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
));

245 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
));

246 
	`as£π_∑øm
(
	`IS_ADC_DATA_ALIGN
(
ADC_InôSåu˘
->
ADC_D©aAlign
));

247 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_LENGTH
(
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
));

251 
tm¥eg1
 = 
ADCx
->
CR1
;

254 
tm¥eg1
 &
CR1_CLEAR_MASK
;

259 
tm¥eg1
 |(
uöt32_t
)(((uöt32_t)
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 << 8) | \

260 
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
);

262 
ADCx
->
CR1
 = 
tm¥eg1
;

265 
tm¥eg1
 = 
ADCx
->
CR2
;

268 
tm¥eg1
 &
CR2_CLEAR_MASK
;

276 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_D©aAlign
 | \

277 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 |

278 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
 | \

279 ((
uöt32_t
)
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 << 1));

282 
ADCx
->
CR2
 = 
tm¥eg1
;

285 
tm¥eg1
 = 
ADCx
->
SQR1
;

288 
tm¥eg1
 &
SQR1_L_RESET
;

292 
tm¥eg2
 |(
uöt8_t
)(
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
 - (uint8_t)1);

293 
tm¥eg1
 |((
uöt32_t
)
tm¥eg2
 << 20);

296 
ADCx
->
SQR1
 = 
tm¥eg1
;

297 
	}
}

310 
	$ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

313 
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
 = 
ADC_Resﬁuti⁄_12b
;

316 
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 = 
DISABLE
;

319 
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 = 
DISABLE
;

322 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
 = 
ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
;

325 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 = 
ADC_Exã∫ÆTrigC⁄v_T1_CC1
;

328 
ADC_InôSåu˘
->
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

331 
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
 = 1;

332 
	}
}

341 
	$ADC_Comm⁄Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
)

343 
uöt32_t
 
tm¥eg1
 = 0;

345 
	`as£π_∑øm
(
	`IS_ADC_MODE
(
ADC_Comm⁄InôSåu˘
->
ADC_Mode
));

346 
	`as£π_∑øm
(
	`IS_ADC_PRESCALER
(
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
));

347 
	`as£π_∑øm
(
	`IS_ADC_DMA_ACCESS_MODE
(
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
));

348 
	`as£π_∑øm
(
	`IS_ADC_SAMPLING_DELAY
(
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
));

351 
tm¥eg1
 = 
ADC
->
CCR
;

354 
tm¥eg1
 &
CR_CLEAR_MASK
;

362 
tm¥eg1
 |(
uöt32_t
)(
ADC_Comm⁄InôSåu˘
->
ADC_Mode
 |

363 
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
 |

364 
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
 |

365 
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
);

368 
ADC
->
CCR
 = 
tm¥eg1
;

369 
	}
}

377 
	$ADC_Comm⁄Såu˘Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
)

380 
ADC_Comm⁄InôSåu˘
->
ADC_Mode
 = 
ADC_Mode_Indïídít
;

383 
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
 = 
ADC_PªsˇÀr_Div2
;

386 
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
 = 
ADC_DMAAc˚ssMode_DißbÀd
;

389 
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
 = 
ADC_TwoSam∂ögDñay_5Cy˛es
;

390 
	}
}

399 
	$ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

402 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

403 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

404 i‡(
NewSèã
 !
DISABLE
)

407 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_ADON
;

412 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_ADON
);

414 
	}
}

455 
	$ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
)

457 
uöt32_t
 
tm¥eg
 = 0;

459 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

460 
	`as£π_∑øm
(
	`IS_ADC_ANALOG_WATCHDOG
(
ADC_A«logW©chdog
));

463 
tm¥eg
 = 
ADCx
->
CR1
;

466 
tm¥eg
 &
CR1_AWDMode_RESET
;

469 
tm¥eg
 |
ADC_A«logW©chdog
;

472 
ADCx
->
CR1
 = 
tm¥eg
;

473 
	}
}

484 
	$ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,

485 
uöt16_t
 
LowThªshﬁd
)

488 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

489 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
HighThªshﬁd
));

490 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
LowThªshﬁd
));

493 
ADCx
->
HTR
 = 
HighThªshﬁd
;

496 
ADCx
->
LTR
 = 
LowThªshﬁd
;

497 
	}
}

525 
	$ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
)

527 
uöt32_t
 
tm¥eg
 = 0;

529 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

530 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

533 
tm¥eg
 = 
ADCx
->
CR1
;

536 
tm¥eg
 &
CR1_AWDCH_RESET
;

539 
tm¥eg
 |
ADC_Ch™√l
;

542 
ADCx
->
CR1
 = 
tm¥eg
;

543 
	}
}

589 
	$ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

592 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

593 i‡(
NewSèã
 !
DISABLE
)

596 
ADC
->
CCR
 |(
uöt32_t
)
ADC_CCR_TSVREFE
;

601 
ADC
->
CCR
 &(
uöt32_t
)(~
ADC_CCR_TSVREFE
);

603 
	}
}

615 
	$ADC_VBATCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

618 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

619 i‡(
NewSèã
 !
DISABLE
)

622 
ADC
->
CCR
 |(
uöt32_t
)
ADC_CCR_VBATE
;

627 
ADC
->
CCR
 &(
uöt32_t
)(~
ADC_CCR_VBATE
);

629 
	}
}

715 
	$ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

717 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

719 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

720 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

721 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_RANK
(
R™k
));

722 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

725 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

728 
tm¥eg1
 = 
ADCx
->
SMPR1
;

731 
tm¥eg2
 = 
SMPR1_SMP_SET
 << (3 * (
ADC_Ch™√l
 - 10));

734 
tm¥eg1
 &~
tm¥eg2
;

737 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 10));

740 
tm¥eg1
 |
tm¥eg2
;

743 
ADCx
->
SMPR1
 = 
tm¥eg1
;

748 
tm¥eg1
 = 
ADCx
->
SMPR2
;

751 
tm¥eg2
 = 
SMPR2_SMP_SET
 << (3 * 
ADC_Ch™√l
);

754 
tm¥eg1
 &~
tm¥eg2
;

757 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

760 
tm¥eg1
 |
tm¥eg2
;

763 
ADCx
->
SMPR2
 = 
tm¥eg1
;

766 i‡(
R™k
 < 7)

769 
tm¥eg1
 = 
ADCx
->
SQR3
;

772 
tm¥eg2
 = 
SQR3_SQ_SET
 << (5 * (
R™k
 - 1));

775 
tm¥eg1
 &~
tm¥eg2
;

778 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 1));

781 
tm¥eg1
 |
tm¥eg2
;

784 
ADCx
->
SQR3
 = 
tm¥eg1
;

787 i‡(
R™k
 < 13)

790 
tm¥eg1
 = 
ADCx
->
SQR2
;

793 
tm¥eg2
 = 
SQR2_SQ_SET
 << (5 * (
R™k
 - 7));

796 
tm¥eg1
 &~
tm¥eg2
;

799 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 7));

802 
tm¥eg1
 |
tm¥eg2
;

805 
ADCx
->
SQR2
 = 
tm¥eg1
;

811 
tm¥eg1
 = 
ADCx
->
SQR1
;

814 
tm¥eg2
 = 
SQR1_SQ_SET
 << (5 * (
R™k
 - 13));

817 
tm¥eg1
 &~
tm¥eg2
;

820 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 13));

823 
tm¥eg1
 |
tm¥eg2
;

826 
ADCx
->
SQR1
 = 
tm¥eg1
;

828 
	}
}

835 
	$ADC_So·w¨eSèπC⁄v
(
ADC_Ty≥Def
* 
ADCx
)

838 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

841 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_SWSTART
;

842 
	}
}

849 
FœgSètus
 
	$ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
)

851 
FœgSètus
 
bô°©us
 = 
RESET
;

853 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

856 i‡((
ADCx
->
CR2
 & 
ADC_CR2_SWSTART
Ë!(
uöt32_t
)
RESET
)

859 
bô°©us
 = 
SET
;

864 
bô°©us
 = 
RESET
;

868  
bô°©us
;

869 
	}
}

879 
	$ADC_EOCOnEachReguœrCh™√lCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

882 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

883 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

885 i‡(
NewSèã
 !
DISABLE
)

888 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_EOCS
;

893 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_EOCS
);

895 
	}
}

904 
	$ADC_C⁄töuousModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

907 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

908 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

910 i‡(
NewSèã
 !
DISABLE
)

913 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_CONT
;

918 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_CONT
);

920 
	}
}

930 
	$ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
)

932 
uöt32_t
 
tm¥eg1
 = 0;

933 
uöt32_t
 
tm¥eg2
 = 0;

936 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

937 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_DISC_NUMBER
(
Numbî
));

940 
tm¥eg1
 = 
ADCx
->
CR1
;

943 
tm¥eg1
 &
CR1_DISCNUM_RESET
;

946 
tm¥eg2
 = 
Numbî
 - 1;

947 
tm¥eg1
 |
tm¥eg2
 << 13;

950 
ADCx
->
CR1
 = 
tm¥eg1
;

951 
	}
}

962 
	$ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

965 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

966 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

968 i‡(
NewSèã
 !
DISABLE
)

971 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_DISCEN
;

976 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_DISCEN
);

978 
	}
}

985 
uöt16_t
 
	$ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
)

988 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

991  (
uöt16_t
Ë
ADCx
->
DR
;

992 
	}
}

1006 
uöt32_t
 
	$ADC_GëMu…iModeC⁄vîsi⁄VÆue
()

1009  (*(
__IO
 
uöt32_t
 *Ë
CDR_ADDRESS
);

1010 
	}
}

1052 
	$ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1055 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1056 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1057 i‡(
NewSèã
 !
DISABLE
)

1060 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_DMA
;

1065 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_DMA
);

1067 
	}
}

1076 
	$ADC_DMAReque°A·îLa°Tøns„rCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1079 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1080 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1081 i‡(
NewSèã
 !
DISABLE
)

1084 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_DDS
;

1089 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_DDS
);

1091 
	}
}

1103 
	$ADC_Mu…iModeDMAReque°A·îLa°Tøns„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1106 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1107 i‡(
NewSèã
 !
DISABLE
)

1110 
ADC
->
CCR
 |(
uöt32_t
)
ADC_CCR_DDS
;

1115 
ADC
->
CCR
 &(
uöt32_t
)(~
ADC_CCR_DDS
);

1117 
	}
}

1190 
	$ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

1192 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0, 
tm¥eg3
 = 0;

1194 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1195 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1196 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_RANK
(
R™k
));

1197 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

1199 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

1202 
tm¥eg1
 = 
ADCx
->
SMPR1
;

1204 
tm¥eg2
 = 
SMPR1_SMP_SET
 << (3*(
ADC_Ch™√l
 - 10));

1206 
tm¥eg1
 &~
tm¥eg2
;

1208 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3*(
ADC_Ch™√l
 - 10));

1210 
tm¥eg1
 |
tm¥eg2
;

1212 
ADCx
->
SMPR1
 = 
tm¥eg1
;

1217 
tm¥eg1
 = 
ADCx
->
SMPR2
;

1219 
tm¥eg2
 = 
SMPR2_SMP_SET
 << (3 * 
ADC_Ch™√l
);

1221 
tm¥eg1
 &~
tm¥eg2
;

1223 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

1225 
tm¥eg1
 |
tm¥eg2
;

1227 
ADCx
->
SMPR2
 = 
tm¥eg1
;

1231 
tm¥eg1
 = 
ADCx
->
JSQR
;

1233 
tm¥eg3
 = (
tm¥eg1
 & 
JSQR_JL_SET
)>> 20;

1235 
tm¥eg2
 = 
JSQR_JSQ_SET
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

1237 
tm¥eg1
 &~
tm¥eg2
;

1239 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

1241 
tm¥eg1
 |
tm¥eg2
;

1243 
ADCx
->
JSQR
 = 
tm¥eg1
;

1244 
	}
}

1253 
	$ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
)

1255 
uöt32_t
 
tm¥eg1
 = 0;

1256 
uöt32_t
 
tm¥eg2
 = 0;

1258 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1259 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_LENGTH
(
Lígth
));

1262 
tm¥eg1
 = 
ADCx
->
JSQR
;

1265 
tm¥eg1
 &
JSQR_JL_RESET
;

1268 
tm¥eg2
 = 
Lígth
 - 1;

1269 
tm¥eg1
 |
tm¥eg2
 << 20;

1272 
ADCx
->
JSQR
 = 
tm¥eg1
;

1273 
	}
}

1288 
	$ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
)

1290 
__IO
 
uöt32_t
 
tmp
 = 0;

1292 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1293 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1294 
	`as£π_∑øm
(
	`IS_ADC_OFFSET
(
Off£t
));

1296 
tmp
 = (
uöt32_t
)
ADCx
;

1297 
tmp
 +
ADC_Inje˘edCh™√l
;

1300 *(
__IO
 
uöt32_t
 *Ë
tmp
 = (uöt32_t)
Off£t
;

1301 
	}
}

1326 
	$ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
)

1328 
uöt32_t
 
tm¥eg
 = 0;

1330 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1331 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG
(
ADC_Exã∫ÆTrigInjecC⁄v
));

1334 
tm¥eg
 = 
ADCx
->
CR2
;

1337 
tm¥eg
 &
CR2_JEXTSEL_RESET
;

1340 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄v
;

1343 
ADCx
->
CR2
 = 
tm¥eg
;

1344 
	}
}

1360 
	$ADC_Exã∫ÆTrigInje˘edC⁄vEdgeC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄vEdge
)

1362 
uöt32_t
 
tm¥eg
 = 0;

1364 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1365 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG_EDGE
(
ADC_Exã∫ÆTrigInjecC⁄vEdge
));

1367 
tm¥eg
 = 
ADCx
->
CR2
;

1369 
tm¥eg
 &
CR2_JEXTEN_RESET
;

1371 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄vEdge
;

1373 
ADCx
->
CR2
 = 
tm¥eg
;

1374 
	}
}

1381 
	$ADC_So·w¨eSèπInje˘edC⁄v
(
ADC_Ty≥Def
* 
ADCx
)

1384 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1386 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_JSWSTART
;

1387 
	}
}

1394 
FœgSètus
 
	$ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
)

1396 
FœgSètus
 
bô°©us
 = 
RESET
;

1398 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1401 i‡((
ADCx
->
CR2
 & 
ADC_CR2_JSWSTART
Ë!(
uöt32_t
)
RESET
)

1404 
bô°©us
 = 
SET
;

1409 
bô°©us
 = 
RESET
;

1412  
bô°©us
;

1413 
	}
}

1423 
	$ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1426 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1427 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1428 i‡(
NewSèã
 !
DISABLE
)

1431 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_JAUTO
;

1436 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_JAUTO
);

1438 
	}
}

1449 
	$ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1452 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1453 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1454 i‡(
NewSèã
 !
DISABLE
)

1457 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_JDISCEN
;

1462 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_JDISCEN
);

1464 
	}
}

1477 
uöt16_t
 
	$ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
)

1479 
__IO
 
uöt32_t
 
tmp
 = 0;

1482 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1483 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1485 
tmp
 = (
uöt32_t
)
ADCx
;

1486 
tmp
 +
ADC_Inje˘edCh™√l
 + 
JDR_OFFSET
;

1489  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

1490 
	}
}

1584 
	$ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1586 
uöt32_t
 
ômask
 = 0;

1588 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1589 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1590 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1593 
ômask
 = (
uöt8_t
)
ADC_IT
;

1594 
ômask
 = (
uöt32_t
)0x01 << itmask;

1596 i‡(
NewSèã
 !
DISABLE
)

1599 
ADCx
->
CR1
 |
ômask
;

1604 
ADCx
->
CR1
 &(~(
uöt32_t
)
ômask
);

1606 
	}
}

1621 
FœgSètus
 
	$ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1623 
FœgSètus
 
bô°©us
 = 
RESET
;

1625 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1626 
	`as£π_∑øm
(
	`IS_ADC_GET_FLAG
(
ADC_FLAG
));

1629 i‡((
ADCx
->
SR
 & 
ADC_FLAG
Ë!(
uöt8_t
)
RESET
)

1632 
bô°©us
 = 
SET
;

1637 
bô°©us
 = 
RESET
;

1640  
bô°©us
;

1641 
	}
}

1656 
	$ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1659 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1660 
	`as£π_∑øm
(
	`IS_ADC_CLEAR_FLAG
(
ADC_FLAG
));

1663 
ADCx
->
SR
 = ~(
uöt32_t
)
ADC_FLAG
;

1664 
	}
}

1677 
ITSètus
 
	$ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1679 
ITSètus
 
bô°©us
 = 
RESET
;

1680 
uöt32_t
 
ômask
 = 0, 
íabÀ°©us
 = 0;

1683 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1684 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1687 
ômask
 = 
ADC_IT
 >> 8;

1690 
íabÀ°©us
 = (
ADCx
->
CR1
 & ((
uöt32_t
)0x01 << (
uöt8_t
)
ADC_IT
)) ;

1693 i‡(((
ADCx
->
SR
 & 
ômask
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1696 
bô°©us
 = 
SET
;

1701 
bô°©us
 = 
RESET
;

1704  
bô°©us
;

1705 
	}
}

1718 
	$ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1720 
uöt8_t
 
ômask
 = 0;

1722 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1723 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1725 
ômask
 = (
uöt8_t
)(
ADC_IT
 >> 8);

1727 
ADCx
->
SR
 = ~(
uöt32_t
)
ômask
;

1728 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c

84 
	~"°m32f4xx_ˇn.h
"

85 
	~"°m32f4xx_rcc.h
"

99 
	#MCR_DBF
 ((
uöt32_t
)0x00010000Ë

	)

102 
	#TMIDxR_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

105 
	#FMR_FINIT
 ((
uöt32_t
)0x00000001Ë

	)

108 
	#INAK_TIMEOUT
 ((
uöt32_t
)0x0000FFFF)

	)

110 
	#SLAK_TIMEOUT
 ((
uöt32_t
)0x0000FFFF)

	)

113 
	#CAN_FLAGS_TSR
 ((
uöt32_t
)0x08000000)

	)

115 
	#CAN_FLAGS_RF1R
 ((
uöt32_t
)0x04000000)

	)

117 
	#CAN_FLAGS_RF0R
 ((
uöt32_t
)0x02000000)

	)

119 
	#CAN_FLAGS_MSR
 ((
uöt32_t
)0x01000000)

	)

121 
	#CAN_FLAGS_ESR
 ((
uöt32_t
)0x00F00000)

	)

124 
	#CAN_TXMAILBOX_0
 ((
uöt8_t
)0x00)

	)

125 
	#CAN_TXMAILBOX_1
 ((
uöt8_t
)0x01)

	)

126 
	#CAN_TXMAILBOX_2
 ((
uöt8_t
)0x02)

	)

128 
	#CAN_MODE_MASK
 ((
uöt32_t
Ë0x00000003)

	)

134 
ITSètus
 
CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
);

166 
	$CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
)

169 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

171 i‡(
CANx
 =
CAN1
)

174 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
ENABLE
);

176 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
DISABLE
);

181 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
ENABLE
);

183 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
DISABLE
);

185 
	}
}

196 
uöt8_t
 
	$CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

198 
uöt8_t
 
InôSètus
 = 
CAN_InôSètus_Faûed
;

199 
uöt32_t
 
waô_ack
 = 0x00000000;

201 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

202 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TTCM
));

203 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_ABOM
));

204 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_AWUM
));

205 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_NART
));

206 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_RFLM
));

207 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TXFP
));

208 
	`as£π_∑øm
(
	`IS_CAN_MODE
(
CAN_InôSåu˘
->
CAN_Mode
));

209 
	`as£π_∑øm
(
	`IS_CAN_SJW
(
CAN_InôSåu˘
->
CAN_SJW
));

210 
	`as£π_∑øm
(
	`IS_CAN_BS1
(
CAN_InôSåu˘
->
CAN_BS1
));

211 
	`as£π_∑øm
(
	`IS_CAN_BS2
(
CAN_InôSåu˘
->
CAN_BS2
));

212 
	`as£π_∑øm
(
	`IS_CAN_PRESCALER
(
CAN_InôSåu˘
->
CAN_PªsˇÀr
));

215 
CANx
->
MCR
 &(~(
uöt32_t
)
CAN_MCR_SLEEP
);

218 
CANx
->
MCR
 |
CAN_MCR_INRQ
 ;

221 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë!CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

223 
waô_ack
++;

227 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) != CAN_MSR_INAK)

229 
InôSètus
 = 
CAN_InôSètus_Faûed
;

234 i‡(
CAN_InôSåu˘
->
CAN_TTCM
 =
ENABLE
)

236 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

240 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TTCM
;

244 i‡(
CAN_InôSåu˘
->
CAN_ABOM
 =
ENABLE
)

246 
CANx
->
MCR
 |
CAN_MCR_ABOM
;

250 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_ABOM
;

254 i‡(
CAN_InôSåu˘
->
CAN_AWUM
 =
ENABLE
)

256 
CANx
->
MCR
 |
CAN_MCR_AWUM
;

260 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_AWUM
;

264 i‡(
CAN_InôSåu˘
->
CAN_NART
 =
ENABLE
)

266 
CANx
->
MCR
 |
CAN_MCR_NART
;

270 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_NART
;

274 i‡(
CAN_InôSåu˘
->
CAN_RFLM
 =
ENABLE
)

276 
CANx
->
MCR
 |
CAN_MCR_RFLM
;

280 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_RFLM
;

284 i‡(
CAN_InôSåu˘
->
CAN_TXFP
 =
ENABLE
)

286 
CANx
->
MCR
 |
CAN_MCR_TXFP
;

290 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TXFP
;

294 
CANx
->
BTR
 = (
uöt32_t
)((uöt32_t)
CAN_InôSåu˘
->
CAN_Mode
 << 30) | \

295 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_SJW
 << 24) | \

296 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS1
 << 16) | \

297 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS2
 << 20) | \

298 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_PªsˇÀr
 - 1);

301 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_INRQ
;

304 
waô_ack
 = 0;

306 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë=CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

308 
waô_ack
++;

312 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) == CAN_MSR_INAK)

314 
InôSètus
 = 
CAN_InôSètus_Faûed
;

318 
InôSètus
 = 
CAN_InôSètus_Suc˚ss
 ;

323  
InôSètus
;

324 
	}
}

333 
	$CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
)

335 
uöt32_t
 
fûãr_numbî_bô_pos
 = 0;

337 
	`as£π_∑øm
(
	`IS_CAN_FILTER_NUMBER
(
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
));

338 
	`as£π_∑øm
(
	`IS_CAN_FILTER_MODE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
));

339 
	`as£π_∑øm
(
	`IS_CAN_FILTER_SCALE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
));

340 
	`as£π_∑øm
(
	`IS_CAN_FILTER_FIFO
(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
));

341 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
));

343 
fûãr_numbî_bô_pos
 = ((
uöt32_t
)1Ë<< 
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
;

346 
CAN1
->
FMR
 |
FMR_FINIT
;

349 
CAN1
->
FA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

352 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_16bô
)

355 
CAN1
->
FS1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

359 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

360 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
) << 16) |

361 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

365 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

366 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

367 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
);

370 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_32bô
)

373 
CAN1
->
FS1R
 |
fûãr_numbî_bô_pos
;

375 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

376 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
) << 16) |

377 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

379 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

380 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

381 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
);

385 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
 =
CAN_FûãrMode_IdMask
)

388 
CAN1
->
FM1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

393 
CAN1
->
FM1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

397 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO0
)

400 
CAN1
->
FFA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

403 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO1
)

406 
CAN1
->
FFA1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

410 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
 =
ENABLE
)

412 
CAN1
->
FA1R
 |
fûãr_numbî_bô_pos
;

416 
CAN1
->
FMR
 &~
FMR_FINIT
;

417 
	}
}

424 
	$CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

429 
CAN_InôSåu˘
->
CAN_TTCM
 = 
DISABLE
;

432 
CAN_InôSåu˘
->
CAN_ABOM
 = 
DISABLE
;

435 
CAN_InôSåu˘
->
CAN_AWUM
 = 
DISABLE
;

438 
CAN_InôSåu˘
->
CAN_NART
 = 
DISABLE
;

441 
CAN_InôSåu˘
->
CAN_RFLM
 = 
DISABLE
;

444 
CAN_InôSåu˘
->
CAN_TXFP
 = 
DISABLE
;

447 
CAN_InôSåu˘
->
CAN_Mode
 = 
CAN_Mode_N‹mÆ
;

450 
CAN_InôSåu˘
->
CAN_SJW
 = 
CAN_SJW_1tq
;

453 
CAN_InôSåu˘
->
CAN_BS1
 = 
CAN_BS1_4tq
;

456 
CAN_InôSåu˘
->
CAN_BS2
 = 
CAN_BS2_3tq
;

459 
CAN_InôSåu˘
->
CAN_PªsˇÀr
 = 1;

460 
	}
}

467 
	$CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
)

470 
	`as£π_∑øm
(
	`IS_CAN_BANKNUMBER
(
CAN_B™kNumbî
));

473 
CAN1
->
FMR
 |
FMR_FINIT
;

476 
CAN1
->
FMR
 &(
uöt32_t
)0xFFFFC0F1 ;

477 
CAN1
->
FMR
 |(
uöt32_t
)(
CAN_B™kNumbî
)<<8;

480 
CAN1
->
FMR
 &~
FMR_FINIT
;

481 
	}
}

492 
	$CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

495 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

496 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

498 i‡(
NewSèã
 !
DISABLE
)

501 
CANx
->
MCR
 |
MCR_DBF
;

506 
CANx
->
MCR
 &~
MCR_DBF
;

508 
	}
}

522 
	$CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

525 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

526 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

527 i‡(
NewSèã
 !
DISABLE
)

530 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

533 
CANx
->
sTxMaûBox
[0].
TDTR
 |((
uöt32_t
)
CAN_TDT0R_TGT
);

534 
CANx
->
sTxMaûBox
[1].
TDTR
 |((
uöt32_t
)
CAN_TDT1R_TGT
);

535 
CANx
->
sTxMaûBox
[2].
TDTR
 |((
uöt32_t
)
CAN_TDT2R_TGT
);

540 
CANx
->
MCR
 &(
uöt32_t
)(~(uöt32_t)
CAN_MCR_TTCM
);

543 
CANx
->
sTxMaûBox
[0].
TDTR
 &((
uöt32_t
)~
CAN_TDT0R_TGT
);

544 
CANx
->
sTxMaûBox
[1].
TDTR
 &((
uöt32_t
)~
CAN_TDT1R_TGT
);

545 
CANx
->
sTxMaûBox
[2].
TDTR
 &((
uöt32_t
)~
CAN_TDT2R_TGT
);

547 
	}
}

576 
uöt8_t
 
	$CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
)

578 
uöt8_t
 
å™smô_maûbox
 = 0;

580 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

581 
	`as£π_∑øm
(
	`IS_CAN_IDTYPE
(
TxMesßge
->
IDE
));

582 
	`as£π_∑øm
(
	`IS_CAN_RTR
(
TxMesßge
->
RTR
));

583 
	`as£π_∑øm
(
	`IS_CAN_DLC
(
TxMesßge
->
DLC
));

586 i‡((
CANx
->
TSR
&
CAN_TSR_TME0
) == CAN_TSR_TME0)

588 
å™smô_maûbox
 = 0;

590 i‡((
CANx
->
TSR
&
CAN_TSR_TME1
) == CAN_TSR_TME1)

592 
å™smô_maûbox
 = 1;

594 i‡((
CANx
->
TSR
&
CAN_TSR_TME2
) == CAN_TSR_TME2)

596 
å™smô_maûbox
 = 2;

600 
å™smô_maûbox
 = 
CAN_TxSètus_NoMaûBox
;

603 i‡(
å™smô_maûbox
 !
CAN_TxSètus_NoMaûBox
)

606 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 &
TMIDxR_TXRQ
;

607 i‡(
TxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

609 
	`as£π_∑øm
(
	`IS_CAN_STDID
(
TxMesßge
->
StdId
));

610 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
StdId
 << 21) | \

611 
TxMesßge
->
RTR
);

615 
	`as£π_∑øm
(
	`IS_CAN_EXTID
(
TxMesßge
->
ExtId
));

616 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
ExtId
 << 3) | \

617 
TxMesßge
->
IDE
 | \

618 
TxMesßge
->
RTR
);

622 
TxMesßge
->
DLC
 &(
uöt8_t
)0x0000000F;

623 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 &(
uöt32_t
)0xFFFFFFF0;

624 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 |
TxMesßge
->
DLC
;

627 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDLR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[3] << 24) |

628 ((
uöt32_t
)
TxMesßge
->
D©a
[2] << 16) |

629 ((
uöt32_t
)
TxMesßge
->
D©a
[1] << 8) |

630 ((
uöt32_t
)
TxMesßge
->
D©a
[0]));

631 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDHR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[7] << 24) |

632 ((
uöt32_t
)
TxMesßge
->
D©a
[6] << 16) |

633 ((
uöt32_t
)
TxMesßge
->
D©a
[5] << 8) |

634 ((
uöt32_t
)
TxMesßge
->
D©a
[4]));

636 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |
TMIDxR_TXRQ
;

638  
å™smô_maûbox
;

639 
	}
}

648 
uöt8_t
 
	$CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
TønsmôMaûbox
)

650 
uöt32_t
 
°©e
 = 0;

653 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

654 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
TønsmôMaûbox
));

656 
TønsmôMaûbox
)

658 (
CAN_TXMAILBOX_0
):

659 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
);

661 (
CAN_TXMAILBOX_1
):

662 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
);

664 (
CAN_TXMAILBOX_2
):

665 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
);

668 
°©e
 = 
CAN_TxSètus_Faûed
;

671 
°©e
)

674 (0x0): 
°©e
 = 
CAN_TxSètus_Pídög
;

677 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TME0
): 
°©e
 = 
CAN_TxSètus_Faûed
;

679 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TME1
): 
°©e
 = 
CAN_TxSètus_Faûed
;

681 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TME2
): 
°©e
 = 
CAN_TxSètus_Faûed
;

684 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
):
°©e
 = 
CAN_TxSètus_Ok
;

686 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
):
°©e
 = 
CAN_TxSètus_Ok
;

688 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
):
°©e
 = 
CAN_TxSètus_Ok
;

690 : 
°©e
 = 
CAN_TxSètus_Faûed
;

693  (
uöt8_t
Ë
°©e
;

694 
	}
}

702 
	$CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
)

705 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

706 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
Maûbox
));

708 
Maûbox
)

710 (
CAN_TXMAILBOX_0
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ0
;

712 (
CAN_TXMAILBOX_1
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ1
;

714 (
CAN_TXMAILBOX_2
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ2
;

719 
	}
}

749 
	$CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
)

752 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

753 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

755 
RxMesßge
->
IDE
 = (
uöt8_t
)0x04 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

756 i‡(
RxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

758 
RxMesßge
->
StdId
 = (
uöt32_t
)0x000007FF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 21);

762 
RxMesßge
->
ExtId
 = (
uöt32_t
)0x1FFFFFFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 3);

765 
RxMesßge
->
RTR
 = (
uöt8_t
)0x02 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

767 
RxMesßge
->
DLC
 = (
uöt8_t
)0x0F & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
;

769 
RxMesßge
->
FMI
 = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
 >> 8);

771 
RxMesßge
->
D©a
[0] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
;

772 
RxMesßge
->
D©a
[1] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 8);

773 
RxMesßge
->
D©a
[2] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 16);

774 
RxMesßge
->
D©a
[3] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 24);

775 
RxMesßge
->
D©a
[4] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
;

776 
RxMesßge
->
D©a
[5] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 8);

777 
RxMesßge
->
D©a
[6] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 16);

778 
RxMesßge
->
D©a
[7] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 24);

781 i‡(
FIFONumbî
 =
CAN_FIFO0
)

783 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

788 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

790 
	}
}

798 
	$CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

801 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

802 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

804 i‡(
FIFONumbî
 =
CAN_FIFO0
)

806 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

811 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

813 
	}
}

821 
uöt8_t
 
	$CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

823 
uöt8_t
 
mesßge_≥ndög
=0;

825 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

826 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

827 i‡(
FIFONumbî
 =
CAN_FIFO0
)

829 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF0R
&(
uöt32_t
)0x03);

831 i‡(
FIFONumbî
 =
CAN_FIFO1
)

833 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF1R
&(
uöt32_t
)0x03);

837 
mesßge_≥ndög
 = 0;

839  
mesßge_≥ndög
;

840 
	}
}

871 
uöt8_t
 
	$CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
CAN_O≥øtögMode
)

873 
uöt8_t
 
°©us
 = 
CAN_ModeSètus_Faûed
;

876 
uöt32_t
 
timeout
 = 
INAK_TIMEOUT
;

879 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

880 
	`as£π_∑øm
(
	`IS_CAN_OPERATING_MODE
(
CAN_O≥øtögMode
));

882 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_Inôüliz©i⁄
)

885 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_SLEEP
)Ë| 
CAN_MCR_INRQ
);

888 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
Ë&& (
timeout
 != 0))

890 
timeout
--;

892 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
)

894 
°©us
 = 
CAN_ModeSètus_Faûed
;

898 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

901 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_N‹mÆ
)

904 
CANx
->
MCR
 &(
uöt32_t
)(~(
CAN_MCR_SLEEP
|
CAN_MCR_INRQ
));

907 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!0Ë&& (
timeout
!=0))

909 
timeout
--;

911 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
) != 0)

913 
°©us
 = 
CAN_ModeSètus_Faûed
;

917 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

920 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_SÀï
)

923 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

926 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
Ë&& (
timeout
!=0))

928 
timeout
--;

930 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
)

932 
°©us
 = 
CAN_ModeSètus_Faûed
;

936 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

941 
°©us
 = 
CAN_ModeSètus_Faûed
;

944  (
uöt8_t
Ë
°©us
;

945 
	}
}

952 
uöt8_t
 
	$CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
)

954 
uöt8_t
 
¶ìp°©us
 = 
CAN_SÀï_Faûed
;

957 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

960 
CANx
->
MCR
 = (((CANx->MCRË& (
uöt32_t
)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

963 i‡((
CANx
->
MSR
 & (
CAN_MSR_SLAK
|
CAN_MSR_INAK
)) == CAN_MSR_SLAK)

966 
¶ìp°©us
 = 
CAN_SÀï_Ok
;

969  (
uöt8_t
)
¶ìp°©us
;

970 
	}
}

977 
uöt8_t
 
	$CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
)

979 
uöt32_t
 
waô_¶ak
 = 
SLAK_TIMEOUT
;

980 
uöt8_t
 
wakeup°©us
 = 
CAN_WakeUp_Faûed
;

983 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

986 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_SLEEP
;

989 ((
CANx
->
MSR
 & 
CAN_MSR_SLAK
Ë=CAN_MSR_SLAK)&&(
waô_¶ak
!=0x00))

991 
waô_¶ak
--;

993 if((
CANx
->
MSR
 & 
CAN_MSR_SLAK
) != CAN_MSR_SLAK)

996 
wakeup°©us
 = 
CAN_WakeUp_Ok
;

999  (
uöt8_t
)
wakeup°©us
;

1000 
	}
}

1039 
uöt8_t
 
	$CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
)

1041 
uöt8_t
 
îr‹code
=0;

1044 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1047 
îr‹code
 = (((
uöt8_t
)
CANx
->
ESR
Ë& (uöt8_t)
CAN_ESR_LEC
);

1050  
îr‹code
;

1051 
	}
}

1064 
uöt8_t
 
	$CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

1066 
uöt8_t
 
cou¡î
=0;

1069 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1072 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_REC
)>> 24);

1075  
cou¡î
;

1076 
	}
}

1084 
uöt8_t
 
	$CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

1086 
uöt8_t
 
cou¡î
=0;

1089 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1092 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_TEC
)>> 16);

1095  
cou¡î
;

1096 
	}
}

1289 
	$CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1292 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1293 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1294 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1296 i‡(
NewSèã
 !
DISABLE
)

1299 
CANx
->
IER
 |
CAN_IT
;

1304 
CANx
->
IER
 &~
CAN_IT
;

1306 
	}
}

1329 
FœgSètus
 
	$CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1331 
FœgSètus
 
bô°©us
 = 
RESET
;

1334 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1335 
	`as£π_∑øm
(
	`IS_CAN_GET_FLAG
(
CAN_FLAG
));

1338 if((
CAN_FLAG
 & 
CAN_FLAGS_ESR
Ë!(
uöt32_t
)
RESET
)

1341 i‡((
CANx
->
ESR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1344 
bô°©us
 = 
SET
;

1349 
bô°©us
 = 
RESET
;

1352 if((
CAN_FLAG
 & 
CAN_FLAGS_MSR
Ë!(
uöt32_t
)
RESET
)

1355 i‡((
CANx
->
MSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1358 
bô°©us
 = 
SET
;

1363 
bô°©us
 = 
RESET
;

1366 if((
CAN_FLAG
 & 
CAN_FLAGS_TSR
Ë!(
uöt32_t
)
RESET
)

1369 i‡((
CANx
->
TSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1372 
bô°©us
 = 
SET
;

1377 
bô°©us
 = 
RESET
;

1380 if((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
Ë!(
uöt32_t
)
RESET
)

1383 i‡((
CANx
->
RF0R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1386 
bô°©us
 = 
SET
;

1391 
bô°©us
 = 
RESET
;

1397 i‡((
uöt32_t
)(
CANx
->
RF1R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(uöt32_t)
RESET
)

1400 
bô°©us
 = 
SET
;

1405 
bô°©us
 = 
RESET
;

1409  
bô°©us
;

1410 
	}
}

1429 
	$CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1431 
uöt32_t
 
Êagtmp
=0;

1433 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1434 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_FLAG
(
CAN_FLAG
));

1436 i‡(
CAN_FLAG
 =
CAN_FLAG_LEC
)

1439 
CANx
->
ESR
 = (
uöt32_t
)
RESET
;

1443 
Êagtmp
 = 
CAN_FLAG
 & 0x000FFFFF;

1445 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
)!=(
uöt32_t
)
RESET
)

1448 
CANx
->
RF0R
 = (
uöt32_t
)(
Êagtmp
);

1450 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF1R
)!=(
uöt32_t
)
RESET
)

1453 
CANx
->
RF1R
 = (
uöt32_t
)(
Êagtmp
);

1455 i‡((
CAN_FLAG
 & 
CAN_FLAGS_TSR
)!=(
uöt32_t
)
RESET
)

1458 
CANx
->
TSR
 = (
uöt32_t
)(
Êagtmp
);

1463 
CANx
->
MSR
 = (
uöt32_t
)(
Êagtmp
);

1466 
	}
}

1489 
ITSètus
 
	$CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1491 
ITSètus
 
ô°©us
 = 
RESET
;

1493 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1494 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1497 if((
CANx
->
IER
 & 
CAN_IT
Ë!
RESET
)

1500 
CAN_IT
)

1502 
CAN_IT_TME
:

1504 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
);

1506 
CAN_IT_FMP0
:

1508 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FMP0
);

1510 
CAN_IT_FF0
:

1512 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FULL0
);

1514 
CAN_IT_FOV0
:

1516 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FOVR0
);

1518 
CAN_IT_FMP1
:

1520 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FMP1
);

1522 
CAN_IT_FF1
:

1524 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FULL1
);

1526 
CAN_IT_FOV1
:

1528 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FOVR1
);

1530 
CAN_IT_WKU
:

1532 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_WKUI
);

1534 
CAN_IT_SLK
:

1536 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_SLAKI
);

1538 
CAN_IT_EWG
:

1540 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EWGF
);

1542 
CAN_IT_EPV
:

1544 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EPVF
);

1546 
CAN_IT_BOF
:

1548 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_BOFF
);

1550 
CAN_IT_LEC
:

1552 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_LEC
);

1554 
CAN_IT_ERR
:

1556 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_ERRI
);

1560 
ô°©us
 = 
RESET
;

1567 
ô°©us
 = 
RESET
;

1571  
ô°©us
;

1572 
	}
}

1593 
	$CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1596 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1597 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_IT
(
CAN_IT
));

1599 
CAN_IT
)

1601 
CAN_IT_TME
:

1603 
CANx
->
TSR
 = 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
;

1605 
CAN_IT_FF0
:

1607 
CANx
->
RF0R
 = 
CAN_RF0R_FULL0
;

1609 
CAN_IT_FOV0
:

1611 
CANx
->
RF0R
 = 
CAN_RF0R_FOVR0
;

1613 
CAN_IT_FF1
:

1615 
CANx
->
RF1R
 = 
CAN_RF1R_FULL1
;

1617 
CAN_IT_FOV1
:

1619 
CANx
->
RF1R
 = 
CAN_RF1R_FOVR1
;

1621 
CAN_IT_WKU
:

1623 
CANx
->
MSR
 = 
CAN_MSR_WKUI
;

1625 
CAN_IT_SLK
:

1627 
CANx
->
MSR
 = 
CAN_MSR_SLAKI
;

1629 
CAN_IT_EWG
:

1631 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1634 
CAN_IT_EPV
:

1636 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1639 
CAN_IT_BOF
:

1641 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1644 
CAN_IT_LEC
:

1646 
CANx
->
ESR
 = 
RESET
;

1648 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1650 
CAN_IT_ERR
:

1652 
CANx
->
ESR
 = 
RESET
;

1654 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1660 
	}
}

1671 
ITSètus
 
	$CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
)

1673 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

1675 i‡((
CAN_Reg
 & 
It_Bô
Ë!(
uöt32_t
)
RESET
)

1678 
≥ndögbô°©us
 = 
SET
;

1683 
≥ndögbô°©us
 = 
RESET
;

1685  
≥ndögbô°©us
;

1686 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_crc.c

29 
	~"°m32f4xx_¸c.h
"

56 
	$CRC_Re£tDR
()

59 
CRC
->
CR
 = 
CRC_CR_RESET
;

60 
	}
}

67 
uöt32_t
 
	$CRC_CÆcCRC
(
uöt32_t
 
D©a
)

69 
CRC
->
DR
 = 
D©a
;

71  (
CRC
->
DR
);

72 
	}
}

80 
uöt32_t
 
	$CRC_CÆcBlockCRC
(
uöt32_t
 
pBuf„r
[], uöt32_à
Buf„rLígth
)

82 
uöt32_t
 
ödex
 = 0;

84 
ödex
 = 0; index < 
Buf„rLígth
; index++)

86 
CRC
->
DR
 = 
pBuf„r
[
ödex
];

88  (
CRC
->
DR
);

89 
	}
}

96 
uöt32_t
 
	$CRC_GëCRC
()

98  (
CRC
->
DR
);

99 
	}
}

106 
	$CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
)

108 
CRC
->
IDR
 = 
IDVÆue
;

109 
	}
}

116 
uöt8_t
 
	$CRC_GëIDRegi°î
()

118  (
CRC
->
IDR
);

119 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c

164 
	~"°m32f4xx_¸yp.h
"

165 
	~"°m32f4xx_rcc.h
"

178 
	#FLAG_MASK
 ((
uöt8_t
)0x20)

	)

179 
	#MAX_TIMEOUT
 ((
uöt16_t
)0xFFFF)

	)

219 
	$CRYP_DeInô
()

222 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_CRYP
, 
ENABLE
);

225 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_CRYP
, 
DISABLE
);

226 
	}
}

235 
	$CRYP_Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
)

238 
	`as£π_∑øm
(
	`IS_CRYP_ALGOMODE
(
CRYP_InôSåu˘
->
CRYP_AlgoMode
));

239 
	`as£π_∑øm
(
	`IS_CRYP_DATATYPE
(
CRYP_InôSåu˘
->
CRYP_D©aTy≥
));

240 
	`as£π_∑øm
(
	`IS_CRYP_ALGODIR
(
CRYP_InôSåu˘
->
CRYP_AlgoDú
));

243 
CRYP
->
CR
 &~
CRYP_CR_ALGOMODE
;

244 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_AlgoMode
;

247 
CRYP
->
CR
 &~
CRYP_CR_DATATYPE
;

248 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_D©aTy≥
;

251 i‡((
CRYP_InôSåu˘
->
CRYP_AlgoMode
 !
CRYP_AlgoMode_TDES_ECB
) &&

252 (
CRYP_InôSåu˘
->
CRYP_AlgoMode
 !
CRYP_AlgoMode_TDES_CBC
) &&

253 (
CRYP_InôSåu˘
->
CRYP_AlgoMode
 !
CRYP_AlgoMode_DES_ECB
) &&

254 (
CRYP_InôSåu˘
->
CRYP_AlgoMode
 !
CRYP_AlgoMode_DES_CBC
))

256 
	`as£π_∑øm
(
	`IS_CRYP_KEYSIZE
(
CRYP_InôSåu˘
->
CRYP_KeySize
));

257 
CRYP
->
CR
 &~
CRYP_CR_KEYSIZE
;

258 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_KeySize
;

264 
CRYP
->
CR
 &~
CRYP_CR_ALGODIR
;

265 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_AlgoDú
;

266 
	}
}

274 
	$CRYP_Såu˘Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
)

277 
CRYP_InôSåu˘
->
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

280 
CRYP_InôSåu˘
->
CRYP_AlgoMode
 = 
CRYP_AlgoMode_TDES_ECB
;

283 
CRYP_InôSåu˘
->
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_32b
;

286 
CRYP_InôSåu˘
->
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

287 
	}
}

296 
	$CRYP_KeyInô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
)

299 
CRYP
->
K0LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Le·
;

300 
CRYP
->
K0RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Right
;

301 
CRYP
->
K1LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Le·
;

302 
CRYP
->
K1RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Right
;

303 
CRYP
->
K2LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Le·
;

304 
CRYP
->
K2RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Right
;

305 
CRYP
->
K3LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Le·
;

306 
CRYP
->
K3RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Right
;

307 
	}
}

315 
	$CRYP_KeySåu˘Inô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
)

317 
CRYP_KeyInôSåu˘
->
CRYP_Key0Le·
 = 0;

318 
CRYP_KeyInôSåu˘
->
CRYP_Key0Right
 = 0;

319 
CRYP_KeyInôSåu˘
->
CRYP_Key1Le·
 = 0;

320 
CRYP_KeyInôSåu˘
->
CRYP_Key1Right
 = 0;

321 
CRYP_KeyInôSåu˘
->
CRYP_Key2Le·
 = 0;

322 
CRYP_KeyInôSåu˘
->
CRYP_Key2Right
 = 0;

323 
CRYP_KeyInôSåu˘
->
CRYP_Key3Le·
 = 0;

324 
CRYP_KeyInôSåu˘
->
CRYP_Key3Right
 = 0;

325 
	}
}

333 
	$CRYP_IVInô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
)

335 
CRYP
->
IV0LR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV0Le·
;

336 
CRYP
->
IV0RR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV0Right
;

337 
CRYP
->
IV1LR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV1Le·
;

338 
CRYP
->
IV1RR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV1Right
;

339 
	}
}

347 
	$CRYP_IVSåu˘Inô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
)

349 
CRYP_IVInôSåu˘
->
CRYP_IV0Le·
 = 0;

350 
CRYP_IVInôSåu˘
->
CRYP_IV0Right
 = 0;

351 
CRYP_IVInôSåu˘
->
CRYP_IV1Le·
 = 0;

352 
CRYP_IVInôSåu˘
->
CRYP_IV1Right
 = 0;

353 
	}
}

366 
	$CRYP_Pha£C⁄fig
(
uöt32_t
 
CRYP_Pha£
)

367 { 
uöt32_t
 
ãmp¸
 = 0;

370 
	`as£π_∑øm
(
	`IS_CRYP_PHASE
(
CRYP_Pha£
));

373 
ãmp¸
 = 
CRYP
->
CR
;

376 
ãmp¸
 &(
uöt32_t
)(~
CRYP_CR_GCM_CCMPH
);

378 
ãmp¸
 |(
uöt32_t
)
CRYP_Pha£
;

381 
CRYP
->
CR
 = 
ãmp¸
;

382 
	}
}

391 
	$CRYP_FIFOFlush
()

394 
CRYP
->
CR
 |
CRYP_CR_FFLUSH
;

395 
	}
}

403 
	$CRYP_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

406 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

408 i‡(
NewSèã
 !
DISABLE
)

411 
CRYP
->
CR
 |
CRYP_CR_CRYPEN
;

416 
CRYP
->
CR
 &~
CRYP_CR_CRYPEN
;

418 
	}
}

446 
	$CRYP_D©aIn
(
uöt32_t
 
D©a
)

448 
CRYP
->
DR
 = 
D©a
;

449 
	}
}

456 
uöt32_t
 
	$CRYP_D©aOut
()

458  
CRYP
->
DOUT
;

459 
	}
}

497 
Eº‹Sètus
 
	$CRYP_SaveC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtSave
,

498 
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
)

500 
__IO
 
uöt32_t
 
timeout
 = 0;

501 
uöt32_t
 
ckeckmask
 = 0, 
bô°©us
;

502 
Eº‹Sètus
 
°©us
 = 
ERROR
;

505 
CRYP
->
DMACR
 &~(
uöt32_t
)
CRYP_DMACR_DIEN
;

511 i‡((
CRYP
->
CR
 & (
uöt32_t
)(
CRYP_CR_ALGOMODE_TDES_ECB
 | 
CRYP_CR_ALGOMODE_TDES_CBC
)) != (uint32_t)0 )

513 
ckeckmask
 = 
CRYP_SR_IFEM
 | 
CRYP_SR_BUSY
 ;

517 
ckeckmask
 = 
CRYP_SR_IFEM
 | 
CRYP_SR_BUSY
 | 
CRYP_SR_OFNE
;

522 
bô°©us
 = 
CRYP
->
SR
 & 
ckeckmask
;

523 
timeout
++;

525 (
timeout
 !
MAX_TIMEOUT
Ë&& (
bô°©us
 !
CRYP_SR_IFEM
));

527 i‡((
CRYP
->
SR
 & 
ckeckmask
Ë!
CRYP_SR_IFEM
)

529 
°©us
 = 
ERROR
;

537 
CRYP
->
DMACR
 &~(
uöt32_t
)
CRYP_DMACR_DOEN
;

538 
CRYP
->
CR
 &~(
uöt32_t
)
CRYP_CR_CRYPEN
;

541 
CRYP_C⁄ãxtSave
->
CR_CuºítC⁄fig
 = 
CRYP
->
CR
 & (
CRYP_CR_GCM_CCMPH
 |

542 
CRYP_CR_KEYSIZE
 |

543 
CRYP_CR_DATATYPE
 |

544 
CRYP_CR_ALGOMODE
 |

545 
CRYP_CR_ALGODIR
);

548 
CRYP_C⁄ãxtSave
->
CRYP_IV0LR
 = 
CRYP
->
IV0LR
;

549 
CRYP_C⁄ãxtSave
->
CRYP_IV0RR
 = 
CRYP
->
IV0RR
;

550 
CRYP_C⁄ãxtSave
->
CRYP_IV1LR
 = 
CRYP
->
IV1LR
;

551 
CRYP_C⁄ãxtSave
->
CRYP_IV1RR
 = 
CRYP
->
IV1RR
;

554 
CRYP_C⁄ãxtSave
->
CRYP_K0LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Le·
;

555 
CRYP_C⁄ãxtSave
->
CRYP_K0RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Right
;

556 
CRYP_C⁄ãxtSave
->
CRYP_K1LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Le·
;

557 
CRYP_C⁄ãxtSave
->
CRYP_K1RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Right
;

558 
CRYP_C⁄ãxtSave
->
CRYP_K2LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Le·
;

559 
CRYP_C⁄ãxtSave
->
CRYP_K2RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Right
;

560 
CRYP_C⁄ãxtSave
->
CRYP_K3LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Le·
;

561 
CRYP_C⁄ãxtSave
->
CRYP_K3RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Right
;

564 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[0] = 
CRYP
->
CSGCMCCM0R
;

565 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[1] = 
CRYP
->
CSGCMCCM1R
;

566 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[2] = 
CRYP
->
CSGCMCCM2R
;

567 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[3] = 
CRYP
->
CSGCMCCM3R
;

568 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[4] = 
CRYP
->
CSGCMCCM4R
;

569 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[5] = 
CRYP
->
CSGCMCCM5R
;

570 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[6] = 
CRYP
->
CSGCMCCM6R
;

571 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[7] = 
CRYP
->
CSGCMCCM7R
;

573 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[0] = 
CRYP
->
CSGCM0R
;

574 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[1] = 
CRYP
->
CSGCM1R
;

575 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[2] = 
CRYP
->
CSGCM2R
;

576 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[3] = 
CRYP
->
CSGCM3R
;

577 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[4] = 
CRYP
->
CSGCM4R
;

578 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[5] = 
CRYP
->
CSGCM5R
;

579 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[6] = 
CRYP
->
CSGCM6R
;

580 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[7] = 
CRYP
->
CSGCM7R
;

585 
°©us
 = 
SUCCESS
;

588  
°©us
;

589 
	}
}

602 
	$CRYP_Re°‹eC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtRe°‹e
)

606 
CRYP
->
CR
 = 
CRYP_C⁄ãxtRe°‹e
->
CR_CuºítC⁄fig
;

609 
CRYP
->
K0LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K0LR
;

610 
CRYP
->
K0RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K0RR
;

611 
CRYP
->
K1LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K1LR
;

612 
CRYP
->
K1RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K1RR
;

613 
CRYP
->
K2LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K2LR
;

614 
CRYP
->
K2RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K2RR
;

615 
CRYP
->
K3LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K3LR
;

616 
CRYP
->
K3RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K3RR
;

619 
CRYP
->
IV0LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV0LR
;

620 
CRYP
->
IV0RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV0RR
;

621 
CRYP
->
IV1LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV1LR
;

622 
CRYP
->
IV1RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV1RR
;

625 
CRYP
->
CSGCMCCM0R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[0];

626 
CRYP
->
CSGCMCCM1R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[1];

627 
CRYP
->
CSGCMCCM2R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[2];

628 
CRYP
->
CSGCMCCM3R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[3];

629 
CRYP
->
CSGCMCCM4R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[4];

630 
CRYP
->
CSGCMCCM5R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[5];

631 
CRYP
->
CSGCMCCM6R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[6];

632 
CRYP
->
CSGCMCCM7R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[7];

634 
CRYP
->
CSGCM0R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[0];

635 
CRYP
->
CSGCM1R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[1];

636 
CRYP
->
CSGCM2R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[2];

637 
CRYP
->
CSGCM3R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[3];

638 
CRYP
->
CSGCM4R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[4];

639 
CRYP
->
CSGCM5R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[5];

640 
CRYP
->
CSGCM6R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[6];

641 
CRYP
->
CSGCM7R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[7];

644 
CRYP
->
CR
 |
CRYP_CR_CRYPEN
;

645 
	}
}

681 
	$CRYP_DMACmd
(
uöt8_t
 
CRYP_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

684 
	`as£π_∑øm
(
	`IS_CRYP_DMAREQ
(
CRYP_DMAReq
));

685 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

687 i‡(
NewSèã
 !
DISABLE
)

690 
CRYP
->
DMACR
 |
CRYP_DMAReq
;

695 
CRYP
->
DMACR
 &(
uöt8_t
)~
CRYP_DMAReq
;

697 
	}
}

799 
	$CRYP_ITC⁄fig
(
uöt8_t
 
CRYP_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

802 
	`as£π_∑øm
(
	`IS_CRYP_CONFIG_IT
(
CRYP_IT
));

803 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

805 i‡(
NewSèã
 !
DISABLE
)

808 
CRYP
->
IMSCR
 |
CRYP_IT
;

813 
CRYP
->
IMSCR
 &(
uöt8_t
)~
CRYP_IT
;

815 
	}
}

827 
ITSètus
 
	$CRYP_GëITSètus
(
uöt8_t
 
CRYP_IT
)

829 
ITSètus
 
bô°©us
 = 
RESET
;

831 
	`as£π_∑øm
(
	`IS_CRYP_GET_IT
(
CRYP_IT
));

834 i‡((
CRYP
->
MISR
 & 
CRYP_IT
Ë!(
uöt8_t
)
RESET
)

837 
bô°©us
 = 
SET
;

842 
bô°©us
 = 
RESET
;

845  
bô°©us
;

846 
	}
}

853 
Fun˘i⁄ÆSèã
 
	$CRYP_GëCmdSètus
()

855 
Fun˘i⁄ÆSèã
 
°©e
 = 
DISABLE
;

857 i‡((
CRYP
->
CR
 & 
CRYP_CR_CRYPEN
) != 0)

860 
°©e
 = 
ENABLE
;

865 
°©e
 = 
DISABLE
;

867  
°©e
;

868 
	}
}

883 
FœgSètus
 
	$CRYP_GëFœgSètus
(
uöt8_t
 
CRYP_FLAG
)

885 
FœgSètus
 
bô°©us
 = 
RESET
;

886 
uöt32_t
 
ãm¥eg
 = 0;

889 
	`as£π_∑øm
(
	`IS_CRYP_GET_FLAG
(
CRYP_FLAG
));

892 i‡((
CRYP_FLAG
 & 
FLAG_MASK
) != 0x00)

894 
ãm¥eg
 = 
CRYP
->
RISR
;

898 
ãm¥eg
 = 
CRYP
->
SR
;

903 i‡((
ãm¥eg
 & 
CRYP_FLAG
 ) !(
uöt8_t
)
RESET
)

906 
bô°©us
 = 
SET
;

911 
bô°©us
 = 
RESET
;

915  
bô°©us
;

916 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c

55 
	~"°m32f4xx_¸yp.h
"

68 
	#AESBUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

106 
Eº‹Sètus
 
	$CRYP_AES_ECB
(
uöt8_t
 
Mode
, uöt8_t* 
Key
, 
uöt16_t
 
Keysize
,

107 
uöt8_t
* 
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_t* 
Ouçut
)

109 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

110 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

111 
__IO
 
uöt32_t
 
cou¡î
 = 0;

112 
uöt32_t
 
busy°©us
 = 0;

113 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

114 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

115 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

116 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

117 
uöt32_t
 
i
 = 0;

120 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

122 
Keysize
)

125 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

126 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

127 
keyaddr
+=4;

128 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

129 
keyaddr
+=4;

130 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

131 
keyaddr
+=4;

132 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

135 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

136 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

137 
keyaddr
+=4;

138 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

139 
keyaddr
+=4;

140 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

141 
keyaddr
+=4;

142 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

143 
keyaddr
+=4;

144 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

145 
keyaddr
+=4;

146 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

149 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

150 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

151 
keyaddr
+=4;

152 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

153 
keyaddr
+=4;

154 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

155 
keyaddr
+=4;

156 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

157 
keyaddr
+=4;

158 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

159 
keyaddr
+=4;

160 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

161 
keyaddr
+=4;

162 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

163 
keyaddr
+=4;

164 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

171 if(
Mode
 =
MODE_DECRYPT
)

174 
	`CRYP_FIFOFlush
();

177 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

178 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_Key
;

179 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_32b
;

180 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

183 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

186 
	`CRYP_Cmd
(
ENABLE
);

191 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

192 
cou¡î
++;

193 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

195 i‡(
busy°©us
 !
RESET
)

197 
°©us
 = 
ERROR
;

202 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

209 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

212 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

215 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_ECB
;

216 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

217 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

220 
	`CRYP_FIFOFlush
();

223 
	`CRYP_Cmd
(
ENABLE
);

225 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

229 (
ERROR
);

232 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=16)

236 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

237 
öpuèddr
+=4;

238 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

239 
öpuèddr
+=4;

240 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

241 
öpuèddr
+=4;

242 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

243 
öpuèddr
+=4;

246 
cou¡î
 = 0;

249 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

250 
cou¡î
++;

251 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

253 i‡(
busy°©us
 !
RESET
)

255 
°©us
 = 
ERROR
;

261 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

262 
ouçuèddr
+=4;

263 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

264 
ouçuèddr
+=4;

265 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

266 
ouçuèddr
+=4;

267 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

268 
ouçuèddr
+=4;

273 
	`CRYP_Cmd
(
DISABLE
);

275  
°©us
;

276 
	}
}

294 
Eº‹Sètus
 
	$CRYP_AES_CBC
(
uöt8_t
 
Mode
, uöt8_à
InôVe˘‹s
[16], uöt8_à*
Key
,

295 
uöt16_t
 
Keysize
, 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

296 
uöt8_t
 *
Ouçut
)

298 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

299 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

300 
CRYP_IVInôTy≥Def
 
AES_CRYP_IVInôSåu˘uª
;

301 
__IO
 
uöt32_t
 
cou¡î
 = 0;

302 
uöt32_t
 
busy°©us
 = 0;

303 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

304 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

305 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

306 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

307 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

308 
uöt32_t
 
i
 = 0;

311 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

313 
Keysize
)

316 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

317 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

318 
keyaddr
+=4;

319 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

320 
keyaddr
+=4;

321 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

322 
keyaddr
+=4;

323 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

326 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

327 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

328 
keyaddr
+=4;

329 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

330 
keyaddr
+=4;

331 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

332 
keyaddr
+=4;

333 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

334 
keyaddr
+=4;

335 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

336 
keyaddr
+=4;

337 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

340 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

341 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

342 
keyaddr
+=4;

343 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

344 
keyaddr
+=4;

345 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

346 
keyaddr
+=4;

347 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

348 
keyaddr
+=4;

349 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

350 
keyaddr
+=4;

351 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

352 
keyaddr
+=4;

353 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

354 
keyaddr
+=4;

355 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

362 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

363 
ivaddr
+=4;

364 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

365 
ivaddr
+=4;

366 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

367 
ivaddr
+=4;

368 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

372 if(
Mode
 =
MODE_DECRYPT
)

375 
	`CRYP_FIFOFlush
();

378 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

379 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_Key
;

380 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_32b
;

382 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

385 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

388 
	`CRYP_Cmd
(
ENABLE
);

393 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

394 
cou¡î
++;

395 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

397 i‡(
busy°©us
 !
RESET
)

399 
°©us
 = 
ERROR
;

404 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

410 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

413 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

415 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_CBC
;

416 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

417 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

420 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

423 
	`CRYP_FIFOFlush
();

426 
	`CRYP_Cmd
(
ENABLE
);

428 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

432 (
ERROR
);

435 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=16)

439 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

440 
öpuèddr
+=4;

441 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

442 
öpuèddr
+=4;

443 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

444 
öpuèddr
+=4;

445 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

446 
öpuèddr
+=4;

448 
cou¡î
 = 0;

451 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

452 
cou¡î
++;

453 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

455 i‡(
busy°©us
 !
RESET
)

457 
°©us
 = 
ERROR
;

463 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

464 
ouçuèddr
+=4;

465 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

466 
ouçuèddr
+=4;

467 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

468 
ouçuèddr
+=4;

469 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

470 
ouçuèddr
+=4;

475 
	`CRYP_Cmd
(
DISABLE
);

477  
°©us
;

478 
	}
}

496 
Eº‹Sètus
 
	$CRYP_AES_CTR
(
uöt8_t
 
Mode
, uöt8_à
InôVe˘‹s
[16], uöt8_à*
Key
,

497 
uöt16_t
 
Keysize
, 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

498 
uöt8_t
 *
Ouçut
)

500 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

501 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

502 
CRYP_IVInôTy≥Def
 
AES_CRYP_IVInôSåu˘uª
;

503 
__IO
 
uöt32_t
 
cou¡î
 = 0;

504 
uöt32_t
 
busy°©us
 = 0;

505 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

506 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

507 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

508 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

509 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

510 
uöt32_t
 
i
 = 0;

513 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

515 
Keysize
)

518 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

519 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

520 
keyaddr
+=4;

521 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

522 
keyaddr
+=4;

523 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

524 
keyaddr
+=4;

525 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

528 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

529 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

530 
keyaddr
+=4;

531 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

532 
keyaddr
+=4;

533 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

534 
keyaddr
+=4;

535 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

536 
keyaddr
+=4;

537 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

538 
keyaddr
+=4;

539 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

542 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

543 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

544 
keyaddr
+=4;

545 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

546 
keyaddr
+=4;

547 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

548 
keyaddr
+=4;

549 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

550 
keyaddr
+=4;

551 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

552 
keyaddr
+=4;

553 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

554 
keyaddr
+=4;

555 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

556 
keyaddr
+=4;

557 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

563 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

564 
ivaddr
+=4;

565 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

566 
ivaddr
+=4;

567 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

568 
ivaddr
+=4;

569 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

572 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

575 if(
Mode
 =
MODE_DECRYPT
)

578 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

584 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

586 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_CTR
;

587 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

588 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

591 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

594 
	`CRYP_FIFOFlush
();

597 
	`CRYP_Cmd
(
ENABLE
);

599 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

603 (
ERROR
);

606 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=16)

610 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

611 
öpuèddr
+=4;

612 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

613 
öpuèddr
+=4;

614 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

615 
öpuèddr
+=4;

616 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

617 
öpuèddr
+=4;

619 
cou¡î
 = 0;

622 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

623 
cou¡î
++;

624 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

626 i‡(
busy°©us
 !
RESET
)

628 
°©us
 = 
ERROR
;

634 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

635 
ouçuèddr
+=4;

636 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

637 
ouçuèddr
+=4;

638 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

639 
ouçuèddr
+=4;

640 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

641 
ouçuèddr
+=4;

645 
	`CRYP_Cmd
(
DISABLE
);

647  
°©us
;

648 
	}
}

670 
Eº‹Sètus
 
	$CRYP_AES_GCM
(
uöt8_t
 
Mode
, uöt8_à
InôVe˘‹s
[16],

671 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

672 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
ILígth
,

673 
uöt8_t
 *
Hódî
, 
uöt32_t
 
HLígth
,

674 
uöt8_t
 *
Ouçut
, uöt8_à*
AuthTAG
)

676 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

677 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

678 
CRYP_IVInôTy≥Def
 
AES_CRYP_IVInôSåu˘uª
;

679 
__IO
 
uöt32_t
 
cou¡î
 = 0;

680 
uöt32_t
 
busy°©us
 = 0;

681 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

682 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

683 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

684 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

685 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

686 
uöt32_t
 
hódîaddr
 = (uöt32_t)
Hódî
;

687 
uöt32_t
 
ègaddr
 = (uöt32_t)
AuthTAG
;

688 
uöt64_t
 
hódîÀngth
 = 
HLígth
 * 8;

689 
uöt64_t
 
öpuéígth
 = 
ILígth
 * 8;

690 
uöt32_t
 
lo›cou¡î
 = 0;

693 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

695 
Keysize
)

698 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

699 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

700 
keyaddr
+=4;

701 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

702 
keyaddr
+=4;

703 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

704 
keyaddr
+=4;

705 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

708 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

709 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

710 
keyaddr
+=4;

711 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

712 
keyaddr
+=4;

713 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

714 
keyaddr
+=4;

715 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

716 
keyaddr
+=4;

717 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

718 
keyaddr
+=4;

719 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

722 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

723 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

724 
keyaddr
+=4;

725 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

726 
keyaddr
+=4;

727 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

728 
keyaddr
+=4;

729 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

730 
keyaddr
+=4;

731 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

732 
keyaddr
+=4;

733 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

734 
keyaddr
+=4;

735 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

736 
keyaddr
+=4;

737 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

744 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

745 
ivaddr
+=4;

746 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

747 
ivaddr
+=4;

748 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

749 
ivaddr
+=4;

750 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

753 if(
Mode
 =
MODE_ENCRYPT
)

756 
	`CRYP_FIFOFlush
();

759 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

762 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

765 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

766 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_GCM
;

767 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

768 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

772 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Inô
);

775 
	`CRYP_Cmd
(
ENABLE
);

778 
	`CRYP_GëCmdSètus
(Ë=
ENABLE
)

783 if(
HLígth
 != 0)

786 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Hódî
);

789 
	`CRYP_Cmd
(
ENABLE
);

791 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

795 (
ERROR
);

798 
lo›cou¡î
 = 0; (lo›cou¡î < 
HLígth
);Üoopcounter+=16)

801 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

806 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

807 
hódîaddr
+=4;

808 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

809 
hódîaddr
+=4;

810 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

811 
hódîaddr
+=4;

812 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

813 
hódîaddr
+=4;

817 
cou¡î
 = 0;

820 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

821 
cou¡î
++;

822 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

824 i‡(
busy°©us
 !
RESET
)

826 
°©us
 = 
ERROR
;

831 if(
ILígth
 != 0)

834 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Paylﬂd
);

837 
	`CRYP_Cmd
(
ENABLE
);

839 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

843 (
ERROR
);

846 
lo›cou¡î
 = 0; (÷o›cou¡î < 
ILígth
Ë&& (
°©us
 !
ERROR
));Üoopcounter+=16)

849 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

853 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

854 
öpuèddr
+=4;

855 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

856 
öpuèddr
+=4;

857 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

858 
öpuèddr
+=4;

859 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

860 
öpuèddr
+=4;

863 
cou¡î
 = 0;

866 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

867 
cou¡î
++;

868 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

870 i‡(
busy°©us
 !
RESET
)

872 
°©us
 = 
ERROR
;

877 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

882 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

883 
ouçuèddr
+=4;

884 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

885 
ouçuèddr
+=4;

886 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

887 
ouçuèddr
+=4;

888 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

889 
ouçuèddr
+=4;

896 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_FöÆ
);

899 
	`CRYP_Cmd
(
ENABLE
);

901 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

905 (
ERROR
);

909 
	`CRYP_D©aIn
(
	`__REV
(
hódîÀngth
>>32));

910 
	`CRYP_D©aIn
(
	`__REV
(
hódîÀngth
));

911 
	`CRYP_D©aIn
(
	`__REV
(
öpuéígth
>>32));

912 
	`CRYP_D©aIn
(
	`__REV
(
öpuéígth
));

914 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

918 
ègaddr
 = (
uöt32_t
)
AuthTAG
;

920 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

921 
ègaddr
+=4;

922 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

923 
ègaddr
+=4;

924 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

925 
ègaddr
+=4;

926 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

927 
ègaddr
+=4;

933 
	`CRYP_FIFOFlush
();

936 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

939 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

942 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

943 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_GCM
;

944 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

945 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

949 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Inô
);

952 
	`CRYP_Cmd
(
ENABLE
);

955 
	`CRYP_GëCmdSètus
(Ë=
ENABLE
)

960 if(
HLígth
 != 0)

963 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Hódî
);

966 
	`CRYP_Cmd
(
ENABLE
);

968 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

972 (
ERROR
);

975 
lo›cou¡î
 = 0; (lo›cou¡î < 
HLígth
);Üoopcounter+=16)

978 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

983 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

984 
hódîaddr
+=4;

985 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

986 
hódîaddr
+=4;

987 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

988 
hódîaddr
+=4;

989 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

990 
hódîaddr
+=4;

994 
cou¡î
 = 0;

997 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

998 
cou¡î
++;

999 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

1001 i‡(
busy°©us
 !
RESET
)

1003 
°©us
 = 
ERROR
;

1008 if(
ILígth
 != 0)

1011 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Paylﬂd
);

1014 
	`CRYP_Cmd
(
ENABLE
);

1016 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1020 (
ERROR
);

1023 
lo›cou¡î
 = 0; (÷o›cou¡î < 
ILígth
Ë&& (
°©us
 !
ERROR
));Üoopcounter+=16)

1026 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

1030 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1031 
öpuèddr
+=4;

1032 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1033 
öpuèddr
+=4;

1034 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1035 
öpuèddr
+=4;

1036 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1037 
öpuèddr
+=4;

1040 
cou¡î
 = 0;

1043 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

1044 
cou¡î
++;

1045 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

1047 i‡(
busy°©us
 !
RESET
)

1049 
°©us
 = 
ERROR
;

1054 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

1059 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1060 
ouçuèddr
+=4;

1061 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1062 
ouçuèddr
+=4;

1063 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1064 
ouçuèddr
+=4;

1065 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1066 
ouçuèddr
+=4;

1073 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_FöÆ
);

1076 
	`CRYP_Cmd
(
ENABLE
);

1078 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1082 (
ERROR
);

1086 
	`CRYP_D©aIn
(
	`__REV
(
hódîÀngth
>>32));

1087 
	`CRYP_D©aIn
(
	`__REV
(
hódîÀngth
));

1088 
	`CRYP_D©aIn
(
	`__REV
(
öpuéígth
>>32));

1089 
	`CRYP_D©aIn
(
	`__REV
(
öpuéígth
));

1091 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

1095 
ègaddr
 = (
uöt32_t
)
AuthTAG
;

1097 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

1098 
ègaddr
+=4;

1099 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

1100 
ègaddr
+=4;

1101 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

1102 
ègaddr
+=4;

1103 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

1104 
ègaddr
+=4;

1107 
	`CRYP_Cmd
(
DISABLE
);

1109  
°©us
;

1110 
	}
}

1135 
Eº‹Sètus
 
	$CRYP_AES_CCM
(
uöt8_t
 
Mode
,

1136 
uöt8_t
* 
N⁄˚
, 
uöt32_t
 
N⁄˚Size
,

1137 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

1138 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
ILígth
,

1139 
uöt8_t
 *
Hódî
, 
uöt32_t
 
HLígth
, uöt8_à*
HBuf„r
,

1140 
uöt8_t
 *
Ouçut
,

1141 
uöt8_t
 *
AuthTAG
, 
uöt32_t
 
TAGSize
)

1143 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

1144 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

1145 
CRYP_IVInôTy≥Def
 
AES_CRYP_IVInôSåu˘uª
;

1146 
__IO
 
uöt32_t
 
cou¡î
 = 0;

1147 
uöt32_t
 
busy°©us
 = 0;

1148 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

1149 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

1150 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

1151 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

1152 
uöt32_t
 
hódîaddr
 = (uöt32_t)
Hódî
;

1153 
uöt32_t
 
ègaddr
 = (uöt32_t)
AuthTAG
;

1154 
uöt32_t
 
hódîsize
 = 
HLígth
;

1155 
uöt32_t
 
lo›cou¡î
 = 0;

1156 
uöt32_t
 
buf„ridx
 = 0;

1157 
uöt8_t
 
blockb0
[16] = {0};

1158 
uöt8_t
 
˘r
[16] = {0};

1159 
uöt32_t
 
ãm±ag
[4] = {0};

1160 
uöt32_t
 
˘øddr
 = (uöt32_t)
˘r
;

1161 
uöt32_t
 
b0addr
 = (uöt32_t)
blockb0
;

1164 if(
hódîsize
 != 0)

1167 if(
hódîsize
 < 65280)

1169 
HBuf„r
[
buf„ridx
++] = (
uöt8_t
Ë((
hódîsize
 >> 8) & 0xFF);

1170 
HBuf„r
[
buf„ridx
++] = (
uöt8_t
Ë((
hódîsize
) & 0xFF);

1171 
hódîsize
 += 2;

1176 
HBuf„r
[
buf„ridx
++] = 0xFF;

1177 
HBuf„r
[
buf„ridx
++] = 0xFE;

1178 
HBuf„r
[
buf„ridx
++] = 
hódîsize
 & 0xff000000;

1179 
HBuf„r
[
buf„ridx
++] = 
hódîsize
 & 0x00ff0000;

1180 
HBuf„r
[
buf„ridx
++] = 
hódîsize
 & 0x0000ff00;

1181 
HBuf„r
[
buf„ridx
++] = 
hódîsize
 & 0x000000ff;

1182 
hódîsize
 += 6;

1185 
lo›cou¡î
 = 0;Üo›cou¡î < 
hódîsize
;Üoopcounter++)

1187 
HBuf„r
[
buf„ridx
++] = 
Hódî
[
lo›cou¡î
];

1190 i‡((
hódîsize
 % 16) != 0)

1193 
lo›cou¡î
 = 
hódîsize
;Üoopcounter <= ((headersize/16) + 1) * 16;Üoopcounter++)

1195 
HBuf„r
[
lo›cou¡î
] = 0;

1198 
hódîsize
 = ((headersize/16) + 1) * 16;

1201 
hódîaddr
 = (
uöt32_t
)
HBuf„r
;

1204 if(
hódîsize
 != 0)

1206 
blockb0
[0] = 0x40;

1209 
blockb0
[0] |0u | (((–(
uöt8_t
Ë
TAGSize
 - 2Ë/ 2Ë& 0x07 ) << 3 ) | ( ( (uöt8_tË(15 - 
N⁄˚Size
) - 1) & 0x07);

1211 
lo›cou¡î
 = 0;Üo›cou¡î < 
N⁄˚Size
;Üoopcounter++)

1213 
blockb0
[
lo›cou¡î
+1] = 
N⁄˚
[loopcounter];

1215  ; 
lo›cou¡î
 < 13;Üoopcounter++)

1217 
blockb0
[
lo›cou¡î
+1] = 0;

1220 
blockb0
[14] = ((
ILígth
 >> 8) & 0xFF);

1221 
blockb0
[15] = (
ILígth
 & 0xFF);

1230 
˘r
[0] = 
blockb0
[0] & 0x07;

1232 
lo›cou¡î
 = 1;Üo›cou¡î < 
N⁄˚Size
 + 1;Üoopcounter++)

1234 
˘r
[
lo›cou¡î
] = 
blockb0
[loopcounter];

1237 
˘r
[15] |= 0x01;

1240 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

1242 
Keysize
)

1245 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

1246 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1247 
keyaddr
+=4;

1248 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1249 
keyaddr
+=4;

1250 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1251 
keyaddr
+=4;

1252 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1255 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

1256 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1257 
keyaddr
+=4;

1258 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1259 
keyaddr
+=4;

1260 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1261 
keyaddr
+=4;

1262 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1263 
keyaddr
+=4;

1264 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1265 
keyaddr
+=4;

1266 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1269 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

1270 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1271 
keyaddr
+=4;

1272 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1273 
keyaddr
+=4;

1274 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1275 
keyaddr
+=4;

1276 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1277 
keyaddr
+=4;

1278 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1279 
keyaddr
+=4;

1280 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1281 
keyaddr
+=4;

1282 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1283 
keyaddr
+=4;

1284 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1291 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = (
	`__REV
(*(
uöt32_t
*)(
˘øddr
)));

1292 
˘øddr
+=4;

1293 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right
(
	`__REV
(*(
uöt32_t
*)(
˘øddr
)));

1294 
˘øddr
+=4;

1295 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Le·
 = (
	`__REV
(*(
uöt32_t
*)(
˘øddr
)));

1296 
˘øddr
+=4;

1297 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Right
(
	`__REV
(*(
uöt32_t
*)(
˘øddr
)));

1300 if(
Mode
 =
MODE_ENCRYPT
)

1303 
	`CRYP_FIFOFlush
();

1306 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

1309 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

1312 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

1313 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_CCM
;

1314 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

1315 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

1319 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Inô
);

1321 
b0addr
 = (
uöt32_t
)
blockb0
;

1323 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1324 
b0addr
+=4;

1325 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1326 
b0addr
+=4;

1327 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1328 
b0addr
+=4;

1329 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1332 
	`CRYP_Cmd
(
ENABLE
);

1335 
	`CRYP_GëCmdSètus
(Ë=
ENABLE
)

1339 if(
hódîsize
 != 0)

1342 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Hódî
);

1345 
	`CRYP_Cmd
(
ENABLE
);

1347 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1351 (
ERROR
);

1354 
lo›cou¡î
 = 0; (lo›cou¡î < 
hódîsize
);Üoopcounter+=16)

1357 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

1362 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1363 
hódîaddr
+=4;

1364 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1365 
hódîaddr
+=4;

1366 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1367 
hódîaddr
+=4;

1368 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1369 
hódîaddr
+=4;

1373 
cou¡î
 = 0;

1376 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

1377 
cou¡î
++;

1378 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

1380 i‡(
busy°©us
 !
RESET
)

1382 
°©us
 = 
ERROR
;

1387 if(
ILígth
 != 0)

1390 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Paylﬂd
);

1393 
	`CRYP_Cmd
(
ENABLE
);

1395 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1399 (
ERROR
);

1402 
lo›cou¡î
 = 0; (÷o›cou¡î < 
ILígth
Ë&& (
°©us
 !
ERROR
));Üoopcounter+=16)

1405 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

1410 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1411 
öpuèddr
+=4;

1412 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1413 
öpuèddr
+=4;

1414 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1415 
öpuèddr
+=4;

1416 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1417 
öpuèddr
+=4;

1420 
cou¡î
 = 0;

1423 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

1424 
cou¡î
++;

1425 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

1427 i‡(
busy°©us
 !
RESET
)

1429 
°©us
 = 
ERROR
;

1434 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

1439 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1440 
ouçuèddr
+=4;

1441 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1442 
ouçuèddr
+=4;

1443 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1444 
ouçuèddr
+=4;

1445 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1446 
ouçuèddr
+=4;

1453 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_FöÆ
);

1456 
	`CRYP_Cmd
(
ENABLE
);

1458 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1462 (
ERROR
);

1465 
˘øddr
 = (
uöt32_t
)
˘r
;

1467 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
));

1468 
˘øddr
+=4;

1469 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
));

1470 
˘øddr
+=4;

1471 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
));

1472 
˘øddr
+=4;

1474 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
) & 0xfeffffff);

1477 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

1482 
ãm±ag
[0] = 
	`CRYP_D©aOut
();

1483 
ãm±ag
[1] = 
	`CRYP_D©aOut
();

1484 
ãm±ag
[2] = 
	`CRYP_D©aOut
();

1485 
ãm±ag
[3] = 
	`CRYP_D©aOut
();

1491 
	`CRYP_FIFOFlush
();

1494 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

1497 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

1500 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

1501 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_CCM
;

1502 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

1503 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

1507 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Inô
);

1509 
b0addr
 = (
uöt32_t
)
blockb0
;

1511 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1512 
b0addr
+=4;

1513 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1514 
b0addr
+=4;

1515 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1516 
b0addr
+=4;

1517 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1520 
	`CRYP_Cmd
(
ENABLE
);

1523 
	`CRYP_GëCmdSètus
(Ë=
ENABLE
)

1528 if(
hódîsize
 != 0)

1531 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Hódî
);

1534 
	`CRYP_Cmd
(
ENABLE
);

1536 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1540 (
ERROR
);

1543 
lo›cou¡î
 = 0; (lo›cou¡î < 
hódîsize
);Üoopcounter+=16)

1546 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

1551 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1552 
hódîaddr
+=4;

1553 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1554 
hódîaddr
+=4;

1555 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1556 
hódîaddr
+=4;

1557 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1558 
hódîaddr
+=4;

1562 
cou¡î
 = 0;

1565 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

1566 
cou¡î
++;

1567 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

1569 i‡(
busy°©us
 !
RESET
)

1571 
°©us
 = 
ERROR
;

1576 if(
ILígth
 != 0)

1579 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Paylﬂd
);

1582 
	`CRYP_Cmd
(
ENABLE
);

1584 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1588 (
ERROR
);

1591 
lo›cou¡î
 = 0; (÷o›cou¡î < 
ILígth
Ë&& (
°©us
 !
ERROR
));Üoopcounter+=16)

1594 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

1599 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1600 
öpuèddr
+=4;

1601 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1602 
öpuèddr
+=4;

1603 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1604 
öpuèddr
+=4;

1605 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1606 
öpuèddr
+=4;

1609 
cou¡î
 = 0;

1612 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

1613 
cou¡î
++;

1614 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

1616 i‡(
busy°©us
 !
RESET
)

1618 
°©us
 = 
ERROR
;

1623 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

1628 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1629 
ouçuèddr
+=4;

1630 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1631 
ouçuèddr
+=4;

1632 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1633 
ouçuèddr
+=4;

1634 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1635 
ouçuèddr
+=4;

1642 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_FöÆ
);

1645 
	`CRYP_Cmd
(
ENABLE
);

1647 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1651 (
ERROR
);

1654 
˘øddr
 = (
uöt32_t
)
˘r
;

1656 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
));

1657 
˘øddr
+=4;

1658 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
));

1659 
˘øddr
+=4;

1660 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
));

1661 
˘øddr
+=4;

1663 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
) & 0xfeffffff);

1666 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

1671 
ãm±ag
[0] = 
	`CRYP_D©aOut
();

1672 
ãm±ag
[1] = 
	`CRYP_D©aOut
();

1673 
ãm±ag
[2] = 
	`CRYP_D©aOut
();

1674 
ãm±ag
[3] = 
	`CRYP_D©aOut
();

1678 
lo›cou¡î
 = 0; (lo›cou¡î < 
TAGSize
);Üoopcounter++)

1681 *((
uöt8_t
*)
ègaddr
+
lo›cou¡î
Ë*((uöt8_t*)
ãm±ag
+loopcounter);

1685 
	`CRYP_Cmd
(
DISABLE
);

1687  
°©us
;

1688 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c

48 
	~"°m32f4xx_¸yp.h
"

62 
	#DESBUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

99 
Eº‹Sètus
 
	$CRYP_DES_ECB
(
uöt8_t
 
Mode
, uöt8_à
Key
[8], uöt8_à*
I≈ut
,

100 
uöt32_t
 
IÀngth
, 
uöt8_t
 *
Ouçut
)

102 
CRYP_InôTy≥Def
 
DES_CRYP_InôSåu˘uª
;

103 
CRYP_KeyInôTy≥Def
 
DES_CRYP_KeyInôSåu˘uª
;

104 
__IO
 
uöt32_t
 
cou¡î
 = 0;

105 
uöt32_t
 
busy°©us
 = 0;

106 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

107 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

108 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

109 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

110 
uöt32_t
 
i
 = 0;

113 
	`CRYP_KeySåu˘Inô
(&
DES_CRYP_KeyInôSåu˘uª
);

116 if–
Mode
 =
MODE_ENCRYPT
 )

118 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

122 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

125 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_DES_ECB
;

126 
DES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

127 
	`CRYP_Inô
(&
DES_CRYP_InôSåu˘uª
);

130 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

131 
keyaddr
+=4;

132 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

133 
	`CRYP_KeyInô
(& 
DES_CRYP_KeyInôSåu˘uª
);

136 
	`CRYP_FIFOFlush
();

139 
	`CRYP_Cmd
(
ENABLE
);

141 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

145 (
ERROR
);

147 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

151 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

152 
öpuèddr
+=4;

153 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

154 
öpuèddr
+=4;

157 
cou¡î
 = 0;

160 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

161 
cou¡î
++;

162 }(
cou¡î
 !
DESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

164 i‡(
busy°©us
 !
RESET
)

166 
°©us
 = 
ERROR
;

172 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

173 
ouçuèddr
+=4;

174 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

175 
ouçuèddr
+=4;

180 
	`CRYP_Cmd
(
DISABLE
);

182  
°©us
;

183 
	}
}

200 
Eº‹Sètus
 
	$CRYP_DES_CBC
(
uöt8_t
 
Mode
, uöt8_à
Key
[8], uöt8_à
InôVe˘‹s
[8],

201 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_à*
Ouçut
)

203 
CRYP_InôTy≥Def
 
DES_CRYP_InôSåu˘uª
;

204 
CRYP_KeyInôTy≥Def
 
DES_CRYP_KeyInôSåu˘uª
;

205 
CRYP_IVInôTy≥Def
 
DES_CRYP_IVInôSåu˘uª
;

206 
__IO
 
uöt32_t
 
cou¡î
 = 0;

207 
uöt32_t
 
busy°©us
 = 0;

208 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

209 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

210 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

211 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

212 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

213 
uöt32_t
 
i
 = 0;

216 
	`CRYP_KeySåu˘Inô
(&
DES_CRYP_KeyInôSåu˘uª
);

219 if(
Mode
 =
MODE_ENCRYPT
)

221 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

225 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

228 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_DES_CBC
;

229 
DES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

230 
	`CRYP_Inô
(&
DES_CRYP_InôSåu˘uª
);

233 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

234 
keyaddr
+=4;

235 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

236 
	`CRYP_KeyInô
(& 
DES_CRYP_KeyInôSåu˘uª
);

239 
DES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

240 
ivaddr
+=4;

241 
DES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

242 
	`CRYP_IVInô
(&
DES_CRYP_IVInôSåu˘uª
);

245 
	`CRYP_FIFOFlush
();

248 
	`CRYP_Cmd
(
ENABLE
);

250 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

254 (
ERROR
);

256 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

259 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

260 
öpuèddr
+=4;

261 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

262 
öpuèddr
+=4;

265 
cou¡î
 = 0;

268 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

269 
cou¡î
++;

270 }(
cou¡î
 !
DESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

272 i‡(
busy°©us
 !
RESET
)

274 
°©us
 = 
ERROR
;

279 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

280 
ouçuèddr
+=4;

281 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

282 
ouçuèddr
+=4;

287 
	`CRYP_Cmd
(
DISABLE
);

289  
°©us
;

290 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c

48 
	~"°m32f4xx_¸yp.h
"

62 
	#TDESBUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

100 
Eº‹Sètus
 
	$CRYP_TDES_ECB
(
uöt8_t
 
Mode
, uöt8_à
Key
[24], uöt8_à*
I≈ut
,

101 
uöt32_t
 
IÀngth
, 
uöt8_t
 *
Ouçut
)

103 
CRYP_InôTy≥Def
 
TDES_CRYP_InôSåu˘uª
;

104 
CRYP_KeyInôTy≥Def
 
TDES_CRYP_KeyInôSåu˘uª
;

105 
__IO
 
uöt32_t
 
cou¡î
 = 0;

106 
uöt32_t
 
busy°©us
 = 0;

107 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

108 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

109 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

110 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

111 
uöt32_t
 
i
 = 0;

114 
	`CRYP_KeySåu˘Inô
(&
TDES_CRYP_KeyInôSåu˘uª
);

117 if(
Mode
 =
MODE_ENCRYPT
)

119 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

123 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

126 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_TDES_ECB
;

127 
TDES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

128 
	`CRYP_Inô
(&
TDES_CRYP_InôSåu˘uª
);

131 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

132 
keyaddr
+=4;

133 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

134 
keyaddr
+=4;

135 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

136 
keyaddr
+=4;

137 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

138 
keyaddr
+=4;

139 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

140 
keyaddr
+=4;

141 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

142 
	`CRYP_KeyInô
(& 
TDES_CRYP_KeyInôSåu˘uª
);

145 
	`CRYP_FIFOFlush
();

148 
	`CRYP_Cmd
(
ENABLE
);

150 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

154 (
ERROR
);

156 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

159 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

160 
öpuèddr
+=4;

161 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

162 
öpuèddr
+=4;

165 
cou¡î
 = 0;

168 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

169 
cou¡î
++;

170 }(
cou¡î
 !
TDESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

172 i‡(
busy°©us
 !
RESET
)

174 
°©us
 = 
ERROR
;

180 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

181 
ouçuèddr
+=4;

182 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

183 
ouçuèddr
+=4;

188 
	`CRYP_Cmd
(
DISABLE
);

190  
°©us
;

191 
	}
}

208 
Eº‹Sètus
 
	$CRYP_TDES_CBC
(
uöt8_t
 
Mode
, uöt8_à
Key
[24], uöt8_à
InôVe˘‹s
[8],

209 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_à*
Ouçut
)

211 
CRYP_InôTy≥Def
 
TDES_CRYP_InôSåu˘uª
;

212 
CRYP_KeyInôTy≥Def
 
TDES_CRYP_KeyInôSåu˘uª
;

213 
CRYP_IVInôTy≥Def
 
TDES_CRYP_IVInôSåu˘uª
;

214 
__IO
 
uöt32_t
 
cou¡î
 = 0;

215 
uöt32_t
 
busy°©us
 = 0;

216 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

217 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

218 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

219 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

220 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

221 
uöt32_t
 
i
 = 0;

224 
	`CRYP_KeySåu˘Inô
(&
TDES_CRYP_KeyInôSåu˘uª
);

227 if(
Mode
 =
MODE_ENCRYPT
)

229 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

233 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

235 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_TDES_CBC
;

236 
TDES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

238 
	`CRYP_Inô
(&
TDES_CRYP_InôSåu˘uª
);

241 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

242 
keyaddr
+=4;

243 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

244 
keyaddr
+=4;

245 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

246 
keyaddr
+=4;

247 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

248 
keyaddr
+=4;

249 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

250 
keyaddr
+=4;

251 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

252 
	`CRYP_KeyInô
(& 
TDES_CRYP_KeyInôSåu˘uª
);

255 
TDES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

256 
ivaddr
+=4;

257 
TDES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

258 
	`CRYP_IVInô
(&
TDES_CRYP_IVInôSåu˘uª
);

261 
	`CRYP_FIFOFlush
();

264 
	`CRYP_Cmd
(
ENABLE
);

266 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

270 (
ERROR
);

273 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

276 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

277 
öpuèddr
+=4;

278 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

279 
öpuèddr
+=4;

282 
cou¡î
 = 0;

285 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

286 
cou¡î
++;

287 }(
cou¡î
 !
TDESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

289 i‡(
busy°©us
 !
RESET
)

291 
°©us
 = 
ERROR
;

297 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

298 
ouçuèddr
+=4;

299 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

300 
ouçuèddr
+=4;

305 
	`CRYP_Cmd
(
DISABLE
);

307  
°©us
;

308 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dac.c

131 
	~"°m32f4xx_dac.h
"

132 
	~"°m32f4xx_rcc.h
"

147 
	#CR_CLEAR_MASK
 ((
uöt32_t
)0x00000FFE)

	)

150 
	#DUAL_SWTRIG_SET
 ((
uöt32_t
)0x00000003)

	)

151 
	#DUAL_SWTRIG_RESET
 ((
uöt32_t
)0xFFFFFFFC)

	)

154 
	#DHR12R1_OFFSET
 ((
uöt32_t
)0x00000008)

	)

155 
	#DHR12R2_OFFSET
 ((
uöt32_t
)0x00000014)

	)

156 
	#DHR12RD_OFFSET
 ((
uöt32_t
)0x00000020)

	)

159 
	#DOR_OFFSET
 ((
uöt32_t
)0x0000002C)

	)

187 
	$DAC_DeInô
()

190 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
ENABLE
);

192 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
DISABLE
);

193 
	}
}

206 
	$DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

208 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

211 
	`as£π_∑øm
(
	`IS_DAC_TRIGGER
(
DAC_InôSåu˘
->
DAC_Triggî
));

212 
	`as£π_∑øm
(
	`IS_DAC_GENERATE_WAVE
(
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
));

213 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
));

214 
	`as£π_∑øm
(
	`IS_DAC_OUTPUT_BUFFER_STATE
(
DAC_InôSåu˘
->
DAC_OuçutBuf„r
));

218 
tm¥eg1
 = 
DAC
->
CR
;

220 
tm¥eg1
 &~(
CR_CLEAR_MASK
 << 
DAC_Ch™√l
);

227 
tm¥eg2
 = (
DAC_InôSåu˘
->
DAC_Triggî
 | DAC_InôSåu˘->
DAC_WaveGíî©i⁄
 |

228 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 | \

229 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
);

231 
tm¥eg1
 |
tm¥eg2
 << 
DAC_Ch™√l
;

233 
DAC
->
CR
 = 
tm¥eg1
;

234 
	}
}

242 
	$DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

246 
DAC_InôSåu˘
->
DAC_Triggî
 = 
DAC_Triggî_N⁄e
;

248 
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
 = 
DAC_WaveGíî©i⁄_N⁄e
;

250 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 = 
DAC_LFSRUnmask_Bô0
;

252 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
 = 
DAC_OuçutBuf„r_E«bÀ
;

253 
	}
}

266 
	$DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

269 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

270 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

272 i‡(
NewSèã
 !
DISABLE
)

275 
DAC
->
CR
 |(
DAC_CR_EN1
 << 
DAC_Ch™√l
);

280 
DAC
->
CR
 &(~(
DAC_CR_EN1
 << 
DAC_Ch™√l
));

282 
	}
}

294 
	$DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

297 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

298 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

300 i‡(
NewSèã
 !
DISABLE
)

303 
DAC
->
SWTRIGR
 |(
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4);

308 
DAC
->
SWTRIGR
 &~((
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4));

310 
	}
}

318 
	$DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

321 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

323 i‡(
NewSèã
 !
DISABLE
)

326 
DAC
->
SWTRIGR
 |
DUAL_SWTRIG_SET
;

331 
DAC
->
SWTRIGR
 &
DUAL_SWTRIG_RESET
;

333 
	}
}

349 
	$DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

352 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

353 
	`as£π_∑øm
(
	`IS_DAC_WAVE
(
DAC_Wave
));

354 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

356 i‡(
NewSèã
 !
DISABLE
)

359 
DAC
->
CR
 |
DAC_Wave
 << 
DAC_Ch™√l
;

364 
DAC
->
CR
 &~(
DAC_Wave
 << 
DAC_Ch™√l
);

366 
	}
}

378 
	$DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

380 
__IO
 
uöt32_t
 
tmp
 = 0;

383 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

384 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

386 
tmp
 = (
uöt32_t
)
DAC_BASE
;

387 
tmp
 +
DHR12R1_OFFSET
 + 
DAC_Align
;

390 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

391 
	}
}

403 
	$DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

405 
__IO
 
uöt32_t
 
tmp
 = 0;

408 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

409 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

411 
tmp
 = (
uöt32_t
)
DAC_BASE
;

412 
tmp
 +
DHR12R2_OFFSET
 + 
DAC_Align
;

415 *(
__IO
 
uöt32_t
 *)
tmp
 = 
D©a
;

416 
	}
}

431 
	$DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
)

433 
uöt32_t
 
d©a
 = 0, 
tmp
 = 0;

436 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

437 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a1
));

438 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a2
));

441 i‡(
DAC_Align
 =
DAC_Align_8b_R
)

443 
d©a
 = ((
uöt32_t
)
D©a2
 << 8Ë| 
D©a1
;

447 
d©a
 = ((
uöt32_t
)
D©a2
 << 16Ë| 
D©a1
;

450 
tmp
 = (
uöt32_t
)
DAC_BASE
;

451 
tmp
 +
DHR12RD_OFFSET
 + 
DAC_Align
;

454 *(
__IO
 
uöt32_t
 *)
tmp
 = 
d©a
;

455 
	}
}

465 
uöt16_t
 
	$DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
)

467 
__IO
 
uöt32_t
 
tmp
 = 0;

470 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

472 
tmp
 = (
uöt32_t
Ë
DAC_BASE
 ;

473 
tmp
 +
DOR_OFFSET
 + ((
uöt32_t
)
DAC_Ch™√l
 >> 2);

476  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

477 
	}
}

510 
	$DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

513 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

514 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

516 i‡(
NewSèã
 !
DISABLE
)

519 
DAC
->
CR
 |(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
);

524 
DAC
->
CR
 &(~(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
));

526 
	}
}

558 
	$DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

561 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

562 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

563 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

565 i‡(
NewSèã
 !
DISABLE
)

568 
DAC
->
CR
 |(
DAC_IT
 << 
DAC_Ch™√l
);

573 
DAC
->
CR
 &(~(
uöt32_t
)(
DAC_IT
 << 
DAC_Ch™√l
));

575 
	}
}

590 
FœgSètus
 
	$DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

592 
FœgSètus
 
bô°©us
 = 
RESET
;

594 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

595 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

598 i‡((
DAC
->
SR
 & (
DAC_FLAG
 << 
DAC_Ch™√l
)Ë!(
uöt8_t
)
RESET
)

601 
bô°©us
 = 
SET
;

606 
bô°©us
 = 
RESET
;

609  
bô°©us
;

610 
	}
}

625 
	$DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

628 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

629 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

632 
DAC
->
SR
 = (
DAC_FLAG
 << 
DAC_Ch™√l
);

633 
	}
}

648 
ITSètus
 
	$DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

650 
ITSètus
 
bô°©us
 = 
RESET
;

651 
uöt32_t
 
íabÀ°©us
 = 0;

654 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

655 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

658 
íabÀ°©us
 = (
DAC
->
CR
 & (
DAC_IT
 << 
DAC_Ch™√l
)) ;

661 i‡(((
DAC
->
SR
 & (
DAC_IT
 << 
DAC_Ch™√l
)Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

664 
bô°©us
 = 
SET
;

669 
bô°©us
 = 
RESET
;

672  
bô°©us
;

673 
	}
}

688 
	$DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

691 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

692 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

695 
DAC
->
SR
 = (
DAC_IT
 << 
DAC_Ch™√l
);

696 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dbgmcu.c

29 
	~"°m32f4xx_dbgmcu.h
"

42 
	#IDCODE_DEVID_MASK
 ((
uöt32_t
)0x00000FFF)

	)

58 
uöt32_t
 
	$DBGMCU_GëREVID
()

60 (
DBGMCU
->
IDCODE
 >> 16);

61 
	}
}

68 
uöt32_t
 
	$DBGMCU_GëDEVID
()

70 (
DBGMCU
->
IDCODE
 & 
IDCODE_DEVID_MASK
);

71 
	}
}

84 
	$DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

87 
	`as£π_∑øm
(
	`IS_DBGMCU_PERIPH
(
DBGMCU_Pîùh
));

88 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

89 i‡(
NewSèã
 !
DISABLE
)

91 
DBGMCU
->
CR
 |
DBGMCU_Pîùh
;

95 
DBGMCU
->
CR
 &~
DBGMCU_Pîùh
;

97 
	}
}

123 
	$DBGMCU_APB1PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

126 
	`as£π_∑øm
(
	`IS_DBGMCU_APB1PERIPH
(
DBGMCU_Pîùh
));

127 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

129 i‡(
NewSèã
 !
DISABLE
)

131 
DBGMCU
->
APB1FZ
 |
DBGMCU_Pîùh
;

135 
DBGMCU
->
APB1FZ
 &~
DBGMCU_Pîùh
;

137 
	}
}

152 
	$DBGMCU_APB2PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

155 
	`as£π_∑øm
(
	`IS_DBGMCU_APB2PERIPH
(
DBGMCU_Pîùh
));

156 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

158 i‡(
NewSèã
 !
DISABLE
)

160 
DBGMCU
->
APB2FZ
 |
DBGMCU_Pîùh
;

164 
DBGMCU
->
APB2FZ
 &~
DBGMCU_Pîùh
;

166 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c

86 
	~"°m32f4xx_dcmi.h
"

87 
	~"°m32f4xx_rcc.h
"

126 
	$DCMI_DeInô
()

128 
DCMI
->
CR
 = 0x0;

129 
DCMI
->
IER
 = 0x0;

130 
DCMI
->
ICR
 = 0x1F;

131 
DCMI
->
ESCR
 = 0x0;

132 
DCMI
->
ESUR
 = 0x0;

133 
DCMI
->
CWSTRTR
 = 0x0;

134 
DCMI
->
CWSIZER
 = 0x0;

135 
	}
}

143 
	$DCMI_Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
)

145 
uöt32_t
 
ãmp
 = 0x0;

148 
	`as£π_∑øm
(
	`IS_DCMI_CAPTURE_MODE
(
DCMI_InôSåu˘
->
DCMI_C≠tuªMode
));

149 
	`as£π_∑øm
(
	`IS_DCMI_SYNCHRO
(
DCMI_InôSåu˘
->
DCMI_SynchroMode
));

150 
	`as£π_∑øm
(
	`IS_DCMI_PCKPOLARITY
(
DCMI_InôSåu˘
->
DCMI_PCKPﬁ¨ôy
));

151 
	`as£π_∑øm
(
	`IS_DCMI_VSPOLARITY
(
DCMI_InôSåu˘
->
DCMI_VSPﬁ¨ôy
));

152 
	`as£π_∑øm
(
	`IS_DCMI_HSPOLARITY
(
DCMI_InôSåu˘
->
DCMI_HSPﬁ¨ôy
));

153 
	`as£π_∑øm
(
	`IS_DCMI_CAPTURE_RATE
(
DCMI_InôSåu˘
->
DCMI_C≠tuªR©e
));

154 
	`as£π_∑øm
(
	`IS_DCMI_EXTENDED_DATA
(
DCMI_InôSåu˘
->
DCMI_ExãndedD©aMode
));

158 
DCMI
->
CR
 &~(
DCMI_CR_ENABLE
 | 
DCMI_CR_CAPTURE
);

161 
ãmp
 = 
DCMI
->
CR
;

163 
ãmp
 &~((
uöt32_t
)
DCMI_CR_CM
 | 
DCMI_CR_ESS
 | 
DCMI_CR_PCKPOL
 |

164 
DCMI_CR_HSPOL
 | 
DCMI_CR_VSPOL
 | 
DCMI_CR_FCRC_0
 |

165 
DCMI_CR_FCRC_1
 | 
DCMI_CR_EDM_0
 | 
DCMI_CR_EDM_1
);

168 
ãmp
 |((
uöt32_t
)
DCMI_InôSåu˘
->
DCMI_C≠tuªMode
 |

169 
DCMI_InôSåu˘
->
DCMI_SynchroMode
 |

170 
DCMI_InôSåu˘
->
DCMI_PCKPﬁ¨ôy
 |

171 
DCMI_InôSåu˘
->
DCMI_VSPﬁ¨ôy
 |

172 
DCMI_InôSåu˘
->
DCMI_HSPﬁ¨ôy
 |

173 
DCMI_InôSåu˘
->
DCMI_C≠tuªR©e
 |

174 
DCMI_InôSåu˘
->
DCMI_ExãndedD©aMode
);

176 
DCMI
->
CR
 = 
ãmp
;

177 
	}
}

185 
	$DCMI_Såu˘Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
)

188 
DCMI_InôSåu˘
->
DCMI_C≠tuªMode
 = 
DCMI_C≠tuªMode_C⁄töuous
;

189 
DCMI_InôSåu˘
->
DCMI_SynchroMode
 = 
DCMI_SynchroMode_H¨dw¨e
;

190 
DCMI_InôSåu˘
->
DCMI_PCKPﬁ¨ôy
 = 
DCMI_PCKPﬁ¨ôy_FÆlög
;

191 
DCMI_InôSåu˘
->
DCMI_VSPﬁ¨ôy
 = 
DCMI_VSPﬁ¨ôy_Low
;

192 
DCMI_InôSåu˘
->
DCMI_HSPﬁ¨ôy
 = 
DCMI_HSPﬁ¨ôy_Low
;

193 
DCMI_InôSåu˘
->
DCMI_C≠tuªR©e
 = 
DCMI_C≠tuªR©e_AŒ_Føme
;

194 
DCMI_InôSåu˘
->
DCMI_ExãndedD©aMode
 = 
DCMI_ExãndedD©aMode_8b
;

195 
	}
}

205 
	$DCMI_CROPC⁄fig
(
DCMI_CROPInôTy≥Def
* 
DCMI_CROPInôSåu˘
)

208 
DCMI
->
CWSTRTR
 = (
uöt32_t
)((uöt32_t)
DCMI_CROPInôSåu˘
->
DCMI_H‹iz⁄èlOff£tCou¡
 |

209 ((
uöt32_t
)
DCMI_CROPInôSåu˘
->
DCMI_VîtiˇlSèπLöe
 << 16));

212 
DCMI
->
CWSIZER
 = (
uöt32_t
)(
DCMI_CROPInôSåu˘
->
DCMI_C≠tuªCou¡
 |

213 ((
uöt32_t
)
DCMI_CROPInôSåu˘
->
DCMI_VîtiˇlLöeCou¡
 << 16));

214 
	}
}

223 
	$DCMI_CROPCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

226 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

228 i‡(
NewSèã
 !
DISABLE
)

231 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_CROP
;

236 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_CROP
;

238 
	}
}

246 
	$DCMI_SëEmbeddedSynchroCodes
(
DCMI_CodesInôTy≥Def
* 
DCMI_CodesInôSåu˘
)

248 
DCMI
->
ESCR
 = (
uöt32_t
)(
DCMI_CodesInôSåu˘
->
DCMI_FømeSèπCode
 |

249 ((
uöt32_t
)
DCMI_CodesInôSåu˘
->
DCMI_LöeSèπCode
 << 8)|

250 ((
uöt32_t
)
DCMI_CodesInôSåu˘
->
DCMI_LöeEndCode
 << 16)|

251 ((
uöt32_t
)
DCMI_CodesInôSåu˘
->
DCMI_FømeEndCode
 << 24));

252 
	}
}

261 
	$DCMI_JPEGCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

264 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

266 i‡(
NewSèã
 !
DISABLE
)

269 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_JPEG
;

274 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_JPEG
;

276 
	}
}

299 
	$DCMI_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

302 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

304 i‡(
NewSèã
 !
DISABLE
)

307 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_ENABLE
;

312 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_ENABLE
;

314 
	}
}

322 
	$DCMI_C≠tuªCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

325 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

327 i‡(
NewSèã
 !
DISABLE
)

330 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_CAPTURE
;

335 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_CAPTURE
;

337 
	}
}

344 
uöt32_t
 
	$DCMI_RódD©a
()

346  
DCMI
->
DR
;

347 
	}
}

377 
	$DCMI_ITC⁄fig
(
uöt16_t
 
DCMI_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

380 
	`as£π_∑øm
(
	`IS_DCMI_CONFIG_IT
(
DCMI_IT
));

381 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

383 i‡(
NewSèã
 !
DISABLE
)

386 
DCMI
->
IER
 |
DCMI_IT
;

391 
DCMI
->
IER
 &(
uöt16_t
)(~
DCMI_IT
);

393 
	}
}

414 
FœgSètus
 
	$DCMI_GëFœgSètus
(
uöt16_t
 
DCMI_FLAG
)

416 
FœgSètus
 
bô°©us
 = 
RESET
;

417 
uöt32_t
 
dcmúeg
, 
ãm¥eg
 = 0;

420 
	`as£π_∑øm
(
	`IS_DCMI_GET_FLAG
(
DCMI_FLAG
));

423 
dcmúeg
 = (((
uöt16_t
)
DCMI_FLAG
) >> 12);

425 i‡(
dcmúeg
 == 0x00)

427 
ãm¥eg

DCMI
->
RISR
;

429 i‡(
dcmúeg
 == 0x02)

431 
ãm¥eg
 = 
DCMI
->
SR
;

435 
ãm¥eg
 = 
DCMI
->
MISR
;

438 i‡((
ãm¥eg
 & 
DCMI_FLAG
Ë!(
uöt16_t
)
RESET
 )

440 
bô°©us
 = 
SET
;

444 
bô°©us
 = 
RESET
;

447  
bô°©us
;

448 
	}
}

461 
	$DCMI_CÀ¨Fœg
(
uöt16_t
 
DCMI_FLAG
)

464 
	`as£π_∑øm
(
	`IS_DCMI_CLEAR_FLAG
(
DCMI_FLAG
));

469 
DCMI
->
ICR
 = 
DCMI_FLAG
;

470 
	}
}

483 
ITSètus
 
	$DCMI_GëITSètus
(
uöt16_t
 
DCMI_IT
)

485 
ITSètus
 
bô°©us
 = 
RESET
;

486 
uöt32_t
 
ô°©us
 = 0;

489 
	`as£π_∑øm
(
	`IS_DCMI_GET_IT
(
DCMI_IT
));

491 
ô°©us
 = 
DCMI
->
MISR
 & 
DCMI_IT
;

493 i‡((
ô°©us
 !(
uöt16_t
)
RESET
))

495 
bô°©us
 = 
SET
;

499 
bô°©us
 = 
RESET
;

501  
bô°©us
;

502 
	}
}

515 
	$DCMI_CÀ¨ITPídögBô
(
uöt16_t
 
DCMI_IT
)

520 
DCMI
->
ICR
 = 
DCMI_IT
;

521 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c

124 
	~"°m32f4xx_dma.h
"

125 
	~"°m32f4xx_rcc.h
"

140 
	#TRANSFER_IT_ENABLE_MASK
 (
uöt32_t
)(
DMA_SxCR_TCIE
 | 
DMA_SxCR_HTIE
 | \

141 
DMA_SxCR_TEIE
 | 
DMA_SxCR_DMEIE
)

	)

143 
	#DMA_Såóm0_IT_MASK
 (
uöt32_t
)(
DMA_LISR_FEIF0
 | 
DMA_LISR_DMEIF0
 | \

144 
DMA_LISR_TEIF0
 | 
DMA_LISR_HTIF0
 | \

145 
DMA_LISR_TCIF0
)

	)

147 
	#DMA_Såóm1_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 << 6)

	)

148 
	#DMA_Såóm2_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 << 16)

	)

149 
	#DMA_Såóm3_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 << 22)

	)

150 
	#DMA_Såóm4_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 | (uöt32_t)0x20000000)

	)

151 
	#DMA_Såóm5_IT_MASK
 (
uöt32_t
)(
DMA_Såóm1_IT_MASK
 | (uöt32_t)0x20000000)

	)

152 
	#DMA_Såóm6_IT_MASK
 (
uöt32_t
)(
DMA_Såóm2_IT_MASK
 | (uöt32_t)0x20000000)

	)

153 
	#DMA_Såóm7_IT_MASK
 (
uöt32_t
)(
DMA_Såóm3_IT_MASK
 | (uöt32_t)0x20000000)

	)

154 
	#TRANSFER_IT_MASK
 (
uöt32_t
)0x0F3C0F3C

	)

155 
	#HIGH_ISR_MASK
 (
uöt32_t
)0x20000000

	)

156 
	#RESERVED_MASK
 (
uöt32_t
)0x0F7D0F7D

	)

196 
	$DMA_DeInô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

199 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

202 
DMAy_Såómx
->
CR
 &~((
uöt32_t
)
DMA_SxCR_EN
);

205 
DMAy_Såómx
->
CR
 = 0;

208 
DMAy_Såómx
->
NDTR
 = 0;

211 
DMAy_Såómx
->
PAR
 = 0;

214 
DMAy_Såómx
->
M0AR
 = 0;

217 
DMAy_Såómx
->
M1AR
 = 0;

220 
DMAy_Såómx
->
FCR
 = (
uöt32_t
)0x00000021;

223 i‡(
DMAy_Såómx
 =
DMA1_Såóm0
)

226 
DMA1
->
LIFCR
 = 
DMA_Såóm0_IT_MASK
;

228 i‡(
DMAy_Såómx
 =
DMA1_Såóm1
)

231 
DMA1
->
LIFCR
 = 
DMA_Såóm1_IT_MASK
;

233 i‡(
DMAy_Såómx
 =
DMA1_Såóm2
)

236 
DMA1
->
LIFCR
 = 
DMA_Såóm2_IT_MASK
;

238 i‡(
DMAy_Såómx
 =
DMA1_Såóm3
)

241 
DMA1
->
LIFCR
 = 
DMA_Såóm3_IT_MASK
;

243 i‡(
DMAy_Såómx
 =
DMA1_Såóm4
)

246 
DMA1
->
HIFCR
 = 
DMA_Såóm4_IT_MASK
;

248 i‡(
DMAy_Såómx
 =
DMA1_Såóm5
)

251 
DMA1
->
HIFCR
 = 
DMA_Såóm5_IT_MASK
;

253 i‡(
DMAy_Såómx
 =
DMA1_Såóm6
)

256 
DMA1
->
HIFCR
 = (
uöt32_t
)
DMA_Såóm6_IT_MASK
;

258 i‡(
DMAy_Såómx
 =
DMA1_Såóm7
)

261 
DMA1
->
HIFCR
 = 
DMA_Såóm7_IT_MASK
;

263 i‡(
DMAy_Såómx
 =
DMA2_Såóm0
)

266 
DMA2
->
LIFCR
 = 
DMA_Såóm0_IT_MASK
;

268 i‡(
DMAy_Såómx
 =
DMA2_Såóm1
)

271 
DMA2
->
LIFCR
 = 
DMA_Såóm1_IT_MASK
;

273 i‡(
DMAy_Såómx
 =
DMA2_Såóm2
)

276 
DMA2
->
LIFCR
 = 
DMA_Såóm2_IT_MASK
;

278 i‡(
DMAy_Såómx
 =
DMA2_Såóm3
)

281 
DMA2
->
LIFCR
 = 
DMA_Såóm3_IT_MASK
;

283 i‡(
DMAy_Såómx
 =
DMA2_Såóm4
)

286 
DMA2
->
HIFCR
 = 
DMA_Såóm4_IT_MASK
;

288 i‡(
DMAy_Såómx
 =
DMA2_Såóm5
)

291 
DMA2
->
HIFCR
 = 
DMA_Såóm5_IT_MASK
;

293 i‡(
DMAy_Såómx
 =
DMA2_Såóm6
)

296 
DMA2
->
HIFCR
 = 
DMA_Såóm6_IT_MASK
;

300 i‡(
DMAy_Såómx
 =
DMA2_Såóm7
)

303 
DMA2
->
HIFCR
 = 
DMA_Såóm7_IT_MASK
;

306 
	}
}

319 
	$DMA_Inô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

321 
uöt32_t
 
tm¥eg
 = 0;

324 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

325 
	`as£π_∑øm
(
	`IS_DMA_CHANNEL
(
DMA_InôSåu˘
->
DMA_Ch™√l
));

326 
	`as£π_∑øm
(
	`IS_DMA_DIRECTION
(
DMA_InôSåu˘
->
DMA_DIR
));

327 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
DMA_InôSåu˘
->
DMA_Buf„rSize
));

328 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
DMA_InôSåu˘
->
DMA_PîùhîÆInc
));

329 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
DMA_InôSåu˘
->
DMA_Mem‹yInc
));

330 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
));

331 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
));

332 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
DMA_InôSåu˘
->
DMA_Mode
));

333 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
DMA_InôSåu˘
->
DMA_Pri‹ôy
));

334 
	`as£π_∑øm
(
	`IS_DMA_FIFO_MODE_STATE
(
DMA_InôSåu˘
->
DMA_FIFOMode
));

335 
	`as£π_∑øm
(
	`IS_DMA_FIFO_THRESHOLD
(
DMA_InôSåu˘
->
DMA_FIFOThªshﬁd
));

336 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_BURST
(
DMA_InôSåu˘
->
DMA_Mem‹yBur°
));

337 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_BURST
(
DMA_InôSåu˘
->
DMA_PîùhîÆBur°
));

341 
tm¥eg
 = 
DMAy_Såómx
->
CR
;

344 
tm¥eg
 &((
uöt32_t
)~(
DMA_SxCR_CHSEL
 | 
DMA_SxCR_MBURST
 | 
DMA_SxCR_PBURST
 | \

345 
DMA_SxCR_PL
 | 
DMA_SxCR_MSIZE
 | 
DMA_SxCR_PSIZE
 | \

346 
DMA_SxCR_MINC
 | 
DMA_SxCR_PINC
 | 
DMA_SxCR_CIRC
 | \

347 
DMA_SxCR_DIR
));

360 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_Ch™√l
 | DMA_InôSåu˘->
DMA_DIR
 |

361 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 | DMA_InôSåu˘->
DMA_Mem‹yInc
 |

362 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 | DMA_InôSåu˘->
DMA_Mem‹yD©aSize
 |

363 
DMA_InôSåu˘
->
DMA_Mode
 | DMA_InôSåu˘->
DMA_Pri‹ôy
 |

364 
DMA_InôSåu˘
->
DMA_Mem‹yBur°
 | DMA_InôSåu˘->
DMA_PîùhîÆBur°
;

367 
DMAy_Såómx
->
CR
 = 
tm¥eg
;

371 
tm¥eg
 = 
DMAy_Såómx
->
FCR
;

374 
tm¥eg
 &(
uöt32_t
)~(
DMA_SxFCR_DMDIS
 | 
DMA_SxFCR_FTH
);

379 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_FIFOMode
 | DMA_InôSåu˘->
DMA_FIFOThªshﬁd
;

382 
DMAy_Såómx
->
FCR
 = 
tm¥eg
;

386 
DMAy_Såómx
->
NDTR
 = 
DMA_InôSåu˘
->
DMA_Buf„rSize
;

390 
DMAy_Såómx
->
PAR
 = 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
;

394 
DMAy_Såómx
->
M0AR
 = 
DMA_InôSåu˘
->
DMA_Mem‹y0Ba£Addr
;

395 
	}
}

403 
	$DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

407 
DMA_InôSåu˘
->
DMA_Ch™√l
 = 0;

410 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
 = 0;

413 
DMA_InôSåu˘
->
DMA_Mem‹y0Ba£Addr
 = 0;

416 
DMA_InôSåu˘
->
DMA_DIR
 = 
DMA_DIR_PîùhîÆToMem‹y
;

419 
DMA_InôSåu˘
->
DMA_Buf„rSize
 = 0;

422 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

425 
DMA_InôSåu˘
->
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_DißbÀ
;

428 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

431 
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

434 
DMA_InôSåu˘
->
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

437 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_Low
;

440 
DMA_InôSåu˘
->
DMA_FIFOMode
 = 
DMA_FIFOMode_DißbÀ
;

443 
DMA_InôSåu˘
->
DMA_FIFOThªshﬁd
 = 
DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
;

446 
DMA_InôSåu˘
->
DMA_Mem‹yBur°
 = 
DMA_Mem‹yBur°_SögÀ
;

449 
DMA_InôSåu˘
->
DMA_PîùhîÆBur°
 = 
DMA_PîùhîÆBur°_SögÀ
;

450 
	}
}

478 
	$DMA_Cmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

481 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

482 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

484 i‡(
NewSèã
 !
DISABLE
)

487 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_EN
;

492 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_EN
;

494 
	}
}

514 
	$DMA_PîùhIncOff£tSizeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_Pöcos
)

517 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

518 
	`as£π_∑øm
(
	`IS_DMA_PINCOS_SIZE
(
DMA_Pöcos
));

521 if(
DMA_Pöcos
 !
DMA_PINCOS_Psize
)

524 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_PINCOS
;

529 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_PINCOS
;

531 
	}
}

550 
	$DMA_FlowC⁄åﬁÀrC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FlowCål
)

553 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

554 
	`as£π_∑øm
(
	`IS_DMA_FLOW_CTRL
(
DMA_FlowCål
));

557 if(
DMA_FlowCål
 !
DMA_FlowCål_Mem‹y
)

560 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_PFCTRL
;

565 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_PFCTRL
;

567 
	}
}

632 
	$DMA_SëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt16_t
 
Cou¡î
)

635 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

638 
DMAy_Såómx
->
NDTR
 = (
uöt16_t
)
Cou¡î
;

639 
	}
}

647 
uöt16_t
 
	$DMA_GëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

650 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

653  ((
uöt16_t
)(
DMAy_Såómx
->
NDTR
));

654 
	}
}

730 
	$DMA_DoubÀBuf„rModeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹y1Ba£Addr
,

731 
uöt32_t
 
DMA_CuºítMem‹y
)

734 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

735 
	`as£π_∑øm
(
	`IS_DMA_CURRENT_MEM
(
DMA_CuºítMem‹y
));

737 i‡(
DMA_CuºítMem‹y
 !
DMA_Mem‹y_0
)

740 
DMAy_Såómx
->
CR
 |(
uöt32_t
)(
DMA_SxCR_CT
);

745 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)(
DMA_SxCR_CT
);

749 
DMAy_Såómx
->
M1AR
 = 
Mem‹y1Ba£Addr
;

750 
	}
}

761 
	$DMA_DoubÀBuf„rModeCmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

764 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

765 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

768 i‡(
NewSèã
 !
DISABLE
)

771 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_DBM
;

776 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_DBM
;

778 
	}
}

802 
	$DMA_Mem‹yT¨gëC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹yBa£Addr
,

803 
uöt32_t
 
DMA_Mem‹yT¨gë
)

806 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

807 
	`as£π_∑øm
(
	`IS_DMA_CURRENT_MEM
(
DMA_Mem‹yT¨gë
));

810 i‡(
DMA_Mem‹yT¨gë
 !
DMA_Mem‹y_0
)

813 
DMAy_Såómx
->
M1AR
 = 
Mem‹yBa£Addr
;

818 
DMAy_Såómx
->
M0AR
 = 
Mem‹yBa£Addr
;

820 
	}
}

828 
uöt32_t
 
	$DMA_GëCuºítMem‹yT¨gë
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

830 
uöt32_t
 
tmp
 = 0;

833 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

836 i‡((
DMAy_Såómx
->
CR
 & 
DMA_SxCR_CT
) != 0)

839 
tmp
 = 1;

844 
tmp
 = 0;

846  
tmp
;

847 
	}
}

943 
Fun˘i⁄ÆSèã
 
	$DMA_GëCmdSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

945 
Fun˘i⁄ÆSèã
 
°©e
 = 
DISABLE
;

948 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

950 i‡((
DMAy_Såómx
->
CR
 & (
uöt32_t
)
DMA_SxCR_EN
) != 0)

953 
°©e
 = 
ENABLE
;

959 
°©e
 = 
DISABLE
;

961  
°©e
;

962 
	}
}

977 
uöt32_t
 
	$DMA_GëFIFOSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

979 
uöt32_t
 
tm¥eg
 = 0;

982 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

985 
tm¥eg
 = (
uöt32_t
)((
DMAy_Såómx
->
FCR
 & 
DMA_SxFCR_FS
));

987  
tm¥eg
;

988 
	}
}

1004 
FœgSètus
 
	$DMA_GëFœgSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
)

1006 
FœgSètus
 
bô°©us
 = 
RESET
;

1007 
DMA_Ty≥Def
* 
DMAy
;

1008 
uöt32_t
 
tm¥eg
 = 0;

1011 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1012 
	`as£π_∑øm
(
	`IS_DMA_GET_FLAG
(
DMA_FLAG
));

1015 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1018 
DMAy
 = 
DMA1
;

1023 
DMAy
 = 
DMA2
;

1027 i‡((
DMA_FLAG
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1030 
tm¥eg
 = 
DMAy
->
HISR
;

1035 
tm¥eg
 = 
DMAy
->
LISR
;

1039 
tm¥eg
 &(
uöt32_t
)
RESERVED_MASK
;

1042 i‡((
tm¥eg
 & 
DMA_FLAG
Ë!(
uöt32_t
)
RESET
)

1045 
bô°©us
 = 
SET
;

1050 
bô°©us
 = 
RESET
;

1054  
bô°©us
;

1055 
	}
}

1071 
	$DMA_CÀ¨Fœg
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
)

1073 
DMA_Ty≥Def
* 
DMAy
;

1076 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1077 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_FLAG
(
DMA_FLAG
));

1080 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1083 
DMAy
 = 
DMA1
;

1088 
DMAy
 = 
DMA2
;

1092 i‡((
DMA_FLAG
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1095 
DMAy
->
HIFCR
 = (
uöt32_t
)(
DMA_FLAG
 & 
RESERVED_MASK
);

1100 
DMAy
->
LIFCR
 = (
uöt32_t
)(
DMA_FLAG
 & 
RESERVED_MASK
);

1102 
	}
}

1118 
	$DMA_ITC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1121 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1122 
	`as£π_∑øm
(
	`IS_DMA_CONFIG_IT
(
DMA_IT
));

1123 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1126 i‡((
DMA_IT
 & 
DMA_IT_FE
) != 0)

1128 i‡(
NewSèã
 !
DISABLE
)

1131 
DMAy_Såómx
->
FCR
 |(
uöt32_t
)
DMA_IT_FE
;

1136 
DMAy_Såómx
->
FCR
 &~(
uöt32_t
)
DMA_IT_FE
;

1141 i‡(
DMA_IT
 !
DMA_IT_FE
)

1143 i‡(
NewSèã
 !
DISABLE
)

1146 
DMAy_Såómx
->
CR
 |(
uöt32_t
)(
DMA_IT
 & 
TRANSFER_IT_ENABLE_MASK
);

1151 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)(
DMA_IT
 & 
TRANSFER_IT_ENABLE_MASK
);

1154 
	}
}

1170 
ITSètus
 
	$DMA_GëITSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
)

1172 
ITSètus
 
bô°©us
 = 
RESET
;

1173 
DMA_Ty≥Def
* 
DMAy
;

1174 
uöt32_t
 
tm¥eg
 = 0, 
íabÀ°©us
 = 0;

1177 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1178 
	`as£π_∑øm
(
	`IS_DMA_GET_IT
(
DMA_IT
));

1181 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1184 
DMAy
 = 
DMA1
;

1189 
DMAy
 = 
DMA2
;

1193 i‡((
DMA_IT
 & 
TRANSFER_IT_MASK
Ë!(
uöt32_t
)
RESET
)

1196 
tm¥eg
 = (
uöt32_t
)((
DMA_IT
 >> 11Ë& 
TRANSFER_IT_ENABLE_MASK
);

1199 
íabÀ°©us
 = (
uöt32_t
)(
DMAy_Såómx
->
CR
 & 
tm¥eg
);

1204 
íabÀ°©us
 = (
uöt32_t
)(
DMAy_Såómx
->
FCR
 & 
DMA_IT_FE
);

1208 i‡((
DMA_IT
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1211 
tm¥eg
 = 
DMAy
->
HISR
 ;

1216 
tm¥eg
 = 
DMAy
->
LISR
 ;

1220 
tm¥eg
 &(
uöt32_t
)
RESERVED_MASK
;

1223 i‡(((
tm¥eg
 & 
DMA_IT
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

1226 
bô°©us
 = 
SET
;

1231 
bô°©us
 = 
RESET
;

1235  
bô°©us
;

1236 
	}
}

1252 
	$DMA_CÀ¨ITPídögBô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
)

1254 
DMA_Ty≥Def
* 
DMAy
;

1257 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1258 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_IT
(
DMA_IT
));

1261 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1264 
DMAy
 = 
DMA1
;

1269 
DMAy
 = 
DMA2
;

1273 i‡((
DMA_IT
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1276 
DMAy
->
HIFCR
 = (
uöt32_t
)(
DMA_IT
 & 
RESERVED_MASK
);

1281 
DMAy
->
LIFCR
 = (
uöt32_t
)(
DMA_IT
 & 
RESERVED_MASK
);

1283 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma2d.c

58 
	~"°m32f4xx_dma2d.h
"

59 
	~"°m32f4xx_rcc.h
"

77 
	#CR_MASK
 ((
uöt32_t
)0xFFFCE0FCË

	)

78 
	#PFCCR_MASK
 ((
uöt32_t
)0x00FC00C0Ë

	)

79 
	#DEAD_MASK
 ((
uöt32_t
)0xFFFF00FEË

	)

111 
	$DMA2D_DeInô
()

114 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_DMA2D
, 
ENABLE
);

116 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_DMA2D
, 
DISABLE
);

117 
	}
}

128 
	$DMA2D_Inô
(
DMA2D_InôTy≥Def
* 
DMA2D_InôSåu˘
)

131 
uöt32_t
 
outgªí
 = 0;

132 
uöt32_t
 
ouåed
 = 0;

133 
uöt32_t
 
ouèÕha
 = 0;

134 
uöt32_t
 
pixlöe
 = 0;

137 
	`as£π_∑øm
(
	`IS_DMA2D_MODE
(
DMA2D_InôSåu˘
->
DMA2D_Mode
));

138 
	`as£π_∑øm
(
	`IS_DMA2D_CMODE
(
DMA2D_InôSåu˘
->
DMA2D_CMode
));

139 
	`as£π_∑øm
(
	`IS_DMA2D_OGREEN
(
DMA2D_InôSåu˘
->
DMA2D_OuçutGªí
));

140 
	`as£π_∑øm
(
	`IS_DMA2D_ORED
(
DMA2D_InôSåu˘
->
DMA2D_OuçutRed
));

141 
	`as£π_∑øm
(
	`IS_DMA2D_OBLUE
(
DMA2D_InôSåu˘
->
DMA2D_OuçutBlue
));

142 
	`as£π_∑øm
(
	`IS_DMA2D_OALPHA
(
DMA2D_InôSåu˘
->
DMA2D_OuçutAÕha
));

143 
	`as£π_∑øm
(
	`IS_DMA2D_OUTPUT_OFFSET
(
DMA2D_InôSåu˘
->
DMA2D_OuçutOff£t
));

144 
	`as£π_∑øm
(
	`IS_DMA2D_LINE
(
DMA2D_InôSåu˘
->
DMA2D_NumbîOfLöe
));

145 
	`as£π_∑øm
(
	`IS_DMA2D_PIXEL
(
DMA2D_InôSåu˘
->
DMA2D_PixñPîLöe
));

148 
DMA2D
->
CR
 &(
uöt32_t
)
CR_MASK
;

149 
DMA2D
->
CR
 |(
DMA2D_InôSåu˘
->
DMA2D_Mode
);

152 
DMA2D
->
OPFCCR
 &~(
uöt32_t
)
DMA2D_OPFCCR_CM
;

153 
DMA2D
->
OPFCCR
 |(
DMA2D_InôSåu˘
->
DMA2D_CMode
);

157 i‡(
DMA2D_InôSåu˘
->
DMA2D_CMode
 =
DMA2D_ARGB8888
)

159 
outgªí
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutGªí
 << 8;

160 
ouåed
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutRed
 << 16;

161 
ouèÕha
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutAÕha
 << 24;

165 i‡(
DMA2D_InôSåu˘
->
DMA2D_CMode
 =
DMA2D_RGB888
)

167 
outgªí
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutGªí
 << 8;

168 
ouåed
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutRed
 << 16;

169 
ouèÕha
 = (
uöt32_t
)0x00000000;

174 i‡(
DMA2D_InôSåu˘
->
DMA2D_CMode
 =
DMA2D_RGB565
)

176 
outgªí
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutGªí
 << 5;

177 
ouåed
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutRed
 << 11;

178 
ouèÕha
 = (
uöt32_t
)0x00000000;

183 i‡(
DMA2D_InôSåu˘
->
DMA2D_CMode
 =
DMA2D_ARGB1555
)

185 
outgªí
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutGªí
 << 5;

186 
ouåed
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutRed
 << 10;

187 
ouèÕha
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutAÕha
 << 15;

192 
outgªí
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutGªí
 << 4;

193 
ouåed
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutRed
 << 8;

194 
ouèÕha
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutAÕha
 << 12;

196 
DMA2D
->
OCOLR
 |((
outgªí
Ë| (
ouåed
Ë| (
DMA2D_InôSåu˘
->
DMA2D_OuçutBlue
Ë| (
ouèÕha
));

199 
DMA2D
->
OMAR
 = (
DMA2D_InôSåu˘
->
DMA2D_OuçutMem‹yAdd
);

202 
DMA2D
->
OOR
 &~(
uöt32_t
)
DMA2D_OOR_LO
;

203 
DMA2D
->
OOR
 |(
DMA2D_InôSåu˘
->
DMA2D_OuçutOff£t
);

206 
pixlöe
 = 
DMA2D_InôSåu˘
->
DMA2D_PixñPîLöe
 << 16;

207 
DMA2D
->
NLR
 &~(
DMA2D_NLR_NL
 | 
DMA2D_NLR_PL
);

208 
DMA2D
->
NLR
 |((
DMA2D_InôSåu˘
->
DMA2D_NumbîOfLöe
Ë| (
pixlöe
));

216 
	}
}

217 
	$DMA2D_Såu˘Inô
(
DMA2D_InôTy≥Def
* 
DMA2D_InôSåu˘
)

220 
DMA2D_InôSåu˘
->
DMA2D_Mode
 = 
DMA2D_M2M
;

223 
DMA2D_InôSåu˘
->
DMA2D_CMode
 = 
DMA2D_ARGB8888
;

226 
DMA2D_InôSåu˘
->
DMA2D_OuçutGªí
 = 0x00;

227 
DMA2D_InôSåu˘
->
DMA2D_OuçutBlue
 = 0x00;

228 
DMA2D_InôSåu˘
->
DMA2D_OuçutRed
 = 0x00;

229 
DMA2D_InôSåu˘
->
DMA2D_OuçutAÕha
 = 0x00;

232 
DMA2D_InôSåu˘
->
DMA2D_OuçutMem‹yAdd
 = 0x00;

235 
DMA2D_InôSåu˘
->
DMA2D_OuçutOff£t
 = 0x00;

238 
DMA2D_InôSåu˘
->
DMA2D_NumbîOfLöe
 = 0x00;

239 
DMA2D_InôSåu˘
->
DMA2D_PixñPîLöe
 = 0x00;

240 
	}
}

248 
	$DMA2D_SèπTøns„r
()

251 
DMA2D
->
CR
 |(
uöt32_t
)
DMA2D_CR_START
;

252 
	}
}

260 
	$DMA2D_Ab‹tTøns„r
()

263 
DMA2D
->
CR
 |(
uöt32_t
)
DMA2D_CR_ABORT
;

265 
	}
}

273 
	$DMA2D_Su•íd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

276 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

278 i‡(
NewSèã
 !
DISABLE
)

281 
DMA2D
->
CR
 |(
uöt32_t
)
DMA2D_CR_SUSP
;

286 
DMA2D
->
CR
 &~(
uöt32_t
)
DMA2D_CR_SUSP
;

288 
	}
}

298 
	$DMA2D_FGC⁄fig
(
DMA2D_FG_InôTy≥Def
* 
DMA2D_FG_InôSåu˘
)

301 
uöt32_t
 
fg_˛utcﬁ‹mode
 = 0;

302 
uöt32_t
 
fg_˛utsize
 = 0;

303 
uöt32_t
 
fg_Æpha_mode
 = 0;

304 
uöt32_t
 
fg_ÆphavÆue
 = 0;

305 
uöt32_t
 
fg_cﬁ‹gªí
 = 0;

306 
uöt32_t
 
fg_cﬁ‹ªd
 = 0;

308 
	`as£π_∑øm
(
	`IS_DMA2D_FGO
(
DMA2D_FG_InôSåu˘
->
DMA2D_FGO
));

309 
	`as£π_∑øm
(
	`IS_DMA2D_FGCM
(
DMA2D_FG_InôSåu˘
->
DMA2D_FGCM
));

310 
	`as£π_∑øm
(
	`IS_DMA2D_FG_CLUT_CM
(
DMA2D_FG_InôSåu˘
->
DMA2D_FG_CLUT_CM
));

311 
	`as£π_∑øm
(
	`IS_DMA2D_FG_CLUT_SIZE
(
DMA2D_FG_InôSåu˘
->
DMA2D_FG_CLUT_SIZE
));

312 
	`as£π_∑øm
(
	`IS_DMA2D_FG_ALPHA_MODE
(
DMA2D_FG_InôSåu˘
->
DMA2D_FGPFC_ALPHA_MODE
));

313 
	`as£π_∑øm
(
	`IS_DMA2D_FG_ALPHA_VALUE
(
DMA2D_FG_InôSåu˘
->
DMA2D_FGPFC_ALPHA_VALUE
));

314 
	`as£π_∑øm
(
	`IS_DMA2D_FGC_BLUE
(
DMA2D_FG_InôSåu˘
->
DMA2D_FGC_BLUE
));

315 
	`as£π_∑øm
(
	`IS_DMA2D_FGC_GREEN
(
DMA2D_FG_InôSåu˘
->
DMA2D_FGC_GREEN
));

316 
	`as£π_∑øm
(
	`IS_DMA2D_FGC_RED
(
DMA2D_FG_InôSåu˘
->
DMA2D_FGC_RED
));

319 
DMA2D
->
FGMAR
 = (
DMA2D_FG_InôSåu˘
->
DMA2D_FGMA
);

322 
DMA2D
->
FGOR
 &~(
uöt32_t
)
DMA2D_FGOR_LO
;

323 
DMA2D
->
FGOR
 |(
DMA2D_FG_InôSåu˘
->
DMA2D_FGO
);

326 
DMA2D
->
FGPFCCR
 &(
uöt32_t
)
PFCCR_MASK
;

327 
fg_˛utcﬁ‹mode
 = 
DMA2D_FG_InôSåu˘
->
DMA2D_FG_CLUT_CM
 << 4;

328 
fg_˛utsize
 = 
DMA2D_FG_InôSåu˘
->
DMA2D_FG_CLUT_SIZE
 << 8;

329 
fg_Æpha_mode
 = 
DMA2D_FG_InôSåu˘
->
DMA2D_FGPFC_ALPHA_MODE
 << 16;

330 
fg_ÆphavÆue
 = 
DMA2D_FG_InôSåu˘
->
DMA2D_FGPFC_ALPHA_VALUE
 << 24;

331 
DMA2D
->
FGPFCCR
 |(
DMA2D_FG_InôSåu˘
->
DMA2D_FGCM
 | 
fg_˛utcﬁ‹mode
 | 
fg_˛utsize
 | \

332 
fg_Æpha_mode
 | 
fg_ÆphavÆue
);

335 
DMA2D
->
FGCOLR
 &~(
DMA2D_FGCOLR_BLUE
 | 
DMA2D_FGCOLR_GREEN
 | 
DMA2D_FGCOLR_RED
);

336 
fg_cﬁ‹gªí
 = 
DMA2D_FG_InôSåu˘
->
DMA2D_FGC_GREEN
 << 8;

337 
fg_cﬁ‹ªd
 = 
DMA2D_FG_InôSåu˘
->
DMA2D_FGC_RED
 << 16;

338 
DMA2D
->
FGCOLR
 |(
DMA2D_FG_InôSåu˘
->
DMA2D_FGC_BLUE
 | 
fg_cﬁ‹gªí
 | 
fg_cﬁ‹ªd
);

341 
DMA2D
->
FGCMAR
 = 
DMA2D_FG_InôSåu˘
->
DMA2D_FGCMAR
;

342 
	}
}

350 
	$DMA2D_FG_Såu˘Inô
(
DMA2D_FG_InôTy≥Def
* 
DMA2D_FG_InôSåu˘
)

353 
DMA2D_FG_InôSåu˘
->
DMA2D_FGMA
 = 0x00;

356 
DMA2D_FG_InôSåu˘
->
DMA2D_FGO
 = 0x00;

359 
DMA2D_FG_InôSåu˘
->
DMA2D_FGCM
 = 
CM_ARGB8888
;

362 
DMA2D_FG_InôSåu˘
->
DMA2D_FG_CLUT_CM
 = 
CLUT_CM_ARGB8888
;

365 
DMA2D_FG_InôSåu˘
->
DMA2D_FG_CLUT_SIZE
 = 0x00;

368 
DMA2D_FG_InôSåu˘
->
DMA2D_FGPFC_ALPHA_MODE
 = 
NO_MODIF_ALPHA_VALUE
;

371 
DMA2D_FG_InôSåu˘
->
DMA2D_FGPFC_ALPHA_VALUE
 = 0x00;

374 
DMA2D_FG_InôSåu˘
->
DMA2D_FGC_BLUE
 = 0x00;

377 
DMA2D_FG_InôSåu˘
->
DMA2D_FGC_GREEN
 = 0x00;

380 
DMA2D_FG_InôSåu˘
->
DMA2D_FGC_RED
 = 0x00;

383 
DMA2D_FG_InôSåu˘
->
DMA2D_FGCMAR
 = 0x00;

384 
	}
}

395 
	$DMA2D_BGC⁄fig
(
DMA2D_BG_InôTy≥Def
* 
DMA2D_BG_InôSåu˘
)

398 
uöt32_t
 
bg_˛utcﬁ‹mode
 = 0;

399 
uöt32_t
 
bg_˛utsize
 = 0;

400 
uöt32_t
 
bg_Æpha_mode
 = 0;

401 
uöt32_t
 
bg_ÆphavÆue
 = 0;

402 
uöt32_t
 
bg_cﬁ‹gªí
 = 0;

403 
uöt32_t
 
bg_cﬁ‹ªd
 = 0;

405 
	`as£π_∑øm
(
	`IS_DMA2D_BGO
(
DMA2D_BG_InôSåu˘
->
DMA2D_BGO
));

406 
	`as£π_∑øm
(
	`IS_DMA2D_BGCM
(
DMA2D_BG_InôSåu˘
->
DMA2D_BGCM
));

407 
	`as£π_∑øm
(
	`IS_DMA2D_BG_CLUT_CM
(
DMA2D_BG_InôSåu˘
->
DMA2D_BG_CLUT_CM
));

408 
	`as£π_∑øm
(
	`IS_DMA2D_BG_CLUT_SIZE
(
DMA2D_BG_InôSåu˘
->
DMA2D_BG_CLUT_SIZE
));

409 
	`as£π_∑øm
(
	`IS_DMA2D_BG_ALPHA_MODE
(
DMA2D_BG_InôSåu˘
->
DMA2D_BGPFC_ALPHA_MODE
));

410 
	`as£π_∑øm
(
	`IS_DMA2D_BG_ALPHA_VALUE
(
DMA2D_BG_InôSåu˘
->
DMA2D_BGPFC_ALPHA_VALUE
));

411 
	`as£π_∑øm
(
	`IS_DMA2D_BGC_BLUE
(
DMA2D_BG_InôSåu˘
->
DMA2D_BGC_BLUE
));

412 
	`as£π_∑øm
(
	`IS_DMA2D_BGC_GREEN
(
DMA2D_BG_InôSåu˘
->
DMA2D_BGC_GREEN
));

413 
	`as£π_∑øm
(
	`IS_DMA2D_BGC_RED
(
DMA2D_BG_InôSåu˘
->
DMA2D_BGC_RED
));

416 
DMA2D
->
BGMAR
 = (
DMA2D_BG_InôSåu˘
->
DMA2D_BGMA
);

419 
DMA2D
->
BGOR
 &~(
uöt32_t
)
DMA2D_BGOR_LO
;

420 
DMA2D
->
BGOR
 |(
DMA2D_BG_InôSåu˘
->
DMA2D_BGO
);

423 
DMA2D
->
BGPFCCR
 &(
uöt32_t
)
PFCCR_MASK
;

424 
bg_˛utcﬁ‹mode
 = 
DMA2D_BG_InôSåu˘
->
DMA2D_BG_CLUT_CM
 << 4;

425 
bg_˛utsize
 = 
DMA2D_BG_InôSåu˘
->
DMA2D_BG_CLUT_SIZE
 << 8;

426 
bg_Æpha_mode
 = 
DMA2D_BG_InôSåu˘
->
DMA2D_BGPFC_ALPHA_MODE
 << 16;

427 
bg_ÆphavÆue
 = 
DMA2D_BG_InôSåu˘
->
DMA2D_BGPFC_ALPHA_VALUE
 << 24;

428 
DMA2D
->
BGPFCCR
 |(
DMA2D_BG_InôSåu˘
->
DMA2D_BGCM
 | 
bg_˛utcﬁ‹mode
 | 
bg_˛utsize
 | \

429 
bg_Æpha_mode
 | 
bg_ÆphavÆue
);

432 
DMA2D
->
BGCOLR
 &~(
DMA2D_BGCOLR_BLUE
 | 
DMA2D_BGCOLR_GREEN
 | 
DMA2D_BGCOLR_RED
);

433 
bg_cﬁ‹gªí
 = 
DMA2D_BG_InôSåu˘
->
DMA2D_BGC_GREEN
 << 8;

434 
bg_cﬁ‹ªd
 = 
DMA2D_BG_InôSåu˘
->
DMA2D_BGC_RED
 << 16;

435 
DMA2D
->
BGCOLR
 |(
DMA2D_BG_InôSåu˘
->
DMA2D_BGC_BLUE
 | 
bg_cﬁ‹gªí
 | 
bg_cﬁ‹ªd
);

438 
DMA2D
->
BGCMAR
 = 
DMA2D_BG_InôSåu˘
->
DMA2D_BGCMAR
;

440 
	}
}

448 
	$DMA2D_BG_Såu˘Inô
(
DMA2D_BG_InôTy≥Def
* 
DMA2D_BG_InôSåu˘
)

451 
DMA2D_BG_InôSåu˘
->
DMA2D_BGMA
 = 0x00;

454 
DMA2D_BG_InôSåu˘
->
DMA2D_BGO
 = 0x00;

457 
DMA2D_BG_InôSåu˘
->
DMA2D_BGCM
 = 
CM_ARGB8888
;

460 
DMA2D_BG_InôSåu˘
->
DMA2D_BG_CLUT_CM
 = 
CLUT_CM_ARGB8888
;

463 
DMA2D_BG_InôSåu˘
->
DMA2D_BG_CLUT_SIZE
 = 0x00;

466 
DMA2D_BG_InôSåu˘
->
DMA2D_BGPFC_ALPHA_MODE
 = 
NO_MODIF_ALPHA_VALUE
;

469 
DMA2D_BG_InôSåu˘
->
DMA2D_BGPFC_ALPHA_VALUE
 = 0x00;

472 
DMA2D_BG_InôSåu˘
->
DMA2D_BGC_BLUE
 = 0x00;

475 
DMA2D_BG_InôSåu˘
->
DMA2D_BGC_GREEN
 = 0x00;

478 
DMA2D_BG_InôSåu˘
->
DMA2D_BGC_RED
 = 0x00;

481 
DMA2D_BG_InôSåu˘
->
DMA2D_BGCMAR
 = 0x00;

482 
	}
}

491 
	$DMA2D_FGSèπ
(
Fun˘i⁄ÆSèã
 
NewSèã
)

494 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

496 i‡(
NewSèã
 !
DISABLE
)

499 
DMA2D
->
FGPFCCR
 |
DMA2D_FGPFCCR_START
;

504 
DMA2D
->
FGPFCCR
 &(
uöt32_t
)~
DMA2D_FGPFCCR_START
;

506 
	}
}

515 
	$DMA2D_BGSèπ
(
Fun˘i⁄ÆSèã
 
NewSèã
)

518 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

520 i‡(
NewSèã
 !
DISABLE
)

523 
DMA2D
->
BGPFCCR
 |
DMA2D_BGPFCCR_START
;

528 
DMA2D
->
BGPFCCR
 &(
uöt32_t
)~
DMA2D_BGPFCCR_START
;

530 
	}
}

538 
	$DMA2D_DódTimeC⁄fig
(
uöt32_t
 
DMA2D_DódTime
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

540 
uöt32_t
 
DódTime
;

543 
	`as£π_∑øm
(
	`IS_DMA2D_DEAD_TIME
(
DMA2D_DódTime
));

544 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

546 i‡(
NewSèã
 !
DISABLE
)

549 
DMA2D
->
AMTCR
 &(
uöt32_t
)
DEAD_MASK
;

550 
DódTime
 = 
DMA2D_DódTime
 << 8;

551 
DMA2D
->
AMTCR
 |(
DódTime
 | 
DMA2D_AMTCR_EN
);

555 
DMA2D
->
AMTCR
 &~(
uöt32_t
)
DMA2D_AMTCR_EN
;

557 
	}
}

565 
	$DMA2D_LöeW©îm¨kC⁄fig
(
uöt32_t
 
DMA2D_LW©îm¨kC⁄fig
)

568 
	`as£π_∑øm
(
	`IS_DMA2D_LöeW©îm¨k
(
DMA2D_LW©îm¨kC⁄fig
));

571 
DMA2D
->
LWR
 = (
uöt32_t
)
DMA2D_LW©îm¨kC⁄fig
;

572 
	}
}

632 
	$DMA2D_ITC⁄fig
(
uöt32_t
 
DMA2D_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

635 
	`as£π_∑øm
(
	`IS_DMA2D_IT
(
DMA2D_IT
));

636 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

638 i‡(
NewSèã
 !
DISABLE
)

641 
DMA2D
->
CR
 |
DMA2D_IT
;

646 
DMA2D
->
CR
 &(
uöt32_t
)~
DMA2D_IT
;

648 
	}
}

663 
FœgSètus
 
	$DMA2D_GëFœgSètus
(
uöt32_t
 
DMA2D_FLAG
)

665 
FœgSètus
 
bô°©us
 = 
RESET
;

668 
	`as£π_∑øm
(
	`IS_DMA2D_GET_FLAG
(
DMA2D_FLAG
));

671 i‡(((
DMA2D
->
ISR
Ë& 
DMA2D_FLAG
Ë!(
uöt32_t
)
RESET
)

674 
bô°©us
 = 
SET
;

679 
bô°©us
 = 
RESET
;

682  
bô°©us
;

683 
	}
}

697 
	$DMA2D_CÀ¨Fœg
(
uöt32_t
 
DMA2D_FLAG
)

700 
	`as£π_∑øm
(
	`IS_DMA2D_GET_FLAG
(
DMA2D_FLAG
));

703 
DMA2D
->
IFCR
 = (
uöt32_t
)
DMA2D_FLAG
;

704 
	}
}

718 
ITSètus
 
	$DMA2D_GëITSètus
(
uöt32_t
 
DMA2D_IT
)

720 
ITSètus
 
bô°©us
 = 
RESET
;

721 
uöt32_t
 
DMA2D_IT_FLAG
 = 
DMA2D_IT
 >> 8;

724 
	`as£π_∑øm
(
	`IS_DMA2D_IT
(
DMA2D_IT
));

726 i‡((
DMA2D
->
ISR
 & 
DMA2D_IT_FLAG
Ë!(
uöt32_t
)
RESET
)

728 
bô°©us
 = 
SET
;

732 
bô°©us
 = 
RESET
;

735 i‡(((
DMA2D
->
CR
 & 
DMA2D_IT
Ë!(
uöt32_t
)
RESET
Ë&& (
bô°©us
 != (uint32_t)RESET))

737 
bô°©us
 = 
SET
;

741 
bô°©us
 = 
RESET
;

743  
bô°©us
;

744 
	}
}

758 
	$DMA2D_CÀ¨ITPídögBô
(
uöt32_t
 
DMA2D_IT
)

761 
	`as£π_∑øm
(
	`IS_DMA2D_IT
(
DMA2D_IT
));

762 
DMA2D_IT
 = DMA2D_IT >> 8;

765 
DMA2D
->
IFCR
 = (
uöt32_t
)
DMA2D_IT
;

766 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_exti.c

67 
	~"°m32f4xx_exti.h
"

81 
	#EXTI_LINENONE
 ((
uöt32_t
)0x00000Ë

	)

109 
	$EXTI_DeInô
()

111 
EXTI
->
IMR
 = 0x00000000;

112 
EXTI
->
EMR
 = 0x00000000;

113 
EXTI
->
RTSR
 = 0x00000000;

114 
EXTI
->
FTSR
 = 0x00000000;

115 
EXTI
->
PR
 = 0x007FFFFF;

116 
	}
}

125 
	$EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

127 
uöt32_t
 
tmp
 = 0;

130 
	`as£π_∑øm
(
	`IS_EXTI_MODE
(
EXTI_InôSåu˘
->
EXTI_Mode
));

131 
	`as£π_∑øm
(
	`IS_EXTI_TRIGGER
(
EXTI_InôSåu˘
->
EXTI_Triggî
));

132 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_InôSåu˘
->
EXTI_Löe
));

133 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
EXTI_InôSåu˘
->
EXTI_LöeCmd
));

135 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

137 i‡(
EXTI_InôSåu˘
->
EXTI_LöeCmd
 !
DISABLE
)

140 
EXTI
->
IMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

141 
EXTI
->
EMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

143 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

145 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

148 
EXTI
->
RTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

149 
EXTI
->
FTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

152 i‡(
EXTI_InôSåu˘
->
EXTI_Triggî
 =
EXTI_Triggî_Risög_FÆlög
)

155 
EXTI
->
RTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

156 
EXTI
->
FTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

160 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

161 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Triggî
;

163 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

168 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

171 *(
__IO
 
uöt32_t
 *Ë
tmp
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

173 
	}
}

181 
	$EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

183 
EXTI_InôSåu˘
->
EXTI_Löe
 = 
EXTI_LINENONE
;

184 
EXTI_InôSåu˘
->
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

185 
EXTI_InôSåu˘
->
EXTI_Triggî
 = 
EXTI_Triggî_FÆlög
;

186 
EXTI_InôSåu˘
->
EXTI_LöeCmd
 = 
DISABLE
;

187 
	}
}

196 
	$EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
)

199 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

201 
EXTI
->
SWIER
 |
EXTI_Löe
;

202 
	}
}

226 
FœgSètus
 
	$EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
)

228 
FœgSètus
 
bô°©us
 = 
RESET
;

230 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

232 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

234 
bô°©us
 = 
SET
;

238 
bô°©us
 = 
RESET
;

240  
bô°©us
;

241 
	}
}

249 
	$EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
)

252 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

254 
EXTI
->
PR
 = 
EXTI_Löe
;

255 
	}
}

263 
ITSètus
 
	$EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
)

265 
FœgSètus
 
bô°©us
 = 
RESET
;

267 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

269 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

271 
bô°©us
 = 
SET
;

275 
bô°©us
 = 
RESET
;

277  
bô°©us
;

279 
	}
}

287 
	$EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
)

290 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

292 
EXTI
->
PR
 = 
EXTI_Löe
;

293 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_flash.c

72 
	~"°m32f4xx_Êash.h
"

85 
	#SECTOR_MASK
 ((
uöt32_t
)0xFFFFFF07)

	)

277 
	$FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
)

280 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FLASH_L©ícy
));

283 *(
__IO
 
uöt8_t
 *)
ACR_BYTE0_ADDRESS
 = (uöt8_t)
FLASH_L©ícy
;

284 
	}
}

292 
	$FLASH_Pª„tchBuf„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

295 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

298 if(
NewSèã
 !
DISABLE
)

300 
FLASH
->
ACR
 |
FLASH_ACR_PRFTEN
;

304 
FLASH
->
ACR
 &(~
FLASH_ACR_PRFTEN
);

306 
	}
}

314 
	$FLASH_In°ru˘i⁄CacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

317 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

319 if(
NewSèã
 !
DISABLE
)

321 
FLASH
->
ACR
 |
FLASH_ACR_ICEN
;

325 
FLASH
->
ACR
 &(~
FLASH_ACR_ICEN
);

327 
	}
}

335 
	$FLASH_D©aCacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

338 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

340 if(
NewSèã
 !
DISABLE
)

342 
FLASH
->
ACR
 |
FLASH_ACR_DCEN
;

346 
FLASH
->
ACR
 &(~
FLASH_ACR_DCEN
);

348 
	}
}

356 
	$FLASH_In°ru˘i⁄CacheRe£t
()

358 
FLASH
->
ACR
 |
FLASH_ACR_ICRST
;

359 
	}
}

367 
	$FLASH_D©aCacheRe£t
()

369 
FLASH
->
ACR
 |
FLASH_ACR_DCRST
;

370 
	}
}

414 
	$FLASH_U∆ock
()

416 if((
FLASH
->
CR
 & 
FLASH_CR_LOCK
Ë!
RESET
)

419 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

420 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

422 
	}
}

429 
	$FLASH_Lock
()

432 
FLASH
->
CR
 |
FLASH_CR_LOCK
;

433 
	}
}

469 
FLASH_Sètus
 
	$FLASH_Eø£Se˘‹
(
uöt32_t
 
FLASH_Se˘‹
, 
uöt8_t
 
VﬁègeR™ge
)

471 
uöt32_t
 
tmp_psize
 = 0x0;

472 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

475 
	`as£π_∑øm
(
	`IS_FLASH_SECTOR
(
FLASH_Se˘‹
));

476 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

478 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

480 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

482 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

484 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

486 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

488 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

492 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

495 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

497 if(
°©us
 =
FLASH_COMPLETE
)

500 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

501 
FLASH
->
CR
 |
tmp_psize
;

502 
FLASH
->
CR
 &
SECTOR_MASK
;

503 
FLASH
->
CR
 |
FLASH_CR_SER
 | 
FLASH_Se˘‹
;

504 
FLASH
->
CR
 |
FLASH_CR_STRT
;

507 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

510 
FLASH
->
CR
 &(~
FLASH_CR_SER
);

511 
FLASH
->
CR
 &
SECTOR_MASK
;

514  
°©us
;

515 
	}
}

537 
FLASH_Sètus
 
	$FLASH_Eø£AŒSe˘‹s
(
uöt8_t
 
VﬁègeR™ge
)

539 
uöt32_t
 
tmp_psize
 = 0x0;

540 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

543 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

544 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

546 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

548 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

550 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

552 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

554 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

556 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

560 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

562 if(
°©us
 =
FLASH_COMPLETE
)

565 #i‡
	`deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

566 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

567 
FLASH
->
CR
 |
tmp_psize
;

568 
FLASH
->
CR
 |(
FLASH_CR_MER1
 | 
FLASH_CR_MER2
);

569 
FLASH
->
CR
 |
FLASH_CR_STRT
;

572 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

575 
FLASH
->
CR
 &~(
FLASH_CR_MER1
 | 
FLASH_CR_MER2
);

578 #i‡
	`deföed
 (
STM32F40_41xxx
Ë|| deföed (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

579 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

580 
FLASH
->
CR
 |
tmp_psize
;

581 
FLASH
->
CR
 |
FLASH_CR_MER
;

582 
FLASH
->
CR
 |
FLASH_CR_STRT
;

585 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

588 
FLASH
->
CR
 &(~
FLASH_CR_MER
);

593  
°©us
;

594 
	}
}

618 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k1Se˘‹s
(
uöt8_t
 
VﬁègeR™ge
)

620 
uöt32_t
 
tmp_psize
 = 0x0;

621 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

624 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

625 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

627 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

629 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

631 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

633 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

635 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

637 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

641 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

643 if(
°©us
 =
FLASH_COMPLETE
)

646 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

647 
FLASH
->
CR
 |
tmp_psize
;

648 
FLASH
->
CR
 |
FLASH_CR_MER1
;

649 
FLASH
->
CR
 |
FLASH_CR_STRT
;

652 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

655 
FLASH
->
CR
 &(~
FLASH_CR_MER1
);

659  
°©us
;

660 
	}
}

685 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k2Se˘‹s
(
uöt8_t
 
VﬁègeR™ge
)

687 
uöt32_t
 
tmp_psize
 = 0x0;

688 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

691 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

692 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

694 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

696 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

698 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

700 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

702 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

704 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

708 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

710 if(
°©us
 =
FLASH_COMPLETE
)

713 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

714 
FLASH
->
CR
 |
tmp_psize
;

715 
FLASH
->
CR
 |
FLASH_CR_MER2
;

716 
FLASH
->
CR
 |
FLASH_CR_STRT
;

719 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

722 
FLASH
->
CR
 &(~
FLASH_CR_MER2
);

726  
°©us
;

727 
	}
}

742 
FLASH_Sètus
 
	$FLASH_ProgømDoubÀW‹d
(
uöt32_t
 
Addªss
, 
uöt64_t
 
D©a
)

744 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

747 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

750 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

752 if(
°©us
 =
FLASH_COMPLETE
)

755 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

756 
FLASH
->
CR
 |
FLASH_PSIZE_DOUBLE_WORD
;

757 
FLASH
->
CR
 |
FLASH_CR_PG
;

759 *(
__IO
 
uöt64_t
*)
Addªss
 = 
D©a
;

762 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

765 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

768  
°©us
;

769 
	}
}

785 
FLASH_Sètus
 
	$FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

787 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

790 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

793 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

795 if(
°©us
 =
FLASH_COMPLETE
)

798 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

799 
FLASH
->
CR
 |
FLASH_PSIZE_WORD
;

800 
FLASH
->
CR
 |
FLASH_CR_PG
;

802 *(
__IO
 
uöt32_t
*)
Addªss
 = 
D©a
;

805 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

808 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

811  
°©us
;

812 
	}
}

827 
FLASH_Sètus
 
	$FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

829 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

832 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

835 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

837 if(
°©us
 =
FLASH_COMPLETE
)

840 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

841 
FLASH
->
CR
 |
FLASH_PSIZE_HALF_WORD
;

842 
FLASH
->
CR
 |
FLASH_CR_PG
;

844 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

847 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

850 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

853  
°©us
;

854 
	}
}

869 
FLASH_Sètus
 
	$FLASH_ProgømByã
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

871 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

874 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

877 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

879 if(
°©us
 =
FLASH_COMPLETE
)

882 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

883 
FLASH
->
CR
 |
FLASH_PSIZE_BYTE
;

884 
FLASH
->
CR
 |
FLASH_CR_PG
;

886 *(
__IO
 
uöt8_t
*)
Addªss
 = 
D©a
;

889 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

892 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

896  
°©us
;

897 
	}
}

968 
	$FLASH_OB_U∆ock
()

970 if((
FLASH
->
OPTCR
 & 
FLASH_OPTCR_OPTLOCK
Ë!
RESET
)

973 
FLASH
->
OPTKEYR
 = 
FLASH_OPT_KEY1
;

974 
FLASH
->
OPTKEYR
 = 
FLASH_OPT_KEY2
;

976 
	}
}

983 
	$FLASH_OB_Lock
()

986 
FLASH
->
OPTCR
 |
FLASH_OPTCR_OPTLOCK
;

987 
	}
}

1006 
	$FLASH_OB_WRPC⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1008 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1011 
	`as£π_∑øm
(
	`IS_OB_WRP
(
OB_WRP
));

1012 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1014 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1016 if(
°©us
 =
FLASH_COMPLETE
)

1018 if(
NewSèã
 !
DISABLE
)

1020 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 &(~
OB_WRP
);

1024 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 |(uöt16_t)
OB_WRP
;

1027 
	}
}

1048 
	$FLASH_OB_WRP1C⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1050 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1053 
	`as£π_∑øm
(
	`IS_OB_WRP
(
OB_WRP
));

1054 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1056 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1058 if(
°©us
 =
FLASH_COMPLETE
)

1060 if(
NewSèã
 !
DISABLE
)

1062 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 &(~
OB_WRP
);

1066 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 |(uöt16_t)
OB_WRP
;

1069 
	}
}

1098 
	$FLASH_OB_PCROPSñe˘i⁄C⁄fig
(
uöt8_t
 
OB_PcROP
)

1100 
uöt8_t
 
›ti⁄tmp
 = 0xFF;

1103 
	`as£π_∑øm
(
	`IS_OB_PCROP_SELECT
(
OB_PcROP
));

1106 
›ti⁄tmp
 = (
uöt8_t
)((*(
__IO
 uöt8_à*)
OPTCR_BYTE3_ADDRESS
) & (uint8_t)0x7F);

1108 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE3_ADDRESS
 = (uöt8_t)(
OB_PcROP
 | 
›ti⁄tmp
);

1110 
	}
}

1128 
	$FLASH_OB_PCROPC⁄fig
(
uöt32_t
 
OB_PCROP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1130 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1133 
	`as£π_∑øm
(
	`IS_OB_PCROP
(
OB_PCROP
));

1134 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1136 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1138 if(
°©us
 =
FLASH_COMPLETE
)

1140 if(
NewSèã
 !
DISABLE
)

1142 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 |(uöt16_t)
OB_PCROP
;

1146 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 &(~
OB_PCROP
);

1149 
	}
}

1165 
	$FLASH_OB_PCROP1C⁄fig
(
uöt32_t
 
OB_PCROP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1167 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1170 
	`as£π_∑øm
(
	`IS_OB_PCROP
(
OB_PCROP
));

1171 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1173 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1175 if(
°©us
 =
FLASH_COMPLETE
)

1177 if(
NewSèã
 !
DISABLE
)

1179 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 |(uöt16_t)
OB_PCROP
;

1183 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 &(~
OB_PCROP
);

1186 
	}
}

1201 
	$FLASH_OB_RDPC⁄fig
(
uöt8_t
 
OB_RDP
)

1203 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1206 
	`as£π_∑øm
(
	`IS_OB_RDP
(
OB_RDP
));

1208 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1210 if(
°©us
 =
FLASH_COMPLETE
)

1212 *(
__IO
 
uöt8_t
*)
OPTCR_BYTE1_ADDRESS
 = 
OB_RDP
;

1215 
	}
}

1233 
	$FLASH_OB_U£rC⁄fig
(
uöt8_t
 
OB_IWDG
, uöt8_à
OB_STOP
, uöt8_à
OB_STDBY
)

1235 
uöt8_t
 
›ti⁄tmp
 = 0xFF;

1236 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1239 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
(
OB_IWDG
));

1240 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
(
OB_STOP
));

1241 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
(
OB_STDBY
));

1244 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1246 if(
°©us
 =
FLASH_COMPLETE
)

1248 #i‡
	`deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

1250 
›ti⁄tmp
 = (
uöt8_t
)((*(
__IO
 uöt8_à*)
OPTCR_BYTE0_ADDRESS
) & (uint8_t)0x1F);

1253 #i‡
	`deföed
 (
STM32F40_41xxx
Ë|| deföed (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

1255 
›ti⁄tmp
 = (
uöt8_t
)((*(
__IO
 uöt8_à*)
OPTCR_BYTE0_ADDRESS
) & (uint8_t)0x0F);

1259 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 = 
OB_IWDG
 | (uöt8_t)(
OB_STDBY
 | (uöt8_t)(
OB_STOP
 | ((uöt8_t)
›ti⁄tmp
)));

1261 
	}
}

1274 
	$FLASH_OB_BoŸC⁄fig
(
uöt8_t
 
OB_BOOT
)

1277 
	`as£π_∑øm
(
	`IS_OB_BOOT
(
OB_BOOT
));

1280 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 &(~
FLASH_OPTCR_BFB2
);

1281 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 |
OB_BOOT
;

1283 
	}
}

1295 
	$FLASH_OB_BORC⁄fig
(
uöt8_t
 
OB_BOR
)

1298 
	`as£π_∑øm
(
	`IS_OB_BOR
(
OB_BOR
));

1301 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 &(~
FLASH_OPTCR_BOR_LEV
);

1302 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 |
OB_BOR
;

1304 
	}
}

1312 
FLASH_Sètus
 
	$FLASH_OB_Launch
()

1314 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1317 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 |
FLASH_OPTCR_OPTSTRT
;

1320 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1322  
°©us
;

1323 
	}
}

1331 
uöt8_t
 
	$FLASH_OB_GëU£r
()

1334  (
uöt8_t
)(
FLASH
->
OPTCR
 >> 5);

1335 
	}
}

1342 
uöt16_t
 
	$FLASH_OB_GëWRP
()

1345  (*(
__IO
 
uöt16_t
 *)(
OPTCR_BYTE2_ADDRESS
));

1346 
	}
}

1356 
uöt16_t
 
	$FLASH_OB_GëWRP1
()

1359  (*(
__IO
 
uöt16_t
 *)(
OPTCR1_BYTE2_ADDRESS
));

1360 
	}
}

1370 
uöt16_t
 
	$FLASH_OB_GëPCROP
()

1373  (*(
__IO
 
uöt16_t
 *)(
OPTCR_BYTE2_ADDRESS
));

1374 
	}
}

1384 
uöt16_t
 
	$FLASH_OB_GëPCROP1
()

1387  (*(
__IO
 
uöt16_t
 *)(
OPTCR1_BYTE2_ADDRESS
));

1388 
	}
}

1397 
FœgSètus
 
	$FLASH_OB_GëRDP
()

1399 
FœgSètus
 
ªad°©us
 = 
RESET
;

1401 i‡((*(
__IO
 
uöt8_t
*)(
OPTCR_BYTE1_ADDRESS
Ë!(uöt8_t)
OB_RDP_Levñ_0
))

1403 
ªad°©us
 = 
SET
;

1407 
ªad°©us
 = 
RESET
;

1409  
ªad°©us
;

1410 
	}
}

1421 
uöt8_t
 
	$FLASH_OB_GëBOR
()

1424  (
uöt8_t
)(*(
__IO
 uöt8_à*)(
OPTCR_BYTE0_ADDRESS
) & (uint8_t)0x0C);

1425 
	}
}

1450 
	$FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1453 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1454 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1456 if(
NewSèã
 !
DISABLE
)

1459 
FLASH
->
CR
 |
FLASH_IT
;

1464 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

1466 
	}
}

1482 
FœgSètus
 
	$FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
)

1484 
FœgSètus
 
bô°©us
 = 
RESET
;

1486 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
));

1488 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1490 
bô°©us
 = 
SET
;

1494 
bô°©us
 = 
RESET
;

1497  
bô°©us
;

1498 
	}
}

1513 
	$FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
)

1516 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
));

1519 
FLASH
->
SR
 = 
FLASH_FLAG
;

1520 
	}
}

1528 
FLASH_Sètus
 
	$FLASH_GëSètus
()

1530 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1532 if((
FLASH
->
SR
 & 
FLASH_FLAG_BSY
) == FLASH_FLAG_BSY)

1534 
Êash°©us
 = 
FLASH_BUSY
;

1538 if((
FLASH
->
SR
 & 
FLASH_FLAG_WRPERR
Ë!(
uöt32_t
)0x00)

1540 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1544 if((
FLASH
->
SR
 & 
FLASH_FLAG_RDERR
Ë!(
uöt32_t
)0x00)

1546 
Êash°©us
 = 
FLASH_ERROR_RD
;

1550 if((
FLASH
->
SR
 & (
uöt32_t
)0xEF) != (uint32_t)0x00)

1552 
Êash°©us
 = 
FLASH_ERROR_PROGRAM
;

1556 if((
FLASH
->
SR
 & 
FLASH_FLAG_OPERR
Ë!(
uöt32_t
)0x00)

1558 
Êash°©us
 = 
FLASH_ERROR_OPERATION
;

1562 
Êash°©us
 = 
FLASH_COMPLETE
;

1569  
Êash°©us
;

1570 
	}
}

1578 
FLASH_Sètus
 
	$FLASH_WaôF‹La°O≥øti⁄
()

1580 
__IO
 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1583 
°©us
 = 
	`FLASH_GëSètus
();

1588 
°©us
 =
FLASH_BUSY
)

1590 
°©us
 = 
	`FLASH_GëSètus
();

1593  
°©us
;

1594 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_flash_ramfunc.c

58 
	~"°m32f4xx_Êash_ømfunc.h
"

105 
__RAM_FUNC
 
	$FLASH_FœshI¡îÁ˚Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

107 i‡(
NewSèã
 !
DISABLE
)

110 
	`CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_FISSR
);

115 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_FISSR
);

117 
	}
}

128 
__RAM_FUNC
 
	$FLASH_FœshSÀïModeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

130 i‡(
NewSèã
 !
DISABLE
)

133 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_FMSSR
);

138 
	`CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_FMSSR
);

140 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_fmc.c

36 
	~"°m32f4xx_fmc.h
"

37 
	~"°m32f4xx_rcc.h
"

49 c⁄° 
FMC_NORSRAMTimögInôTy≥Def
 
	gFMC_DeÁu…TimögSåu˘
 = {0x0F,

55 
FMC_Ac˚ssMode_A


59 
	#BCR_MBKEN_SET
 ((
uöt32_t
)0x00000001)

	)

60 
	#BCR_MBKEN_RESET
 ((
uöt32_t
)0x000FFFFE)

	)

61 
	#BCR_FACCEN_SET
 ((
uöt32_t
)0x00000040)

	)

64 
	#PCR_PBKEN_SET
 ((
uöt32_t
)0x00000004)

	)

65 
	#PCR_PBKEN_RESET
 ((
uöt32_t
)0x000FFFFB)

	)

66 
	#PCR_ECCEN_SET
 ((
uöt32_t
)0x00000040)

	)

67 
	#PCR_ECCEN_RESET
 ((
uöt32_t
)0x000FFFBF)

	)

68 
	#PCR_MEMORYTYPE_NAND
 ((
uöt32_t
)0x00000008)

	)

71 
	#SDCR_WrôePrŸe˘i⁄_RESET
 ((
uöt32_t
)0x00007DFF)

	)

74 
	#SDCMR_CTB1_RESET
 ((
uöt32_t
)0x003FFFEF)

	)

75 
	#SDCMR_CTB2_RESET
 ((
uöt32_t
)0x003FFFF7)

	)

76 
	#SDCMR_CTB1_2_RESET
 ((
uöt32_t
)0x003FFFE7)

	)

136 
	$FMC_NORSRAMDeInô
(
uöt32_t
 
FMC_B™k
)

139 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_BANK
(
FMC_B™k
));

142 if(
FMC_B™k
 =
FMC_B™k1_NORSRAM1
)

144 
FMC_B™k1
->
BTCR
[
FMC_B™k
] = 0x000030DB;

149 
FMC_B™k1
->
BTCR
[
FMC_B™k
] = 0x000030D2;

151 
FMC_B™k1
->
BTCR
[
FMC_B™k
 + 1] = 0x0FFFFFFF;

152 
FMC_B™k1E
->
BWTR
[
FMC_B™k
] = 0x0FFFFFFF;

153 
	}
}

163 
	$FMC_NORSRAMInô
(
FMC_NORSRAMInôTy≥Def
* 
FMC_NORSRAMInôSåu˘
)

165 
uöt32_t
 
tm¥
 = 0;

168 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_BANK
(
FMC_NORSRAMInôSåu˘
->
FMC_B™k
));

169 
	`as£π_∑øm
(
	`IS_FMC_MUX
(
FMC_NORSRAMInôSåu˘
->
FMC_D©aAddªssMux
));

170 
	`as£π_∑øm
(
	`IS_FMC_MEMORY
(
FMC_NORSRAMInôSåu˘
->
FMC_Mem‹yTy≥
));

171 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_MEMORY_WIDTH
(
FMC_NORSRAMInôSåu˘
->
FMC_Mem‹yD©aWidth
));

172 
	`as£π_∑øm
(
	`IS_FMC_BURSTMODE
(
FMC_NORSRAMInôSåu˘
->
FMC_Bur°Ac˚ssMode
));

173 
	`as£π_∑øm
(
	`IS_FMC_WAIT_POLARITY
(
FMC_NORSRAMInôSåu˘
->
FMC_WaôSig«lPﬁ¨ôy
));

174 
	`as£π_∑øm
(
	`IS_FMC_WRAP_MODE
(
FMC_NORSRAMInôSåu˘
->
FMC_WøpMode
));

175 
	`as£π_∑øm
(
	`IS_FMC_WAIT_SIGNAL_ACTIVE
(
FMC_NORSRAMInôSåu˘
->
FMC_WaôSig«lA˘ive
));

176 
	`as£π_∑øm
(
	`IS_FMC_WRITE_OPERATION
(
FMC_NORSRAMInôSåu˘
->
FMC_WrôeO≥øti⁄
));

177 
	`as£π_∑øm
(
	`IS_FMC_WAITE_SIGNAL
(
FMC_NORSRAMInôSåu˘
->
FMC_WaôSig«l
));

178 
	`as£π_∑øm
(
	`IS_FMC_EXTENDED_MODE
(
FMC_NORSRAMInôSåu˘
->
FMC_ExãndedMode
));

179 
	`as£π_∑øm
(
	`IS_FMC_ASYNWAIT
(
FMC_NORSRAMInôSåu˘
->
FMC_Asynchr⁄ousWaô
));

180 
	`as£π_∑øm
(
	`IS_FMC_WRITE_BURST
(
FMC_NORSRAMInôSåu˘
->
FMC_WrôeBur°
));

181 
	`as£π_∑øm
(
	`IS_FMC_CONTINOUS_CLOCK
(
FMC_NORSRAMInôSåu˘
->
FMC_C⁄töousClock
));

182 
	`as£π_∑øm
(
	`IS_FMC_ADDRESS_SETUP_TIME
(
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_AddªssSëupTime
));

183 
	`as£π_∑øm
(
	`IS_FMC_ADDRESS_HOLD_TIME
(
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_AddªssHﬁdTime
));

184 
	`as£π_∑øm
(
	`IS_FMC_DATASETUP_TIME
(
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_D©aSëupTime
));

185 
	`as£π_∑øm
(
	`IS_FMC_TURNAROUND_TIME
(
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_BusTu∫AroundDuøti⁄
));

186 
	`as£π_∑øm
(
	`IS_FMC_CLK_DIV
(
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_CLKDivisi⁄
));

187 
	`as£π_∑øm
(
	`IS_FMC_DATA_LATENCY
(
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_D©aL©ícy
));

188 
	`as£π_∑øm
(
	`IS_FMC_ACCESS_MODE
(
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_Ac˚ssMode
));

191 
FMC_B™k1
->
BTCR
[
FMC_NORSRAMInôSåu˘
->
FMC_B™k
] =

192 (
uöt32_t
)
FMC_NORSRAMInôSåu˘
->
FMC_D©aAddªssMux
 |

193 
FMC_NORSRAMInôSåu˘
->
FMC_Mem‹yTy≥
 |

194 
FMC_NORSRAMInôSåu˘
->
FMC_Mem‹yD©aWidth
 |

195 
FMC_NORSRAMInôSåu˘
->
FMC_Bur°Ac˚ssMode
 |

196 
FMC_NORSRAMInôSåu˘
->
FMC_WaôSig«lPﬁ¨ôy
 |

197 
FMC_NORSRAMInôSåu˘
->
FMC_WøpMode
 |

198 
FMC_NORSRAMInôSåu˘
->
FMC_WaôSig«lA˘ive
 |

199 
FMC_NORSRAMInôSåu˘
->
FMC_WrôeO≥øti⁄
 |

200 
FMC_NORSRAMInôSåu˘
->
FMC_WaôSig«l
 |

201 
FMC_NORSRAMInôSåu˘
->
FMC_ExãndedMode
 |

202 
FMC_NORSRAMInôSåu˘
->
FMC_Asynchr⁄ousWaô
 |

203 
FMC_NORSRAMInôSåu˘
->
FMC_WrôeBur°
 |

204 
FMC_NORSRAMInôSåu˘
->
FMC_C⁄töousClock
;

207 if(
FMC_NORSRAMInôSåu˘
->
FMC_Mem‹yTy≥
 =
FMC_Mem‹yTy≥_NOR
)

209 
FMC_B™k1
->
BTCR
[
FMC_NORSRAMInôSåu˘
->
FMC_B™k
] |(
uöt32_t
)
BCR_FACCEN_SET
;

213 if((
FMC_NORSRAMInôSåu˘
->
FMC_C⁄töousClock
 =
FMC_CClock_SyncAsync
Ë&& (FMC_NORSRAMInôSåu˘->
FMC_B™k
 !
FMC_B™k1_NORSRAM1
))

215 
tm¥
 = (
uöt32_t
)((
FMC_B™k1
->
BTCR
[
FMC_B™k1_NORSRAM1
+1]) & ~(((uint32_t)0x0F) << 20));

217 
FMC_B™k1
->
BTCR
[
FMC_B™k1_NORSRAM1
] |
FMC_NORSRAMInôSåu˘
->
FMC_C⁄töousClock
;

218 
FMC_B™k1
->
BTCR
[
FMC_B™k1_NORSRAM1
] |
FMC_Bur°Ac˚ssMode_E«bÀ
;

219 
FMC_B™k1
->
BTCR
[
FMC_B™k1_NORSRAM1
+1] = (
uöt32_t
)(
tm¥
 | (((
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_CLKDivisi⁄
)-1) << 20));

223 
FMC_B™k1
->
BTCR
[
FMC_NORSRAMInôSåu˘
->
FMC_B™k
+1] =

224 (
uöt32_t
)
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_AddªssSëupTime
 |

225 (
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_AddªssHﬁdTime
 << 4) |

226 (
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_D©aSëupTime
 << 8) |

227 (
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_BusTu∫AroundDuøti⁄
 << 16) |

228 ((
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_CLKDivisi⁄
) << 20) |

229 ((
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_D©aL©ícy
) << 24) |

230 
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_Ac˚ssMode
;

233 if(
FMC_NORSRAMInôSåu˘
->
FMC_ExãndedMode
 =
FMC_ExãndedMode_E«bÀ
)

235 
	`as£π_∑øm
(
	`IS_FMC_ADDRESS_SETUP_TIME
(
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_AddªssSëupTime
));

236 
	`as£π_∑øm
(
	`IS_FMC_ADDRESS_HOLD_TIME
(
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_AddªssHﬁdTime
));

237 
	`as£π_∑øm
(
	`IS_FMC_DATASETUP_TIME
(
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_D©aSëupTime
));

238 
	`as£π_∑øm
(
	`IS_FMC_CLK_DIV
(
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_CLKDivisi⁄
));

239 
	`as£π_∑øm
(
	`IS_FMC_DATA_LATENCY
(
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_D©aL©ícy
));

240 
	`as£π_∑øm
(
	`IS_FMC_ACCESS_MODE
(
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_Ac˚ssMode
));

242 
FMC_B™k1E
->
BWTR
[
FMC_NORSRAMInôSåu˘
->
FMC_B™k
] =

243 (
uöt32_t
)
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_AddªssSëupTime
 |

244 (
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_AddªssHﬁdTime
 << 4 )|

245 (
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_D©aSëupTime
 << 8) |

246 ((
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_CLKDivisi⁄
) << 20) |

247 ((
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_D©aL©ícy
) << 24) |

248 
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_Ac˚ssMode
;

252 
FMC_B™k1E
->
BWTR
[
FMC_NORSRAMInôSåu˘
->
FMC_B™k
] = 0x0FFFFFFF;

255 
	}
}

263 
	$FMC_NORSRAMSåu˘Inô
(
FMC_NORSRAMInôTy≥Def
* 
FMC_NORSRAMInôSåu˘
)

266 
FMC_NORSRAMInôSåu˘
->
FMC_B™k
 = 
FMC_B™k1_NORSRAM1
;

267 
FMC_NORSRAMInôSåu˘
->
FMC_D©aAddªssMux
 = 
FMC_D©aAddªssMux_E«bÀ
;

268 
FMC_NORSRAMInôSåu˘
->
FMC_Mem‹yTy≥
 = 
FMC_Mem‹yTy≥_SRAM
;

269 
FMC_NORSRAMInôSåu˘
->
FMC_Mem‹yD©aWidth
 = 
FMC_NORSRAM_Mem‹yD©aWidth_16b
;

270 
FMC_NORSRAMInôSåu˘
->
FMC_Bur°Ac˚ssMode
 = 
FMC_Bur°Ac˚ssMode_DißbÀ
;

271 
FMC_NORSRAMInôSåu˘
->
FMC_Asynchr⁄ousWaô
 = 
FMC_Asynchr⁄ousWaô_DißbÀ
;

272 
FMC_NORSRAMInôSåu˘
->
FMC_WaôSig«lPﬁ¨ôy
 = 
FMC_WaôSig«lPﬁ¨ôy_Low
;

273 
FMC_NORSRAMInôSåu˘
->
FMC_WøpMode
 = 
FMC_WøpMode_DißbÀ
;

274 
FMC_NORSRAMInôSåu˘
->
FMC_WaôSig«lA˘ive
 = 
FMC_WaôSig«lA˘ive_Bef‹eWaôSèã
;

275 
FMC_NORSRAMInôSåu˘
->
FMC_WrôeO≥øti⁄
 = 
FMC_WrôeO≥øti⁄_E«bÀ
;

276 
FMC_NORSRAMInôSåu˘
->
FMC_WaôSig«l
 = 
FMC_WaôSig«l_E«bÀ
;

277 
FMC_NORSRAMInôSåu˘
->
FMC_ExãndedMode
 = 
FMC_ExãndedMode_DißbÀ
;

278 
FMC_NORSRAMInôSåu˘
->
FMC_WrôeBur°
 = 
FMC_WrôeBur°_DißbÀ
;

279 
FMC_NORSRAMInôSåu˘
->
FMC_C⁄töousClock
 = 
FMC_CClock_SyncO∆y
;

281 
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
 = (
FMC_NORSRAMTimögInôTy≥Def
*)&
FMC_DeÁu…TimögSåu˘
;

282 
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
 = (
FMC_NORSRAMTimögInôTy≥Def
*)&
FMC_DeÁu…TimögSåu˘
;

283 
	}
}

296 
	$FMC_NORSRAMCmd
(
uöt32_t
 
FMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

298 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_BANK
(
FMC_B™k
));

299 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

301 i‡(
NewSèã
 !
DISABLE
)

304 
FMC_B™k1
->
BTCR
[
FMC_B™k
] |
BCR_MBKEN_SET
;

309 
FMC_B™k1
->
BTCR
[
FMC_B™k
] &
BCR_MBKEN_RESET
;

311 
	}
}

369 
	$FMC_NANDDeInô
(
uöt32_t
 
FMC_B™k
)

372 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
FMC_B™k
));

374 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

377 
FMC_B™k2
->
PCR2
 = 0x00000018;

378 
FMC_B™k2
->
SR2
 = 0x00000040;

379 
FMC_B™k2
->
PMEM2
 = 0xFCFCFCFC;

380 
FMC_B™k2
->
PATT2
 = 0xFCFCFCFC;

386 
FMC_B™k3
->
PCR3
 = 0x00000018;

387 
FMC_B™k3
->
SR3
 = 0x00000040;

388 
FMC_B™k3
->
PMEM3
 = 0xFCFCFCFC;

389 
FMC_B™k3
->
PATT3
 = 0xFCFCFCFC;

391 
	}
}

400 
	$FMC_NANDInô
(
FMC_NANDInôTy≥Def
* 
FMC_NANDInôSåu˘
)

402 
uöt32_t
 
tmµ¸
 = 0x00000000, 
tmµmem
 = 0x00000000, 
tmµ©t
 = 0x00000000;

405 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
FMC_NANDInôSåu˘
->
FMC_B™k
));

406 
	`as£π_∑øm
(
	`IS_FMC_WAIT_FEATURE
(
FMC_NANDInôSåu˘
->
FMC_Waô„©uª
));

407 
	`as£π_∑øm
(
	`IS_FMC_NAND_MEMORY_WIDTH
(
FMC_NANDInôSåu˘
->
FMC_Mem‹yD©aWidth
));

408 
	`as£π_∑øm
(
	`IS_FMC_ECC_STATE
(
FMC_NANDInôSåu˘
->
FMC_ECC
));

409 
	`as£π_∑øm
(
	`IS_FMC_ECCPAGE_SIZE
(
FMC_NANDInôSåu˘
->
FMC_ECCPageSize
));

410 
	`as£π_∑øm
(
	`IS_FMC_TCLR_TIME
(
FMC_NANDInôSåu˘
->
FMC_TCLRSëupTime
));

411 
	`as£π_∑øm
(
	`IS_FMC_TAR_TIME
(
FMC_NANDInôSåu˘
->
FMC_TARSëupTime
));

412 
	`as£π_∑øm
(
	`IS_FMC_SETUP_TIME
(
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_SëupTime
));

413 
	`as£π_∑øm
(
	`IS_FMC_WAIT_TIME
(
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_WaôSëupTime
));

414 
	`as£π_∑øm
(
	`IS_FMC_HOLD_TIME
(
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
));

415 
	`as£π_∑øm
(
	`IS_FMC_HIZ_TIME
(
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HiZSëupTime
));

416 
	`as£π_∑øm
(
	`IS_FMC_SETUP_TIME
(
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_SëupTime
));

417 
	`as£π_∑øm
(
	`IS_FMC_WAIT_TIME
(
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_WaôSëupTime
));

418 
	`as£π_∑øm
(
	`IS_FMC_HOLD_TIME
(
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
));

419 
	`as£π_∑øm
(
	`IS_FMC_HIZ_TIME
(
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HiZSëupTime
));

422 
tmµ¸
 = (
uöt32_t
)
FMC_NANDInôSåu˘
->
FMC_Waô„©uª
 |

423 
PCR_MEMORYTYPE_NAND
 |

424 
FMC_NANDInôSåu˘
->
FMC_Mem‹yD©aWidth
 |

425 
FMC_NANDInôSåu˘
->
FMC_ECC
 |

426 
FMC_NANDInôSåu˘
->
FMC_ECCPageSize
 |

427 (
FMC_NANDInôSåu˘
->
FMC_TCLRSëupTime
 << 9 )|

428 (
FMC_NANDInôSåu˘
->
FMC_TARSëupTime
 << 13);

431 
tmµmem
 = (
uöt32_t
)
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_SëupTime
 |

432 (
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_WaôSëupTime
 << 8) |

433 (
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 << 16)|

434 (
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HiZSëupTime
 << 24);

437 
tmµ©t
 = (
uöt32_t
)
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_SëupTime
 |

438 (
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_WaôSëupTime
 << 8) |

439 (
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 << 16)|

440 (
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HiZSëupTime
 << 24);

442 if(
FMC_NANDInôSåu˘
->
FMC_B™k
 =
FMC_B™k2_NAND
)

445 
FMC_B™k2
->
PCR2
 = 
tmµ¸
;

446 
FMC_B™k2
->
PMEM2
 = 
tmµmem
;

447 
FMC_B™k2
->
PATT2
 = 
tmµ©t
;

452 
FMC_B™k3
->
PCR3
 = 
tmµ¸
;

453 
FMC_B™k3
->
PMEM3
 = 
tmµmem
;

454 
FMC_B™k3
->
PATT3
 = 
tmµ©t
;

456 
	}
}

465 
	$FMC_NANDSåu˘Inô
(
FMC_NANDInôTy≥Def
* 
FMC_NANDInôSåu˘
)

468 
FMC_NANDInôSåu˘
->
FMC_B™k
 = 
FMC_B™k2_NAND
;

469 
FMC_NANDInôSåu˘
->
FMC_Waô„©uª
 = 
FMC_Waô„©uª_DißbÀ
;

470 
FMC_NANDInôSåu˘
->
FMC_Mem‹yD©aWidth
 = 
FMC_NAND_Mem‹yD©aWidth_16b
;

471 
FMC_NANDInôSåu˘
->
FMC_ECC
 = 
FMC_ECC_DißbÀ
;

472 
FMC_NANDInôSåu˘
->
FMC_ECCPageSize
 = 
FMC_ECCPageSize_256Byãs
;

473 
FMC_NANDInôSåu˘
->
FMC_TCLRSëupTime
 = 0x0;

474 
FMC_NANDInôSåu˘
->
FMC_TARSëupTime
 = 0x0;

475 
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_SëupTime
 = 252;

476 
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_WaôSëupTime
 = 252;

477 
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 = 252;

478 
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HiZSëupTime
 = 252;

479 
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_SëupTime
 = 252;

480 
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_WaôSëupTime
 = 252;

481 
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 = 252;

482 
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HiZSëupTime
 = 252;

483 
	}
}

494 
	$FMC_NANDCmd
(
uöt32_t
 
FMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

496 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
FMC_B™k
));

497 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

499 i‡(
NewSèã
 !
DISABLE
)

502 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

504 
FMC_B™k2
->
PCR2
 |
PCR_PBKEN_SET
;

508 
FMC_B™k3
->
PCR3
 |
PCR_PBKEN_SET
;

514 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

516 
FMC_B™k2
->
PCR2
 &
PCR_PBKEN_RESET
;

520 
FMC_B™k3
->
PCR3
 &
PCR_PBKEN_RESET
;

523 
	}
}

534 
	$FMC_NANDECCCmd
(
uöt32_t
 
FMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

536 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
FMC_B™k
));

537 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

539 i‡(
NewSèã
 !
DISABLE
)

542 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

544 
FMC_B™k2
->
PCR2
 |
PCR_ECCEN_SET
;

548 
FMC_B™k3
->
PCR3
 |
PCR_ECCEN_SET
;

554 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

556 
FMC_B™k2
->
PCR2
 &
PCR_ECCEN_RESET
;

560 
FMC_B™k3
->
PCR3
 &
PCR_ECCEN_RESET
;

563 
	}
}

573 
uöt32_t
 
	$FMC_GëECC
(
uöt32_t
 
FMC_B™k
)

575 
uöt32_t
 
eccvÆ
 = 0x00000000;

577 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

580 
eccvÆ
 = 
FMC_B™k2
->
ECCR2
;

585 
eccvÆ
 = 
FMC_B™k3
->
ECCR3
;

588 (
eccvÆ
);

589 
	}
}

637 
	$FMC_PCCARDDeInô
()

640 
FMC_B™k4
->
PCR4
 = 0x00000018;

641 
FMC_B™k4
->
SR4
 = 0x00000000;

642 
FMC_B™k4
->
PMEM4
 = 0xFCFCFCFC;

643 
FMC_B™k4
->
PATT4
 = 0xFCFCFCFC;

644 
FMC_B™k4
->
PIO4
 = 0xFCFCFCFC;

645 
	}
}

654 
	$FMC_PCCARDInô
(
FMC_PCCARDInôTy≥Def
* 
FMC_PCCARDInôSåu˘
)

657 
	`as£π_∑øm
(
	`IS_FMC_WAIT_FEATURE
(
FMC_PCCARDInôSåu˘
->
FMC_Waô„©uª
));

658 
	`as£π_∑øm
(
	`IS_FMC_TCLR_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_TCLRSëupTime
));

659 
	`as£π_∑øm
(
	`IS_FMC_TAR_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_TARSëupTime
));

661 
	`as£π_∑øm
(
	`IS_FMC_SETUP_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_SëupTime
));

662 
	`as£π_∑øm
(
	`IS_FMC_WAIT_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_WaôSëupTime
));

663 
	`as£π_∑øm
(
	`IS_FMC_HOLD_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
));

664 
	`as£π_∑øm
(
	`IS_FMC_HIZ_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HiZSëupTime
));

666 
	`as£π_∑øm
(
	`IS_FMC_SETUP_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_SëupTime
));

667 
	`as£π_∑øm
(
	`IS_FMC_WAIT_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_WaôSëupTime
));

668 
	`as£π_∑øm
(
	`IS_FMC_HOLD_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
));

669 
	`as£π_∑øm
(
	`IS_FMC_HIZ_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HiZSëupTime
));

670 
	`as£π_∑øm
(
	`IS_FMC_SETUP_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_SëupTime
));

671 
	`as£π_∑øm
(
	`IS_FMC_WAIT_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_WaôSëupTime
));

672 
	`as£π_∑øm
(
	`IS_FMC_HOLD_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
));

673 
	`as£π_∑øm
(
	`IS_FMC_HIZ_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_HiZSëupTime
));

676 
FMC_B™k4
->
PCR4
 = (
uöt32_t
)
FMC_PCCARDInôSåu˘
->
FMC_Waô„©uª
 |

677 
FMC_NAND_Mem‹yD©aWidth_16b
 |

678 (
FMC_PCCARDInôSåu˘
->
FMC_TCLRSëupTime
 << 9) |

679 (
FMC_PCCARDInôSåu˘
->
FMC_TARSëupTime
 << 13);

682 
FMC_B™k4
->
PMEM4
 = (
uöt32_t
)
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_SëupTime
 |

683 (
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_WaôSëupTime
 << 8) |

684 (
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 << 16)|

685 (
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HiZSëupTime
 << 24);

688 
FMC_B™k4
->
PATT4
 = (
uöt32_t
)
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_SëupTime
 |

689 (
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_WaôSëupTime
 << 8) |

690 (
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 << 16)|

691 (
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HiZSëupTime
 << 24);

694 
FMC_B™k4
->
PIO4
 = (
uöt32_t
)
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_SëupTime
 |

695 (
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_WaôSëupTime
 << 8) |

696 (
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 << 16)|

697 (
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_HiZSëupTime
 << 24);

698 
	}
}

706 
	$FMC_PCCARDSåu˘Inô
(
FMC_PCCARDInôTy≥Def
* 
FMC_PCCARDInôSåu˘
)

709 
FMC_PCCARDInôSåu˘
->
FMC_Waô„©uª
 = 
FMC_Waô„©uª_DißbÀ
;

710 
FMC_PCCARDInôSåu˘
->
FMC_TCLRSëupTime
 = 0;

711 
FMC_PCCARDInôSåu˘
->
FMC_TARSëupTime
 = 0;

712 
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_SëupTime
 = 252;

713 
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_WaôSëupTime
 = 252;

714 
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 = 252;

715 
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HiZSëupTime
 = 252;

716 
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_SëupTime
 = 252;

717 
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_WaôSëupTime
 = 252;

718 
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 = 252;

719 
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HiZSëupTime
 = 252;

720 
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_SëupTime
 = 252;

721 
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_WaôSëupTime
 = 252;

722 
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 = 252;

723 
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_HiZSëupTime
 = 252;

724 
	}
}

732 
	$FMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

734 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

736 i‡(
NewSèã
 !
DISABLE
)

739 
FMC_B™k4
->
PCR4
 |
PCR_PBKEN_SET
;

744 
FMC_B™k4
->
PCR4
 &
PCR_PBKEN_RESET
;

746 
	}
}

804 
	$FMC_SDRAMDeInô
(
uöt32_t
 
FMC_B™k
)

807 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_BANK
(
FMC_B™k
));

809 
FMC_B™k5_6
->
SDCR
[
FMC_B™k
] = 0x000002D0;

810 
FMC_B™k5_6
->
SDTR
[
FMC_B™k
] = 0x0FFFFFFF;

811 
FMC_B™k5_6
->
SDCMR
 = 0x00000000;

812 
FMC_B™k5_6
->
SDRTR
 = 0x00000000;

813 
FMC_B™k5_6
->
SDSR
 = 0x00000000;

814 
	}
}

824 
	$FMC_SDRAMInô
(
FMC_SDRAMInôTy≥Def
* 
FMC_SDRAMInôSåu˘
)

827 
uöt32_t
 
tm¥1
 = 0;

828 
uöt32_t
 
tm¥2
 = 0;

829 
uöt32_t
 
tm¥3
 = 0;

830 
uöt32_t
 
tm¥4
 = 0;

835 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_BANK
(
FMC_SDRAMInôSåu˘
->
FMC_B™k
));

836 
	`as£π_∑øm
(
	`IS_FMC_COLUMNBITS_NUMBER
(
FMC_SDRAMInôSåu˘
->
FMC_CﬁumnBôsNumbî
));

837 
	`as£π_∑øm
(
	`IS_FMC_ROWBITS_NUMBER
(
FMC_SDRAMInôSåu˘
->
FMC_RowBôsNumbî
));

838 
	`as£π_∑øm
(
	`IS_FMC_SDMEMORY_WIDTH
(
FMC_SDRAMInôSåu˘
->
FMC_SDMem‹yD©aWidth
));

839 
	`as£π_∑øm
(
	`IS_FMC_INTERNALBANK_NUMBER
(
FMC_SDRAMInôSåu˘
->
FMC_I¡î«lB™kNumbî
));

840 
	`as£π_∑øm
(
	`IS_FMC_CAS_LATENCY
(
FMC_SDRAMInôSåu˘
->
FMC_CASL©ícy
));

841 
	`as£π_∑øm
(
	`IS_FMC_WRITE_PROTECTION
(
FMC_SDRAMInôSåu˘
->
FMC_WrôePrŸe˘i⁄
));

842 
	`as£π_∑øm
(
	`IS_FMC_SDCLOCK_PERIOD
(
FMC_SDRAMInôSåu˘
->
FMC_SDClockPîiod
));

843 
	`as£π_∑øm
(
	`IS_FMC_READ_BURST
(
FMC_SDRAMInôSåu˘
->
FMC_RódBur°
));

844 
	`as£π_∑øm
(
	`IS_FMC_READPIPE_DELAY
(
FMC_SDRAMInôSåu˘
->
FMC_RódPùeDñay
));

847 
	`as£π_∑øm
(
	`IS_FMC_LOADTOACTIVE_DELAY
(
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_LﬂdToA˘iveDñay
));

848 
	`as£π_∑øm
(
	`IS_FMC_EXITSELFREFRESH_DELAY
(
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_ExôSñfRe‰eshDñay
));

849 
	`as£π_∑øm
(
	`IS_FMC_SELFREFRESH_TIME
(
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_SñfRe‰eshTime
));

850 
	`as£π_∑øm
(
	`IS_FMC_ROWCYCLE_DELAY
(
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RowCy˛eDñay
));

851 
	`as£π_∑øm
(
	`IS_FMC_WRITE_RECOVERY_TIME
(
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_WrôeRecovîyTime
));

852 
	`as£π_∑øm
(
	`IS_FMC_RP_DELAY
(
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RPDñay
));

853 
	`as£π_∑øm
(
	`IS_FMC_RCD_DELAY
(
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RCDDñay
));

856 
tm¥1
 = (
uöt32_t
)
FMC_SDRAMInôSåu˘
->
FMC_CﬁumnBôsNumbî
 |

857 
FMC_SDRAMInôSåu˘
->
FMC_RowBôsNumbî
 |

858 
FMC_SDRAMInôSåu˘
->
FMC_SDMem‹yD©aWidth
 |

859 
FMC_SDRAMInôSåu˘
->
FMC_I¡î«lB™kNumbî
 |

860 
FMC_SDRAMInôSåu˘
->
FMC_CASL©ícy
 |

861 
FMC_SDRAMInôSåu˘
->
FMC_WrôePrŸe˘i⁄
 |

862 
FMC_SDRAMInôSåu˘
->
FMC_SDClockPîiod
 |

863 
FMC_SDRAMInôSåu˘
->
FMC_RódBur°
 |

864 
FMC_SDRAMInôSåu˘
->
FMC_RódPùeDñay
;

866 if(
FMC_SDRAMInôSåu˘
->
FMC_B™k
 =
FMC_B™k1_SDRAM
 )

868 
FMC_B™k5_6
->
SDCR
[
FMC_SDRAMInôSåu˘
->
FMC_B™k
] = 
tm¥1
;

872 
tm¥3
 = (
uöt32_t
)
FMC_SDRAMInôSåu˘
->
FMC_SDClockPîiod
 |

873 
FMC_SDRAMInôSåu˘
->
FMC_RódBur°
 |

874 
FMC_SDRAMInôSåu˘
->
FMC_RódPùeDñay
;

876 
FMC_B™k5_6
->
SDCR
[
FMC_B™k1_SDRAM
] = 
tm¥3
;

877 
FMC_B™k5_6
->
SDCR
[
FMC_SDRAMInôSåu˘
->
FMC_B™k
] = 
tm¥1
;

880 if(
FMC_SDRAMInôSåu˘
->
FMC_B™k
 =
FMC_B™k1_SDRAM
 )

882 
tm¥2
 = (
uöt32_t
)((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_LﬂdToA˘iveDñay
)-1) |

883 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_ExôSñfRe‰eshDñay
)-1) << 4) |

884 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_SñfRe‰eshTime
)-1) << 8) |

885 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RowCy˛eDñay
)-1) << 12) |

886 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_WrôeRecovîyTime
)-1) << 16) |

887 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RPDñay
)-1) << 20) |

888 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RCDDñay
)-1) << 24);

890 
FMC_B™k5_6
->
SDTR
[
FMC_SDRAMInôSåu˘
->
FMC_B™k
] = 
tm¥2
;

894 
tm¥2
 = (
uöt32_t
)((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_LﬂdToA˘iveDñay
)-1) |

895 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_ExôSñfRe‰eshDñay
)-1) << 4) |

896 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_SñfRe‰eshTime
)-1) << 8) |

897 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_WrôeRecovîyTime
)-1) << 16);

899 
tm¥4
 = (
uöt32_t
)(((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RowCy˛eDñay
)-1) << 12) |

900 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RPDñay
)-1) << 20);

902 
FMC_B™k5_6
->
SDTR
[
FMC_B™k1_SDRAM
] = 
tm¥4
;

903 
FMC_B™k5_6
->
SDTR
[
FMC_SDRAMInôSåu˘
->
FMC_B™k
] = 
tm¥2
;

906 
	}
}

914 
	$FMC_SDRAMSåu˘Inô
(
FMC_SDRAMInôTy≥Def
* 
FMC_SDRAMInôSåu˘
)

917 
FMC_SDRAMInôSåu˘
->
FMC_B™k
 = 
FMC_B™k1_SDRAM
;

918 
FMC_SDRAMInôSåu˘
->
FMC_CﬁumnBôsNumbî
 = 
FMC_CﬁumnBôs_Numbî_8b
;

919 
FMC_SDRAMInôSåu˘
->
FMC_RowBôsNumbî
 = 
FMC_RowBôs_Numbî_11b
;

920 
FMC_SDRAMInôSåu˘
->
FMC_SDMem‹yD©aWidth
 = 
FMC_SDMem‹y_Width_16b
;

921 
FMC_SDRAMInôSåu˘
->
FMC_I¡î«lB™kNumbî
 = 
FMC_I¡î«lB™k_Numbî_4
;

922 
FMC_SDRAMInôSåu˘
->
FMC_CASL©ícy
 = 
FMC_CAS_L©ícy_1
;

923 
FMC_SDRAMInôSåu˘
->
FMC_WrôePrŸe˘i⁄
 = 
FMC_Wrôe_PrŸe˘i⁄_E«bÀ
;

924 
FMC_SDRAMInôSåu˘
->
FMC_SDClockPîiod
 = 
FMC_SDClock_DißbÀ
;

925 
FMC_SDRAMInôSåu˘
->
FMC_RódBur°
 = 
FMC_Ród_Bur°_DißbÀ
;

926 
FMC_SDRAMInôSåu˘
->
FMC_RódPùeDñay
 = 
FMC_RódPùe_Dñay_0
;

928 
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_LﬂdToA˘iveDñay
 = 16;

929 
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_ExôSñfRe‰eshDñay
 = 16;

930 
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_SñfRe‰eshTime
 = 16;

931 
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RowCy˛eDñay
 = 16;

932 
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_WrôeRecovîyTime
 = 16;

933 
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RPDñay
 = 16;

934 
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RCDDñay
 = 16;

936 
	}
}

944 
	$FMC_SDRAMCmdC⁄fig
(
FMC_SDRAMComm™dTy≥Def
* 
FMC_SDRAMComm™dSåu˘
)

946 
uöt32_t
 
tm¥
 = 0x0;

949 
	`as£π_∑øm
(
	`IS_FMC_COMMAND_MODE
(
FMC_SDRAMComm™dSåu˘
->
FMC_Comm™dMode
));

950 
	`as£π_∑øm
(
	`IS_FMC_COMMAND_TARGET
(
FMC_SDRAMComm™dSåu˘
->
FMC_Comm™dT¨gë
));

951 
	`as£π_∑øm
(
	`IS_FMC_AUTOREFRESH_NUMBER
(
FMC_SDRAMComm™dSåu˘
->
FMC_AutoRe‰eshNumbî
));

952 
	`as£π_∑øm
(
	`IS_FMC_MODE_REGISTER
(
FMC_SDRAMComm™dSåu˘
->
FMC_ModeRegi°îDeföôi⁄
));

954 
tm¥
 = (
uöt32_t
)(
FMC_SDRAMComm™dSåu˘
->
FMC_Comm™dMode
 |

955 
FMC_SDRAMComm™dSåu˘
->
FMC_Comm™dT¨gë
 |

956 (((
FMC_SDRAMComm™dSåu˘
->
FMC_AutoRe‰eshNumbî
)-1)<<5) |

957 ((
FMC_SDRAMComm™dSåu˘
->
FMC_ModeRegi°îDeföôi⁄
)<<9));

959 
FMC_B™k5_6
->
SDCMR
 = 
tm¥
;

961 
	}
}

970 
uöt32_t
 
	$FMC_GëModeSètus
(
uöt32_t
 
SDRAM_B™k
)

972 
uöt32_t
 
tm¥eg
 = 0;

975 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_BANK
(
SDRAM_B™k
));

978 if(
SDRAM_B™k
 =
FMC_B™k1_SDRAM
)

980 
tm¥eg
 = (
uöt32_t
)(
FMC_B™k5_6
->
SDSR
 & 
FMC_SDSR_MODES1
);

984 
tm¥eg
 = ((
uöt32_t
)(
FMC_B™k5_6
->
SDSR
 & 
FMC_SDSR_MODES2
) >> 2);

988  
tm¥eg
;

989 
	}
}

996 
	$FMC_SëRe‰eshCou¡
(
uöt32_t
 
FMC_Cou¡
)

999 
	`as£π_∑øm
(
	`IS_FMC_REFRESH_COUNT
(
FMC_Cou¡
));

1001 
FMC_B™k5_6
->
SDRTR
 |(
FMC_Cou¡
<<1);

1003 
	}
}

1010 
	$FMC_SëAutoRe‰esh_Numbî
(
uöt32_t
 
FMC_Numbî
)

1013 
	`as£π_∑øm
(
	`IS_FMC_AUTOREFRESH_NUMBER
(
FMC_Numbî
));

1015 
FMC_B™k5_6
->
SDCMR
 |(
FMC_Numbî
 << 5);

1016 
	}
}

1026 
	$FMC_SDRAMWrôePrŸe˘i⁄C⁄fig
(
uöt32_t
 
SDRAM_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1029 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1030 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_BANK
(
SDRAM_B™k
));

1032 i‡(
NewSèã
 !
DISABLE
)

1034 
FMC_B™k5_6
->
SDCR
[
SDRAM_B™k
] |
FMC_Wrôe_PrŸe˘i⁄_E«bÀ
;

1038 
FMC_B™k5_6
->
SDCR
[
SDRAM_B™k
] &
SDCR_WrôePrŸe˘i⁄_RESET
;

1041 
	}
}

1078 
	$FMC_ITC⁄fig
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1080 
	`as£π_∑øm
(
	`IS_FMC_IT_BANK
(
FMC_B™k
));

1081 
	`as£π_∑øm
(
	`IS_FMC_IT
(
FMC_IT
));

1082 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1084 i‡(
NewSèã
 !
DISABLE
)

1087 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

1089 
FMC_B™k2
->
SR2
 |
FMC_IT
;

1092 i‡(
FMC_B™k
 =
FMC_B™k3_NAND
)

1094 
FMC_B™k3
->
SR3
 |
FMC_IT
;

1097 i‡(
FMC_B™k
 =
FMC_B™k4_PCCARD
)

1099 
FMC_B™k4
->
SR4
 |
FMC_IT
;

1105 
FMC_B™k5_6
->
SDRTR
 |
FMC_IT
;

1111 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

1114 
FMC_B™k2
->
SR2
 &(
uöt32_t
)~
FMC_IT
;

1117 i‡(
FMC_B™k
 =
FMC_B™k3_NAND
)

1119 
FMC_B™k3
->
SR3
 &(
uöt32_t
)~
FMC_IT
;

1122 if(
FMC_B™k
 =
FMC_B™k4_PCCARD
)

1124 
FMC_B™k4
->
SR4
 &(
uöt32_t
)~
FMC_IT
;

1130 
FMC_B™k5_6
->
SDRTR
 &(
uöt32_t
)~
FMC_IT
;

1133 
	}
}

1155 
FœgSètus
 
	$FMC_GëFœgSètus
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_FLAG
)

1157 
FœgSètus
 
bô°©us
 = 
RESET
;

1158 
uöt32_t
 
tmp§
 = 0x00000000;

1161 
	`as£π_∑øm
(
	`IS_FMC_GETFLAG_BANK
(
FMC_B™k
));

1162 
	`as£π_∑øm
(
	`IS_FMC_GET_FLAG
(
FMC_FLAG
));

1164 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

1166 
tmp§
 = 
FMC_B™k2
->
SR2
;

1168 if(
FMC_B™k
 =
FMC_B™k3_NAND
)

1170 
tmp§
 = 
FMC_B™k3
->
SR3
;

1172 if(
FMC_B™k
 =
FMC_B™k4_PCCARD
)

1174 
tmp§
 = 
FMC_B™k4
->
SR4
;

1178 
tmp§
 = 
FMC_B™k5_6
->
SDSR
;

1182 i‡((
tmp§
 & 
FMC_FLAG
) != FMC_FLAG )

1184 
bô°©us
 = 
RESET
;

1188 
bô°©us
 = 
SET
;

1191  
bô°©us
;

1192 
	}
}

1211 
	$FMC_CÀ¨Fœg
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_FLAG
)

1214 
	`as£π_∑øm
(
	`IS_FMC_GETFLAG_BANK
(
FMC_B™k
));

1215 
	`as£π_∑øm
(
	`IS_FMC_CLEAR_FLAG
(
FMC_FLAG
)) ;

1217 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

1219 
FMC_B™k2
->
SR2
 &(~
FMC_FLAG
);

1221 if(
FMC_B™k
 =
FMC_B™k3_NAND
)

1223 
FMC_B™k3
->
SR3
 &(~
FMC_FLAG
);

1225 if(
FMC_B™k
 =
FMC_B™k4_PCCARD
)

1227 
FMC_B™k4
->
SR4
 &(~
FMC_FLAG
);

1232 
FMC_B™k5_6
->
SDRTR
 &(~
FMC_FLAG
);

1235 
	}
}

1254 
ITSètus
 
	$FMC_GëITSètus
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_IT
)

1256 
ITSètus
 
bô°©us
 = 
RESET
;

1257 
uöt32_t
 
tmp§
 = 0x0;

1258 
uöt32_t
 
tmp§2
 = 0x0;

1259 
uöt32_t
 
ô°©us
 = 0x0;

1260 
uöt32_t
 
ôíabÀ
 = 0x0;

1263 
	`as£π_∑øm
(
	`IS_FMC_IT_BANK
(
FMC_B™k
));

1264 
	`as£π_∑øm
(
	`IS_FMC_GET_IT
(
FMC_IT
));

1266 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

1268 
tmp§
 = 
FMC_B™k2
->
SR2
;

1270 if(
FMC_B™k
 =
FMC_B™k3_NAND
)

1272 
tmp§
 = 
FMC_B™k3
->
SR3
;

1274 if(
FMC_B™k
 =
FMC_B™k4_PCCARD
)

1276 
tmp§
 = 
FMC_B™k4
->
SR4
;

1281 
tmp§
 = 
FMC_B™k5_6
->
SDRTR
;

1282 
tmp§2
 = 
FMC_B™k5_6
->
SDSR
;

1286 
ôíabÀ
 = 
tmp§
 & 
FMC_IT
;

1289 if((
FMC_B™k
 =
FMC_B™k1_SDRAM
Ë|| (FMC_B™k =
FMC_B™k2_SDRAM
))

1291 
ô°©us
 = 
tmp§2
 & 
FMC_SDSR_RE
;

1295 
ô°©us
 = 
tmp§
 & (
FMC_IT
 >> 3);

1298 i‡((
ô°©us
 !(
uöt32_t
)
RESET
Ë&& (
ôíabÀ
 != (uint32_t)RESET))

1300 
bô°©us
 = 
SET
;

1304 
bô°©us
 = 
RESET
;

1306  
bô°©us
;

1307 
	}
}

1326 
	$FMC_CÀ¨ITPídögBô
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_IT
)

1329 
	`as£π_∑øm
(
	`IS_FMC_IT_BANK
(
FMC_B™k
));

1330 
	`as£π_∑øm
(
	`IS_FMC_IT
(
FMC_IT
));

1332 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

1334 
FMC_B™k2
->
SR2
 &~(
FMC_IT
 >> 3);

1336 if(
FMC_B™k
 =
FMC_B™k3_NAND
)

1338 
FMC_B™k3
->
SR3
 &~(
FMC_IT
 >> 3);

1340 if(
FMC_B™k
 =
FMC_B™k4_PCCARD
)

1342 
FMC_B™k4
->
SR4
 &~(
FMC_IT
 >> 3);

1347 
FMC_B™k5_6
->
SDRTR
 |
FMC_SDRTR_CRE
;

1349 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_fsmc.c

35 
	~"°m32f4xx_fsmc.h
"

36 
	~"°m32f4xx_rcc.h
"

48 c⁄° 
FSMC_NORSRAMTimögInôTy≥Def
 
	gFSMC_DeÁu…TimögSåu˘
 = {0x0F,

54 
FSMC_Ac˚ssMode_A


60 
	#BCR_MBKEN_SET
 ((
uöt32_t
)0x00000001)

	)

61 
	#BCR_MBKEN_RESET
 ((
uöt32_t
)0x000FFFFE)

	)

62 
	#BCR_FACCEN_SET
 ((
uöt32_t
)0x00000040)

	)

65 
	#PCR_PBKEN_SET
 ((
uöt32_t
)0x00000004)

	)

66 
	#PCR_PBKEN_RESET
 ((
uöt32_t
)0x000FFFFB)

	)

67 
	#PCR_ECCEN_SET
 ((
uöt32_t
)0x00000040)

	)

68 
	#PCR_ECCEN_RESET
 ((
uöt32_t
)0x000FFFBF)

	)

69 
	#PCR_MEMORYTYPE_NAND
 ((
uöt32_t
)0x00000008)

	)

129 
	$FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
)

132 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

135 if(
FSMC_B™k
 =
FSMC_B™k1_NORSRAM1
)

137 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030DB;

142 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030D2;

144 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
 + 1] = 0x0FFFFFFF;

145 
FSMC_B™k1E
->
BWTR
[
FSMC_B™k
] = 0x0FFFFFFF;

146 
	}
}

156 
	$FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

159 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
));

160 
	`as£π_∑øm
(
	`IS_FSMC_MUX
(
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
));

161 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
));

162 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

163 
	`as£π_∑øm
(
	`IS_FSMC_BURSTMODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
));

164 
	`as£π_∑øm
(
	`IS_FSMC_ASYNWAIT
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
));

165 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_POLARITY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
));

166 
	`as£π_∑øm
(
	`IS_FSMC_WRAP_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
));

167 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_SIGNAL_ACTIVE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
));

168 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_OPERATION
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
));

169 
	`as£π_∑øm
(
	`IS_FSMC_WAITE_SIGNAL
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
));

170 
	`as£π_∑øm
(
	`IS_FSMC_EXTENDED_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
));

171 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_BURST
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
));

172 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

173 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

174 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

175 
	`as£π_∑øm
(
	`IS_FSMC_TURNAROUND_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
));

176 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

177 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

178 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

181 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

182 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 |

183 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 |

184 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

185 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 |

186 
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
 |

187 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 |

188 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 |

189 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 |

190 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 |

191 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 |

192 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 |

193 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
;

194 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 =
FSMC_Mem‹yTy≥_NOR
)

196 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] |(
uöt32_t
)
BCR_FACCEN_SET
;

199 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
+1] =

200 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

201 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4) |

202 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

203 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 << 16) |

204 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

205 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

206 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

210 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 =
FSMC_ExãndedMode_E«bÀ
)

212 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

213 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

214 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

215 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

216 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

217 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

218 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

219 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

220 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4 )|

221 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

222 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

223 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

224 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

228 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] = 0x0FFFFFFF;

230 
	}
}

238 
	$FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

241 
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k1_NORSRAM1
;

242 
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 = 
FSMC_D©aAddªssMux_E«bÀ
;

243 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 = 
FSMC_Mem‹yTy≥_SRAM
;

244 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

245 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 = 
FSMC_Bur°Ac˚ssMode_DißbÀ
;

246 
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
 = 
FSMC_Asynchr⁄ousWaô_DißbÀ
;

247 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 = 
FSMC_WaôSig«lPﬁ¨ôy_Low
;

248 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 = 
FSMC_WøpMode_DißbÀ
;

249 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 = 
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
;

250 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 = 
FSMC_WrôeO≥øti⁄_E«bÀ
;

251 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 = 
FSMC_WaôSig«l_E«bÀ
;

252 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 = 
FSMC_ExãndedMode_DißbÀ
;

253 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
 = 
FSMC_WrôeBur°_DißbÀ
;

254 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
 = (
FSMC_NORSRAMTimögInôTy≥Def
*)&
FSMC_DeÁu…TimögSåu˘
;

255 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
 = (
FSMC_NORSRAMTimögInôTy≥Def
*)&
FSMC_DeÁu…TimögSåu˘
;

256 
	}
}

269 
	$FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

271 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

272 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

274 i‡(
NewSèã
 !
DISABLE
)

277 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] |
BCR_MBKEN_SET
;

282 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] &
BCR_MBKEN_RESET
;

284 
	}
}

342 
	$FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
)

345 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

347 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

350 
FSMC_B™k2
->
PCR2
 = 0x00000018;

351 
FSMC_B™k2
->
SR2
 = 0x00000040;

352 
FSMC_B™k2
->
PMEM2
 = 0xFCFCFCFC;

353 
FSMC_B™k2
->
PATT2
 = 0xFCFCFCFC;

359 
FSMC_B™k3
->
PCR3
 = 0x00000018;

360 
FSMC_B™k3
->
SR3
 = 0x00000040;

361 
FSMC_B™k3
->
PMEM3
 = 0xFCFCFCFC;

362 
FSMC_B™k3
->
PATT3
 = 0xFCFCFCFC;

364 
	}
}

373 
	$FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

375 
uöt32_t
 
tmµ¸
 = 0x00000000, 
tmµmem
 = 0x00000000, 
tmµ©t
 = 0x00000000;

378 
	`as£π_∑øm
–
	`IS_FSMC_NAND_BANK
(
FSMC_NANDInôSåu˘
->
FSMC_B™k
));

379 
	`as£π_∑øm
–
	`IS_FSMC_WAIT_FEATURE
(
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
));

380 
	`as£π_∑øm
–
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

381 
	`as£π_∑øm
–
	`IS_FSMC_ECC_STATE
(
FSMC_NANDInôSåu˘
->
FSMC_ECC
));

382 
	`as£π_∑øm
–
	`IS_FSMC_ECCPAGE_SIZE
(
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
));

383 
	`as£π_∑øm
–
	`IS_FSMC_TCLR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
));

384 
	`as£π_∑øm
–
	`IS_FSMC_TAR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
));

385 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

386 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

387 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

388 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

389 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

390 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

391 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

392 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

395 
tmµ¸
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 |

396 
PCR_MEMORYTYPE_NAND
 |

397 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

398 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 |

399 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 |

400 (
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9 )|

401 (
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

404 
tmµmem
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

405 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

406 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

407 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

410 
tmµ©t
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

411 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

412 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

413 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

415 if(
FSMC_NANDInôSåu˘
->
FSMC_B™k
 =
FSMC_B™k2_NAND
)

418 
FSMC_B™k2
->
PCR2
 = 
tmµ¸
;

419 
FSMC_B™k2
->
PMEM2
 = 
tmµmem
;

420 
FSMC_B™k2
->
PATT2
 = 
tmµ©t
;

425 
FSMC_B™k3
->
PCR3
 = 
tmµ¸
;

426 
FSMC_B™k3
->
PMEM3
 = 
tmµmem
;

427 
FSMC_B™k3
->
PATT3
 = 
tmµ©t
;

429 
	}
}

438 
	$FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

441 
FSMC_NANDInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k2_NAND
;

442 
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

443 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

444 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 = 
FSMC_ECC_DißbÀ
;

445 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 = 
FSMC_ECCPageSize_256Byãs
;

446 
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

447 
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

448 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

449 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

450 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

451 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

452 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

453 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

454 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

455 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

456 
	}
}

467 
	$FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

469 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

470 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

472 i‡(
NewSèã
 !
DISABLE
)

475 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

477 
FSMC_B™k2
->
PCR2
 |
PCR_PBKEN_SET
;

481 
FSMC_B™k3
->
PCR3
 |
PCR_PBKEN_SET
;

487 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

489 
FSMC_B™k2
->
PCR2
 &
PCR_PBKEN_RESET
;

493 
FSMC_B™k3
->
PCR3
 &
PCR_PBKEN_RESET
;

496 
	}
}

507 
	$FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

509 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

510 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

512 i‡(
NewSèã
 !
DISABLE
)

515 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

517 
FSMC_B™k2
->
PCR2
 |
PCR_ECCEN_SET
;

521 
FSMC_B™k3
->
PCR3
 |
PCR_ECCEN_SET
;

527 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

529 
FSMC_B™k2
->
PCR2
 &
PCR_ECCEN_RESET
;

533 
FSMC_B™k3
->
PCR3
 &
PCR_ECCEN_RESET
;

536 
	}
}

546 
uöt32_t
 
	$FSMC_GëECC
(
uöt32_t
 
FSMC_B™k
)

548 
uöt32_t
 
eccvÆ
 = 0x00000000;

550 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

553 
eccvÆ
 = 
FSMC_B™k2
->
ECCR2
;

558 
eccvÆ
 = 
FSMC_B™k3
->
ECCR3
;

561 (
eccvÆ
);

562 
	}
}

610 
	$FSMC_PCCARDDeInô
()

613 
FSMC_B™k4
->
PCR4
 = 0x00000018;

614 
FSMC_B™k4
->
SR4
 = 0x00000000;

615 
FSMC_B™k4
->
PMEM4
 = 0xFCFCFCFC;

616 
FSMC_B™k4
->
PATT4
 = 0xFCFCFCFC;

617 
FSMC_B™k4
->
PIO4
 = 0xFCFCFCFC;

618 
	}
}

627 
	$FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

630 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_FEATURE
(
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
));

631 
	`as£π_∑øm
(
	`IS_FSMC_TCLR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
));

632 
	`as£π_∑øm
(
	`IS_FSMC_TAR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
));

634 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

635 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

636 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

637 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

639 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

640 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

641 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

642 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

643 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
));

644 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

645 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

646 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

649 
FSMC_B™k4
->
PCR4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 |

650 
FSMC_Mem‹yD©aWidth_16b
 |

651 (
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9) |

652 (
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

655 
FSMC_B™k4
->
PMEM4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

656 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

657 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

658 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

661 
FSMC_B™k4
->
PATT4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

662 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

663 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

664 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

667 
FSMC_B™k4
->
PIO4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

668 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

669 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

670 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

671 
	}
}

679 
	$FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

682 
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

683 
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

684 
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

685 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

686 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

687 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

688 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

689 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

690 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

691 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

692 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

693 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

694 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

695 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

696 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

697 
	}
}

705 
	$FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

707 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

709 i‡(
NewSèã
 !
DISABLE
)

712 
FSMC_B™k4
->
PCR4
 |
PCR_PBKEN_SET
;

717 
FSMC_B™k4
->
PCR4
 &
PCR_PBKEN_RESET
;

719 
	}
}

752 
	$FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

754 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

755 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

756 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

758 i‡(
NewSèã
 !
DISABLE
)

761 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

763 
FSMC_B™k2
->
SR2
 |
FSMC_IT
;

766 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

768 
FSMC_B™k3
->
SR3
 |
FSMC_IT
;

773 
FSMC_B™k4
->
SR4
 |
FSMC_IT
;

779 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

782 
FSMC_B™k2
->
SR2
 &(
uöt32_t
)~
FSMC_IT
;

785 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

787 
FSMC_B™k3
->
SR3
 &(
uöt32_t
)~
FSMC_IT
;

792 
FSMC_B™k4
->
SR4
 &(
uöt32_t
)~
FSMC_IT
;

795 
	}
}

812 
FœgSètus
 
	$FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

814 
FœgSètus
 
bô°©us
 = 
RESET
;

815 
uöt32_t
 
tmp§
 = 0x00000000;

818 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

819 
	`as£π_∑øm
(
	`IS_FSMC_GET_FLAG
(
FSMC_FLAG
));

821 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

823 
tmp§
 = 
FSMC_B™k2
->
SR2
;

825 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

827 
tmp§
 = 
FSMC_B™k3
->
SR3
;

832 
tmp§
 = 
FSMC_B™k4
->
SR4
;

836 i‡((
tmp§
 & 
FSMC_FLAG
Ë!(
uöt16_t
)
RESET
 )

838 
bô°©us
 = 
SET
;

842 
bô°©us
 = 
RESET
;

845  
bô°©us
;

846 
	}
}

862 
	$FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

865 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

866 
	`as£π_∑øm
(
	`IS_FSMC_CLEAR_FLAG
(
FSMC_FLAG
)) ;

868 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

870 
FSMC_B™k2
->
SR2
 &~
FSMC_FLAG
;

872 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

874 
FSMC_B™k3
->
SR3
 &~
FSMC_FLAG
;

879 
FSMC_B™k4
->
SR4
 &~
FSMC_FLAG
;

881 
	}
}

897 
ITSètus
 
	$FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

899 
ITSètus
 
bô°©us
 = 
RESET
;

900 
uöt32_t
 
tmp§
 = 0x0, 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

903 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

904 
	`as£π_∑øm
(
	`IS_FSMC_GET_IT
(
FSMC_IT
));

906 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

908 
tmp§
 = 
FSMC_B™k2
->
SR2
;

910 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

912 
tmp§
 = 
FSMC_B™k3
->
SR3
;

917 
tmp§
 = 
FSMC_B™k4
->
SR4
;

920 
ô°©us
 = 
tmp§
 & 
FSMC_IT
;

922 
ôíabÀ
 = 
tmp§
 & (
FSMC_IT
 >> 3);

923 i‡((
ô°©us
 !(
uöt32_t
)
RESET
Ë&& (
ôíabÀ
 != (uint32_t)RESET))

925 
bô°©us
 = 
SET
;

929 
bô°©us
 = 
RESET
;

931  
bô°©us
;

932 
	}
}

948 
	$FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

951 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

952 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

954 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

956 
FSMC_B™k2
->
SR2
 &~(
FSMC_IT
 >> 3);

958 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

960 
FSMC_B™k3
->
SR3
 &~(
FSMC_IT
 >> 3);

965 
FSMC_B™k4
->
SR4
 &~(
FSMC_IT
 >> 3);

967 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_gpio.c

84 
	~"°m32f4xx_gpio.h
"

85 
	~"°m32f4xx_rcc.h
"

127 
	$GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
)

130 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

132 i‡(
GPIOx
 =
GPIOA
)

134 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOA
, 
ENABLE
);

135 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOA
, 
DISABLE
);

137 i‡(
GPIOx
 =
GPIOB
)

139 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOB
, 
ENABLE
);

140 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOB
, 
DISABLE
);

142 i‡(
GPIOx
 =
GPIOC
)

144 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOC
, 
ENABLE
);

145 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOC
, 
DISABLE
);

147 i‡(
GPIOx
 =
GPIOD
)

149 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOD
, 
ENABLE
);

150 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOD
, 
DISABLE
);

152 i‡(
GPIOx
 =
GPIOE
)

154 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOE
, 
ENABLE
);

155 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOE
, 
DISABLE
);

157 i‡(
GPIOx
 =
GPIOF
)

159 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOF
, 
ENABLE
);

160 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOF
, 
DISABLE
);

162 i‡(
GPIOx
 =
GPIOG
)

164 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOG
, 
ENABLE
);

165 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOG
, 
DISABLE
);

167 i‡(
GPIOx
 =
GPIOH
)

169 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOH
, 
ENABLE
);

170 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOH
, 
DISABLE
);

173 i‡(
GPIOx
 =
GPIOI
)

175 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOI
, 
ENABLE
);

176 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOI
, 
DISABLE
);

178 i‡(
GPIOx
 =
GPIOJ
)

180 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOJ
, 
ENABLE
);

181 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOJ
, 
DISABLE
);

185 i‡(
GPIOx
 =
GPIOK
)

187 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOK
, 
ENABLE
);

188 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOK
, 
DISABLE
);

191 
	}
}

202 
	$GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

204 
uöt32_t
 
pöpos
 = 0x00, 
pos
 = 0x00 , 
cuºíçö
 = 0x00;

207 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

208 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_InôSåu˘
->
GPIO_Pö
));

209 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_InôSåu˘
->
GPIO_Mode
));

210 
	`as£π_∑øm
(
	`IS_GPIO_PUPD
(
GPIO_InôSåu˘
->
GPIO_PuPd
));

214 
pöpos
 = 0x00;Öinpos < 0x10;Öinpos++)

216 
pos
 = ((
uöt32_t
)0x01Ë<< 
pöpos
;

218 
cuºíçö
 = (
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
;

220 i‡(
cuºíçö
 =
pos
)

222 
GPIOx
->
MODER
 &~(
GPIO_MODER_MODER0
 << (
pöpos
 * 2));

223 
GPIOx
->
MODER
 |(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
Ë<< (
pöpos
 * 2));

225 i‡((
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_OUT
Ë|| (GPIO_InôSåu˘->GPIO_Modê=
GPIO_Mode_AF
))

228 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_InôSåu˘
->
GPIO_S≥ed
));

231 
GPIOx
->
OSPEEDR
 &~(
GPIO_OSPEEDER_OSPEEDR0
 << (
pöpos
 * 2));

232 
GPIOx
->
OSPEEDR
 |((
uöt32_t
)(
GPIO_InôSåu˘
->
GPIO_S≥ed
Ë<< (
pöpos
 * 2));

235 
	`as£π_∑øm
(
	`IS_GPIO_OTYPE
(
GPIO_InôSåu˘
->
GPIO_OTy≥
));

238 
GPIOx
->
OTYPER
 &~((
GPIO_OTYPER_OT_0
Ë<< ((
uöt16_t
)
pöpos
)) ;

239 
GPIOx
->
OTYPER
 |(
uöt16_t
)(((uöt16_t)
GPIO_InôSåu˘
->
GPIO_OTy≥
Ë<< ((uöt16_t)
pöpos
));

243 
GPIOx
->
PUPDR
 &~(
GPIO_PUPDR_PUPDR0
 << ((
uöt16_t
)
pöpos
 * 2));

244 
GPIOx
->
PUPDR
 |(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_PuPd
Ë<< (
pöpos
 * 2));

247 
	}
}

254 
	$GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

257 
GPIO_InôSåu˘
->
GPIO_Pö
 = 
GPIO_Pö_AŒ
;

258 
GPIO_InôSåu˘
->
GPIO_Mode
 = 
GPIO_Mode_IN
;

259 
GPIO_InôSåu˘
->
GPIO_S≥ed
 = 
GPIO_S≥ed_2MHz
;

260 
GPIO_InôSåu˘
->
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

261 
GPIO_InôSåu˘
->
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

262 
	}
}

277 
	$GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

279 
__IO
 
uöt32_t
 
tmp
 = 0x00010000;

282 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

283 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

285 
tmp
 |
GPIO_Pö
;

287 
GPIOx
->
LCKR
 = 
tmp
;

289 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

291 
GPIOx
->
LCKR
 = 
tmp
;

293 
tmp
 = 
GPIOx
->
LCKR
;

295 
tmp
 = 
GPIOx
->
LCKR
;

296 
	}
}

323 
uöt8_t
 
	$GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

325 
uöt8_t
 
bô°©us
 = 0x00;

328 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

329 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

331 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

333 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

337 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

339  
bô°©us
;

340 
	}
}

349 
uöt16_t
 
	$GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

352 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

354  ((
uöt16_t
)
GPIOx
->
IDR
);

355 
	}
}

366 
uöt8_t
 
	$GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

368 
uöt8_t
 
bô°©us
 = 0x00;

371 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

372 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

374 i‡(((
GPIOx
->
ODR
Ë& 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

376 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

380 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

382  
bô°©us
;

383 
	}
}

392 
uöt16_t
 
	$GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

395 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

397  ((
uöt16_t
)
GPIOx
->
ODR
);

398 
	}
}

412 
	$GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

415 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

416 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

418 
GPIOx
->
BSRRL
 = 
GPIO_Pö
;

419 
	}
}

433 
	$GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

436 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

437 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

439 
GPIOx
->
BSRRH
 = 
GPIO_Pö
;

440 
	}
}

455 
	$GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
)

458 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

459 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

460 
	`as£π_∑øm
(
	`IS_GPIO_BIT_ACTION
(
BôVÆ
));

462 i‡(
BôVÆ
 !
Bô_RESET
)

464 
GPIOx
->
BSRRL
 = 
GPIO_Pö
;

468 
GPIOx
->
BSRRH
 = 
GPIO_Pö
 ;

470 
	}
}

480 
	$GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
)

483 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

485 
GPIOx
->
ODR
 = 
P‹tVÆ
;

486 
	}
}

496 
	$GPIO_ToggÀBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

499 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

501 
GPIOx
->
ODR
 ^
GPIO_Pö
;

502 
	}
}

579 
	$GPIO_PöAFC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_PöSour˚
, 
uöt8_t
 
GPIO_AF
)

581 
uöt32_t
 
ãmp
 = 0x00;

582 
uöt32_t
 
ãmp_2
 = 0x00;

585 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

586 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

587 
	`as£π_∑øm
(
	`IS_GPIO_AF
(
GPIO_AF
));

589 
ãmp
 = ((
uöt32_t
)(
GPIO_AF
Ë<< ((uöt32_t)((uöt32_t)
GPIO_PöSour˚
 & (uint32_t)0x07) * 4)) ;

590 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] &~((
uöt32_t
)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;

591 
ãmp_2
 = 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] | 
ãmp
;

592 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] = 
ãmp_2
;

593 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c

123 
	~"°m32f4xx_hash.h
"

124 
	~"°m32f4xx_rcc.h
"

171 
	$HASH_DeInô
()

174 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_HASH
, 
ENABLE
);

176 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_HASH
, 
DISABLE
);

177 
	}
}

191 
	$HASH_Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
)

194 
	`as£π_∑øm
(
	`IS_HASH_ALGOSELECTION
(
HASH_InôSåu˘
->
HASH_AlgoSñe˘i⁄
));

195 
	`as£π_∑øm
(
	`IS_HASH_DATATYPE
(
HASH_InôSåu˘
->
HASH_D©aTy≥
));

196 
	`as£π_∑øm
(
	`IS_HASH_ALGOMODE
(
HASH_InôSåu˘
->
HASH_AlgoMode
));

199 
HASH
->
CR
 &~ (
HASH_CR_ALGO
 | 
HASH_CR_DATATYPE
 | 
HASH_CR_MODE
);

200 
HASH
->
CR
 |(
HASH_InôSåu˘
->
HASH_AlgoSñe˘i⁄
 | \

201 
HASH_InôSåu˘
->
HASH_D©aTy≥
 | \

202 
HASH_InôSåu˘
->
HASH_AlgoMode
);

205 if(
HASH_InôSåu˘
->
HASH_AlgoMode
 =
HASH_AlgoMode_HMAC
)

207 
	`as£π_∑øm
(
	`IS_HASH_HMAC_KEYTYPE
(
HASH_InôSåu˘
->
HASH_HMACKeyTy≥
));

208 
HASH
->
CR
 &~
HASH_CR_LKEY
;

209 
HASH
->
CR
 |
HASH_InôSåu˘
->
HASH_HMACKeyTy≥
;

214 
HASH
->
CR
 |
HASH_CR_INIT
;

215 
	}
}

225 
	$HASH_Såu˘Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
)

228 
HASH_InôSåu˘
->
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_SHA1
;

231 
HASH_InôSåu˘
->
HASH_AlgoMode
 = 
HASH_AlgoMode_HASH
;

234 
HASH_InôSåu˘
->
HASH_D©aTy≥
 = 
HASH_D©aTy≥_32b
;

237 
HASH_InôSåu˘
->
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_Sh‹tKey
;

238 
	}
}

249 
	$HASH_Re£t
()

252 
HASH
->
CR
 |
HASH_CR_INIT
;

253 
	}
}

291 
	$HASH_SëLa°W‹dVÆidBôsNbr
(
uöt16_t
 
VÆidNumbî
)

294 
	`as£π_∑øm
(
	`IS_HASH_VALIDBITSNUMBER
(
VÆidNumbî
));

297 
HASH
->
STR
 &~(
HASH_STR_NBW
);

298 
HASH
->
STR
 |
VÆidNumbî
;

299 
	}
}

306 
	$HASH_D©aIn
(
uöt32_t
 
D©a
)

309 
HASH
->
DIN
 = 
D©a
;

310 
	}
}

317 
uöt8_t
 
	$HASH_GëInFIFOW‹dsNbr
()

320  ((
HASH
->
CR
 & 
HASH_CR_NBW
) >> 8);

321 
	}
}

335 
	$HASH_GëDige°
(
HASH_MsgDige°
* 
HASH_MesßgeDige°
)

338 
HASH_MesßgeDige°
->
D©a
[0] = 
HASH
->
HR
[0];

339 
HASH_MesßgeDige°
->
D©a
[1] = 
HASH
->
HR
[1];

340 
HASH_MesßgeDige°
->
D©a
[2] = 
HASH
->
HR
[2];

341 
HASH_MesßgeDige°
->
D©a
[3] = 
HASH
->
HR
[3];

342 
HASH_MesßgeDige°
->
D©a
[4] = 
HASH
->
HR
[4];

343 
HASH_MesßgeDige°
->
D©a
[5] = 
HASH_DIGEST
->
HR
[5];

344 
HASH_MesßgeDige°
->
D©a
[6] = 
HASH_DIGEST
->
HR
[6];

345 
HASH_MesßgeDige°
->
D©a
[7] = 
HASH_DIGEST
->
HR
[7];

346 
	}
}

353 
	$HASH_SèπDige°
()

356 
HASH
->
STR
 |
HASH_STR_DCAL
;

357 
	}
}

396 
	$HASH_SaveC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtSave
)

398 
uöt8_t
 
i
 = 0;

401 
HASH_C⁄ãxtSave
->
HASH_IMR
 = 
HASH
->
IMR
;

402 
HASH_C⁄ãxtSave
->
HASH_STR
 = 
HASH
->
STR
;

403 
HASH_C⁄ãxtSave
->
HASH_CR
 = 
HASH
->
CR
;

404 
i
=0; i<=53;i++)

406 
HASH_C⁄ãxtSave
->
HASH_CSR
[
i
] = 
HASH
->
CSR
[i];

408 
	}
}

418 
	$HASH_Re°‹eC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtRe°‹e
)

420 
uöt8_t
 
i
 = 0;

423 
HASH
->
IMR
 = 
HASH_C⁄ãxtRe°‹e
->
HASH_IMR
;

424 
HASH
->
STR
 = 
HASH_C⁄ãxtRe°‹e
->
HASH_STR
;

425 
HASH
->
CR
 = 
HASH_C⁄ãxtRe°‹e
->
HASH_CR
;

428 
HASH
->
CR
 |
HASH_CR_INIT
;

431 
i
=0; i<=53;i++)

433 
HASH
->
CSR
[
i
] = 
HASH_C⁄ãxtRe°‹e
->
HASH_CSR
[i];

435 
	}
}

465 
	$HASH_AutoSèπDige°
(
Fun˘i⁄ÆSèã
 
NewSèã
)

468 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

470 i‡(
NewSèã
 !
DISABLE
)

473 
HASH
->
CR
 &~
HASH_CR_MDMAT
;

478 
HASH
->
CR
 |
HASH_CR_MDMAT
;

480 
	}
}

489 
	$HASH_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

492 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

494 i‡(
NewSèã
 !
DISABLE
)

497 
HASH
->
CR
 |
HASH_CR_DMAE
;

502 
HASH
->
CR
 &~
HASH_CR_DMAE
;

504 
	}
}

581 
	$HASH_ITC⁄fig
(
uöt32_t
 
HASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

584 
	`as£π_∑øm
(
	`IS_HASH_IT
(
HASH_IT
));

585 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

587 i‡(
NewSèã
 !
DISABLE
)

590 
HASH
->
IMR
 |
HASH_IT
;

595 
HASH
->
IMR
 &(
uöt32_t
)(~
HASH_IT
);

597 
	}
}

610 
FœgSètus
 
	$HASH_GëFœgSètus
(
uöt32_t
 
HASH_FLAG
)

612 
FœgSètus
 
bô°©us
 = 
RESET
;

613 
uöt32_t
 
ãm¥eg
 = 0;

616 
	`as£π_∑øm
(
	`IS_HASH_GET_FLAG
(
HASH_FLAG
));

619 i‡((
HASH_FLAG
 & 
HASH_FLAG_DINNE
Ë!(
uöt32_t
)
RESET
 )

621 
ãm¥eg
 = 
HASH
->
CR
;

625 
ãm¥eg
 = 
HASH
->
SR
;

629 i‡((
ãm¥eg
 & 
HASH_FLAG
Ë!(
uöt32_t
)
RESET
)

632 
bô°©us
 = 
SET
;

637 
bô°©us
 = 
RESET
;

641  
bô°©us
;

642 
	}
}

651 
	$HASH_CÀ¨Fœg
(
uöt32_t
 
HASH_FLAG
)

654 
	`as£π_∑øm
(
	`IS_HASH_CLEAR_FLAG
(
HASH_FLAG
));

657 
HASH
->
SR
 = ~(
uöt32_t
)
HASH_FLAG
;

658 
	}
}

667 
ITSètus
 
	$HASH_GëITSètus
(
uöt32_t
 
HASH_IT
)

669 
ITSètus
 
bô°©us
 = 
RESET
;

670 
uöt32_t
 
tm¥eg
 = 0;

673 
	`as£π_∑øm
(
	`IS_HASH_GET_IT
(
HASH_IT
));

677 
tm¥eg
 = 
HASH
->
SR
;

679 i‡(((
HASH
->
IMR
 & 
tm¥eg
Ë& 
HASH_IT
Ë!
RESET
)

682 
bô°©us
 = 
SET
;

687 
bô°©us
 = 
RESET
;

690  
bô°©us
;

691 
	}
}

701 
	$HASH_CÀ¨ITPídögBô
(
uöt32_t
 
HASH_IT
)

704 
	`as£π_∑øm
(
	`IS_HASH_IT
(
HASH_IT
));

707 
HASH
->
SR
 = (
uöt32_t
)(~
HASH_IT
);

708 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c

47 
	~"°m32f4xx_hash.h
"

60 
	#MD5BUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

93 
Eº‹Sètus
 
	$HASH_MD5
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[16])

95 
HASH_InôTy≥Def
 
MD5_HASH_InôSåu˘uª
;

96 
HASH_MsgDige°
 
MD5_MesßgeDige°
;

97 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

98 
uöt32_t
 
i
 = 0;

99 
__IO
 
uöt32_t
 
cou¡î
 = 0;

100 
uöt32_t
 
busy°©us
 = 0;

101 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

102 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

103 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

107 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

110 
	`HASH_DeInô
();

113 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_MD5
;

114 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HASH
;

115 
MD5_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

116 
	`HASH_Inô
(&
MD5_HASH_InôSåu˘uª
);

119 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

122 
i
=0; i<
IÀn
; i+=4)

124 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

125 
öpuèddr
+=4;

129 
	`HASH_SèπDige°
();

134 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

135 
cou¡î
++;

136 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

138 i‡(
busy°©us
 !
RESET
)

140 
°©us
 = 
ERROR
;

145 
	`HASH_GëDige°
(&
MD5_MesßgeDige°
);

146 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[0]);

147 
ouçuèddr
+=4;

148 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[1]);

149 
ouçuèddr
+=4;

150 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[2]);

151 
ouçuèddr
+=4;

152 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[3]);

154  
°©us
;

155 
	}
}

168 
Eº‹Sètus
 
	$HMAC_MD5
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
, uöt8_à*
I≈ut
,

169 
uöt32_t
 
IÀn
, 
uöt8_t
 
Ouçut
[16])

171 
HASH_InôTy≥Def
 
MD5_HASH_InôSåu˘uª
;

172 
HASH_MsgDige°
 
MD5_MesßgeDige°
;

173 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

174 
__IO
 
uöt16_t
 
nbvÆidbôskey
 = 0;

175 
uöt32_t
 
i
 = 0;

176 
__IO
 
uöt32_t
 
cou¡î
 = 0;

177 
uöt32_t
 
busy°©us
 = 0;

178 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

179 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

180 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

181 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

184 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

187 
nbvÆidbôskey
 = 8 * (
KeyÀn
 % 4);

190 
	`HASH_DeInô
();

193 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_MD5
;

194 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HMAC
;

195 
MD5_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

196 if(
KeyÀn
 > 64)

199 
MD5_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_L⁄gKey
;

204 
MD5_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_Sh‹tKey
;

206 
	`HASH_Inô
(&
MD5_HASH_InôSåu˘uª
);

209 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

212 
i
=0; i<
KeyÀn
; i+=4)

214 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

215 
keyaddr
+=4;

219 
	`HASH_SèπDige°
();

224 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

225 
cou¡î
++;

226 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

228 i‡(
busy°©us
 !
RESET
)

230 
°©us
 = 
ERROR
;

235 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

238 
i
=0; i<
IÀn
; i+=4)

240 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

241 
öpuèddr
+=4;

245 
	`HASH_SèπDige°
();

248 
cou¡î
 =0;

251 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

252 
cou¡î
++;

253 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

255 i‡(
busy°©us
 !
RESET
)

257 
°©us
 = 
ERROR
;

262 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

265 
keyaddr
 = (
uöt32_t
)
Key
;

266 
i
=0; i<
KeyÀn
; i+=4)

268 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

269 
keyaddr
+=4;

273 
	`HASH_SèπDige°
();

276 
cou¡î
 =0;

279 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

280 
cou¡î
++;

281 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

283 i‡(
busy°©us
 !
RESET
)

285 
°©us
 = 
ERROR
;

290 
	`HASH_GëDige°
(&
MD5_MesßgeDige°
);

291 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[0]);

292 
ouçuèddr
+=4;

293 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[1]);

294 
ouçuèddr
+=4;

295 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[2]);

296 
ouçuèddr
+=4;

297 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[3]);

301  
°©us
;

302 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c

47 
	~"°m32f4xx_hash.h
"

60 
	#SHA1BUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

93 
Eº‹Sètus
 
	$HASH_SHA1
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[20])

95 
HASH_InôTy≥Def
 
SHA1_HASH_InôSåu˘uª
;

96 
HASH_MsgDige°
 
SHA1_MesßgeDige°
;

97 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

98 
uöt32_t
 
i
 = 0;

99 
__IO
 
uöt32_t
 
cou¡î
 = 0;

100 
uöt32_t
 
busy°©us
 = 0;

101 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

102 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

103 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

106 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

109 
	`HASH_DeInô
();

112 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_SHA1
;

113 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HASH
;

114 
SHA1_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

115 
	`HASH_Inô
(&
SHA1_HASH_InôSåu˘uª
);

118 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

121 
i
=0; i<
IÀn
; i+=4)

123 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

124 
öpuèddr
+=4;

128 
	`HASH_SèπDige°
();

133 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

134 
cou¡î
++;

135 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

137 i‡(
busy°©us
 !
RESET
)

139 
°©us
 = 
ERROR
;

144 
	`HASH_GëDige°
(&
SHA1_MesßgeDige°
);

145 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[0]);

146 
ouçuèddr
+=4;

147 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[1]);

148 
ouçuèddr
+=4;

149 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[2]);

150 
ouçuèddr
+=4;

151 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[3]);

152 
ouçuèddr
+=4;

153 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[4]);

155  
°©us
;

156 
	}
}

169 
Eº‹Sètus
 
	$HMAC_SHA1
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
, uöt8_à*
I≈ut
,

170 
uöt32_t
 
IÀn
, 
uöt8_t
 
Ouçut
[20])

172 
HASH_InôTy≥Def
 
SHA1_HASH_InôSåu˘uª
;

173 
HASH_MsgDige°
 
SHA1_MesßgeDige°
;

174 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

175 
__IO
 
uöt16_t
 
nbvÆidbôskey
 = 0;

176 
uöt32_t
 
i
 = 0;

177 
__IO
 
uöt32_t
 
cou¡î
 = 0;

178 
uöt32_t
 
busy°©us
 = 0;

179 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

180 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

181 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

182 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

185 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

188 
nbvÆidbôskey
 = 8 * (
KeyÀn
 % 4);

191 
	`HASH_DeInô
();

194 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_SHA1
;

195 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HMAC
;

196 
SHA1_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

197 if(
KeyÀn
 > 64)

200 
SHA1_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_L⁄gKey
;

205 
SHA1_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_Sh‹tKey
;

207 
	`HASH_Inô
(&
SHA1_HASH_InôSåu˘uª
);

210 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

213 
i
=0; i<
KeyÀn
; i+=4)

215 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

216 
keyaddr
+=4;

220 
	`HASH_SèπDige°
();

225 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

226 
cou¡î
++;

227 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

229 i‡(
busy°©us
 !
RESET
)

231 
°©us
 = 
ERROR
;

236 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

239 
i
=0; i<
IÀn
; i+=4)

241 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

242 
öpuèddr
+=4;

246 
	`HASH_SèπDige°
();

250 
cou¡î
 =0;

253 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

254 
cou¡î
++;

255 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

257 i‡(
busy°©us
 !
RESET
)

259 
°©us
 = 
ERROR
;

264 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

267 
keyaddr
 = (
uöt32_t
)
Key
;

268 
i
=0; i<
KeyÀn
; i+=4)

270 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

271 
keyaddr
+=4;

275 
	`HASH_SèπDige°
();

278 
cou¡î
 =0;

281 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

282 
cou¡î
++;

283 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

285 i‡(
busy°©us
 !
RESET
)

287 
°©us
 = 
ERROR
;

292 
	`HASH_GëDige°
(&
SHA1_MesßgeDige°
);

293 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[0]);

294 
ouçuèddr
+=4;

295 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[1]);

296 
ouçuèddr
+=4;

297 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[2]);

298 
ouçuèddr
+=4;

299 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[3]);

300 
ouçuèddr
+=4;

301 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[4]);

305  
°©us
;

306 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c

92 
	~"°m32f4xx_i2c.h
"

93 
	~"°m32f4xx_rcc.h
"

107 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)0xFBF5Ë

	)

108 
	#FLAG_MASK
 ((
uöt32_t
)0x00FFFFFFË

	)

109 
	#ITEN_MASK
 ((
uöt32_t
)0x07000000Ë

	)

137 
	$I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
)

140 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

142 i‡(
I2Cx
 =
I2C1
)

145 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
ENABLE
);

147 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
DISABLE
);

149 i‡(
I2Cx
 =
I2C2
)

152 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
ENABLE
);

154 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
DISABLE
);

158 i‡(
I2Cx
 =
I2C3
)

161 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C3
, 
ENABLE
);

163 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C3
, 
DISABLE
);

166 
	}
}

180 
	$I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

182 
uöt16_t
 
tm¥eg
 = 0, 
‰eqønge
 = 0;

183 
uöt16_t
 
ªsu…
 = 0x04;

184 
uöt32_t
 
p˛k1
 = 8000000;

185 
RCC_ClocksTy≥Def
 
rcc_˛ocks
;

187 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

188 
	`as£π_∑øm
(
	`IS_I2C_CLOCK_SPEED
(
I2C_InôSåu˘
->
I2C_ClockS≥ed
));

189 
	`as£π_∑øm
(
	`IS_I2C_MODE
(
I2C_InôSåu˘
->
I2C_Mode
));

190 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_InôSåu˘
->
I2C_DutyCy˛e
));

191 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS1
(
I2C_InôSåu˘
->
I2C_OwnAddªss1
));

192 
	`as£π_∑øm
(
	`IS_I2C_ACK_STATE
(
I2C_InôSåu˘
->
I2C_Ack
));

193 
	`as£π_∑øm
(
	`IS_I2C_ACKNOWLEDGE_ADDRESS
(
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
));

197 
tm¥eg
 = 
I2Cx
->
CR2
;

199 
tm¥eg
 &(
uöt16_t
)~((uöt16_t)
I2C_CR2_FREQ
);

201 
	`RCC_GëClocksFªq
(&
rcc_˛ocks
);

202 
p˛k1
 = 
rcc_˛ocks
.
PCLK1_Fªquícy
;

204 
‰eqønge
 = (
uöt16_t
)(
p˛k1
 / 1000000);

205 
tm¥eg
 |
‰eqønge
;

207 
I2Cx
->
CR2
 = 
tm¥eg
;

211 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_PE
);

214 
tm¥eg
 = 0;

217 i‡(
I2C_InôSåu˘
->
I2C_ClockS≥ed
 <= 100000)

220 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 << 1));

222 i‡(
ªsu…
 < 0x04)

225 
ªsu…
 = 0x04;

228 
tm¥eg
 |
ªsu…
;

230 
I2Cx
->
TRISE
 = 
‰eqønge
 + 1;

237 i‡(
I2C_InôSåu˘
->
I2C_DutyCy˛e
 =
I2C_DutyCy˛e_2
)

240 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 3));

245 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 25));

247 
ªsu…
 |
I2C_DutyCy˛e_16_9
;

251 i‡((
ªsu…
 & 
I2C_CCR_CCR
) == 0)

254 
ªsu…
 |(
uöt16_t
)0x0001;

257 
tm¥eg
 |(
uöt16_t
)(
ªsu…
 | 
I2C_CCR_FS
);

259 
I2Cx
->
TRISE
 = (
uöt16_t
)(((
‰eqønge
 * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);

263 
I2Cx
->
CCR
 = 
tm¥eg
;

265 
I2Cx
->
CR1
 |
I2C_CR1_PE
;

269 
tm¥eg
 = 
I2Cx
->
CR1
;

271 
tm¥eg
 &
CR1_CLEAR_MASK
;

275 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
I2C_InôSåu˘
->
I2C_Mode
 | I2C_InôSåu˘->
I2C_Ack
);

277 
I2Cx
->
CR1
 = 
tm¥eg
;

281 
I2Cx
->
OAR1
 = (
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 | I2C_InôSåu˘->
I2C_OwnAddªss1
);

282 
	}
}

289 
	$I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

293 
I2C_InôSåu˘
->
I2C_ClockS≥ed
 = 5000;

295 
I2C_InôSåu˘
->
I2C_Mode
 = 
I2C_Mode_I2C
;

297 
I2C_InôSåu˘
->
I2C_DutyCy˛e
 = 
I2C_DutyCy˛e_2
;

299 
I2C_InôSåu˘
->
I2C_OwnAddªss1
 = 0;

301 
I2C_InôSåu˘
->
I2C_Ack
 = 
I2C_Ack_DißbÀ
;

303 
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 = 
I2C_AcknowÀdgedAddªss_7bô
;

304 
	}
}

313 
	$I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

316 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

317 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

318 i‡(
NewSèã
 !
DISABLE
)

321 
I2Cx
->
CR1
 |
I2C_CR1_PE
;

326 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_PE
);

328 
	}
}

342 
	$I2C_A«logFûãrCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

345 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

346 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

347 i‡(
NewSèã
 !
DISABLE
)

350 
I2Cx
->
FLTR
 &(
uöt16_t
)~((uöt16_t)
I2C_FLTR_ANOFF
);

355 
I2Cx
->
FLTR
 |
I2C_FLTR_ANOFF
;

357 
	}
}

371 
	$I2C_DigôÆFûãrC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DigôÆFûãr
)

373 
uöt16_t
 
tm¥eg
 = 0;

376 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

377 
	`as£π_∑øm
(
	`IS_I2C_DIGITAL_FILTER
(
I2C_DigôÆFûãr
));

380 
tm¥eg
 = 
I2Cx
->
FLTR
;

383 
tm¥eg
 &(
uöt16_t
)~((uöt16_t)
I2C_FLTR_DNF
);

386 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
I2C_DigôÆFûãr
 & 
I2C_FLTR_DNF
);

389 
I2Cx
->
FLTR
 = 
tm¥eg
;

390 
	}
}

399 
	$I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

402 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

403 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

404 i‡(
NewSèã
 !
DISABLE
)

407 
I2Cx
->
CR1
 |
I2C_CR1_START
;

412 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_START
);

414 
	}
}

423 
	$I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

426 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

427 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

428 i‡(
NewSèã
 !
DISABLE
)

431 
I2Cx
->
CR1
 |
I2C_CR1_STOP
;

436 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_STOP
);

438 
	}
}

451 
	$I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
)

454 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

455 
	`as£π_∑øm
(
	`IS_I2C_DIRECTION
(
I2C_Dúe˘i⁄
));

457 i‡(
I2C_Dúe˘i⁄
 !
I2C_Dúe˘i⁄_Tønsmôãr
)

460 
Addªss
 |
I2C_OAR1_ADD0
;

465 
Addªss
 &(
uöt8_t
)~((uöt8_t)
I2C_OAR1_ADD0
);

468 
I2Cx
->
DR
 = 
Addªss
;

469 
	}
}

478 
	$I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

481 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

482 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

483 i‡(
NewSèã
 !
DISABLE
)

486 
I2Cx
->
CR1
 |
I2C_CR1_ACK
;

491 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ACK
);

493 
	}
}

501 
	$I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
)

503 
uöt16_t
 
tm¥eg
 = 0;

506 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

509 
tm¥eg
 = 
I2Cx
->
OAR2
;

512 
tm¥eg
 &(
uöt16_t
)~((uöt16_t)
I2C_OAR2_ADD2
);

515 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
Addªss
 & (uint16_t)0x00FE);

518 
I2Cx
->
OAR2
 = 
tm¥eg
;

519 
	}
}

528 
	$I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

531 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

532 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

533 i‡(
NewSèã
 !
DISABLE
)

536 
I2Cx
->
OAR2
 |
I2C_OAR2_ENDUAL
;

541 
I2Cx
->
OAR2
 &(
uöt16_t
)~((uöt16_t)
I2C_OAR2_ENDUAL
);

543 
	}
}

552 
	$I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

555 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

556 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

557 i‡(
NewSèã
 !
DISABLE
)

560 
I2Cx
->
CR1
 |
I2C_CR1_ENGC
;

565 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ENGC
);

567 
	}
}

578 
	$I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

581 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

582 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

583 i‡(
NewSèã
 !
DISABLE
)

586 
I2Cx
->
CR1
 |
I2C_CR1_SWRST
;

591 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_SWRST
);

593 
	}
}

602 
	$I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

605 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

606 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

607 i‡(
NewSèã
 =
DISABLE
)

610 
I2Cx
->
CR1
 |
I2C_CR1_NOSTRETCH
;

615 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_NOSTRETCH
);

617 
	}
}

628 
	$I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
)

631 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

632 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_DutyCy˛e
));

633 i‡(
I2C_DutyCy˛e
 !
I2C_DutyCy˛e_16_9
)

636 
I2Cx
->
CCR
 &
I2C_DutyCy˛e_2
;

641 
I2Cx
->
CCR
 |
I2C_DutyCy˛e_16_9
;

643 
	}
}

666 
	$I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
)

669 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

670 
	`as£π_∑øm
(
	`IS_I2C_NACK_POSITION
(
I2C_NACKPosôi⁄
));

673 i‡(
I2C_NACKPosôi⁄
 =
I2C_NACKPosôi⁄_Next
)

676 
I2Cx
->
CR1
 |
I2C_NACKPosôi⁄_Next
;

681 
I2Cx
->
CR1
 &
I2C_NACKPosôi⁄_Cuºít
;

683 
	}
}

694 
	$I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
)

697 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

698 
	`as£π_∑øm
(
	`IS_I2C_SMBUS_ALERT
(
I2C_SMBusAÀπ
));

699 i‡(
I2C_SMBusAÀπ
 =
I2C_SMBusAÀπ_Low
)

702 
I2Cx
->
CR1
 |
I2C_SMBusAÀπ_Low
;

707 
I2Cx
->
CR1
 &
I2C_SMBusAÀπ_High
;

709 
	}
}

718 
	$I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

721 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

722 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

723 i‡(
NewSèã
 !
DISABLE
)

726 
I2Cx
->
CR1
 |
I2C_CR1_ENARP
;

731 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ENARP
);

733 
	}
}

756 
	$I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
)

759 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

761 
I2Cx
->
DR
 = 
D©a
;

762 
	}
}

769 
uöt8_t
 
	$I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
)

772 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

774  (
uöt8_t
)
I2Cx
->
DR
;

775 
	}
}

800 
	$I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

803 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

804 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

805 i‡(
NewSèã
 !
DISABLE
)

808 
I2Cx
->
CR1
 |
I2C_CR1_PEC
;

813 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_PEC
);

815 
	}
}

831 
	$I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
)

834 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

835 
	`as£π_∑øm
(
	`IS_I2C_PEC_POSITION
(
I2C_PECPosôi⁄
));

836 i‡(
I2C_PECPosôi⁄
 =
I2C_PECPosôi⁄_Next
)

839 
I2Cx
->
CR1
 |
I2C_PECPosôi⁄_Next
;

844 
I2Cx
->
CR1
 &
I2C_PECPosôi⁄_Cuºít
;

846 
	}
}

855 
	$I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

858 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

859 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

860 i‡(
NewSèã
 !
DISABLE
)

863 
I2Cx
->
CR1
 |
I2C_CR1_ENPEC
;

868 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ENPEC
);

870 
	}
}

877 
uöt8_t
 
	$I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
)

880 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

882  ((
I2Cx
->
SR2
) >> 8);

883 
	}
}

910 
	$I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

913 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

914 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

915 i‡(
NewSèã
 !
DISABLE
)

918 
I2Cx
->
CR2
 |
I2C_CR2_DMAEN
;

923 
I2Cx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
I2C_CR2_DMAEN
);

925 
	}
}

934 
	$I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

937 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

938 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

939 i‡(
NewSèã
 !
DISABLE
)

942 
I2Cx
->
CR2
 |
I2C_CR2_LAST
;

947 
I2Cx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
I2C_CR2_LAST
);

949 
	}
}

1072 
uöt16_t
 
	$I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
)

1074 
__IO
 
uöt32_t
 
tmp
 = 0;

1077 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1078 
	`as£π_∑øm
(
	`IS_I2C_REGISTER
(
I2C_Regi°î
));

1080 
tmp
 = (
uöt32_t
Ë
I2Cx
;

1081 
tmp
 +
I2C_Regi°î
;

1084  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

1085 
	}
}

1099 
	$I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1102 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1103 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1104 
	`as£π_∑øm
(
	`IS_I2C_CONFIG_IT
(
I2C_IT
));

1106 i‡(
NewSèã
 !
DISABLE
)

1109 
I2Cx
->
CR2
 |
I2C_IT
;

1114 
I2Cx
->
CR2
 &(
uöt16_t
)~
I2C_IT
;

1116 
	}
}

1158 
Eº‹Sètus
 
	$I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
)

1160 
uöt32_t
 
œ°evít
 = 0;

1161 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1162 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1165 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1166 
	`as£π_∑øm
(
	`IS_I2C_EVENT
(
I2C_EVENT
));

1169 
Êag1
 = 
I2Cx
->
SR1
;

1170 
Êag2
 = 
I2Cx
->
SR2
;

1171 
Êag2
 = flag2 << 16;

1174 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_MASK
;

1177 i‡((
œ°evít
 & 
I2C_EVENT
) == I2C_EVENT)

1180 
°©us
 = 
SUCCESS
;

1185 
°©us
 = 
ERROR
;

1188  
°©us
;

1189 
	}
}

1206 
uöt32_t
 
	$I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
)

1208 
uöt32_t
 
œ°evít
 = 0;

1209 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1212 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1215 
Êag1
 = 
I2Cx
->
SR1
;

1216 
Êag2
 = 
I2Cx
->
SR2
;

1217 
Êag2
 = flag2 << 16;

1220 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_MASK
;

1223  
œ°evít
;

1224 
	}
}

1261 
FœgSètus
 
	$I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1263 
FœgSètus
 
bô°©us
 = 
RESET
;

1264 
__IO
 
uöt32_t
 
i2¸eg
 = 0, 
i2cxba£
 = 0;

1267 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1268 
	`as£π_∑øm
(
	`IS_I2C_GET_FLAG
(
I2C_FLAG
));

1271 
i2cxba£
 = (
uöt32_t
)
I2Cx
;

1274 
i2¸eg
 = 
I2C_FLAG
 >> 28;

1277 
I2C_FLAG
 &
FLAG_MASK
;

1279 if(
i2¸eg
 != 0)

1282 
i2cxba£
 += 0x14;

1287 
I2C_FLAG
 = (
uöt32_t
)(I2C_FLAG >> 16);

1289 
i2cxba£
 += 0x18;

1292 if(((*(
__IO
 
uöt32_t
 *)
i2cxba£
Ë& 
I2C_FLAG
Ë!(uöt32_t)
RESET
)

1295 
bô°©us
 = 
SET
;

1300 
bô°©us
 = 
RESET
;

1304  
bô°©us
;

1305 
	}
}

1338 
	$I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1340 
uöt32_t
 
Êagpos
 = 0;

1342 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1343 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_FLAG
(
I2C_FLAG
));

1345 
Êagpos
 = 
I2C_FLAG
 & 
FLAG_MASK
;

1347 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1348 
	}
}

1372 
ITSètus
 
	$I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1374 
ITSètus
 
bô°©us
 = 
RESET
;

1375 
uöt32_t
 
íabÀ°©us
 = 0;

1378 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1379 
	`as£π_∑øm
(
	`IS_I2C_GET_IT
(
I2C_IT
));

1382 
íabÀ°©us
 = (
uöt32_t
)(((
I2C_IT
 & 
ITEN_MASK
Ë>> 16Ë& (
I2Cx
->
CR2
)) ;

1385 
I2C_IT
 &
FLAG_MASK
;

1388 i‡(((
I2Cx
->
SR1
 & 
I2C_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1391 
bô°©us
 = 
SET
;

1396 
bô°©us
 = 
RESET
;

1399  
bô°©us
;

1400 
	}
}

1432 
	$I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1434 
uöt32_t
 
Êagpos
 = 0;

1436 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1437 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_IT
(
I2C_IT
));

1440 
Êagpos
 = 
I2C_IT
 & 
FLAG_MASK
;

1443 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1444 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_iwdg.c

85 
	~"°m32f4xx_iwdg.h
"

100 
	#KR_KEY_RELOAD
 ((
uöt16_t
)0xAAAA)

	)

101 
	#KR_KEY_ENABLE
 ((
uöt16_t
)0xCCCC)

	)

132 
	$IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
)

135 
	`as£π_∑øm
(
	`IS_IWDG_WRITE_ACCESS
(
IWDG_WrôeAc˚ss
));

136 
IWDG
->
KR
 = 
IWDG_WrôeAc˚ss
;

137 
	}
}

152 
	$IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
)

155 
	`as£π_∑øm
(
	`IS_IWDG_PRESCALER
(
IWDG_PªsˇÀr
));

156 
IWDG
->
PR
 = 
IWDG_PªsˇÀr
;

157 
	}
}

165 
	$IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
)

168 
	`as£π_∑øm
(
	`IS_IWDG_RELOAD
(
Rñﬂd
));

169 
IWDG
->
RLR
 = 
Rñﬂd
;

170 
	}
}

178 
	$IWDG_RñﬂdCou¡î
()

180 
IWDG
->
KR
 = 
KR_KEY_RELOAD
;

181 
	}
}

204 
	$IWDG_E«bÀ
()

206 
IWDG
->
KR
 = 
KR_KEY_ENABLE
;

207 
	}
}

233 
FœgSètus
 
	$IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
)

235 
FœgSètus
 
bô°©us
 = 
RESET
;

237 
	`as£π_∑øm
(
	`IS_IWDG_FLAG
(
IWDG_FLAG
));

238 i‡((
IWDG
->
SR
 & 
IWDG_FLAG
Ë!(
uöt32_t
)
RESET
)

240 
bô°©us
 = 
SET
;

244 
bô°©us
 = 
RESET
;

247  
bô°©us
;

248 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_ltdc.c

76 
	~"°m32f4xx_…dc.h
"

77 
	~"°m32f4xx_rcc.h
"

95 
	#GCR_MASK
 ((
uöt32_t
)0x0FFE888FË

	)

129 
	$LTDC_DeInô
()

132 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_LTDC
, 
ENABLE
);

134 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_LTDC
, 
DISABLE
);

135 
	}
}

146 
	$LTDC_Inô
(
LTDC_InôTy≥Def
* 
LTDC_InôSåu˘
)

148 
uöt32_t
 
h‹iz⁄èlsync
 = 0;

149 
uöt32_t
 
accumuœãdHBP
 = 0;

150 
uöt32_t
 
accumuœãda˘iveW
 = 0;

151 
uöt32_t
 
tŸÆwidth
 = 0;

152 
uöt32_t
 
backgªí
 = 0;

153 
uöt32_t
 
backªd
 = 0;

156 
	`as£π_∑øm
(
	`IS_LTDC_HSYNC
(
LTDC_InôSåu˘
->
LTDC_H‹iz⁄èlSync
));

157 
	`as£π_∑øm
(
	`IS_LTDC_VSYNC
(
LTDC_InôSåu˘
->
LTDC_VîtiˇlSync
));

158 
	`as£π_∑øm
(
	`IS_LTDC_AHBP
(
LTDC_InôSåu˘
->
LTDC_AccumuœãdHBP
));

159 
	`as£π_∑øm
(
	`IS_LTDC_AVBP
(
LTDC_InôSåu˘
->
LTDC_AccumuœãdVBP
));

160 
	`as£π_∑øm
(
	`IS_LTDC_AAH
(
LTDC_InôSåu˘
->
LTDC_AccumuœãdA˘iveH
));

161 
	`as£π_∑øm
(
	`IS_LTDC_AAW
(
LTDC_InôSåu˘
->
LTDC_AccumuœãdA˘iveW
));

162 
	`as£π_∑øm
(
	`IS_LTDC_TOTALH
(
LTDC_InôSåu˘
->
LTDC_TŸÆHeigh
));

163 
	`as£π_∑øm
(
	`IS_LTDC_TOTALW
(
LTDC_InôSåu˘
->
LTDC_TŸÆWidth
));

164 
	`as£π_∑øm
(
	`IS_LTDC_HSPOL
(
LTDC_InôSåu˘
->
LTDC_HSPﬁ¨ôy
));

165 
	`as£π_∑øm
(
	`IS_LTDC_VSPOL
(
LTDC_InôSåu˘
->
LTDC_VSPﬁ¨ôy
));

166 
	`as£π_∑øm
(
	`IS_LTDC_DEPOL
(
LTDC_InôSåu˘
->
LTDC_DEPﬁ¨ôy
));

167 
	`as£π_∑øm
(
	`IS_LTDC_PCPOL
(
LTDC_InôSåu˘
->
LTDC_PCPﬁ¨ôy
));

168 
	`as£π_∑øm
(
	`IS_LTDC_BackBlueVÆue
(
LTDC_InôSåu˘
->
LTDC_BackgroundBlueVÆue
));

169 
	`as£π_∑øm
(
	`IS_LTDC_BackGªíVÆue
(
LTDC_InôSåu˘
->
LTDC_BackgroundGªíVÆue
));

170 
	`as£π_∑øm
(
	`IS_LTDC_BackRedVÆue
(
LTDC_InôSåu˘
->
LTDC_BackgroundRedVÆue
));

173 
LTDC
->
SSCR
 &~(
LTDC_SSCR_VSH
 | 
LTDC_SSCR_HSW
);

174 
h‹iz⁄èlsync
 = (
LTDC_InôSåu˘
->
LTDC_H‹iz⁄èlSync
 << 16);

175 
LTDC
->
SSCR
 |(
h‹iz⁄èlsync
 | 
LTDC_InôSåu˘
->
LTDC_VîtiˇlSync
);

178 
LTDC
->
BPCR
 &~(
LTDC_BPCR_AVBP
 | 
LTDC_BPCR_AHBP
);

179 
accumuœãdHBP
 = (
LTDC_InôSåu˘
->
LTDC_AccumuœãdHBP
 << 16);

180 
LTDC
->
BPCR
 |(
accumuœãdHBP
 | 
LTDC_InôSåu˘
->
LTDC_AccumuœãdVBP
);

183 
LTDC
->
AWCR
 &~(
LTDC_AWCR_AAH
 | 
LTDC_AWCR_AAW
);

184 
accumuœãda˘iveW
 = (
LTDC_InôSåu˘
->
LTDC_AccumuœãdA˘iveW
 << 16);

185 
LTDC
->
AWCR
 |(
accumuœãda˘iveW
 | 
LTDC_InôSåu˘
->
LTDC_AccumuœãdA˘iveH
);

188 
LTDC
->
TWCR
 &~(
LTDC_TWCR_TOTALH
 | 
LTDC_TWCR_TOTALW
);

189 
tŸÆwidth
 = (
LTDC_InôSåu˘
->
LTDC_TŸÆWidth
 << 16);

190 
LTDC
->
TWCR
 |(
tŸÆwidth
 | 
LTDC_InôSåu˘
->
LTDC_TŸÆHeigh
);

192 
LTDC
->
GCR
 &(
uöt32_t
)
GCR_MASK
;

193 
LTDC
->
GCR
 |(
uöt32_t
)(
LTDC_InôSåu˘
->
LTDC_HSPﬁ¨ôy
 | LTDC_InôSåu˘->
LTDC_VSPﬁ¨ôy
 | \

194 
LTDC_InôSåu˘
->
LTDC_DEPﬁ¨ôy
 | LTDC_InôSåu˘->
LTDC_PCPﬁ¨ôy
);

197 
backgªí
 = (
LTDC_InôSåu˘
->
LTDC_BackgroundGªíVÆue
 << 8);

198 
backªd
 = (
LTDC_InôSåu˘
->
LTDC_BackgroundRedVÆue
 << 16);

200 
LTDC
->
BCCR
 &~(
LTDC_BCCR_BCBLUE
 | 
LTDC_BCCR_BCGREEN
 | 
LTDC_BCCR_BCRED
);

201 
LTDC
->
BCCR
 |(
backªd
 | 
backgªí
 | 
LTDC_InôSåu˘
->
LTDC_BackgroundBlueVÆue
);

202 
	}
}

211 
	$LTDC_Såu˘Inô
(
LTDC_InôTy≥Def
* 
LTDC_InôSåu˘
)

214 
LTDC_InôSåu˘
->
LTDC_HSPﬁ¨ôy
 = 
LTDC_HSPﬁ¨ôy_AL
;

215 
LTDC_InôSåu˘
->
LTDC_VSPﬁ¨ôy
 = 
LTDC_VSPﬁ¨ôy_AL
;

216 
LTDC_InôSåu˘
->
LTDC_DEPﬁ¨ôy
 = 
LTDC_DEPﬁ¨ôy_AL
;

217 
LTDC_InôSåu˘
->
LTDC_PCPﬁ¨ôy
 = 
LTDC_PCPﬁ¨ôy_IPC
;

218 
LTDC_InôSåu˘
->
LTDC_H‹iz⁄èlSync
 = 0x00;

219 
LTDC_InôSåu˘
->
LTDC_VîtiˇlSync
 = 0x00;

220 
LTDC_InôSåu˘
->
LTDC_AccumuœãdHBP
 = 0x00;

221 
LTDC_InôSåu˘
->
LTDC_AccumuœãdVBP
 = 0x00;

222 
LTDC_InôSåu˘
->
LTDC_AccumuœãdA˘iveW
 = 0x00;

223 
LTDC_InôSåu˘
->
LTDC_AccumuœãdA˘iveH
 = 0x00;

224 
LTDC_InôSåu˘
->
LTDC_TŸÆWidth
 = 0x00;

225 
LTDC_InôSåu˘
->
LTDC_TŸÆHeigh
 = 0x00;

226 
LTDC_InôSåu˘
->
LTDC_BackgroundRedVÆue
 = 0x00;

227 
LTDC_InôSåu˘
->
LTDC_BackgroundGªíVÆue
 = 0x00;

228 
LTDC_InôSåu˘
->
LTDC_BackgroundBlueVÆue
 = 0x00;

229 
	}
}

238 
	$LTDC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

241 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

243 i‡(
NewSèã
 !
DISABLE
)

246 
LTDC
->
GCR
 |(
uöt32_t
)
LTDC_GCR_LTDCEN
;

251 
LTDC
->
GCR
 &~(
uöt32_t
)
LTDC_GCR_LTDCEN
;

253 
	}
}

262 
	$LTDC_DôhîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

265 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

267 i‡(
NewSèã
 !
DISABLE
)

270 
LTDC
->
GCR
 |(
uöt32_t
)
LTDC_GCR_DTEN
;

275 
LTDC
->
GCR
 &~(
uöt32_t
)
LTDC_GCR_DTEN
;

277 
	}
}

286 
LTDC_RGBTy≥Def
 
	$LTDC_GëRGBWidth
()

288 
LTDC_RGBTy≥Def
 
LTDC_RGB_InôSåu˘
;

290 
LTDC
->
GCR
 &(
uöt32_t
)
GCR_MASK
;

292 
LTDC_RGB_InôSåu˘
.
LTDC_BlueWidth
 = (
uöt32_t
)((
LTDC
->
GCR
 >> 4) & 0x7);

293 
LTDC_RGB_InôSåu˘
.
LTDC_GªíWidth
 = (
uöt32_t
)((
LTDC
->
GCR
 >> 8) & 0x7);

294 
LTDC_RGB_InôSåu˘
.
LTDC_RedWidth
 = (
uöt32_t
)((
LTDC
->
GCR
 >> 12) & 0x7);

296  
LTDC_RGB_InôSåu˘
;

297 
	}
}

306 
	$LTDC_RGBSåu˘Inô
(
LTDC_RGBTy≥Def
* 
LTDC_RGB_InôSåu˘
)

308 
LTDC_RGB_InôSåu˘
->
LTDC_BlueWidth
 = 0x02;

309 
LTDC_RGB_InôSåu˘
->
LTDC_GªíWidth
 = 0x02;

310 
LTDC_RGB_InôSåu˘
->
LTDC_RedWidth
 = 0x02;

311 
	}
}

320 
	$LTDC_LIPC⁄fig
(
uöt32_t
 
LTDC_LIPosôi⁄C⁄fig
)

323 
	`as£π_∑øm
(
	`IS_LTDC_LIPOS
(
LTDC_LIPosôi⁄C⁄fig
));

326 
LTDC
->
LIPCR
 = (
uöt32_t
)
LTDC_LIPosôi⁄C⁄fig
;

327 
	}
}

338 
	$LTDC_RñﬂdC⁄fig
(
uöt32_t
 
LTDC_Rñﬂd
)

341 
	`as£π_∑øm
(
	`IS_LTDC_RELOAD
(
LTDC_Rñﬂd
));

344 
LTDC
->
SRCR
 = (
uöt32_t
)
LTDC_Rñﬂd
;

345 
	}
}

359 
	$LTDC_LayîInô
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
LTDC_Layî_InôTy≥Def
* 
LTDC_Layî_InôSåu˘
)

362 
uöt32_t
 
wh•pos
 = 0;

363 
uöt32_t
 
wv•pos
 = 0;

364 
uöt32_t
 
dcgªí
 = 0;

365 
uöt32_t
 
d¸ed
 = 0;

366 
uöt32_t
 
dˇÕha
 = 0;

367 
uöt32_t
 
cfbp
 = 0;

370 
	`as£π_∑øm
(
	`IS_LTDC_Pixñf‹m©
(
LTDC_Layî_InôSåu˘
->
LTDC_PixñF‹m©
));

371 
	`as£π_∑øm
(
	`IS_LTDC_BÀndögFa˘‹1
(
LTDC_Layî_InôSåu˘
->
LTDC_BÀndögFa˘‹_1
));

372 
	`as£π_∑øm
(
	`IS_LTDC_BÀndögFa˘‹2
(
LTDC_Layî_InôSåu˘
->
LTDC_BÀndögFa˘‹_2
));

373 
	`as£π_∑øm
(
	`IS_LTDC_HCONFIGST
(
LTDC_Layî_InôSåu˘
->
LTDC_H‹iz⁄èlSèπ
));

374 
	`as£π_∑øm
(
	`IS_LTDC_HCONFIGSP
(
LTDC_Layî_InôSåu˘
->
LTDC_H‹iz⁄èlSt›
));

375 
	`as£π_∑øm
(
	`IS_LTDC_VCONFIGST
(
LTDC_Layî_InôSåu˘
->
LTDC_VîtiˇlSèπ
));

376 
	`as£π_∑øm
(
	`IS_LTDC_VCONFIGSP
(
LTDC_Layî_InôSåu˘
->
LTDC_VîtiˇlSt›
));

377 
	`as£π_∑øm
(
	`IS_LTDC_DEFAULTCOLOR
(
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹Blue
));

378 
	`as£π_∑øm
(
	`IS_LTDC_DEFAULTCOLOR
(
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹Gªí
));

379 
	`as£π_∑øm
(
	`IS_LTDC_DEFAULTCOLOR
(
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹Red
));

380 
	`as£π_∑øm
(
	`IS_LTDC_DEFAULTCOLOR
(
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹AÕha
));

381 
	`as£π_∑øm
(
	`IS_LTDC_CFBP
(
LTDC_Layî_InôSåu˘
->
LTDC_CFBPôch
));

382 
	`as£π_∑øm
(
	`IS_LTDC_CFBLL
(
LTDC_Layî_InôSåu˘
->
LTDC_CFBLöeLígth
));

383 
	`as£π_∑øm
(
	`IS_LTDC_CFBLNBR
(
LTDC_Layî_InôSåu˘
->
LTDC_CFBLöeNumbî
));

386 
wh•pos
 = 
LTDC_Layî_InôSåu˘
->
LTDC_H‹iz⁄èlSt›
 << 16;

387 
LTDC_Layîx
->
WHPCR
 &~(
LTDC_LxWHPCR_WHSTPOS
 | 
LTDC_LxWHPCR_WHSPPOS
);

388 
LTDC_Layîx
->
WHPCR
 = (
LTDC_Layî_InôSåu˘
->
LTDC_H‹iz⁄èlSèπ
 | 
wh•pos
);

391 
wv•pos
 = 
LTDC_Layî_InôSåu˘
->
LTDC_VîtiˇlSt›
 << 16;

392 
LTDC_Layîx
->
WVPCR
 &~(
LTDC_LxWVPCR_WVSTPOS
 | 
LTDC_LxWVPCR_WVSPPOS
);

393 
LTDC_Layîx
->
WVPCR
 = (
LTDC_Layî_InôSåu˘
->
LTDC_VîtiˇlSèπ
 | 
wv•pos
);

396 
LTDC_Layîx
->
PFCR
 &~(
LTDC_LxPFCR_PF
);

397 
LTDC_Layîx
->
PFCR
 = (
LTDC_Layî_InôSåu˘
->
LTDC_PixñF‹m©
);

400 
dcgªí
 = (
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹Gªí
 << 8);

401 
d¸ed
 = (
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹Red
 << 16);

402 
dˇÕha
 = (
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹AÕha
 << 24);

403 
LTDC_Layîx
->
DCCR
 &~(
LTDC_LxDCCR_DCBLUE
 | 
LTDC_LxDCCR_DCGREEN
 | 
LTDC_LxDCCR_DCRED
 | 
LTDC_LxDCCR_DCALPHA
);

404 
LTDC_Layîx
->
DCCR
 = (
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹Blue
 | 
dcgªí
 | \

405 
d¸ed
 | 
dˇÕha
);

408 
LTDC_Layîx
->
CACR
 &~(
LTDC_LxCACR_CONSTA
);

409 
LTDC_Layîx
->
CACR
 = (
LTDC_Layî_InôSåu˘
->
LTDC_C⁄°™tAÕha
);

412 
LTDC_Layîx
->
BFCR
 &~(
LTDC_LxBFCR_BF2
 | 
LTDC_LxBFCR_BF1
);

413 
LTDC_Layîx
->
BFCR
 = (
LTDC_Layî_InôSåu˘
->
LTDC_BÀndögFa˘‹_1
 | LTDC_Layî_InôSåu˘->
LTDC_BÀndögFa˘‹_2
);

416 
LTDC_Layîx
->
CFBAR
 &~(
LTDC_LxCFBAR_CFBADD
);

417 
LTDC_Layîx
->
CFBAR
 = (
LTDC_Layî_InôSåu˘
->
LTDC_CFBSèπAdªss
);

420 
cfbp
 = (
LTDC_Layî_InôSåu˘
->
LTDC_CFBPôch
 << 16);

421 
LTDC_Layîx
->
CFBLR
 &~(
LTDC_LxCFBLR_CFBLL
 | 
LTDC_LxCFBLR_CFBP
);

422 
LTDC_Layîx
->
CFBLR
 = (
LTDC_Layî_InôSåu˘
->
LTDC_CFBLöeLígth
 | 
cfbp
);

425 
LTDC_Layîx
->
CFBLNR
 &~(
LTDC_LxCFBLNR_CFBLNBR
);

426 
LTDC_Layîx
->
CFBLNR
 = (
LTDC_Layî_InôSåu˘
->
LTDC_CFBLöeNumbî
);

428 
	}
}

437 
	$LTDC_LayîSåu˘Inô
(
LTDC_Layî_InôTy≥Def
 * 
LTDC_Layî_InôSåu˘
)

442 
LTDC_Layî_InôSåu˘
->
LTDC_H‹iz⁄èlSèπ
 = 0x00;

443 
LTDC_Layî_InôSåu˘
->
LTDC_H‹iz⁄èlSt›
 = 0x00;

446 
LTDC_Layî_InôSåu˘
->
LTDC_VîtiˇlSèπ
 = 0x00;

447 
LTDC_Layî_InôSåu˘
->
LTDC_VîtiˇlSt›
 = 0x00;

450 
LTDC_Layî_InôSåu˘
->
LTDC_PixñF‹m©
 = 
LTDC_Pixñf‹m©_ARGB8888
;

453 
LTDC_Layî_InôSåu˘
->
LTDC_C⁄°™tAÕha
 = 0xFF;

456 
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹Blue
 = 0x00;

457 
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹Gªí
 = 0x00;

458 
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹Red
 = 0x00;

459 
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹AÕha
 = 0x00;

462 
LTDC_Layî_InôSåu˘
->
LTDC_BÀndögFa˘‹_1
 = 
LTDC_BÀndögFa˘‹1_PAxCA
;

463 
LTDC_Layî_InôSåu˘
->
LTDC_BÀndögFa˘‹_2
 = 
LTDC_BÀndögFa˘‹2_PAxCA
;

466 
LTDC_Layî_InôSåu˘
->
LTDC_CFBSèπAdªss
 = 0x00;

469 
LTDC_Layî_InôSåu˘
->
LTDC_CFBLöeLígth
 = 0x00;

470 
LTDC_Layî_InôSåu˘
->
LTDC_CFBPôch
 = 0x00;

473 
LTDC_Layî_InôSåu˘
->
LTDC_CFBLöeNumbî
 = 0x00;

474 
	}
}

486 
	$LTDC_LayîCmd
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

489 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

491 i‡(
NewSèã
 !
DISABLE
)

494 
LTDC_Layîx
->
CR
 |(
uöt32_t
)
LTDC_LxCR_LEN
;

499 
LTDC_Layîx
->
CR
 &~(
uöt32_t
)
LTDC_LxCR_LEN
;

501 
	}
}

511 
LTDC_PosTy≥Def
 
	$LTDC_GëPosSètus
()

513 
LTDC_PosTy≥Def
 
LTDC_Pos_InôSåu˘
;

515 
LTDC
->
CPSR
 &~(
LTDC_CPSR_CYPOS
 | 
LTDC_CPSR_CXPOS
);

517 
LTDC_Pos_InôSåu˘
.
LTDC_POSX
 = (
uöt32_t
)(
LTDC
->
CPSR
 >> 16);

518 
LTDC_Pos_InôSåu˘
.
LTDC_POSY
 = (
uöt32_t
)(
LTDC
->
CPSR
 & 0xFFFF);

520  
LTDC_Pos_InôSåu˘
;

521 
	}
}

530 
	$LTDC_PosSåu˘Inô
(
LTDC_PosTy≥Def
* 
LTDC_Pos_InôSåu˘
)

532 
LTDC_Pos_InôSåu˘
->
LTDC_POSX
 = 0x00;

533 
LTDC_Pos_InôSåu˘
->
LTDC_POSY
 = 0x00;

534 
	}
}

547 
FœgSètus
 
	$LTDC_GëCDSètus
(
uöt32_t
 
LTDC_CD
)

549 
FœgSètus
 
bô°©us
;

552 
	`as£π_∑øm
(
	`IS_LTDC_GET_CD
(
LTDC_CD
));

554 i‡((
LTDC
->
CDSR
 & 
LTDC_CD
Ë!(
uöt32_t
)
RESET
)

556 
bô°©us
 = 
SET
;

560 
bô°©us
 = 
RESET
;

562  
bô°©us
;

563 
	}
}

574 
	$LTDC_Cﬁ‹KeyögC⁄fig
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
LTDC_Cﬁ‹Keyög_InôTy≥Def
* 
LTDC_cﬁ‹keyög_InôSåu˘
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

576 
uöt32_t
 
ckgªí
 = 0;

577 
uöt32_t
 
ckªd
 = 0;

580 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

581 
	`as£π_∑øm
(
	`IS_LTDC_CKEYING
(
LTDC_cﬁ‹keyög_InôSåu˘
->
LTDC_Cﬁ‹KeyBlue
));

582 
	`as£π_∑øm
(
	`IS_LTDC_CKEYING
(
LTDC_cﬁ‹keyög_InôSåu˘
->
LTDC_Cﬁ‹KeyGªí
));

583 
	`as£π_∑øm
(
	`IS_LTDC_CKEYING
(
LTDC_cﬁ‹keyög_InôSåu˘
->
LTDC_Cﬁ‹KeyRed
));

585 i‡(
NewSèã
 !
DISABLE
)

588 
LTDC_Layîx
->
CR
 |(
uöt32_t
)
LTDC_LxCR_COLKEN
;

591 
ckgªí
 = (
LTDC_cﬁ‹keyög_InôSåu˘
->
LTDC_Cﬁ‹KeyGªí
 << 8);

592 
ckªd
 = (
LTDC_cﬁ‹keyög_InôSåu˘
->
LTDC_Cﬁ‹KeyRed
 << 16);

593 
LTDC_Layîx
->
CKCR
 &~(
LTDC_LxCKCR_CKBLUE
 | 
LTDC_LxCKCR_CKGREEN
 | 
LTDC_LxCKCR_CKRED
);

594 
LTDC_Layîx
->
CKCR
 |(
LTDC_cﬁ‹keyög_InôSåu˘
->
LTDC_Cﬁ‹KeyBlue
 | 
ckgªí
 | 
ckªd
);

599 
LTDC_Layîx
->
CR
 &~(
uöt32_t
)
LTDC_LxCR_COLKEN
;

603 
LTDC
->
SRCR
 = 
LTDC_IMRñﬂd
;

604 
	}
}

613 
	$LTDC_Cﬁ‹KeyögSåu˘Inô
(
LTDC_Cﬁ‹Keyög_InôTy≥Def
* 
LTDC_cﬁ‹keyög_InôSåu˘
)

616 
LTDC_cﬁ‹keyög_InôSåu˘
->
LTDC_Cﬁ‹KeyBlue
 = 0x00;

617 
LTDC_cﬁ‹keyög_InôSåu˘
->
LTDC_Cﬁ‹KeyGªí
 = 0x00;

618 
LTDC_cﬁ‹keyög_InôSåu˘
->
LTDC_Cﬁ‹KeyRed
 = 0x00;

619 
	}
}

631 
	$LTDC_CLUTCmd
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

634 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

636 i‡(
NewSèã
 !
DISABLE
)

639 
LTDC_Layîx
->
CR
 |(
uöt32_t
)
LTDC_LxCR_CLUTEN
;

644 
LTDC_Layîx
->
CR
 &~(
uöt32_t
)
LTDC_LxCR_CLUTEN
;

648 
LTDC
->
SRCR
 = 
LTDC_IMRñﬂd
;

649 
	}
}

660 
	$LTDC_CLUTInô
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
LTDC_CLUT_InôTy≥Def
* 
LTDC_CLUT_InôSåu˘
)

662 
uöt32_t
 
gªí
 = 0;

663 
uöt32_t
 
ªd
 = 0;

664 
uöt32_t
 
˛uèdd
 = 0;

667 
	`as£π_∑øm
(
	`IS_LTDC_CLUTWR
(
LTDC_CLUT_InôSåu˘
->
LTDC_CLUTAdªss
));

668 
	`as£π_∑øm
(
	`IS_LTDC_CLUTWR
(
LTDC_CLUT_InôSåu˘
->
LTDC_RedVÆue
));

669 
	`as£π_∑øm
(
	`IS_LTDC_CLUTWR
(
LTDC_CLUT_InôSåu˘
->
LTDC_GªíVÆue
));

670 
	`as£π_∑øm
(
	`IS_LTDC_CLUTWR
(
LTDC_CLUT_InôSåu˘
->
LTDC_BlueVÆue
));

673 
gªí
 = (
LTDC_CLUT_InôSåu˘
->
LTDC_GªíVÆue
 << 8);

674 
ªd
 = (
LTDC_CLUT_InôSåu˘
->
LTDC_RedVÆue
 << 16);

675 
˛uèdd
 = (
LTDC_CLUT_InôSåu˘
->
LTDC_CLUTAdªss
 << 24);

676 
LTDC_Layîx
->
CLUTWR
 = (
˛uèdd
 | 
LTDC_CLUT_InôSåu˘
->
LTDC_BlueVÆue
 | \

677 
gªí
 | 
ªd
);

678 
	}
}

687 
	$LTDC_CLUTSåu˘Inô
(
LTDC_CLUT_InôTy≥Def
* 
LTDC_CLUT_InôSåu˘
)

690 
LTDC_CLUT_InôSåu˘
->
LTDC_CLUTAdªss
 = 0x00;

691 
LTDC_CLUT_InôSåu˘
->
LTDC_BlueVÆue
 = 0x00;

692 
LTDC_CLUT_InôSåu˘
->
LTDC_GªíVÆue
 = 0x00;

693 
LTDC_CLUT_InôSåu˘
->
LTDC_RedVÆue
 = 0x00;

694 
	}
}

707 
	$LTDC_LayîPosôi⁄
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt16_t
 
Off£tX
, uöt16_à
Off£tY
)

710 
uöt32_t
 
ãm¥eg
, 
ãmp
;

711 
uöt32_t
 
h‹iz⁄èl_°¨t
;

712 
uöt32_t
 
h‹iz⁄èl_°›
;

713 
uöt32_t
 
vîtiˇl_°¨t
;

714 
uöt32_t
 
vîtiˇl_°›
;

716 
LTDC_Layîx
->
WHPCR
 &~(
LTDC_LxWHPCR_WHSTPOS
 | 
LTDC_LxWHPCR_WHSPPOS
);

717 
LTDC_Layîx
->
WVPCR
 &~(
LTDC_LxWVPCR_WVSTPOS
 | 
LTDC_LxWVPCR_WVSPPOS
);

720 
ãm¥eg
 = 
LTDC
->
BPCR
;

721 
h‹iz⁄èl_°¨t
 = (
ãm¥eg
 >> 16Ë+ 1 + 
Off£tX
;

722 
vîtiˇl_°¨t
 = (
ãm¥eg
 & 0xFFFFË+ 1 + 
Off£tY
;

727 
ãm¥eg
 = 
LTDC_Layîx
->
PFCR
;

729 i‡(
ãm¥eg
 =
LTDC_Pixñf‹m©_ARGB8888
)

731 
ãmp
 = 4;

733 i‡(
ãm¥eg
 =
LTDC_Pixñf‹m©_RGB888
)

735 
ãmp
 = 3;

737 i‡((
ãm¥eg
 =
LTDC_Pixñf‹m©_ARGB4444
) ||

738 (
ãm¥eg
 =
LTDC_Pixñf‹m©_RGB565
) ||

739 (
ãm¥eg
 =
LTDC_Pixñf‹m©_ARGB1555
) ||

740 (
ãm¥eg
 =
LTDC_Pixñf‹m©_AL88
))

742 
ãmp
 = 2;

746 
ãmp
 = 1;

749 
ãm¥eg
 = 
LTDC_Layîx
->
CFBLR
;

750 
h‹iz⁄èl_°›
 = (((
ãm¥eg
 & 0x1FFFË- 3)/
ãmp
Ë+ 
h‹iz⁄èl_°¨t
 - 1;

752 
ãm¥eg
 = 
LTDC_Layîx
->
CFBLNR
;

753 
vîtiˇl_°›
 = (
ãm¥eg
 & 0x7FFË+ 
vîtiˇl_°¨t
 - 1;

755 
LTDC_Layîx
->
WHPCR
 = 
h‹iz⁄èl_°¨t
 | (
h‹iz⁄èl_°›
 << 16);

756 
LTDC_Layîx
->
WVPCR
 = 
vîtiˇl_°¨t
 | (
vîtiˇl_°›
 << 16);

757 
	}
}

768 
	$LTDC_LayîAÕha
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt8_t
 
C⁄°™tAÕha
)

771 
LTDC_Layîx
->
CACR
 = 
C⁄°™tAÕha
;

772 
	}
}

783 
	$LTDC_LayîAddªss
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt32_t
 
Addªss
)

786 
LTDC_Layîx
->
CFBAR
 = 
Addªss
;

787 
	}
}

799 
	$LTDC_LayîSize
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt32_t
 
Width
, uöt32_à
Height
)

802 
uöt8_t
 
ãmp
;

803 
uöt32_t
 
ãm¥eg
;

804 
uöt32_t
 
h‹iz⁄èl_°¨t
;

805 
uöt32_t
 
h‹iz⁄èl_°›
;

806 
uöt32_t
 
vîtiˇl_°¨t
;

807 
uöt32_t
 
vîtiˇl_°›
;

809 
ãm¥eg
 = 
LTDC_Layîx
->
PFCR
;

811 i‡(
ãm¥eg
 =
LTDC_Pixñf‹m©_ARGB8888
)

813 
ãmp
 = 4;

815 i‡(
ãm¥eg
 =
LTDC_Pixñf‹m©_RGB888
)

817 
ãmp
 = 3;

819 i‡((
ãm¥eg
 =
LTDC_Pixñf‹m©_ARGB4444
) || \

820 (
ãm¥eg
 =
LTDC_Pixñf‹m©_RGB565
) || \

821 (
ãm¥eg
 =
LTDC_Pixñf‹m©_ARGB1555
) || \

822 (
ãm¥eg
 =
LTDC_Pixñf‹m©_AL88
))

824 
ãmp
 = 2;

828 
ãmp
 = 1;

832 
ãm¥eg
 = 
LTDC_Layîx
->
WHPCR
;

833 
h‹iz⁄èl_°¨t
 = (
ãm¥eg
 & 0x1FFF);

834 
h‹iz⁄èl_°›
 = 
Width
 + 
h‹iz⁄èl_°¨t
 - 1;

836 
ãm¥eg
 = 
LTDC_Layîx
->
WVPCR
;

837 
vîtiˇl_°¨t
 = (
ãm¥eg
 & 0x1FFF);

838 
vîtiˇl_°›
 = 
Height
 + 
vîtiˇl_°¨t
 - 1;

840 
LTDC_Layîx
->
WHPCR
 = 
h‹iz⁄èl_°¨t
 | (
h‹iz⁄èl_°›
 << 16);

841 
LTDC_Layîx
->
WVPCR
 = 
vîtiˇl_°¨t
 | (
vîtiˇl_°›
 << 16);

844 
LTDC_Layîx
->
CFBLR
 = ((
Width
 * 
ãmp
) << 16) | ((Width *Åemp) + 3);

847 
LTDC_Layîx
->
CFBLNR
 = 
Height
;

849 
	}
}

861 
	$LTDC_LayîPixñF‹m©
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt32_t
 
PixñF‹m©
)

864 
uöt8_t
 
ãmp
;

865 
uöt32_t
 
ãm¥eg
;

867 
ãm¥eg
 = 
LTDC_Layîx
->
PFCR
;

869 i‡(
ãm¥eg
 =
LTDC_Pixñf‹m©_ARGB8888
)

871 
ãmp
 = 4;

873 i‡(
ãm¥eg
 =
LTDC_Pixñf‹m©_RGB888
)

875 
ãmp
 = 3;

877 i‡((
ãm¥eg
 =
LTDC_Pixñf‹m©_ARGB4444
) || \

878 (
ãm¥eg
 =
LTDC_Pixñf‹m©_RGB565
) || \

879 (
ãm¥eg
 =
LTDC_Pixñf‹m©_ARGB1555
) || \

880 (
ãm¥eg
 =
LTDC_Pixñf‹m©_AL88
))

882 
ãmp
 = 2;

886 
ãmp
 = 1;

889 
ãm¥eg
 = (
LTDC_Layîx
->
CFBLR
 >> 16);

890 
ãm¥eg
 = (ãm¥eg / 
ãmp
);

892 i‡(
PixñF‹m©
 =
LTDC_Pixñf‹m©_ARGB8888
)

894 
ãmp
 = 4;

896 i‡(
PixñF‹m©
 =
LTDC_Pixñf‹m©_RGB888
)

898 
ãmp
 = 3;

900 i‡((
PixñF‹m©
 =
LTDC_Pixñf‹m©_ARGB4444
) || \

901 (
PixñF‹m©
 =
LTDC_Pixñf‹m©_RGB565
) || \

902 (
PixñF‹m©
 =
LTDC_Pixñf‹m©_ARGB1555
) || \

903 (
PixñF‹m©
 =
LTDC_Pixñf‹m©_AL88
))

905 
ãmp
 = 2;

909 
ãmp
 = 1;

913 
LTDC_Layîx
->
CFBLR
 = ((
ãm¥eg
 * 
ãmp
) << 16) | ((tempreg *Åemp) + 3);

916 
LTDC_Layîx
->
PFCR
 = 
PixñF‹m©
;

918 
	}
}

975 
	$LTDC_ITC⁄fig
(
uöt32_t
 
LTDC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

978 
	`as£π_∑øm
(
	`IS_LTDC_IT
(
LTDC_IT
));

979 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

981 i‡(
NewSèã
 !
DISABLE
)

983 
LTDC
->
IER
 |
LTDC_IT
;

987 
LTDC
->
IER
 &(
uöt32_t
)~
LTDC_IT
;

989 
	}
}

1001 
FœgSètus
 
	$LTDC_GëFœgSètus
(
uöt32_t
 
LTDC_FLAG
)

1003 
FœgSètus
 
bô°©us
 = 
RESET
;

1006 
	`as£π_∑øm
(
	`IS_LTDC_FLAG
(
LTDC_FLAG
));

1008 i‡((
LTDC
->
ISR
 & 
LTDC_FLAG
Ë!(
uöt32_t
)
RESET
)

1010 
bô°©us
 = 
SET
;

1014 
bô°©us
 = 
RESET
;

1016  
bô°©us
;

1017 
	}
}

1029 
	$LTDC_CÀ¨Fœg
(
uöt32_t
 
LTDC_FLAG
)

1032 
	`as£π_∑øm
(
	`IS_LTDC_FLAG
(
LTDC_FLAG
));

1035 
LTDC
->
ICR
 = (
uöt32_t
)
LTDC_FLAG
;

1036 
	}
}

1048 
ITSètus
 
	$LTDC_GëITSètus
(
uöt32_t
 
LTDC_IT
)

1050 
ITSètus
 
bô°©us
 = 
RESET
;

1053 
	`as£π_∑øm
(
	`IS_LTDC_IT
(
LTDC_IT
));

1055 i‡((
LTDC
->
ISR
 & 
LTDC_IT
Ë!(
uöt32_t
)
RESET
)

1057 
bô°©us
 = 
SET
;

1061 
bô°©us
 = 
RESET
;

1064 i‡(((
LTDC
->
IER
 & 
LTDC_IT
Ë!(
uöt32_t
)
RESET
Ë&& (
bô°©us
 != (uint32_t)RESET))

1066 
bô°©us
 = 
SET
;

1070 
bô°©us
 = 
RESET
;

1072  
bô°©us
;

1073 
	}
}

1086 
	$LTDC_CÀ¨ITPídögBô
(
uöt32_t
 
LTDC_IT
)

1089 
	`as£π_∑øm
(
	`IS_LTDC_IT
(
LTDC_IT
));

1092 
LTDC
->
ICR
 = (
uöt32_t
)
LTDC_IT
;

1093 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c

38 
	~"°m32f4xx_pwr.h
"

39 
	~"°m32f4xx_rcc.h
"

53 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

58 
	#CR_OFFSET
 (
PWR_OFFSET
 + 0x00)

	)

59 
	#DBP_BôNumbî
 0x08

	)

60 
	#CR_DBP_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
DBP_BôNumbî
 * 4))

	)

63 
	#PVDE_BôNumbî
 0x04

	)

64 
	#CR_PVDE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PVDE_BôNumbî
 * 4))

	)

67 
	#FPDS_BôNumbî
 0x09

	)

68 
	#CR_FPDS_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
FPDS_BôNumbî
 * 4))

	)

71 
	#PMODE_BôNumbî
 0x0E

	)

72 
	#CR_PMODE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PMODE_BôNumbî
 * 4))

	)

75 
	#ODEN_BôNumbî
 0x10

	)

76 
	#CR_ODEN_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
ODEN_BôNumbî
 * 4))

	)

79 
	#ODSWEN_BôNumbî
 0x11

	)

80 
	#CR_ODSWEN_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
ODSWEN_BôNumbî
 * 4))

	)

83 
	#MRLVDS_BôNumbî
 0x0B

	)

84 
	#CR_MRLVDS_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
MRLVDS_BôNumbî
 * 4))

	)

87 
	#LPLVDS_BôNumbî
 0x0A

	)

88 
	#CR_LPLVDS_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
LPLVDS_BôNumbî
 * 4))

	)

93 
	#CSR_OFFSET
 (
PWR_OFFSET
 + 0x04)

	)

94 
	#EWUP_BôNumbî
 0x08

	)

95 
	#CSR_EWUP_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP_BôNumbî
 * 4))

	)

98 
	#BRE_BôNumbî
 0x09

	)

99 
	#CSR_BRE_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
BRE_BôNumbî
 * 4))

	)

104 
	#CR_DS_MASK
 ((
uöt32_t
)0xFFFFF3FC)

	)

105 
	#CR_PLS_MASK
 ((
uöt32_t
)0xFFFFFF1F)

	)

106 
	#CR_VOS_MASK
 ((
uöt32_t
)0xFFFF3FFF)

	)

142 
	$PWR_DeInô
()

144 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
ENABLE
);

145 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
DISABLE
);

146 
	}
}

157 
	$PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

160 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

162 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
NewSèã
;

163 
	}
}

205 
	$PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
)

207 
uöt32_t
 
tm¥eg
 = 0;

210 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
PWR_PVDLevñ
));

212 
tm¥eg
 = 
PWR
->
CR
;

215 
tm¥eg
 &
CR_PLS_MASK
;

218 
tm¥eg
 |
PWR_PVDLevñ
;

221 
PWR
->
CR
 = 
tm¥eg
;

222 
	}
}

230 
	$PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

233 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

235 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
NewSèã
;

236 
	}
}

264 
	$PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

267 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

269 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP_BB
 = (uöt32_t)
NewSèã
;

270 
	}
}

361 
	$PWR_BackupReguœt‹Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

364 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

366 *(
__IO
 
uöt32_t
 *Ë
CSR_BRE_BB
 = (uöt32_t)
NewSèã
;

367 
	}
}

383 
	$PWR_MaöReguœt‹ModeC⁄fig
(
uöt32_t
 
PWR_Reguœt‹_Vﬁège
)

385 
uöt32_t
 
tm¥eg
 = 0;

388 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR_VOLTAGE
(
PWR_Reguœt‹_Vﬁège
));

390 
tm¥eg
 = 
PWR
->
CR
;

393 
tm¥eg
 &
CR_VOS_MASK
;

396 
tm¥eg
 |
PWR_Reguœt‹_Vﬁège
;

399 
PWR
->
CR
 = 
tm¥eg
;

400 
	}
}

418 
	$PWR_OvîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

421 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

424 *(
__IO
 
uöt32_t
 *Ë
CR_ODEN_BB
 = (uöt32_t)
NewSèã
;

425 
	}
}

436 
	$PWR_OvîDriveSWCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

439 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

442 *(
__IO
 
uöt32_t
 *Ë
CR_ODSWEN_BB
 = (uöt32_t)
NewSèã
;

443 
	}
}

463 
	$PWR_UndîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

466 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

468 i‡(
NewSèã
 !
DISABLE
)

471 
PWR
->
CR
 |(
uöt32_t
)
PWR_CR_UDEN
;

476 
PWR
->
CR
 &(
uöt32_t
)(~
PWR_CR_UDEN
);

478 
	}
}

489 
	$PWR_MaöReguœt‹LowVﬁègeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

492 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

494 i‡(
NewSèã
 !
DISABLE
)

496 *(
__IO
 
uöt32_t
 *Ë
CR_MRLVDS_BB
 = (uöt32_t)
ENABLE
;

500 *(
__IO
 
uöt32_t
 *Ë
CR_MRLVDS_BB
 = (uöt32_t)
DISABLE
;

502 
	}
}

513 
	$PWR_LowReguœt‹LowVﬁègeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

516 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

518 i‡(
NewSèã
 !
DISABLE
)

520 *(
__IO
 
uöt32_t
 *Ë
CR_LPLVDS_BB
 = (uöt32_t)
ENABLE
;

524 *(
__IO
 
uöt32_t
 *Ë
CR_LPLVDS_BB
 = (uöt32_t)
DISABLE
;

526 
	}
}

555 
	$PWR_FœshPowîDownCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

558 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

560 *(
__IO
 
uöt32_t
 *Ë
CR_FPDS_BB
 = (uöt32_t)
NewSèã
;

561 
	}
}

701 
	$PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

703 
uöt32_t
 
tm¥eg
 = 0;

706 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
PWR_Reguœt‹
));

707 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

710 
tm¥eg
 = 
PWR
->
CR
;

712 
tm¥eg
 &
CR_DS_MASK
;

715 
tm¥eg
 |
PWR_Reguœt‹
;

718 
PWR
->
CR
 = 
tm¥eg
;

721 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

724 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

727 
	`__WFI
();

732 
	`__WFE
();

735 
SCB
->
SCR
 &(
uöt32_t
)~((uöt32_t)
SCB_SCR_SLEEPDEEP_Msk
);

736 
	}
}

765 
	$PWR_E¡îUndîDriveSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

767 
uöt32_t
 
tm¥eg
 = 0;

770 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR_UNDERDRIVE
(
PWR_Reguœt‹
));

771 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

774 
tm¥eg
 = 
PWR
->
CR
;

776 
tm¥eg
 &
CR_DS_MASK
;

779 
tm¥eg
 |
PWR_Reguœt‹
;

782 
PWR
->
CR
 = 
tm¥eg
;

785 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

788 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

791 
	`__WFI
();

796 
	`__WFE
();

799 
SCB
->
SCR
 &(
uöt32_t
)~((uöt32_t)
SCB_SCR_SLEEPDEEP_Msk
);

800 
	}
}

814 
	$PWR_E¡îSTANDBYMode
()

817 
PWR
->
CR
 |
PWR_CR_PDDS
;

820 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

823 #i‡
	`deföed
 ( 
__CC_ARM
 )

824 
	`__f‹˚_°‹es
();

827 
	`__WFI
();

828 
	}
}

874 
FœgSètus
 
	$PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
)

876 
FœgSètus
 
bô°©us
 = 
RESET
;

879 
	`as£π_∑øm
(
	`IS_PWR_GET_FLAG
(
PWR_FLAG
));

881 i‡((
PWR
->
CSR
 & 
PWR_FLAG
Ë!(
uöt32_t
)
RESET
)

883 
bô°©us
 = 
SET
;

887 
bô°©us
 = 
RESET
;

890  
bô°©us
;

891 
	}
}

902 
	$PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
)

905 
	`as£π_∑øm
(
	`IS_PWR_CLEAR_FLAG
(
PWR_FLAG
));

907 #i‡
	`deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

908 i‡(
PWR_FLAG
 !
PWR_FLAG_UDRDY
)

910 
PWR
->
CR
 |
PWR_FLAG
 << 2;

914 
PWR
->
CSR
 |
PWR_FLAG_UDRDY
;

918 #i‡
	`deföed
 (
STM32F40_41xxx
Ë|| deföed (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

919 
PWR
->
CR
 |
PWR_FLAG
 << 2;

921 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c

59 
	~"°m32f4xx_rcc.h
"

73 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

76 
	#CR_OFFSET
 (
RCC_OFFSET
 + 0x00)

	)

77 
	#HSION_BôNumbî
 0x00

	)

78 
	#CR_HSION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
HSION_BôNumbî
 * 4))

	)

80 
	#CSSON_BôNumbî
 0x13

	)

81 
	#CR_CSSON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
CSSON_BôNumbî
 * 4))

	)

83 
	#PLLON_BôNumbî
 0x18

	)

84 
	#CR_PLLON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLON_BôNumbî
 * 4))

	)

86 
	#PLLI2SON_BôNumbî
 0x1A

	)

87 
	#CR_PLLI2SON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLI2SON_BôNumbî
 * 4))

	)

90 
	#PLLSAION_BôNumbî
 0x1C

	)

91 
	#CR_PLLSAION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLSAION_BôNumbî
 * 4))

	)

95 
	#CFGR_OFFSET
 (
RCC_OFFSET
 + 0x08)

	)

96 
	#I2SSRC_BôNumbî
 0x17

	)

97 
	#CFGR_I2SSRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
I2SSRC_BôNumbî
 * 4))

	)

101 
	#BDCR_OFFSET
 (
RCC_OFFSET
 + 0x70)

	)

102 
	#RTCEN_BôNumbî
 0x0F

	)

103 
	#BDCR_RTCEN_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
RTCEN_BôNumbî
 * 4))

	)

105 
	#BDRST_BôNumbî
 0x10

	)

106 
	#BDCR_BDRST_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
BDRST_BôNumbî
 * 4))

	)

110 
	#CSR_OFFSET
 (
RCC_OFFSET
 + 0x74)

	)

111 
	#LSION_BôNumbî
 0x00

	)

112 
	#CSR_LSION_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
LSION_BôNumbî
 * 4))

	)

116 
	#DCKCFGR_OFFSET
 (
RCC_OFFSET
 + 0x8C)

	)

117 
	#TIMPRE_BôNumbî
 0x18

	)

118 
	#DCKCFGR_TIMPRE_BB
 (
PERIPH_BB_BASE
 + (
DCKCFGR_OFFSET
 * 32Ë+ (
TIMPRE_BôNumbî
 * 4))

	)

121 
	#CFGR_MCO2_RESET_MASK
 ((
uöt32_t
)0x07FFFFFF)

	)

122 
	#CFGR_MCO1_RESET_MASK
 ((
uöt32_t
)0xF89FFFFF)

	)

125 
	#FLAG_MASK
 ((
uöt8_t
)0x1F)

	)

128 
	#CR_BYTE3_ADDRESS
 ((
uöt32_t
)0x40023802)

	)

131 
	#CIR_BYTE2_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 0x0C + 0x01))

	)

134 
	#CIR_BYTE3_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 0x0C + 0x02))

	)

137 
	#BDCR_ADDRESS
 (
PERIPH_BASE
 + 
BDCR_OFFSET
)

	)

141 
__I
 
uöt8_t
 
	gAPBAHBPªscTabÀ
[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};

213 
	$RCC_DeInô
()

216 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

219 
RCC
->
CFGR
 = 0x00000000;

222 
RCC
->
CR
 &(
uöt32_t
)0xEAF6FFFF;

225 
RCC
->
PLLCFGR
 = 0x24003010;

228 
RCC
->
PLLI2SCFGR
 = 0x20003000;

231 
RCC
->
PLLSAICFGR
 = 0x24003000;

234 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

237 
RCC
->
CIR
 = 0x00000000;

240 
RCC
->
DCKCFGR
 = 0x00000000;

241 
	}
}

263 
	$RCC_HSEC⁄fig
(
uöt8_t
 
RCC_HSE
)

266 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_HSE
));

269 *(
__IO
 
uöt8_t
 *Ë
CR_BYTE3_ADDRESS
 = 
RCC_HSE_OFF
;

272 *(
__IO
 
uöt8_t
 *Ë
CR_BYTE3_ADDRESS
 = 
RCC_HSE
;

273 
	}
}

287 
Eº‹Sètus
 
	$RCC_WaôF‹HSESèπUp
()

289 
__IO
 
uöt32_t
 
°¨tupcou¡î
 = 0;

290 
Eº‹Sètus
 
°©us
 = 
ERROR
;

291 
FœgSètus
 
h£°©us
 = 
RESET
;

295 
h£°©us
 = 
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
);

296 
°¨tupcou¡î
++;

297 } (
°¨tupcou¡î
 !
HSE_STARTUP_TIMEOUT
Ë&& (
h£°©us
 =
RESET
));

299 i‡(
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
Ë!
RESET
)

301 
°©us
 = 
SUCCESS
;

305 
°©us
 = 
ERROR
;

307  (
°©us
);

308 
	}
}

318 
	$RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
)

320 
uöt32_t
 
tm¥eg
 = 0;

322 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
HSICÆibøti⁄VÆue
));

324 
tm¥eg
 = 
RCC
->
CR
;

327 
tm¥eg
 &~
RCC_CR_HSITRIM
;

330 
tm¥eg
 |(
uöt32_t
)
HSICÆibøti⁄VÆue
 << 3;

333 
RCC
->
CR
 = 
tm¥eg
;

334 
	}
}

354 
	$RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

357 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

359 *(
__IO
 
uöt32_t
 *Ë
CR_HSION_BB
 = (uöt32_t)
NewSèã
;

360 
	}
}

379 
	$RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
)

382 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_LSE
));

386 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

389 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

392 
RCC_LSE
)

394 
RCC_LSE_ON
:

396 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_ON
;

398 
RCC_LSE_By∑ss
:

400 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_By∑ss
 | 
RCC_LSE_ON
;

405 
	}
}

419 
	$RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

422 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

424 *(
__IO
 
uöt32_t
 *Ë
CSR_LSION_BB
 = (uöt32_t)
NewSèã
;

425 
	}
}

462 
	$RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
PLLM
, uöt32_à
PLLN
, uöt32_à
PLLP
, uöt32_à
PLLQ
)

465 
	`as£π_∑øm
(
	`IS_RCC_PLL_SOURCE
(
RCC_PLLSour˚
));

466 
	`as£π_∑øm
(
	`IS_RCC_PLLM_VALUE
(
PLLM
));

467 
	`as£π_∑øm
(
	`IS_RCC_PLLN_VALUE
(
PLLN
));

468 
	`as£π_∑øm
(
	`IS_RCC_PLLP_VALUE
(
PLLP
));

469 
	`as£π_∑øm
(
	`IS_RCC_PLLQ_VALUE
(
PLLQ
));

471 
RCC
->
PLLCFGR
 = 
PLLM
 | (
PLLN
 << 6Ë| (((
PLLP
 >> 1Ë-1Ë<< 16Ë| (
RCC_PLLSour˚
) |

472 (
PLLQ
 << 24);

473 
	}
}

485 
	$RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

488 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

489 *(
__IO
 
uöt32_t
 *Ë
CR_PLLON_BB
 = (uöt32_t)
NewSèã
;

490 
	}
}

492 #i‡
deföed
 (
STM32F40_41xxx
Ë|| deföed (
STM32F401xx
)

515 
	$RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
)

518 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PLLI2SN
));

519 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PLLI2SR
));

521 
RCC
->
PLLI2SCFGR
 = (
PLLI2SN
 << 6Ë| (
PLLI2SR
 << 28);

522 
	}
}

524 #ñi‡
deföed
 (
STM32F411xE
)

552 
	$RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
, uöt32_à
PLLI2SM
)

555 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PLLI2SN
));

556 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SM_VALUE
(
PLLI2SM
));

557 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PLLI2SR
));

559 
RCC
->
PLLI2SCFGR
 = (
PLLI2SN
 << 6Ë| (
PLLI2SR
 << 28Ë| 
PLLI2SM
;

560 
	}
}

562 #ñi‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

588 
	$RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SQ
, uöt32_à
PLLI2SR
)

591 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PLLI2SN
));

592 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SQ_VALUE
(
PLLI2SQ
));

593 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PLLI2SR
));

595 
RCC
->
PLLI2SCFGR
 = (
PLLI2SN
 << 6Ë| (
PLLI2SQ
 << 24Ë| (
PLLI2SR
 << 28);

596 
	}
}

606 
	$RCC_PLLI2SCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

609 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

610 *(
__IO
 
uöt32_t
 *Ë
CR_PLLI2SON_BB
 = (uöt32_t)
NewSèã
;

611 
	}
}

635 
	$RCC_PLLSAIC⁄fig
(
uöt32_t
 
PLLSAIN
, uöt32_à
PLLSAIQ
, uöt32_à
PLLSAIR
)

638 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIN_VALUE
(
PLLSAIN
));

639 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIR_VALUE
(
PLLSAIR
));

641 
RCC
->
PLLSAICFGR
 = (
PLLSAIN
 << 6Ë| (
PLLSAIQ
 << 24Ë| (
PLLSAIR
 << 28);

642 
	}
}

653 
	$RCC_PLLSAICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

656 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

657 *(
__IO
 
uöt32_t
 *Ë
CR_PLLSAION_BB
 = (uöt32_t)
NewSèã
;

658 
	}
}

671 
	$RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

674 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

675 *(
__IO
 
uöt32_t
 *Ë
CR_CSSON_BB
 = (uöt32_t)
NewSèã
;

676 
	}
}

696 
	$RCC_MCO1C⁄fig
(
uöt32_t
 
RCC_MCO1Sour˚
, uöt32_à
RCC_MCO1Div
)

698 
uöt32_t
 
tm¥eg
 = 0;

701 
	`as£π_∑øm
(
	`IS_RCC_MCO1SOURCE
(
RCC_MCO1Sour˚
));

702 
	`as£π_∑øm
(
	`IS_RCC_MCO1DIV
(
RCC_MCO1Div
));

704 
tm¥eg
 = 
RCC
->
CFGR
;

707 
tm¥eg
 &
CFGR_MCO1_RESET_MASK
;

710 
tm¥eg
 |
RCC_MCO1Sour˚
 | 
RCC_MCO1Div
;

713 
RCC
->
CFGR
 = 
tm¥eg
;

714 
	}
}

734 
	$RCC_MCO2C⁄fig
(
uöt32_t
 
RCC_MCO2Sour˚
, uöt32_à
RCC_MCO2Div
)

736 
uöt32_t
 
tm¥eg
 = 0;

739 
	`as£π_∑øm
(
	`IS_RCC_MCO2SOURCE
(
RCC_MCO2Sour˚
));

740 
	`as£π_∑øm
(
	`IS_RCC_MCO2DIV
(
RCC_MCO2Div
));

742 
tm¥eg
 = 
RCC
->
CFGR
;

745 
tm¥eg
 &
CFGR_MCO2_RESET_MASK
;

748 
tm¥eg
 |
RCC_MCO2Sour˚
 | 
RCC_MCO2Div
;

751 
RCC
->
CFGR
 = 
tm¥eg
;

752 
	}
}

929 
	$RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
)

931 
uöt32_t
 
tm¥eg
 = 0;

934 
	`as£π_∑øm
(
	`IS_RCC_SYSCLK_SOURCE
(
RCC_SYSCLKSour˚
));

936 
tm¥eg
 = 
RCC
->
CFGR
;

939 
tm¥eg
 &~
RCC_CFGR_SW
;

942 
tm¥eg
 |
RCC_SYSCLKSour˚
;

945 
RCC
->
CFGR
 = 
tm¥eg
;

946 
	}
}

957 
uöt8_t
 
	$RCC_GëSYSCLKSour˚
()

959  ((
uöt8_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_SWS
));

960 
	}
}

982 
	$RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
)

984 
uöt32_t
 
tm¥eg
 = 0;

987 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_SYSCLK
));

989 
tm¥eg
 = 
RCC
->
CFGR
;

992 
tm¥eg
 &~
RCC_CFGR_HPRE
;

995 
tm¥eg
 |
RCC_SYSCLK
;

998 
RCC
->
CFGR
 = 
tm¥eg
;

999 
	}
}

1014 
	$RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
)

1016 
uöt32_t
 
tm¥eg
 = 0;

1019 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

1021 
tm¥eg
 = 
RCC
->
CFGR
;

1024 
tm¥eg
 &~
RCC_CFGR_PPRE1
;

1027 
tm¥eg
 |
RCC_HCLK
;

1030 
RCC
->
CFGR
 = 
tm¥eg
;

1031 
	}
}

1045 
	$RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
)

1047 
uöt32_t
 
tm¥eg
 = 0;

1050 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

1052 
tm¥eg
 = 
RCC
->
CFGR
;

1055 
tm¥eg
 &~
RCC_CFGR_PPRE2
;

1058 
tm¥eg
 |
RCC_HCLK
 << 3;

1061 
RCC
->
CFGR
 = 
tm¥eg
;

1062 
	}
}

1097 
	$RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
)

1099 
uöt32_t
 
tmp
 = 0, 
¥esc
 = 0, 
∂lvco
 = 0, 
∂Õ
 = 2, 
∂lsour˚
 = 0, 
∂lm
 = 2;

1102 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

1104 
tmp
)

1107 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

1110 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VALUE
;

1117 
∂lsour˚
 = (
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
) >> 22;

1118 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

1120 i‡(
∂lsour˚
 != 0)

1123 
∂lvco
 = (
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

1128 
∂lvco
 = (
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

1131 
∂Õ
 = (((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLP
) >>16) + 1 ) *2;

1132 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
∂lvco
/
∂Õ
;

1135 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

1141 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
;

1142 
tmp
 =Åmp >> 4;

1143 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1145 
RCC_Clocks
->
HCLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
 >> 
¥esc
;

1148 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
;

1149 
tmp
 =Åmp >> 10;

1150 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1152 
RCC_Clocks
->
PCLK1_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1155 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
;

1156 
tmp
 =Åmp >> 13;

1157 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1159 
RCC_Clocks
->
PCLK2_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1160 
	}
}

1222 
	$RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
)

1224 
uöt32_t
 
tm¥eg
 = 0;

1227 
	`as£π_∑øm
(
	`IS_RCC_RTCCLK_SOURCE
(
RCC_RTCCLKSour˚
));

1229 i‡((
RCC_RTCCLKSour˚
 & 0x00000300) == 0x00000300)

1231 
tm¥eg
 = 
RCC
->
CFGR
;

1234 
tm¥eg
 &~
RCC_CFGR_RTCPRE
;

1237 
tm¥eg
 |(
RCC_RTCCLKSour˚
 & 0xFFFFCFF);

1240 
RCC
->
CFGR
 = 
tm¥eg
;

1244 
RCC
->
BDCR
 |(
RCC_RTCCLKSour˚
 & 0x00000FFF);

1245 
	}
}

1254 
	$RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1257 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1259 *(
__IO
 
uöt32_t
 *Ë
BDCR_RTCEN_BB
 = (uöt32_t)
NewSèã
;

1260 
	}
}

1271 
	$RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1274 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1275 *(
__IO
 
uöt32_t
 *Ë
BDCR_BDRST_BB
 = (uöt32_t)
NewSèã
;

1276 
	}
}

1288 
	$RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SCLKSour˚
)

1291 
	`as£π_∑øm
(
	`IS_RCC_I2SCLK_SOURCE
(
RCC_I2SCLKSour˚
));

1293 *(
__IO
 
uöt32_t
 *Ë
CFGR_I2SSRC_BB
 = 
RCC_I2SCLKSour˚
;

1294 
	}
}

1309 
	$RCC_SAIPLLI2SClkDivC⁄fig
(
uöt32_t
 
RCC_PLLI2SDivQ
)

1311 
uöt32_t
 
tm¥eg
 = 0;

1314 
	`as£π_∑øm
(
	`IS_RCC_PLLI2S_DIVQ_VALUE
(
RCC_PLLI2SDivQ
));

1316 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1319 
tm¥eg
 &~(
RCC_DCKCFGR_PLLI2SDIVQ
);

1322 
tm¥eg
 |(
RCC_PLLI2SDivQ
 - 1);

1325 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1326 
	}
}

1341 
	$RCC_SAIPLLSAIClkDivC⁄fig
(
uöt32_t
 
RCC_PLLSAIDivQ
)

1343 
uöt32_t
 
tm¥eg
 = 0;

1346 
	`as£π_∑øm
(
	`IS_RCC_PLLSAI_DIVQ_VALUE
(
RCC_PLLSAIDivQ
));

1348 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1351 
tm¥eg
 &~(
RCC_DCKCFGR_PLLSAIDIVQ
);

1354 
tm¥eg
 |((
RCC_PLLSAIDivQ
 - 1) << 8);

1357 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1358 
	}
}

1377 
	$RCC_SAIBlockACLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockACLKSour˚
)

1379 
uöt32_t
 
tm¥eg
 = 0;

1382 
	`as£π_∑øm
(
	`IS_RCC_SAIACLK_SOURCE
(
RCC_SAIBlockACLKSour˚
));

1384 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1387 
tm¥eg
 &~
RCC_DCKCFGR_SAI1ASRC
;

1390 
tm¥eg
 |
RCC_SAIBlockACLKSour˚
;

1393 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1394 
	}
}

1413 
	$RCC_SAIBlockBCLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockBCLKSour˚
)

1415 
uöt32_t
 
tm¥eg
 = 0;

1418 
	`as£π_∑øm
(
	`IS_RCC_SAIBCLK_SOURCE
(
RCC_SAIBlockBCLKSour˚
));

1420 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1423 
tm¥eg
 &~
RCC_DCKCFGR_SAI1BSRC
;

1426 
tm¥eg
 |
RCC_SAIBlockBCLKSour˚
;

1429 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1430 
	}
}

1446 
	$RCC_LTDCCLKDivC⁄fig
(
uöt32_t
 
RCC_PLLSAIDivR
)

1448 
uöt32_t
 
tm¥eg
 = 0;

1451 
	`as£π_∑øm
(
	`IS_RCC_PLLSAI_DIVR_VALUE
(
RCC_PLLSAIDivR
));

1453 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1456 
tm¥eg
 &~
RCC_DCKCFGR_PLLSAIDIVR
;

1459 
tm¥eg
 |
RCC_PLLSAIDivR
;

1462 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1463 
	}
}

1483 
	$RCC_TIMCLKPªsC⁄fig
(
uöt32_t
 
RCC_TIMCLKPªsˇÀr
)

1486 
	`as£π_∑øm
(
	`IS_RCC_TIMCLK_PRESCALER
(
RCC_TIMCLKPªsˇÀr
));

1488 *(
__IO
 
uöt32_t
 *Ë
DCKCFGR_TIMPRE_BB
 = 
RCC_TIMCLKPªsˇÀr
;

1490 
	}
}

1526 
	$RCC_AHB1PîùhClockCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1529 
	`as£π_∑øm
(
	`IS_RCC_AHB1_CLOCK_PERIPH
(
RCC_AHB1Pîùh
));

1531 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1532 i‡(
NewSèã
 !
DISABLE
)

1534 
RCC
->
AHB1ENR
 |
RCC_AHB1Pîùh
;

1538 
RCC
->
AHB1ENR
 &~
RCC_AHB1Pîùh
;

1540 
	}
}

1558 
	$RCC_AHB2PîùhClockCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1561 
	`as£π_∑øm
(
	`IS_RCC_AHB2_PERIPH
(
RCC_AHB2Pîùh
));

1562 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1564 i‡(
NewSèã
 !
DISABLE
)

1566 
RCC
->
AHB2ENR
 |
RCC_AHB2Pîùh
;

1570 
RCC
->
AHB2ENR
 &~
RCC_AHB2Pîùh
;

1572 
	}
}

1586 
	$RCC_AHB3PîùhClockCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1589 
	`as£π_∑øm
(
	`IS_RCC_AHB3_PERIPH
(
RCC_AHB3Pîùh
));

1590 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1592 i‡(
NewSèã
 !
DISABLE
)

1594 
RCC
->
AHB3ENR
 |
RCC_AHB3Pîùh
;

1598 
RCC
->
AHB3ENR
 &~
RCC_AHB3Pîùh
;

1600 
	}
}

1638 
	$RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1641 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1642 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1644 i‡(
NewSèã
 !
DISABLE
)

1646 
RCC
->
APB1ENR
 |
RCC_APB1Pîùh
;

1650 
RCC
->
APB1ENR
 &~
RCC_APB1Pîùh
;

1652 
	}
}

1683 
	$RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1686 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1687 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1689 i‡(
NewSèã
 !
DISABLE
)

1691 
RCC
->
APB2ENR
 |
RCC_APB2Pîùh
;

1695 
RCC
->
APB2ENR
 &~
RCC_APB2Pîùh
;

1697 
	}
}

1725 
	$RCC_AHB1PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1728 
	`as£π_∑øm
(
	`IS_RCC_AHB1_RESET_PERIPH
(
RCC_AHB1Pîùh
));

1729 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1731 i‡(
NewSèã
 !
DISABLE
)

1733 
RCC
->
AHB1RSTR
 |
RCC_AHB1Pîùh
;

1737 
RCC
->
AHB1RSTR
 &~
RCC_AHB1Pîùh
;

1739 
	}
}

1754 
	$RCC_AHB2PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1757 
	`as£π_∑øm
(
	`IS_RCC_AHB2_PERIPH
(
RCC_AHB2Pîùh
));

1758 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1760 i‡(
NewSèã
 !
DISABLE
)

1762 
RCC
->
AHB2RSTR
 |
RCC_AHB2Pîùh
;

1766 
RCC
->
AHB2RSTR
 &~
RCC_AHB2Pîùh
;

1768 
	}
}

1779 
	$RCC_AHB3PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1782 
	`as£π_∑øm
(
	`IS_RCC_AHB3_PERIPH
(
RCC_AHB3Pîùh
));

1783 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1785 i‡(
NewSèã
 !
DISABLE
)

1787 
RCC
->
AHB3RSTR
 |
RCC_AHB3Pîùh
;

1791 
RCC
->
AHB3RSTR
 &~
RCC_AHB3Pîùh
;

1793 
	}
}

1828 
	$RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1831 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1832 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1833 i‡(
NewSèã
 !
DISABLE
)

1835 
RCC
->
APB1RSTR
 |
RCC_APB1Pîùh
;

1839 
RCC
->
APB1RSTR
 &~
RCC_APB1Pîùh
;

1841 
	}
}

1869 
	$RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1872 
	`as£π_∑øm
(
	`IS_RCC_APB2_RESET_PERIPH
(
RCC_APB2Pîùh
));

1873 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1874 i‡(
NewSèã
 !
DISABLE
)

1876 
RCC
->
APB2RSTR
 |
RCC_APB2Pîùh
;

1880 
RCC
->
APB2RSTR
 &~
RCC_APB2Pîùh
;

1882 
	}
}

1918 
	$RCC_AHB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1921 
	`as£π_∑øm
(
	`IS_RCC_AHB1_LPMODE_PERIPH
(
RCC_AHB1Pîùh
));

1922 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1923 i‡(
NewSèã
 !
DISABLE
)

1925 
RCC
->
AHB1LPENR
 |
RCC_AHB1Pîùh
;

1929 
RCC
->
AHB1LPENR
 &~
RCC_AHB1Pîùh
;

1931 
	}
}

1950 
	$RCC_AHB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1953 
	`as£π_∑øm
(
	`IS_RCC_AHB2_PERIPH
(
RCC_AHB2Pîùh
));

1954 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1955 i‡(
NewSèã
 !
DISABLE
)

1957 
RCC
->
AHB2LPENR
 |
RCC_AHB2Pîùh
;

1961 
RCC
->
AHB2LPENR
 &~
RCC_AHB2Pîùh
;

1963 
	}
}

1978 
	$RCC_AHB3PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1981 
	`as£π_∑øm
(
	`IS_RCC_AHB3_PERIPH
(
RCC_AHB3Pîùh
));

1982 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1983 i‡(
NewSèã
 !
DISABLE
)

1985 
RCC
->
AHB3LPENR
 |
RCC_AHB3Pîùh
;

1989 
RCC
->
AHB3LPENR
 &~
RCC_AHB3Pîùh
;

1991 
	}
}

2030 
	$RCC_APB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2033 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

2034 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2035 i‡(
NewSèã
 !
DISABLE
)

2037 
RCC
->
APB1LPENR
 |
RCC_APB1Pîùh
;

2041 
RCC
->
APB1LPENR
 &~
RCC_APB1Pîùh
;

2043 
	}
}

2075 
	$RCC_APB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2078 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

2079 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2080 i‡(
NewSèã
 !
DISABLE
)

2082 
RCC
->
APB2LPENR
 |
RCC_APB2Pîùh
;

2086 
RCC
->
APB2LPENR
 &~
RCC_APB2Pîùh
;

2088 
	}
}

2099 
	$RCC_LSEModeC⁄fig
(
uöt8_t
 
Mode
)

2102 
	`as£π_∑øm
(
	`IS_RCC_LSE_MODE
(
Mode
));

2104 if(
Mode
 =
RCC_LSE_HIGHDRIVE_MODE
)

2106 
	`SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEMOD
);

2110 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEMOD
);

2112 
	}
}

2145 
	$RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2148 
	`as£π_∑øm
(
	`IS_RCC_IT
(
RCC_IT
));

2149 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2150 i‡(
NewSèã
 !
DISABLE
)

2153 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 |
RCC_IT
;

2158 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 &(uöt8_t)~
RCC_IT
;

2160 
	}
}

2182 
FœgSètus
 
	$RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
)

2184 
uöt32_t
 
tmp
 = 0;

2185 
uöt32_t
 
°©u§eg
 = 0;

2186 
FœgSètus
 
bô°©us
 = 
RESET
;

2189 
	`as£π_∑øm
(
	`IS_RCC_FLAG
(
RCC_FLAG
));

2192 
tmp
 = 
RCC_FLAG
 >> 5;

2193 i‡(
tmp
 == 1)

2195 
°©u§eg
 = 
RCC
->
CR
;

2197 i‡(
tmp
 == 2)

2199 
°©u§eg
 = 
RCC
->
BDCR
;

2203 
°©u§eg
 = 
RCC
->
CSR
;

2207 
tmp
 = 
RCC_FLAG
 & 
FLAG_MASK
;

2208 i‡((
°©u§eg
 & ((
uöt32_t
)1 << 
tmp
)Ë!(uöt32_t)
RESET
)

2210 
bô°©us
 = 
SET
;

2214 
bô°©us
 = 
RESET
;

2217  
bô°©us
;

2218 
	}
}

2227 
	$RCC_CÀ¨Fœg
()

2230 
RCC
->
CSR
 |
RCC_CSR_RMVF
;

2231 
	}
}

2247 
ITSètus
 
	$RCC_GëITSètus
(
uöt8_t
 
RCC_IT
)

2249 
ITSètus
 
bô°©us
 = 
RESET
;

2252 
	`as£π_∑øm
(
	`IS_RCC_GET_IT
(
RCC_IT
));

2255 i‡((
RCC
->
CIR
 & 
RCC_IT
Ë!(
uöt32_t
)
RESET
)

2257 
bô°©us
 = 
SET
;

2261 
bô°©us
 = 
RESET
;

2264  
bô°©us
;

2265 
	}
}

2281 
	$RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
)

2284 
	`as£π_∑øm
(
	`IS_RCC_CLEAR_IT
(
RCC_IT
));

2288 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE3_ADDRESS
 = 
RCC_IT
;

2289 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c

56 
	~"°m32f4xx_∫g.h
"

57 
	~"°m32f4xx_rcc.h
"

99 
	$RNG_DeInô
()

102 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_RNG
, 
ENABLE
);

105 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_RNG
, 
DISABLE
);

106 
	}
}

114 
	$RNG_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

117 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

119 i‡(
NewSèã
 !
DISABLE
)

122 
RNG
->
CR
 |
RNG_CR_RNGEN
;

127 
RNG
->
CR
 &~
RNG_CR_RNGEN
;

129 
	}
}

176 
uöt32_t
 
	$RNG_GëR™domNumbî
()

179  
RNG
->
DR
;

180 
	}
}

267 
	$RNG_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

270 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

272 i‡(
NewSèã
 !
DISABLE
)

275 
RNG
->
CR
 |
RNG_CR_IE
;

280 
RNG
->
CR
 &~
RNG_CR_IE
;

282 
	}
}

293 
FœgSètus
 
	$RNG_GëFœgSètus
(
uöt8_t
 
RNG_FLAG
)

295 
FœgSètus
 
bô°©us
 = 
RESET
;

297 
	`as£π_∑øm
(
	`IS_RNG_GET_FLAG
(
RNG_FLAG
));

300 i‡((
RNG
->
SR
 & 
RNG_FLAG
Ë!(
uöt8_t
)
RESET
)

303 
bô°©us
 = 
SET
;

308 
bô°©us
 = 
RESET
;

311  
bô°©us
;

312 
	}
}

326 
	$RNG_CÀ¨Fœg
(
uöt8_t
 
RNG_FLAG
)

329 
	`as£π_∑øm
(
	`IS_RNG_CLEAR_FLAG
(
RNG_FLAG
));

331 
RNG
->
SR
 = ~(
uöt32_t
)(((uöt32_t)
RNG_FLAG
) << 4);

332 
	}
}

342 
ITSètus
 
	$RNG_GëITSètus
(
uöt8_t
 
RNG_IT
)

344 
ITSètus
 
bô°©us
 = 
RESET
;

346 
	`as£π_∑øm
(
	`IS_RNG_GET_IT
(
RNG_IT
));

349 i‡((
RNG
->
SR
 & 
RNG_IT
Ë!(
uöt8_t
)
RESET
)

352 
bô°©us
 = 
SET
;

357 
bô°©us
 = 
RESET
;

360  
bô°©us
;

361 
	}
}

372 
	$RNG_CÀ¨ITPídögBô
(
uöt8_t
 
RNG_IT
)

375 
	`as£π_∑øm
(
	`IS_RNG_IT
(
RNG_IT
));

378 
RNG
->
SR
 = (
uöt8_t
)~
RNG_IT
;

379 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c

285 
	~"°m32f4xx_πc.h
"

300 
	#RTC_TR_RESERVED_MASK
 ((
uöt32_t
)0x007F7F7F)

	)

301 
	#RTC_DR_RESERVED_MASK
 ((
uöt32_t
)0x00FFFF3F)

	)

302 
	#RTC_INIT_MASK
 ((
uöt32_t
)0xFFFFFFFF)

	)

303 
	#RTC_RSF_MASK
 ((
uöt32_t
)0xFFFFFF5F)

	)

304 
	#RTC_FLAGS_MASK
 ((
uöt32_t
)(
RTC_FLAG_TSOVF
 | 
RTC_FLAG_TSF
 | 
RTC_FLAG_WUTF
 | \

305 
RTC_FLAG_ALRBF
 | 
RTC_FLAG_ALRAF
 | 
RTC_FLAG_INITF
 | \

306 
RTC_FLAG_RSF
 | 
RTC_FLAG_INITS
 | 
RTC_FLAG_WUTWF
 | \

307 
RTC_FLAG_ALRBWF
 | 
RTC_FLAG_ALRAWF
 | 
RTC_FLAG_TAMP1F
 | \

308 
RTC_FLAG_RECALPF
 | 
RTC_FLAG_SHPF
))

	)

310 
	#INITMODE_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

311 
	#SYNCHRO_TIMEOUT
 ((
uöt32_t
Ë0x00020000)

	)

312 
	#RECALPF_TIMEOUT
 ((
uöt32_t
Ë0x00020000)

	)

313 
	#SHPF_TIMEOUT
 ((
uöt32_t
Ë0x00001000)

	)

318 
uöt8_t
 
RTC_ByãToBcd2
(uöt8_à
VÆue
);

319 
uöt8_t
 
RTC_Bcd2ToByã
(uöt8_à
VÆue
);

375 
Eº‹Sètus
 
	$RTC_DeInô
()

377 
__IO
 
uöt32_t
 
wutcou¡î
 = 0x00;

378 
uöt32_t
 
wutwf°©us
 = 0x00;

379 
Eº‹Sètus
 
°©us
 = 
ERROR
;

382 
RTC
->
WPR
 = 0xCA;

383 
RTC
->
WPR
 = 0x53;

386 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

388 
°©us
 = 
ERROR
;

393 
RTC
->
TR
 = (
uöt32_t
)0x00000000;

394 
RTC
->
DR
 = (
uöt32_t
)0x00002101;

396 
RTC
->
CR
 &(
uöt32_t
)0x00000007;

401 
wutwf°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_WUTWF
;

402 
wutcou¡î
++;

403 } (
wutcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
wutwf°©us
 == 0x00));

405 i‡((
RTC
->
ISR
 & 
RTC_ISR_WUTWF
Ë=
RESET
)

407 
°©us
 = 
ERROR
;

412 
RTC
->
CR
 &(
uöt32_t
)0x00000000;

413 
RTC
->
WUTR
 = (
uöt32_t
)0x0000FFFF;

414 
RTC
->
PRER
 = (
uöt32_t
)0x007F00FF;

415 
RTC
->
CALIBR
 = (
uöt32_t
)0x00000000;

416 
RTC
->
ALRMAR
 = (
uöt32_t
)0x00000000;

417 
RTC
->
ALRMBR
 = (
uöt32_t
)0x00000000;

418 
RTC
->
SHIFTR
 = (
uöt32_t
)0x00000000;

419 
RTC
->
CALR
 = (
uöt32_t
)0x00000000;

420 
RTC
->
ALRMASSR
 = (
uöt32_t
)0x00000000;

421 
RTC
->
ALRMBSSR
 = (
uöt32_t
)0x00000000;

424 
RTC
->
ISR
 = (
uöt32_t
)0x00000000;

427 
RTC
->
TAFCR
 = 0x00000000;

429 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

431 
°©us
 = 
ERROR
;

435 
°©us
 = 
SUCCESS
;

441 
RTC
->
WPR
 = 0xFF;

443  
°©us
;

444 
	}
}

457 
Eº‹Sètus
 
	$RTC_Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
)

459 
Eº‹Sètus
 
°©us
 = 
ERROR
;

462 
	`as£π_∑øm
(
	`IS_RTC_HOUR_FORMAT
(
RTC_InôSåu˘
->
RTC_HourF‹m©
));

463 
	`as£π_∑øm
(
	`IS_RTC_ASYNCH_PREDIV
(
RTC_InôSåu˘
->
RTC_AsynchPªdiv
));

464 
	`as£π_∑øm
(
	`IS_RTC_SYNCH_PREDIV
(
RTC_InôSåu˘
->
RTC_SynchPªdiv
));

467 
RTC
->
WPR
 = 0xCA;

468 
RTC
->
WPR
 = 0x53;

471 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

473 
°©us
 = 
ERROR
;

478 
RTC
->
CR
 &((
uöt32_t
)~(
RTC_CR_FMT
));

480 
RTC
->
CR
 |((
uöt32_t
)(
RTC_InôSåu˘
->
RTC_HourF‹m©
));

483 
RTC
->
PRER
 = (
uöt32_t
)(
RTC_InôSåu˘
->
RTC_SynchPªdiv
);

484 
RTC
->
PRER
 |(
uöt32_t
)(
RTC_InôSåu˘
->
RTC_AsynchPªdiv
 << 16);

487 
	`RTC_ExôInôMode
();

489 
°©us
 = 
SUCCESS
;

492 
RTC
->
WPR
 = 0xFF;

494  
°©us
;

495 
	}
}

503 
	$RTC_Såu˘Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
)

506 
RTC_InôSåu˘
->
RTC_HourF‹m©
 = 
RTC_HourF‹m©_24
;

509 
RTC_InôSåu˘
->
RTC_AsynchPªdiv
 = (
uöt32_t
)0x7F;

512 
RTC_InôSåu˘
->
RTC_SynchPªdiv
 = (
uöt32_t
)0xFF;

513 
	}
}

525 
	$RTC_WrôePrŸe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

528 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

530 i‡(
NewSèã
 !
DISABLE
)

533 
RTC
->
WPR
 = 0xFF;

538 
RTC
->
WPR
 = 0xCA;

539 
RTC
->
WPR
 = 0x53;

541 
	}
}

552 
Eº‹Sètus
 
	$RTC_E¡îInôMode
()

554 
__IO
 
uöt32_t
 
öôcou¡î
 = 0x00;

555 
Eº‹Sètus
 
°©us
 = 
ERROR
;

556 
uöt32_t
 
öô°©us
 = 0x00;

559 i‡((
RTC
->
ISR
 & 
RTC_ISR_INITF
Ë=(
uöt32_t
)
RESET
)

562 
RTC
->
ISR
 = (
uöt32_t
)
RTC_INIT_MASK
;

567 
öô°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_INITF
;

568 
öôcou¡î
++;

569 } (
öôcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
öô°©us
 == 0x00));

571 i‡((
RTC
->
ISR
 & 
RTC_ISR_INITF
Ë!
RESET
)

573 
°©us
 = 
SUCCESS
;

577 
°©us
 = 
ERROR
;

582 
°©us
 = 
SUCCESS
;

585  (
°©us
);

586 
	}
}

597 
	$RTC_ExôInôMode
()

600 
RTC
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

601 
	}
}

619 
Eº‹Sètus
 
	$RTC_WaôF‹Synchro
()

621 
__IO
 
uöt32_t
 
synchrocou¡î
 = 0;

622 
Eº‹Sètus
 
°©us
 = 
ERROR
;

623 
uöt32_t
 
synchro°©us
 = 0x00;

626 
RTC
->
WPR
 = 0xCA;

627 
RTC
->
WPR
 = 0x53;

630 
RTC
->
ISR
 &(
uöt32_t
)
RTC_RSF_MASK
;

635 
synchro°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_RSF
;

636 
synchrocou¡î
++;

637 } (
synchrocou¡î
 !
SYNCHRO_TIMEOUT
Ë&& (
synchro°©us
 == 0x00));

639 i‡((
RTC
->
ISR
 & 
RTC_ISR_RSF
Ë!
RESET
)

641 
°©us
 = 
SUCCESS
;

645 
°©us
 = 
ERROR
;

649 
RTC
->
WPR
 = 0xFF;

651  (
°©us
);

652 
	}
}

662 
Eº‹Sètus
 
	$RTC_RefClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

664 
Eº‹Sètus
 
°©us
 = 
ERROR
;

667 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

670 
RTC
->
WPR
 = 0xCA;

671 
RTC
->
WPR
 = 0x53;

674 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

676 
°©us
 = 
ERROR
;

680 i‡(
NewSèã
 !
DISABLE
)

683 
RTC
->
CR
 |
RTC_CR_REFCKON
;

688 
RTC
->
CR
 &~
RTC_CR_REFCKON
;

691 
	`RTC_ExôInôMode
();

693 
°©us
 = 
SUCCESS
;

697 
RTC
->
WPR
 = 0xFF;

699  
°©us
;

700 
	}
}

710 
	$RTC_By∑ssShadowCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

713 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

716 
RTC
->
WPR
 = 0xCA;

717 
RTC
->
WPR
 = 0x53;

719 i‡(
NewSèã
 !
DISABLE
)

722 
RTC
->
CR
 |(
uöt8_t
)
RTC_CR_BYPSHAD
;

727 
RTC
->
CR
 &(
uöt8_t
)~
RTC_CR_BYPSHAD
;

731 
RTC
->
WPR
 = 0xFF;

732 
	}
}

765 
Eº‹Sètus
 
	$RTC_SëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

767 
uöt32_t
 
tm¥eg
 = 0;

768 
Eº‹Sètus
 
°©us
 = 
ERROR
;

771 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

773 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

775 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

777 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
RTC_TimeSåu˘
->
RTC_Hours
));

778 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_TimeSåu˘
->
RTC_H12
));

782 
RTC_TimeSåu˘
->
RTC_H12
 = 0x00;

783 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
RTC_TimeSåu˘
->
RTC_Hours
));

785 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
RTC_TimeSåu˘
->
RTC_Möuãs
));

786 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
));

790 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

792 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Hours
);

793 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

794 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_TimeSåu˘
->
RTC_H12
));

798 
RTC_TimeSåu˘
->
RTC_H12
 = 0x00;

799 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Hours
)));

801 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Möuãs
)));

802 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
)));

806 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

808 
tm¥eg
 = (((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_Hours
) << 16) | \

809 ((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_Möuãs
) << 8) | \

810 ((
uöt32_t
)
RTC_TimeSåu˘
->
RTC_Sec⁄ds
) | \

811 ((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_H12
) << 16));

815 
tm¥eg
 = (
uöt32_t
)(((uöt32_t)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Hours
) << 16) | \

816 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Möuãs
) << 8) | \

817 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
)) | \

818 (((
uöt32_t
)
RTC_TimeSåu˘
->
RTC_H12
) << 16));

822 
RTC
->
WPR
 = 0xCA;

823 
RTC
->
WPR
 = 0x53;

826 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

828 
°©us
 = 
ERROR
;

833 
RTC
->
TR
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_TR_RESERVED_MASK
);

836 
	`RTC_ExôInôMode
();

839 i‡((
RTC
->
CR
 & 
RTC_CR_BYPSHAD
Ë=
RESET
)

841 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

843 
°©us
 = 
ERROR
;

847 
°©us
 = 
SUCCESS
;

852 
°©us
 = 
SUCCESS
;

856 
RTC
->
WPR
 = 0xFF;

858  
°©us
;

859 
	}
}

868 
	$RTC_TimeSåu˘Inô
(
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

871 
RTC_TimeSåu˘
->
RTC_H12
 = 
RTC_H12_AM
;

872 
RTC_TimeSåu˘
->
RTC_Hours
 = 0;

873 
RTC_TimeSåu˘
->
RTC_Möuãs
 = 0;

874 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = 0;

875 
	}
}

887 
	$RTC_GëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

889 
uöt32_t
 
tm¥eg
 = 0;

892 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

895 
tm¥eg
 = (
uöt32_t
)(
RTC
->
TR
 & 
RTC_TR_RESERVED_MASK
);

898 
RTC_TimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

899 
RTC_TimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >>8);

900 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)(
tm¥eg
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

901 
RTC_TimeSåu˘
->
RTC_H12
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_PM
)) >> 16);

904 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

907 
RTC_TimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Hours);

908 
RTC_TimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Minutes);

909 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Seconds);

911 
	}
}

920 
uöt32_t
 
	$RTC_GëSubSec⁄d
()

922 
uöt32_t
 
tm¥eg
 = 0;

925 
tm¥eg
 = (
uöt32_t
)(
RTC
->
SSR
);

928 (Ë(
RTC
->
DR
);

930  (
tm¥eg
);

931 
	}
}

945 
Eº‹Sètus
 
	$RTC_SëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

947 
uöt32_t
 
tm¥eg
 = 0;

948 
Eº‹Sètus
 
°©us
 = 
ERROR
;

951 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

953 i‡((
RTC_F‹m©
 =
RTC_F‹m©_BIN
Ë&& ((
RTC_D©eSåu˘
->
RTC_M⁄th
 & 0x10) == 0x10))

955 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (RTC_D©eSåu˘->RTC_M⁄th & (
uöt32_t
)~(0x10)) + 0x0A;

957 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

959 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
RTC_D©eSåu˘
->
RTC_Yór
));

960 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
RTC_D©eSåu˘
->
RTC_M⁄th
));

961 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
RTC_D©eSåu˘
->
RTC_D©e
));

965 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_Yór
)));

966 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_M⁄th
);

967 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
tm¥eg
));

968 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_D©e
);

969 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
tm¥eg
));

971 
	`as£π_∑øm
(
	`IS_RTC_WEEKDAY
(
RTC_D©eSåu˘
->
RTC_WìkDay
));

974 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

976 
tm¥eg
 = ((((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_Yór
) << 16) | \

977 (((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_M⁄th
) << 8) | \

978 ((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_D©e
) | \

979 (((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_WìkDay
) << 13));

983 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_Yór
) << 16) | \

984 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_M⁄th
) << 8) | \

985 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_D©e
)) | \

986 ((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_WìkDay
 << 13));

990 
RTC
->
WPR
 = 0xCA;

991 
RTC
->
WPR
 = 0x53;

994 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

996 
°©us
 = 
ERROR
;

1001 
RTC
->
DR
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_DR_RESERVED_MASK
);

1004 
	`RTC_ExôInôMode
();

1007 i‡((
RTC
->
CR
 & 
RTC_CR_BYPSHAD
Ë=
RESET
)

1009 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

1011 
°©us
 = 
ERROR
;

1015 
°©us
 = 
SUCCESS
;

1020 
°©us
 = 
SUCCESS
;

1024 
RTC
->
WPR
 = 0xFF;

1026  
°©us
;

1027 
	}
}

1036 
	$RTC_D©eSåu˘Inô
(
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

1039 
RTC_D©eSåu˘
->
RTC_WìkDay
 = 
RTC_Wìkday_M⁄day
;

1040 
RTC_D©eSåu˘
->
RTC_D©e
 = 1;

1041 
RTC_D©eSåu˘
->
RTC_M⁄th
 = 
RTC_M⁄th_J™u¨y
;

1042 
RTC_D©eSåu˘
->
RTC_Yór
 = 0;

1043 
	}
}

1055 
	$RTC_GëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

1057 
uöt32_t
 
tm¥eg
 = 0;

1060 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1063 
tm¥eg
 = (
uöt32_t
)(
RTC
->
DR
 & 
RTC_DR_RESERVED_MASK
);

1066 
RTC_D©eSåu˘
->
RTC_Yór
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_YT
 | 
RTC_DR_YU
)) >> 16);

1067 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

1068 
RTC_D©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)(
tm¥eg
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

1069 
RTC_D©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_WDU
)) >> 13);

1072 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1075 
RTC_D©eSåu˘
->
RTC_Yór
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Year);

1076 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Month);

1077 
RTC_D©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Date);

1079 
	}
}

1115 
	$RTC_SëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1117 
uöt32_t
 
tm¥eg
 = 0;

1120 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1121 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1122 
	`as£π_∑øm
(
	`IS_ALARM_MASK
(
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1123 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
));

1125 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1127 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

1129 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
));

1130 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
));

1134 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 0x00;

1135 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
));

1137 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
));

1138 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
));

1140 if(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 =
RTC_AœrmD©eWìkDaySñ_D©e
)

1142 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
));

1146 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
));

1151 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

1153 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
);

1154 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

1155 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
));

1159 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 0x00;

1160 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
)));

1163 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
)));

1164 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
)));

1166 if(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 =
RTC_AœrmD©eWìkDaySñ_D©e
)

1168 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
);

1169 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
tm¥eg
));

1173 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
);

1174 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
tm¥eg
));

1179 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

1181 
tm¥eg
 = (((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
) << 16) | \

1182 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
) << 8) | \

1183 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
) | \

1184 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
) << 16) | \

1185 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
) << 24) | \

1186 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
) | \

1187 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1191 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
) << 16) | \

1192 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
) << 8) | \

1193 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
)) | \

1194 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
) << 16) | \

1195 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
) << 24) | \

1196 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
) | \

1197 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1201 
RTC
->
WPR
 = 0xCA;

1202 
RTC
->
WPR
 = 0x53;

1205 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1207 
RTC
->
ALRMAR
 = (
uöt32_t
)
tm¥eg
;

1211 
RTC
->
ALRMBR
 = (
uöt32_t
)
tm¥eg
;

1215 
RTC
->
WPR
 = 0xFF;

1216 
	}
}

1226 
	$RTC_AœrmSåu˘Inô
(
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1229 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 
RTC_H12_AM
;

1230 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = 0;

1231 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = 0;

1232 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = 0;

1235 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 = 
RTC_AœrmD©eWìkDaySñ_D©e
;

1236 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = 1;

1239 
RTC_AœrmSåu˘
->
RTC_AœrmMask
 = 
RTC_AœrmMask_N⁄e
;

1240 
	}
}

1256 
	$RTC_GëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1258 
uöt32_t
 
tm¥eg
 = 0;

1261 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1262 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1265 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1267 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ALRMAR
);

1271 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ALRMBR
);

1275 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_HT
 | \

1276 
RTC_ALRMAR_HU
)) >> 16);

1277 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_MNT
 | \

1278 
RTC_ALRMAR_MNU
)) >> 8);

1279 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = (
uöt32_t
)(
tm¥eg
 & (
RTC_ALRMAR_ST
 | \

1280 
RTC_ALRMAR_SU
));

1281 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = (
uöt32_t
)((
tm¥eg
 & 
RTC_ALRMAR_PM
) >> 16);

1282 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_DT
 | 
RTC_ALRMAR_DU
)) >> 24);

1283 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_ALRMAR_WDSEL
);

1284 
RTC_AœrmSåu˘
->
RTC_AœrmMask
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_AœrmMask_AŒ
);

1286 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1288 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1289 
RTC_AœrmTime
.
RTC_Hours
);

1290 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1291 
RTC_AœrmTime
.
RTC_Möuãs
);

1292 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1293 
RTC_AœrmTime
.
RTC_Sec⁄ds
);

1294 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct->RTC_AlarmDateWeekDay);

1296 
	}
}

1310 
Eº‹Sètus
 
	$RTC_AœrmCmd
(
uöt32_t
 
RTC_Aœrm
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1312 
__IO
 
uöt32_t
 
Æ¨mcou¡î
 = 0x00;

1313 
uöt32_t
 
Æ¨m°©us
 = 0x00;

1314 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1317 
	`as£π_∑øm
(
	`IS_RTC_CMD_ALARM
(
RTC_Aœrm
));

1318 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1321 
RTC
->
WPR
 = 0xCA;

1322 
RTC
->
WPR
 = 0x53;

1325 i‡(
NewSèã
 !
DISABLE
)

1327 
RTC
->
CR
 |(
uöt32_t
)
RTC_Aœrm
;

1329 
°©us
 = 
SUCCESS
;

1334 
RTC
->
CR
 &(
uöt32_t
)~
RTC_Aœrm
;

1339 
Æ¨m°©us
 = 
RTC
->
ISR
 & (
RTC_Aœrm
 >> 8);

1340 
Æ¨mcou¡î
++;

1341 } (
Æ¨mcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
Æ¨m°©us
 == 0x00));

1343 i‡((
RTC
->
ISR
 & (
RTC_Aœrm
 >> 8)Ë=
RESET
)

1345 
°©us
 = 
ERROR
;

1349 
°©us
 = 
SUCCESS
;

1354 
RTC
->
WPR
 = 0xFF;

1356  
°©us
;

1357 
	}
}

1404 
	$RTC_AœrmSubSec⁄dC⁄fig
(
uöt32_t
 
RTC_Aœrm
, uöt32_à
RTC_AœrmSubSec⁄dVÆue
, uöt32_à
RTC_AœrmSubSec⁄dMask
)

1406 
uöt32_t
 
tm¥eg
 = 0;

1409 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1410 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_VALUE
(
RTC_AœrmSubSec⁄dVÆue
));

1411 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_MASK
(
RTC_AœrmSubSec⁄dMask
));

1414 
RTC
->
WPR
 = 0xCA;

1415 
RTC
->
WPR
 = 0x53;

1418 
tm¥eg
 = (
uöt32_t
Ë(uöt32_t)(
RTC_AœrmSubSec⁄dVÆue
Ë| (uöt32_t)(
RTC_AœrmSubSec⁄dMask
);

1420 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1423 
RTC
->
ALRMASSR
 = 
tm¥eg
;

1428 
RTC
->
ALRMBSSR
 = 
tm¥eg
;

1432 
RTC
->
WPR
 = 0xFF;

1434 
	}
}

1445 
uöt32_t
 
	$RTC_GëAœrmSubSec⁄d
(
uöt32_t
 
RTC_Aœrm
)

1447 
uöt32_t
 
tm¥eg
 = 0;

1450 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1452 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ALRMASSR
Ë& 
RTC_ALRMASSR_SS
);

1456 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ALRMBSSR
Ë& 
RTC_ALRMBSSR_SS
);

1459  (
tm¥eg
);

1460 
	}
}

1494 
	$RTC_WakeUpClockC⁄fig
(
uöt32_t
 
RTC_WakeUpClock
)

1497 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_CLOCK
(
RTC_WakeUpClock
));

1500 
RTC
->
WPR
 = 0xCA;

1501 
RTC
->
WPR
 = 0x53;

1504 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_WUCKSEL
;

1507 
RTC
->
CR
 |(
uöt32_t
)
RTC_WakeUpClock
;

1510 
RTC
->
WPR
 = 0xFF;

1511 
	}
}

1521 
	$RTC_SëWakeUpCou¡î
(
uöt32_t
 
RTC_WakeUpCou¡î
)

1524 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_COUNTER
(
RTC_WakeUpCou¡î
));

1527 
RTC
->
WPR
 = 0xCA;

1528 
RTC
->
WPR
 = 0x53;

1531 
RTC
->
WUTR
 = (
uöt32_t
)
RTC_WakeUpCou¡î
;

1534 
RTC
->
WPR
 = 0xFF;

1535 
	}
}

1542 
uöt32_t
 
	$RTC_GëWakeUpCou¡î
()

1545  ((
uöt32_t
)(
RTC
->
WUTR
 & 
RTC_WUTR_WUT
));

1546 
	}
}

1554 
Eº‹Sètus
 
	$RTC_WakeUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1556 
__IO
 
uöt32_t
 
wutcou¡î
 = 0x00;

1557 
uöt32_t
 
wutwf°©us
 = 0x00;

1558 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1561 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1564 
RTC
->
WPR
 = 0xCA;

1565 
RTC
->
WPR
 = 0x53;

1567 i‡(
NewSèã
 !
DISABLE
)

1570 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_WUTE
;

1571 
°©us
 = 
SUCCESS
;

1576 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_WUTE
;

1580 
wutwf°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_WUTWF
;

1581 
wutcou¡î
++;

1582 } (
wutcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
wutwf°©us
 == 0x00));

1584 i‡((
RTC
->
ISR
 & 
RTC_ISR_WUTWF
Ë=
RESET
)

1586 
°©us
 = 
ERROR
;

1590 
°©us
 = 
SUCCESS
;

1595 
RTC
->
WPR
 = 0xFF;

1597  
°©us
;

1598 
	}
}

1631 
	$RTC_DayLightSavögC⁄fig
(
uöt32_t
 
RTC_DayLightSavög
, uöt32_à
RTC_St‹eO≥øti⁄
)

1634 
	`as£π_∑øm
(
	`IS_RTC_DAYLIGHT_SAVING
(
RTC_DayLightSavög
));

1635 
	`as£π_∑øm
(
	`IS_RTC_STORE_OPERATION
(
RTC_St‹eO≥øti⁄
));

1638 
RTC
->
WPR
 = 0xCA;

1639 
RTC
->
WPR
 = 0x53;

1642 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_BCK
);

1645 
RTC
->
CR
 |(
uöt32_t
)(
RTC_DayLightSavög
 | 
RTC_St‹eO≥øti⁄
);

1648 
RTC
->
WPR
 = 0xFF;

1649 
	}
}

1658 
uöt32_t
 
	$RTC_GëSt‹eO≥øti⁄
()

1660  (
RTC
->
CR
 & 
RTC_CR_BCK
);

1661 
	}
}

1697 
	$RTC_OuçutC⁄fig
(
uöt32_t
 
RTC_Ouçut
, uöt32_à
RTC_OuçutPﬁ¨ôy
)

1700 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT
(
RTC_Ouçut
));

1701 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT_POL
(
RTC_OuçutPﬁ¨ôy
));

1704 
RTC
->
WPR
 = 0xCA;

1705 
RTC
->
WPR
 = 0x53;

1708 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_OSEL
 | 
RTC_CR_POL
);

1711 
RTC
->
CR
 |(
uöt32_t
)(
RTC_Ouçut
 | 
RTC_OuçutPﬁ¨ôy
);

1714 
RTC
->
WPR
 = 0xFF;

1715 
	}
}

1751 
Eº‹Sètus
 
	$RTC_Cﬂr£CÆibC⁄fig
(
uöt32_t
 
RTC_CÆibSign
, uöt32_à
VÆue
)

1753 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1756 
	`as£π_∑øm
(
	`IS_RTC_CALIB_SIGN
(
RTC_CÆibSign
));

1757 
	`as£π_∑øm
(
	`IS_RTC_CALIB_VALUE
(
VÆue
));

1760 
RTC
->
WPR
 = 0xCA;

1761 
RTC
->
WPR
 = 0x53;

1764 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

1766 
°©us
 = 
ERROR
;

1771 
RTC
->
CALIBR
 = (
uöt32_t
)(
RTC_CÆibSign
 | 
VÆue
);

1773 
	`RTC_ExôInôMode
();

1775 
°©us
 = 
SUCCESS
;

1779 
RTC
->
WPR
 = 0xFF;

1781  
°©us
;

1782 
	}
}

1792 
Eº‹Sètus
 
	$RTC_Cﬂr£CÆibCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1794 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1797 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1800 
RTC
->
WPR
 = 0xCA;

1801 
RTC
->
WPR
 = 0x53;

1804 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

1806 
°©us
 = 
ERROR
;

1810 i‡(
NewSèã
 !
DISABLE
)

1813 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_DCE
;

1818 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_DCE
;

1821 
	`RTC_ExôInôMode
();

1823 
°©us
 = 
SUCCESS
;

1827 
RTC
->
WPR
 = 0xFF;

1829  
°©us
;

1830 
	}
}

1838 
	$RTC_CÆibOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1841 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1844 
RTC
->
WPR
 = 0xCA;

1845 
RTC
->
WPR
 = 0x53;

1847 i‡(
NewSèã
 !
DISABLE
)

1850 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_COE
;

1855 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_COE
;

1859 
RTC
->
WPR
 = 0xFF;

1860 
	}
}

1870 
	$RTC_CÆibOuçutC⁄fig
(
uöt32_t
 
RTC_CÆibOuçut
)

1873 
	`as£π_∑øm
(
	`IS_RTC_CALIB_OUTPUT
(
RTC_CÆibOuçut
));

1876 
RTC
->
WPR
 = 0xCA;

1877 
RTC
->
WPR
 = 0x53;

1880 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_COSEL
);

1883 
RTC
->
CR
 |(
uöt32_t
)
RTC_CÆibOuçut
;

1886 
RTC
->
WPR
 = 0xFF;

1887 
	}
}

1906 
Eº‹Sètus
 
	$RTC_SmoŸhCÆibC⁄fig
(
uöt32_t
 
RTC_SmoŸhCÆibPîiod
,

1907 
uöt32_t
 
RTC_SmoŸhCÆibPlusPul£s
,

1908 
uöt32_t
 
RTC_SmouthCÆibMöusPul£sVÆue
)

1910 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1911 
uöt32_t
 
ªˇÕfcou¡
 = 0;

1914 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PERIOD
(
RTC_SmoŸhCÆibPîiod
));

1915 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PLUS
(
RTC_SmoŸhCÆibPlusPul£s
));

1916 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_MINUS
(
RTC_SmouthCÆibMöusPul£sVÆue
));

1919 
RTC
->
WPR
 = 0xCA;

1920 
RTC
->
WPR
 = 0x53;

1923 i‡((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
)

1926 ((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
Ë&& (
ªˇÕfcou¡
 !
RECALPF_TIMEOUT
))

1928 
ªˇÕfcou¡
++;

1933 i‡((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë=
RESET
)

1936 
RTC
->
CALR
 = (
uöt32_t
)((uöt32_t)
RTC_SmoŸhCÆibPîiod
 | (uöt32_t)
RTC_SmoŸhCÆibPlusPul£s
 | (uöt32_t)
RTC_SmouthCÆibMöusPul£sVÆue
);

1938 
°©us
 = 
SUCCESS
;

1942 
°©us
 = 
ERROR
;

1946 
RTC
->
WPR
 = 0xFF;

1948  (
Eº‹Sètus
)(
°©us
);

1949 
	}
}

1982 
	$RTC_TimeSèmpCmd
(
uöt32_t
 
RTC_TimeSèmpEdge
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1984 
uöt32_t
 
tm¥eg
 = 0;

1987 
	`as£π_∑øm
(
	`IS_RTC_TIMESTAMP_EDGE
(
RTC_TimeSèmpEdge
));

1988 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1991 
tm¥eg
 = (
uöt32_t
)(
RTC
->
CR
 & (uöt32_t)~(
RTC_CR_TSEDGE
 | 
RTC_CR_TSE
));

1994 i‡(
NewSèã
 !
DISABLE
)

1996 
tm¥eg
 |(
uöt32_t
)(
RTC_TimeSèmpEdge
 | 
RTC_CR_TSE
);

2000 
tm¥eg
 |(
uöt32_t
)(
RTC_TimeSèmpEdge
);

2004 
RTC
->
WPR
 = 0xCA;

2005 
RTC
->
WPR
 = 0x53;

2008 
RTC
->
CR
 = (
uöt32_t
)
tm¥eg
;

2011 
RTC
->
WPR
 = 0xFF;

2012 
	}
}

2026 
	$RTC_GëTimeSèmp
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_SèmpTimeSåu˘
,

2027 
RTC_D©eTy≥Def
* 
RTC_SèmpD©eSåu˘
)

2029 
uöt32_t
 
tm±ime
 = 0, 
tmpd©e
 = 0;

2032 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

2035 
tm±ime
 = (
uöt32_t
)(
RTC
->
TSTR
 & 
RTC_TR_RESERVED_MASK
);

2036 
tmpd©e
 = (
uöt32_t
)(
RTC
->
TSDR
 & 
RTC_DR_RESERVED_MASK
);

2039 
RTC_SèmpTimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

2040 
RTC_SèmpTimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >> 8);

2041 
RTC_SèmpTimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)(
tm±ime
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

2042 
RTC_SèmpTimeSåu˘
->
RTC_H12
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_PM
)) >> 16);

2045 
RTC_SèmpD©eSåu˘
->
RTC_Yór
 = 0;

2046 
RTC_SèmpD©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

2047 
RTC_SèmpD©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)(
tmpd©e
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

2048 
RTC_SèmpD©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_WDU
)) >> 13);

2051 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

2054 
RTC_SèmpTimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Hours);

2055 
RTC_SèmpTimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Minutes);

2056 
RTC_SèmpTimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Seconds);

2059 
RTC_SèmpD©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_Month);

2060 
RTC_SèmpD©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_Date);

2061 
RTC_SèmpD©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_WeekDay);

2063 
	}
}

2070 
uöt32_t
 
	$RTC_GëTimeSèmpSubSec⁄d
()

2073  (
uöt32_t
)(
RTC
->
TSSSR
);

2074 
	}
}

2105 
	$RTC_Tam≥rTriggîC⁄fig
(
uöt32_t
 
RTC_Tam≥r
, uöt32_à
RTC_Tam≥rTriggî
)

2108 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
RTC_Tam≥r
));

2109 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_TRIGGER
(
RTC_Tam≥rTriggî
));

2111 i‡(
RTC_Tam≥rTriggî
 =
RTC_Tam≥rTriggî_RisögEdge
)

2114 
RTC
->
TAFCR
 &(
uöt32_t
)((uöt32_t)~(
RTC_Tam≥r
 << 1));

2119 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_Tam≥r
 << 1);

2121 
	}
}

2131 
	$RTC_Tam≥rCmd
(
uöt32_t
 
RTC_Tam≥r
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2134 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
RTC_Tam≥r
));

2135 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2137 i‡(
NewSèã
 !
DISABLE
)

2140 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥r
;

2145 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_Tam≥r
;

2147 
	}
}

2162 
	$RTC_Tam≥rFûãrC⁄fig
(
uöt32_t
 
RTC_Tam≥rFûãr
)

2165 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_FILTER
(
RTC_Tam≥rFûãr
));

2168 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPFLT
);

2171 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rFûãr
;

2172 
	}
}

2196 
	$RTC_Tam≥rSam∂ögFªqC⁄fig
(
uöt32_t
 
RTC_Tam≥rSam∂ögFªq
)

2199 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_SAMPLING_FREQ
(
RTC_Tam≥rSam∂ögFªq
));

2202 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPFREQ
);

2205 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rSam∂ögFªq
;

2206 
	}
}

2219 
	$RTC_Tam≥rPösPªch¨geDuøti⁄
(
uöt32_t
 
RTC_Tam≥rPªch¨geDuøti⁄
)

2222 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PRECHARGE_DURATION
(
RTC_Tam≥rPªch¨geDuøti⁄
));

2225 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPPRCH
);

2228 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rPªch¨geDuøti⁄
;

2229 
	}
}

2239 
	$RTC_TimeSèmpOnTam≥rDëe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

2242 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2244 i‡(
NewSèã
 !
DISABLE
)

2247 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_TAFCR_TAMPTS
;

2252 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_TAMPTS
;

2254 
	}
}

2262 
	$RTC_Tam≥rPuŒUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

2265 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2267 i‡(
NewSèã
 !
DISABLE
)

2270 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_TAMPPUDIS
;

2275 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_TAFCR_TAMPPUDIS
;

2277 
	}
}

2303 
	$RTC_WrôeBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
, uöt32_à
D©a
)

2305 
__IO
 
uöt32_t
 
tmp
 = 0;

2308 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
RTC_BKP_DR
));

2310 
tmp
 = 
RTC_BASE
 + 0x50;

2311 
tmp
 +(
RTC_BKP_DR
 * 4);

2314 *(
__IO
 
uöt32_t
 *)
tmp
 = (uöt32_t)
D©a
;

2315 
	}
}

2324 
uöt32_t
 
	$RTC_RódBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
)

2326 
__IO
 
uöt32_t
 
tmp
 = 0;

2329 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
RTC_BKP_DR
));

2331 
tmp
 = 
RTC_BASE
 + 0x50;

2332 
tmp
 +(
RTC_BKP_DR
 * 4);

2335  (*(
__IO
 
uöt32_t
 *)
tmp
);

2336 
	}
}

2363 
	$RTC_Tam≥rPöSñe˘i⁄
(
uöt32_t
 
RTC_Tam≥rPö
)

2366 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PIN
(
RTC_Tam≥rPö
));

2368 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPINSEL
);

2369 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_Tam≥rPö
);

2370 
	}
}

2380 
	$RTC_TimeSèmpPöSñe˘i⁄
(
uöt32_t
 
RTC_TimeSèmpPö
)

2383 
	`as£π_∑øm
(
	`IS_RTC_TIMESTAMP_PIN
(
RTC_TimeSèmpPö
));

2385 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TSINSEL
);

2386 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_TimeSèmpPö
);

2387 
	}
}

2399 
	$RTC_OuçutTy≥C⁄fig
(
uöt32_t
 
RTC_OuçutTy≥
)

2402 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT_TYPE
(
RTC_OuçutTy≥
));

2404 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_ALARMOUTTYPE
);

2405 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_OuçutTy≥
);

2406 
	}
}

2437 
Eº‹Sètus
 
	$RTC_SynchroShi·C⁄fig
(
uöt32_t
 
RTC_Shi·Add1S
, uöt32_à
RTC_Shi·SubFS
)

2439 
Eº‹Sètus
 
°©us
 = 
ERROR
;

2440 
uöt32_t
 
shpfcou¡
 = 0;

2443 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_ADD1S
(
RTC_Shi·Add1S
));

2444 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_SUBFS
(
RTC_Shi·SubFS
));

2447 
RTC
->
WPR
 = 0xCA;

2448 
RTC
->
WPR
 = 0x53;

2451 i‡((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë!
RESET
)

2454 ((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë!
RESET
Ë&& (
shpfcou¡
 !
SHPF_TIMEOUT
))

2456 
shpfcou¡
++;

2461 i‡((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë=
RESET
)

2464 if((
RTC
->
CR
 & 
RTC_CR_REFCKON
Ë=
RESET
)

2467 
RTC
->
SHIFTR
 = (
uöt32_t
)(uöt32_t)(
RTC_Shi·SubFS
Ë| (uöt32_t)(
RTC_Shi·Add1S
);

2469 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

2471 
°©us
 = 
ERROR
;

2475 
°©us
 = 
SUCCESS
;

2480 
°©us
 = 
ERROR
;

2485 
°©us
 = 
ERROR
;

2489 
RTC
->
WPR
 = 0xFF;

2491  (
Eº‹Sètus
)(
°©us
);

2492 
	}
}

2557 
	$RTC_ITC⁄fig
(
uöt32_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2560 
	`as£π_∑øm
(
	`IS_RTC_CONFIG_IT
(
RTC_IT
));

2561 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2564 
RTC
->
WPR
 = 0xCA;

2565 
RTC
->
WPR
 = 0x53;

2567 i‡(
NewSèã
 !
DISABLE
)

2570 
RTC
->
CR
 |(
uöt32_t
)(
RTC_IT
 & ~
RTC_TAFCR_TAMPIE
);

2572 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_IT
 & 
RTC_TAFCR_TAMPIE
);

2577 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_IT
 & (uöt32_t)~
RTC_TAFCR_TAMPIE
);

2579 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_IT
 & 
RTC_TAFCR_TAMPIE
);

2582 
RTC
->
WPR
 = 0xFF;

2583 
	}
}

2605 
FœgSètus
 
	$RTC_GëFœgSètus
(
uöt32_t
 
RTC_FLAG
)

2607 
FœgSètus
 
bô°©us
 = 
RESET
;

2608 
uöt32_t
 
tm¥eg
 = 0;

2611 
	`as£π_∑øm
(
	`IS_RTC_GET_FLAG
(
RTC_FLAG
));

2614 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ISR
 & 
RTC_FLAGS_MASK
);

2617 i‡((
tm¥eg
 & 
RTC_FLAG
Ë!(
uöt32_t
)
RESET
)

2619 
bô°©us
 = 
SET
;

2623 
bô°©us
 = 
RESET
;

2625  
bô°©us
;

2626 
	}
}

2641 
	$RTC_CÀ¨Fœg
(
uöt32_t
 
RTC_FLAG
)

2644 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_FLAG
(
RTC_FLAG
));

2647 
RTC
->
ISR
 = (
uöt32_t
)((uöt32_t)(~((
RTC_FLAG
 | 
RTC_ISR_INIT
)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));

2648 
	}
}

2661 
ITSètus
 
	$RTC_GëITSètus
(
uöt32_t
 
RTC_IT
)

2663 
ITSètus
 
bô°©us
 = 
RESET
;

2664 
uöt32_t
 
tm¥eg
 = 0, 
íabÀ°©us
 = 0;

2667 
	`as£π_∑øm
(
	`IS_RTC_GET_IT
(
RTC_IT
));

2670 
tm¥eg
 = (
uöt32_t
)(
RTC
->
TAFCR
 & (
RTC_TAFCR_TAMPIE
));

2673 
íabÀ°©us
 = (
uöt32_t
)((
RTC
->
CR
 & 
RTC_IT
Ë| (
tm¥eg
 & (RTC_IT >> 15)));

2676 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ISR
 & (uöt32_t)(
RTC_IT
 >> 4)));

2679 i‡((
íabÀ°©us
 !(
uöt32_t
)
RESET
Ë&& ((
tm¥eg
 & 0x0000FFFF) != (uint32_t)RESET))

2681 
bô°©us
 = 
SET
;

2685 
bô°©us
 = 
RESET
;

2687  
bô°©us
;

2688 
	}
}

2701 
	$RTC_CÀ¨ITPídögBô
(
uöt32_t
 
RTC_IT
)

2703 
uöt32_t
 
tm¥eg
 = 0;

2706 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_IT
(
RTC_IT
));

2709 
tm¥eg
 = (
uöt32_t
)(
RTC_IT
 >> 4);

2712 
RTC
->
ISR
 = (
uöt32_t
)((uöt32_t)(~((
tm¥eg
 | 
RTC_ISR_INIT
)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));

2713 
	}
}

2724 
uöt8_t
 
	$RTC_ByãToBcd2
(
uöt8_t
 
VÆue
)

2726 
uöt8_t
 
bcdhigh
 = 0;

2728 
VÆue
 >= 10)

2730 
bcdhigh
++;

2731 
VÆue
 -= 10;

2734  ((
uöt8_t
)(
bcdhigh
 << 4Ë| 
VÆue
);

2735 
	}
}

2742 
uöt8_t
 
	$RTC_Bcd2ToByã
(
uöt8_t
 
VÆue
)

2744 
uöt8_t
 
tmp
 = 0;

2745 
tmp
 = ((
uöt8_t
)(
VÆue
 & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;

2746  (
tmp
 + (
VÆue
 & (
uöt8_t
)0x0F));

2747 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_sai.c

126 
	~"°m32f4xx_ßi.h
"

127 
	~"°m32f4xx_rcc.h
"

142 
	#CR1_CLEAR_MASK
 ((
uöt32_t
)0xFF07C010)

	)

143 
	#FRCR_CLEAR_MASK
 ((
uöt32_t
)0xFFF88000)

	)

144 
	#SLOTR_CLEAR_MASK
 ((
uöt32_t
)0x0000F020)

	)

182 
	$SAI_DeInô
(
SAI_Ty≥Def
* 
SAIx
)

185 
	`as£π_∑øm
(
	`IS_SAI_PERIPH
(
SAIx
));

188 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SAI1
, 
ENABLE
);

190 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SAI1
, 
DISABLE
);

191 
	}
}

205 
	$SAI_Inô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
SAI_InôTy≥Def
* 
SAI_InôSåu˘
)

207 
uöt32_t
 
tm¥eg
 = 0;

210 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

213 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_MODE
(
SAI_InôSåu˘
->
SAI_AudioMode
));

214 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PROTOCOL
(
SAI_InôSåu˘
->
SAI_PrŸocﬁ
));

215 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_DATASIZE
(
SAI_InôSåu˘
->
SAI_D©aSize
));

216 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FIRST_BIT
(
SAI_InôSåu˘
->
SAI_Fú°Bô
));

217 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_CLOCK_STROBING
(
SAI_InôSåu˘
->
SAI_ClockSåobög
));

218 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_SYNCHRO
(
SAI_InôSåu˘
->
SAI_Synchro
));

219 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_OUTPUT_DRIVE
(
SAI_InôSåu˘
->
SAI_OUTDRIV
));

220 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_NODIVIDER
(
SAI_InôSåu˘
->
SAI_NoDividî
));

221 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_MASTER_DIVIDER
(
SAI_InôSåu˘
->
SAI_Ma°îDividî
));

222 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FIFO_THRESHOLD
(
SAI_InôSåu˘
->
SAI_FIFOThªshﬁd
));

226 
tm¥eg
 = 
SAI_Block_x
->
CR1
;

228 
tm¥eg
 &
CR1_CLEAR_MASK
;

240 
tm¥eg
 |(
uöt32_t
)(
SAI_InôSåu˘
->
SAI_AudioMode
 | SAI_InôSåu˘->
SAI_PrŸocﬁ
 |

241 
SAI_InôSåu˘
->
SAI_D©aSize
 | SAI_InôSåu˘->
SAI_Fú°Bô
 |

242 
SAI_InôSåu˘
->
SAI_ClockSåobög
 | SAI_InôSåu˘->
SAI_Synchro
 |

243 
SAI_InôSåu˘
->
SAI_OUTDRIV
 | SAI_InôSåu˘->
SAI_NoDividî
 |

244 (
uöt32_t
)((
SAI_InôSåu˘
->
SAI_Ma°îDividî
) << 20));

246 
SAI_Block_x
->
CR1
 = 
tm¥eg
;

250 
tm¥eg
 = 
SAI_Block_x
->
CR2
;

252 
tm¥eg
 &~(
SAI_xCR2_FTH
);

255 
tm¥eg
 |(
uöt32_t
)(
SAI_InôSåu˘
->
SAI_FIFOThªshﬁd
);

257 
SAI_Block_x
->
CR2
 = 
tm¥eg
;

258 
	}
}

272 
	$SAI_FømeInô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
SAI_FømeInôTy≥Def
* 
SAI_FømeInôSåu˘
)

274 
uöt32_t
 
tm¥eg
 = 0;

277 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

280 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FRAME_LENGTH
(
SAI_FømeInôSåu˘
->
SAI_FømeLígth
));

281 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_ACTIVE_FRAME
(
SAI_FømeInôSåu˘
->
SAI_A˘iveFømeLígth
));

282 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FS_DEFINITION
(
SAI_FømeInôSåu˘
->
SAI_FSDeföôi⁄
));

283 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FS_POLARITY
(
SAI_FømeInôSåu˘
->
SAI_FSPﬁ¨ôy
));

284 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FS_OFFSET
(
SAI_FømeInôSåu˘
->
SAI_FSOff£t
));

288 
tm¥eg
 = 
SAI_Block_x
->
FRCR
;

290 
tm¥eg
 &
FRCR_CLEAR_MASK
;

298 
tm¥eg
 |(
uöt32_t
)((uöt32_t)(
SAI_FømeInôSåu˘
->
SAI_FømeLígth
 - 1) |

299 
SAI_FømeInôSåu˘
->
SAI_FSOff£t
 |

300 
SAI_FømeInôSåu˘
->
SAI_FSDeföôi⁄
 |

301 
SAI_FømeInôSåu˘
->
SAI_FSPﬁ¨ôy
 |

302 (
uöt32_t
)((
SAI_FømeInôSåu˘
->
SAI_A˘iveFømeLígth
 - 1) << 8));

305 
SAI_Block_x
->
FRCR
 = 
tm¥eg
;

306 
	}
}

320 
	$SAI_SlŸInô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
SAI_SlŸInôTy≥Def
* 
SAI_SlŸInôSåu˘
)

322 
uöt32_t
 
tm¥eg
 = 0;

325 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

328 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FIRSTBIT_OFFSET
(
SAI_SlŸInôSåu˘
->
SAI_Fú°BôOff£t
));

329 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_SLOT_SIZE
(
SAI_SlŸInôSåu˘
->
SAI_SlŸSize
));

330 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_SLOT_NUMBER
(
SAI_SlŸInôSåu˘
->
SAI_SlŸNumbî
));

331 
	`as£π_∑øm
(
	`IS_SAI_SLOT_ACTIVE
(
SAI_SlŸInôSåu˘
->
SAI_SlŸA˘ive
));

335 
tm¥eg
 = 
SAI_Block_x
->
SLOTR
;

337 
tm¥eg
 &
SLOTR_CLEAR_MASK
;

344 
tm¥eg
 |(
uöt32_t
)(
SAI_SlŸInôSåu˘
->
SAI_Fú°BôOff£t
 |

345 
SAI_SlŸInôSåu˘
->
SAI_SlŸSize
 |

346 
SAI_SlŸInôSåu˘
->
SAI_SlŸA˘ive
 |

347 (
uöt32_t
)((
SAI_SlŸInôSåu˘
->
SAI_SlŸNumbî
 - 1) << 8));

350 
SAI_Block_x
->
SLOTR
 = 
tm¥eg
;

351 
	}
}

359 
	$SAI_Såu˘Inô
(
SAI_InôTy≥Def
* 
SAI_InôSåu˘
)

363 
SAI_InôSåu˘
->
SAI_AudioMode
 = 
SAI_Mode_Ma°îTx
;

365 
SAI_InôSåu˘
->
SAI_PrŸocﬁ
 = 
SAI_Fªe_PrŸocﬁ
;

367 
SAI_InôSåu˘
->
SAI_D©aSize
 = 
SAI_D©aSize_8b
;

369 
SAI_InôSåu˘
->
SAI_Fú°Bô
 = 
SAI_Fú°Bô_MSB
;

371 
SAI_InôSåu˘
->
SAI_ClockSåobög
 = 
SAI_ClockSåobög_FÆlögEdge
;

373 
SAI_InôSåu˘
->
SAI_Synchro
 = 
SAI_Asynchr⁄ous
;

375 
SAI_InôSåu˘
->
SAI_OUTDRIV
 = 
SAI_OuçutDrive_DißbÀd
;

377 
SAI_InôSåu˘
->
SAI_NoDividî
 = 
SAI_Ma°îDividî_E«bÀd
;

379 
SAI_InôSåu˘
->
SAI_Ma°îDividî
 = 0;

381 
SAI_InôSåu˘
->
SAI_FIFOThªshﬁd
 = 
SAI_Thªshﬁd_FIFOEm±y
;

382 
	}
}

390 
	$SAI_FømeSåu˘Inô
(
SAI_FømeInôTy≥Def
* 
SAI_FømeInôSåu˘
)

394 
SAI_FømeInôSåu˘
->
SAI_FømeLígth
 = 8;

396 
SAI_FømeInôSåu˘
->
SAI_A˘iveFømeLígth
 = 1;

398 
SAI_FømeInôSåu˘
->
SAI_FSDeföôi⁄
 = 
SAI_FS_SèπFøme
;

400 
SAI_FømeInôSåu˘
->
SAI_FSPﬁ¨ôy
 = 
SAI_FS_A˘iveLow
;

402 
SAI_FømeInôSåu˘
->
SAI_FSOff£t
 = 
SAI_FS_Fú°Bô
;

403 
	}
}

411 
	$SAI_SlŸSåu˘Inô
(
SAI_SlŸInôTy≥Def
* 
SAI_SlŸInôSåu˘
)

415 
SAI_SlŸInôSåu˘
->
SAI_Fú°BôOff£t
 = 0;

417 
SAI_SlŸInôSåu˘
->
SAI_SlŸSize
 = 
SAI_SlŸSize_D©aSize
;

419 
SAI_SlŸInôSåu˘
->
SAI_SlŸNumbî
 = 1;

421 
SAI_SlŸInôSåu˘
->
SAI_SlŸA˘ive
 = 
SAI_SlŸ_NŸA˘ive
;

423 
	}
}

432 
	$SAI_Cmd
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

435 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

436 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

437 i‡(
NewSèã
 !
DISABLE
)

440 
SAI_Block_x
->
CR1
 |
SAI_xCR1_SAIEN
;

445 
SAI_Block_x
->
CR1
 &~(
SAI_xCR1_SAIEN
);

447 
	}
}

461 
	$SAI_M⁄oModeC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_M⁄o_SåeoMode
)

464 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

465 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_MONO_STREO_MODE
(
SAI_M⁄oMode
));

467 
SAI_Block_x
->
CR1
 &~(
SAI_xCR1_MONO
);

469 
SAI_Block_x
->
CR1
 |
SAI_M⁄oMode
;

470 
	}
}

484 
	$SAI_TRISèãC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_TRISèã
)

487 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

488 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_TRISTATE_MANAGEMENT
(
SAI_TRISèã
));

490 
SAI_Block_x
->
CR1
 &~(
SAI_xCR1_MONO
);

492 
SAI_Block_x
->
CR1
 |
SAI_M⁄oMode
;

494 
	}
}

512 
	$SAI_Com∑ndögModeC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_Com∑ndögMode
)

515 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

516 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_COMPANDING_MODE
(
SAI_Com∑ndögMode
));

518 
SAI_Block_x
->
CR2
 &~(
SAI_xCR2_COMP
);

520 
SAI_Block_x
->
CR2
 |
SAI_Com∑ndögMode
;

521 
	}
}

536 
	$SAI_MuãModeCmd
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

539 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

540 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

541 i‡(
NewSèã
 !
DISABLE
)

544 
SAI_Block_x
->
CR2
 |
SAI_xCR2_MUTE
;

549 
SAI_Block_x
->
CR2
 &~(
SAI_xCR2_MUTE
);

551 
	}
}

567 
	$SAI_MuãVÆueC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_MuãVÆue
)

570 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

571 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_MUTE_VALUE
(
SAI_MuãVÆue
));

574 
SAI_Block_x
->
CR2
 &~(
SAI_xCR2_MUTEVAL
);

576 
SAI_Block_x
->
CR2
 |
SAI_MuãVÆue
;

577 
	}
}

589 
	$SAI_MuãFømeCou¡îC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_MuãCou¡î
)

592 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

593 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_MUTE_COUNTER
(
SAI_MuãCou¡î
));

596 
SAI_Block_x
->
CR2
 &~(
SAI_xCR2_MUTECNT
);

598 
SAI_Block_x
->
CR2
 |(
SAI_MuãCou¡î
 << 7);

599 
	}
}

612 
	$SAI_FlushFIFO
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
)

615 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

618 
SAI_Block_x
->
CR2
 |
SAI_xCR2_FFLUSH
;

619 
	}
}

654 
uöt32_t
 
	$SAI_Re˚iveD©a
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
)

657 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

660  
SAI_Block_x
->
DR
;

661 
	}
}

670 
	$SAI_SídD©a
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
D©a
)

673 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

676 
SAI_Block_x
->
DR
 = 
D©a
;

677 
	}
}

702 
	$SAI_DMACmd
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

705 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

706 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

708 i‡(
NewSèã
 !
DISABLE
)

711 
SAI_Block_x
->
CR1
 |
SAI_xCR1_DMAEN
;

716 
SAI_Block_x
->
CR1
 &~(
SAI_xCR1_DMAEN
);

718 
	}
}

846 
	$SAI_ITC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

849 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

850 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

851 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_CONFIG_IT
(
SAI_IT
));

853 i‡(
NewSèã
 !
DISABLE
)

856 
SAI_Block_x
->
IMR
 |
SAI_IT
;

861 
SAI_Block_x
->
IMR
 &~(
SAI_IT
);

863 
	}
}

879 
FœgSètus
 
	$SAI_GëFœgSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_FLAG
)

881 
FœgSètus
 
bô°©us
 = 
RESET
;

884 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

885 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_GET_FLAG
(
SAI_FLAG
));

888 i‡((
SAI_Block_x
->
SR
 & 
SAI_FLAG
Ë!(
uöt32_t
)
RESET
)

891 
bô°©us
 = 
SET
;

896 
bô°©us
 = 
RESET
;

899  
bô°©us
;

900 
	}
}

922 
	$SAI_CÀ¨Fœg
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_FLAG
)

925 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

926 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_CLEAR_FLAG
(
SAI_FLAG
));

929 
SAI_Block_x
->
CLRFR
 |
SAI_FLAG
;

930 
	}
}

947 
ITSètus
 
	$SAI_GëITSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_IT
)

949 
ITSètus
 
bô°©us
 = 
RESET
;

950 
uöt32_t
 
íabÀ°©us
 = 0;

953 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

954 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_CONFIG_IT
(
SAI_IT
));

957 
íabÀ°©us
 = (
SAI_Block_x
->
IMR
 & 
SAI_IT
) ;

960 i‡(((
SAI_Block_x
->
SR
 & 
SAI_IT
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

963 
bô°©us
 = 
SET
;

968 
bô°©us
 = 
RESET
;

971  
bô°©us
;

972 
	}
}

994 
	$SAI_CÀ¨ITPídögBô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_IT
)

997 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

998 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_CONFIG_IT
(
SAI_IT
));

1001 
SAI_Block_x
->
CLRFR
 |
SAI_IT
;

1002 
	}
}

1016 
Fun˘i⁄ÆSèã
 
	$SAI_GëCmdSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
)

1018 
Fun˘i⁄ÆSèã
 
°©e
 = 
DISABLE
;

1021 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

1022 i‡((
SAI_Block_x
->
CR1
 & (
uöt32_t
)
SAI_xCR1_SAIEN
) != 0)

1025 
°©e
 = 
ENABLE
;

1031 
°©e
 = 
DISABLE
;

1033  
°©e
;

1034 
	}
}

1049 
uöt32_t
 
	$SAI_GëFIFOSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
)

1051 
uöt32_t
 
tm¥eg
 = 0;

1054 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

1057 
tm¥eg
 = (
uöt32_t
)((
SAI_Block_x
->
SR
 & 
SAI_xSR_FLVL
));

1059  
tm¥eg
;

1060 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_sdio.c

156 
	~"°m32f4xx_sdio.h
"

157 
	~"°m32f4xx_rcc.h
"

172 
	#SDIO_OFFSET
 (
SDIO_BASE
 - 
PERIPH_BASE
)

	)

176 
	#CLKCR_OFFSET
 (
SDIO_OFFSET
 + 0x04)

	)

177 
	#CLKEN_BôNumbî
 0x08

	)

178 
	#CLKCR_CLKEN_BB
 (
PERIPH_BB_BASE
 + (
CLKCR_OFFSET
 * 32Ë+ (
CLKEN_BôNumbî
 * 4))

	)

182 
	#CMD_OFFSET
 (
SDIO_OFFSET
 + 0x0C)

	)

183 
	#SDIOSUSPEND_BôNumbî
 0x0B

	)

184 
	#CMD_SDIOSUSPEND_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
SDIOSUSPEND_BôNumbî
 * 4))

	)

187 
	#ENCMDCOMPL_BôNumbî
 0x0C

	)

188 
	#CMD_ENCMDCOMPL_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ENCMDCOMPL_BôNumbî
 * 4))

	)

191 
	#NIEN_BôNumbî
 0x0D

	)

192 
	#CMD_NIEN_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
NIEN_BôNumbî
 * 4))

	)

195 
	#ATACMD_BôNumbî
 0x0E

	)

196 
	#CMD_ATACMD_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ATACMD_BôNumbî
 * 4))

	)

200 
	#DCTRL_OFFSET
 (
SDIO_OFFSET
 + 0x2C)

	)

201 
	#DMAEN_BôNumbî
 0x03

	)

202 
	#DCTRL_DMAEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
DMAEN_BôNumbî
 * 4))

	)

205 
	#RWSTART_BôNumbî
 0x08

	)

206 
	#DCTRL_RWSTART_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTART_BôNumbî
 * 4))

	)

209 
	#RWSTOP_BôNumbî
 0x09

	)

210 
	#DCTRL_RWSTOP_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTOP_BôNumbî
 * 4))

	)

213 
	#RWMOD_BôNumbî
 0x0A

	)

214 
	#DCTRL_RWMOD_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWMOD_BôNumbî
 * 4))

	)

217 
	#SDIOEN_BôNumbî
 0x0B

	)

218 
	#DCTRL_SDIOEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
SDIOEN_BôNumbî
 * 4))

	)

223 
	#CLKCR_CLEAR_MASK
 ((
uöt32_t
)0xFFFF8100)

	)

227 
	#PWR_PWRCTRL_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

231 
	#DCTRL_CLEAR_MASK
 ((
uöt32_t
)0xFFFFFF08)

	)

235 
	#CMD_CLEAR_MASK
 ((
uöt32_t
)0xFFFFF800)

	)

238 
	#SDIO_RESP_ADDR
 ((
uöt32_t
)(
SDIO_BASE
 + 0x14))

	)

266 
	$SDIO_DeInô
()

268 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SDIO
, 
ENABLE
);

269 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SDIO
, 
DISABLE
);

270 
	}
}

279 
	$SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

281 
uöt32_t
 
tm¥eg
 = 0;

284 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_EDGE
(
SDIO_InôSåu˘
->
SDIO_ClockEdge
));

285 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_BYPASS
(
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
));

286 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_POWER_SAVE
(
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
));

287 
	`as£π_∑øm
(
	`IS_SDIO_BUS_WIDE
(
SDIO_InôSåu˘
->
SDIO_BusWide
));

288 
	`as£π_∑øm
(
	`IS_SDIO_HARDWARE_FLOW_CONTROL
(
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
));

292 
tm¥eg
 = 
SDIO
->
CLKCR
;

295 
tm¥eg
 &
CLKCR_CLEAR_MASK
;

303 
tm¥eg
 |(
SDIO_InôSåu˘
->
SDIO_ClockDiv
 | SDIO_InôSåu˘->
SDIO_ClockPowîSave
 |

304 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 | SDIO_InôSåu˘->
SDIO_BusWide
 |

305 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 | SDIO_InôSåu˘->
SDIO_H¨dw¨eFlowC⁄åﬁ
);

308 
SDIO
->
CLKCR
 = 
tm¥eg
;

309 
	}
}

317 
	$SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

320 
SDIO_InôSåu˘
->
SDIO_ClockDiv
 = 0x00;

321 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 = 
SDIO_ClockEdge_Risög
;

322 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 = 
SDIO_ClockBy∑ss_DißbÀ
;

323 
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
 = 
SDIO_ClockPowîSave_DißbÀ
;

324 
SDIO_InôSåu˘
->
SDIO_BusWide
 = 
SDIO_BusWide_1b
;

325 
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
 = 
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
;

326 
	}
}

334 
	$SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

337 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

339 *(
__IO
 
uöt32_t
 *Ë
CLKCR_CLKEN_BB
 = (uöt32_t)
NewSèã
;

340 
	}
}

350 
	$SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
)

353 
	`as£π_∑øm
(
	`IS_SDIO_POWER_STATE
(
SDIO_PowîSèã
));

355 
SDIO
->
POWER
 = 
SDIO_PowîSèã
;

356 
	}
}

367 
uöt32_t
 
	$SDIO_GëPowîSèã
()

369  (
SDIO
->
POWER
 & (~
PWR_PWRCTRL_MASK
));

370 
	}
}

399 
	$SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
)

401 
uöt32_t
 
tm¥eg
 = 0;

404 
	`as£π_∑øm
(
	`IS_SDIO_CMD_INDEX
(
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
));

405 
	`as£π_∑øm
(
	`IS_SDIO_RESPONSE
(
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
));

406 
	`as£π_∑øm
(
	`IS_SDIO_WAIT
(
SDIO_CmdInôSåu˘
->
SDIO_Waô
));

407 
	`as£π_∑øm
(
	`IS_SDIO_CPSM
(
SDIO_CmdInôSåu˘
->
SDIO_CPSM
));

411 
SDIO
->
ARG
 = 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
;

415 
tm¥eg
 = 
SDIO
->
CMD
;

417 
tm¥eg
 &
CMD_CLEAR_MASK
;

422 
tm¥eg
 |(
uöt32_t
)
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 | SDIO_CmdInôSåu˘->
SDIO_Re•⁄£


423 | 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 | SDIO_CmdInôSåu˘->
SDIO_CPSM
;

426 
SDIO
->
CMD
 = 
tm¥eg
;

427 
	}
}

435 
	$SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
)

438 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
 = 0x00;

439 
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 = 0x00;

440 
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
 = 
SDIO_Re•⁄£_No
;

441 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 = 
SDIO_Waô_No
;

442 
SDIO_CmdInôSåu˘
->
SDIO_CPSM
 = 
SDIO_CPSM_DißbÀ
;

443 
	}
}

450 
uöt8_t
 
	$SDIO_GëComm™dRe•⁄£
()

452  (
uöt8_t
)(
SDIO
->
RESPCMD
);

453 
	}
}

465 
uöt32_t
 
	$SDIO_GëRe•⁄£
(
uöt32_t
 
SDIO_RESP
)

467 
__IO
 
uöt32_t
 
tmp
 = 0;

470 
	`as£π_∑øm
(
	`IS_SDIO_RESP
(
SDIO_RESP
));

472 
tmp
 = 
SDIO_RESP_ADDR
 + 
SDIO_RESP
;

474  (*(
__IO
 
uöt32_t
 *Ë
tmp
);

475 
	}
}

503 
	$SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

505 
uöt32_t
 
tm¥eg
 = 0;

508 
	`as£π_∑øm
(
	`IS_SDIO_DATA_LENGTH
(
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
));

509 
	`as£π_∑øm
(
	`IS_SDIO_BLOCK_SIZE
(
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
));

510 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_DIR
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
));

511 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_MODE
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
));

512 
	`as£π_∑øm
(
	`IS_SDIO_DPSM
(
SDIO_D©aInôSåu˘
->
SDIO_DPSM
));

516 
SDIO
->
DTIMER
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
;

520 
SDIO
->
DLEN
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
;

524 
tm¥eg
 = 
SDIO
->
DCTRL
;

526 
tm¥eg
 &
DCTRL_CLEAR_MASK
;

531 
tm¥eg
 |(
uöt32_t
)
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 | SDIO_D©aInôSåu˘->
SDIO_Tøns„rDú


532 | 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 | SDIO_D©aInôSåu˘->
SDIO_DPSM
;

535 
SDIO
->
DCTRL
 = 
tm¥eg
;

536 
	}
}

544 
	$SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

547 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
 = 0xFFFFFFFF;

548 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
 = 0x00;

549 
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 = 
SDIO_D©aBlockSize_1b
;

550 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
 = 
SDIO_Tøns„rDú_ToC¨d
;

551 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 = 
SDIO_Tøns„rMode_Block
;

552 
SDIO_D©aInôSåu˘
->
SDIO_DPSM
 = 
SDIO_DPSM_DißbÀ
;

553 
	}
}

560 
uöt32_t
 
	$SDIO_GëD©aCou¡î
()

562  
SDIO
->
DCOUNT
;

563 
	}
}

570 
uöt32_t
 
	$SDIO_RódD©a
()

572  
SDIO
->
FIFO
;

573 
	}
}

580 
	$SDIO_WrôeD©a
(
uöt32_t
 
D©a
)

582 
SDIO
->
FIFO
 = 
D©a
;

583 
	}
}

590 
uöt32_t
 
	$SDIO_GëFIFOCou¡
()

592  
SDIO
->
FIFOCNT
;

593 
	}
}

619 
	$SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

622 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

624 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTART_BB
 = (uöt32_tË
NewSèã
;

625 
	}
}

633 
	$SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

636 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

638 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTOP_BB
 = (uöt32_tË
NewSèã
;

639 
	}
}

649 
	$SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
)

652 
	`as£π_∑øm
(
	`IS_SDIO_READWAIT_MODE
(
SDIO_RódWaôMode
));

654 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWMOD_BB
 = 
SDIO_RódWaôMode
;

655 
	}
}

663 
	$SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

666 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

668 *(
__IO
 
uöt32_t
 *Ë
DCTRL_SDIOEN_BB
 = (uöt32_t)
NewSèã
;

669 
	}
}

677 
	$SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

680 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

682 *(
__IO
 
uöt32_t
 *Ë
CMD_SDIOSUSPEND_BB
 = (uöt32_t)
NewSèã
;

683 
	}
}

709 
	$SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

712 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

714 *(
__IO
 
uöt32_t
 *Ë
CMD_ENCMDCOMPL_BB
 = (uöt32_t)
NewSèã
;

715 
	}
}

723 
	$SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

726 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

728 *(
__IO
 
uöt32_t
 *Ë
CMD_NIEN_BB
 = (uöt32_t)((~((uöt32_t)
NewSèã
)) & ((uint32_t)0x1));

729 
	}
}

737 
	$SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

740 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

742 *(
__IO
 
uöt32_t
 *Ë
CMD_ATACMD_BB
 = (uöt32_t)
NewSèã
;

743 
	}
}

769 
	$SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

772 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

774 *(
__IO
 
uöt32_t
 *Ë
DCTRL_DMAEN_BB
 = (uöt32_t)
NewSèã
;

775 
	}
}

827 
	$SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

830 
	`as£π_∑øm
(
	`IS_SDIO_IT
(
SDIO_IT
));

831 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

833 i‡(
NewSèã
 !
DISABLE
)

836 
SDIO
->
MASK
 |
SDIO_IT
;

841 
SDIO
->
MASK
 &~
SDIO_IT
;

843 
	}
}

875 
FœgSètus
 
	$SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
)

877 
FœgSètus
 
bô°©us
 = 
RESET
;

880 
	`as£π_∑øm
(
	`IS_SDIO_FLAG
(
SDIO_FLAG
));

882 i‡((
SDIO
->
STA
 & 
SDIO_FLAG
Ë!(
uöt32_t
)
RESET
)

884 
bô°©us
 = 
SET
;

888 
bô°©us
 = 
RESET
;

890  
bô°©us
;

891 
	}
}

912 
	$SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
)

915 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_FLAG
(
SDIO_FLAG
));

917 
SDIO
->
ICR
 = 
SDIO_FLAG
;

918 
	}
}

951 
ITSètus
 
	$SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
)

953 
ITSètus
 
bô°©us
 = 
RESET
;

956 
	`as£π_∑øm
(
	`IS_SDIO_GET_IT
(
SDIO_IT
));

957 i‡((
SDIO
->
STA
 & 
SDIO_IT
Ë!(
uöt32_t
)
RESET
)

959 
bô°©us
 = 
SET
;

963 
bô°©us
 = 
RESET
;

965  
bô°©us
;

966 
	}
}

987 
	$SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
)

990 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_IT
(
SDIO_IT
));

992 
SDIO
->
ICR
 = 
SDIO_IT
;

993 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c

159 
	~"°m32f4xx_•i.h
"

160 
	~"°m32f4xx_rcc.h
"

175 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)0x3040)

	)

176 
	#I2SCFGR_CLEAR_MASK
 ((
uöt16_t
)0xF040)

	)

179 
	#PLLCFGR_PPLR_MASK
 ((
uöt32_t
)0x70000000)

	)

180 
	#PLLCFGR_PPLN_MASK
 ((
uöt32_t
)0x00007FC0)

	)

182 
	#SPI_CR2_FRF
 ((
uöt16_t
)0x0010)

	)

183 
	#SPI_SR_TIFRFE
 ((
uöt16_t
)0x0100)

	)

224 
	$SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
)

227 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

229 i‡(
SPIx
 =
SPI1
)

232 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
ENABLE
);

234 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
DISABLE
);

236 i‡(
SPIx
 =
SPI2
)

239 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
ENABLE
);

241 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
DISABLE
);

243 i‡(
SPIx
 =
SPI3
)

246 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
ENABLE
);

248 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
DISABLE
);

250 i‡(
SPIx
 =
SPI4
)

253 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI4
, 
ENABLE
);

255 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI4
, 
DISABLE
);

257 i‡(
SPIx
 =
SPI5
)

260 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI5
, 
ENABLE
);

262 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI5
, 
DISABLE
);

266 i‡(
SPIx
 =
SPI6
)

269 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI6
, 
ENABLE
);

271 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI6
, 
DISABLE
);

274 
	}
}

284 
	$SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

286 
uöt16_t
 
tm¥eg
 = 0;

289 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

292 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_MODE
(
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
));

293 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
SPI_InôSåu˘
->
SPI_Mode
));

294 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_InôSåu˘
->
SPI_D©aSize
));

295 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
SPI_InôSåu˘
->
SPI_CPOL
));

296 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
SPI_InôSåu˘
->
SPI_CPHA
));

297 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
SPI_InôSåu˘
->
SPI_NSS
));

298 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
));

299 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
SPI_InôSåu˘
->
SPI_Fú°Bô
));

300 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
));

304 
tm¥eg
 = 
SPIx
->
CR1
;

306 
tm¥eg
 &
CR1_CLEAR_MASK
;

315 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 | SPI_InôSåu˘->
SPI_Mode
 |

316 
SPI_InôSåu˘
->
SPI_D©aSize
 | SPI_InôSåu˘->
SPI_CPOL
 |

317 
SPI_InôSåu˘
->
SPI_CPHA
 | SPI_InôSåu˘->
SPI_NSS
 |

318 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 | SPI_InôSåu˘->
SPI_Fú°Bô
);

320 
SPIx
->
CR1
 = 
tm¥eg
;

323 
SPIx
->
I2SCFGR
 &(
uöt16_t
)~((uöt16_t)
SPI_I2SCFGR_I2SMOD
);

326 
SPIx
->
CRCPR
 = 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
;

327 
	}
}

348 
	$I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

350 
uöt16_t
 
tm¥eg
 = 0, 
i2sdiv
 = 2, 
i2sodd
 = 0, 
∑ckëÀngth
 = 1;

351 
uöt32_t
 
tmp
 = 0, 
i2s˛k
 = 0;

352 #i‚de‡
I2S_EXTERNAL_CLOCK_VAL


353 
uöt32_t
 
∂lm
 = 0, 
∂ 
 = 0, 
∂Ã
 = 0;

357 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

358 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

359 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

360 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

361 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

362 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
I2S_InôSåu˘
->
I2S_AudioFªq
));

363 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

367 
SPIx
->
I2SCFGR
 &
I2SCFGR_CLEAR_MASK
;

368 
SPIx
->
I2SPR
 = 0x0002;

371 
tm¥eg
 = 
SPIx
->
I2SCFGR
;

374 if(
I2S_InôSåu˘
->
I2S_AudioFªq
 =
I2S_AudioFªq_DeÁu…
)

376 
i2sodd
 = (
uöt16_t
)0;

377 
i2sdiv
 = (
uöt16_t
)2;

383 if(
I2S_InôSåu˘
->
I2S_D©aF‹m©
 =
I2S_D©aF‹m©_16b
)

386 
∑ckëÀngth
 = 1;

391 
∑ckëÀngth
 = 2;

398 #ifde‡
I2S_EXTERNAL_CLOCK_VAL


400 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_I2SSRC
) == 0)

402 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_I2SSRC
;

406 
i2s˛k
 = 
I2S_EXTERNAL_CLOCK_VAL
;

410 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_I2SSRC
) != 0)

412 
RCC
->
CFGR
 &~(
uöt32_t
)
RCC_CFGR_I2SSRC
;

416 
∂ 
 = (
uöt32_t
)(((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SN
) >> 6) & \

417 (
RCC_PLLI2SCFGR_PLLI2SN
 >> 6));

420 
∂Ã
 = (
uöt32_t
)(((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SR
) >> 28) & \

421 (
RCC_PLLI2SCFGR_PLLI2SR
 >> 28));

424 
∂lm
 = (
uöt32_t
)(
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
);

426 if((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLCFGR_PLLSRC_HSE
)

429 
i2s˛k
 = (
uöt32_t
)(((
HSE_VALUE
 / 
∂lm
Ë* 
∂ 
Ë/ 
∂Ã
);

433 
i2s˛k
 = (
uöt32_t
)(((
HSI_VALUE
 / 
∂lm
Ë* 
∂ 
Ë/ 
∂Ã
);

438 if(
I2S_InôSåu˘
->
I2S_MCLKOuçut
 =
I2S_MCLKOuçut_E«bÀ
)

441 
tmp
 = (
uöt16_t
)(((((
i2s˛k
 / 256Ë* 10Ë/ 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

446 
tmp
 = (
uöt16_t
)(((((
i2s˛k
 / (32 * 
∑ckëÀngth
)Ë*10 ) / 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

450 
tmp
 =Åmp / 10;

453 
i2sodd
 = (
uöt16_t
)(
tmp
 & (uint16_t)0x0001);

456 
i2sdiv
 = (
uöt16_t
)((
tmp
 - 
i2sodd
) / 2);

459 
i2sodd
 = (
uöt16_t
) (i2sodd << 8);

463 i‡((
i2sdiv
 < 2) || (i2sdiv > 0xFF))

466 
i2sdiv
 = 2;

467 
i2sodd
 = 0;

471 
SPIx
->
I2SPR
 = (
uöt16_t
)((uöt16_t)
i2sdiv
 | (uöt16_t)(
i2sodd
 | (uöt16_t)
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

474 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
SPI_I2SCFGR_I2SMOD
 | (uöt16_t)(
I2S_InôSåu˘
->
I2S_Mode
 | \

475 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

476 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

479 
SPIx
->
I2SCFGR
 = 
tm¥eg
;

480 
	}
}

487 
	$SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

491 
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

493 
SPI_InôSåu˘
->
SPI_Mode
 = 
SPI_Mode_Sœve
;

495 
SPI_InôSåu˘
->
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

497 
SPI_InôSåu˘
->
SPI_CPOL
 = 
SPI_CPOL_Low
;

499 
SPI_InôSåu˘
->
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

501 
SPI_InôSåu˘
->
SPI_NSS
 = 
SPI_NSS_H¨d
;

503 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_2
;

505 
SPI_InôSåu˘
->
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

507 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
 = 7;

508 
	}
}

515 
	$I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

519 
I2S_InôSåu˘
->
I2S_Mode
 = 
I2S_Mode_SœveTx
;

522 
I2S_InôSåu˘
->
I2S_Sènd¨d
 = 
I2S_Sènd¨d_Phûlùs
;

525 
I2S_InôSåu˘
->
I2S_D©aF‹m©
 = 
I2S_D©aF‹m©_16b
;

528 
I2S_InôSåu˘
->
I2S_MCLKOuçut
 = 
I2S_MCLKOuçut_DißbÀ
;

531 
I2S_InôSåu˘
->
I2S_AudioFªq
 = 
I2S_AudioFªq_DeÁu…
;

534 
I2S_InôSåu˘
->
I2S_CPOL
 = 
I2S_CPOL_Low
;

535 
	}
}

544 
	$SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

547 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

548 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

549 i‡(
NewSèã
 !
DISABLE
)

552 
SPIx
->
CR1
 |
SPI_CR1_SPE
;

557 
SPIx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
SPI_CR1_SPE
);

559 
	}
}

569 
	$I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

572 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH_EXT
(
SPIx
));

573 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

575 i‡(
NewSèã
 !
DISABLE
)

578 
SPIx
->
I2SCFGR
 |
SPI_I2SCFGR_I2SE
;

583 
SPIx
->
I2SCFGR
 &(
uöt16_t
)~((uöt16_t)
SPI_I2SCFGR_I2SE
);

585 
	}
}

596 
	$SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
)

599 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

600 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_D©aSize
));

602 
SPIx
->
CR1
 &(
uöt16_t
)~
SPI_D©aSize_16b
;

604 
SPIx
->
CR1
 |
SPI_D©aSize
;

605 
	}
}

616 
	$SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
)

619 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

620 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION
(
SPI_Dúe˘i⁄
));

621 i‡(
SPI_Dúe˘i⁄
 =
SPI_Dúe˘i⁄_Tx
)

624 
SPIx
->
CR1
 |
SPI_Dúe˘i⁄_Tx
;

629 
SPIx
->
CR1
 &
SPI_Dúe˘i⁄_Rx
;

631 
	}
}

642 
	$SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
)

645 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

646 
	`as£π_∑øm
(
	`IS_SPI_NSS_INTERNAL
(
SPI_NSSI¡î«lSo·
));

647 i‡(
SPI_NSSI¡î«lSo·
 !
SPI_NSSI¡î«lSo·_Re£t
)

650 
SPIx
->
CR1
 |
SPI_NSSI¡î«lSo·_Së
;

655 
SPIx
->
CR1
 &
SPI_NSSI¡î«lSo·_Re£t
;

657 
	}
}

666 
	$SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

669 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

670 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

671 i‡(
NewSèã
 !
DISABLE
)

674 
SPIx
->
CR2
 |(
uöt16_t
)
SPI_CR2_SSOE
;

679 
SPIx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
SPI_CR2_SSOE
);

681 
	}
}

697 
	$SPI_TIModeCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

700 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

701 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

703 i‡(
NewSèã
 !
DISABLE
)

706 
SPIx
->
CR2
 |
SPI_CR2_FRF
;

711 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_CR2_FRF
;

713 
	}
}

734 
	$I2S_FuŒDu∂exC⁄fig
(
SPI_Ty≥Def
* 
I2Sxext
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

736 
uöt16_t
 
tm¥eg
 = 0, 
tmp
 = 0;

739 
	`as£π_∑øm
(
	`IS_I2S_EXT_PERIPH
(
I2Sxext
));

740 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

741 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

742 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

743 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

747 
I2Sxext
->
I2SCFGR
 &
I2SCFGR_CLEAR_MASK
;

748 
I2Sxext
->
I2SPR
 = 0x0002;

751 
tm¥eg
 = 
I2Sxext
->
I2SCFGR
;

754 i‡((
I2S_InôSåu˘
->
I2S_Mode
 =
I2S_Mode_Ma°îTx
Ë|| (I2S_InôSåu˘->I2S_Modê=
I2S_Mode_SœveTx
))

756 
tmp
 = 
I2S_Mode_SœveRx
;

760 i‡((
I2S_InôSåu˘
->
I2S_Mode
 =
I2S_Mode_Ma°îRx
Ë|| (I2S_InôSåu˘->I2S_Modê=
I2S_Mode_SœveRx
))

762 
tmp
 = 
I2S_Mode_SœveTx
;

768 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
SPI_I2SCFGR_I2SMOD
 | (uöt16_t)(
tmp
 | \

769 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

770 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

773 
I2Sxext
->
I2SCFGR
 = 
tm¥eg
;

774 
	}
}

808 
uöt16_t
 
	$SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
)

811 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

814  
SPIx
->
DR
;

815 
	}
}

824 
	$SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
)

827 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

830 
SPIx
->
DR
 = 
D©a
;

831 
	}
}

914 
	$SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

917 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

918 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

919 i‡(
NewSèã
 !
DISABLE
)

922 
SPIx
->
CR1
 |
SPI_CR1_CRCEN
;

927 
SPIx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
SPI_CR1_CRCEN
);

929 
	}
}

936 
	$SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
)

939 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

942 
SPIx
->
CR1
 |
SPI_CR1_CRCNEXT
;

943 
	}
}

954 
uöt16_t
 
	$SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
)

956 
uöt16_t
 
¸¸eg
 = 0;

958 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

959 
	`as£π_∑øm
(
	`IS_SPI_CRC
(
SPI_CRC
));

960 i‡(
SPI_CRC
 !
SPI_CRC_Rx
)

963 
¸¸eg
 = 
SPIx
->
TXCRCR
;

968 
¸¸eg
 = 
SPIx
->
RXCRCR
;

971  
¸¸eg
;

972 
	}
}

979 
uöt16_t
 
	$SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
)

982 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

985  
SPIx
->
CRCPR
;

986 
	}
}

1016 
	$SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1019 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1020 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1021 
	`as£π_∑øm
(
	`IS_SPI_I2S_DMAREQ
(
SPI_I2S_DMAReq
));

1023 i‡(
NewSèã
 !
DISABLE
)

1026 
SPIx
->
CR2
 |
SPI_I2S_DMAReq
;

1031 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_I2S_DMAReq
;

1033 
	}
}

1124 
	$SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1126 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0 ;

1129 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1130 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1131 
	`as£π_∑øm
(
	`IS_SPI_I2S_CONFIG_IT
(
SPI_I2S_IT
));

1134 
ôpos
 = 
SPI_I2S_IT
 >> 4;

1137 
ômask
 = (
uöt16_t
)1 << (uöt16_t)
ôpos
;

1139 i‡(
NewSèã
 !
DISABLE
)

1142 
SPIx
->
CR2
 |
ômask
;

1147 
SPIx
->
CR2
 &(
uöt16_t
)~
ômask
;

1149 
	}
}

1168 
FœgSètus
 
	$SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

1170 
FœgSètus
 
bô°©us
 = 
RESET
;

1172 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1173 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_FLAG
(
SPI_I2S_FLAG
));

1176 i‡((
SPIx
->
SR
 & 
SPI_I2S_FLAG
Ë!(
uöt16_t
)
RESET
)

1179 
bô°©us
 = 
SET
;

1184 
bô°©us
 = 
RESET
;

1187  
bô°©us
;

1188 
	}
}

1209 
	$SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

1212 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1213 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_FLAG
(
SPI_I2S_FLAG
));

1216 
SPIx
->
SR
 = (
uöt16_t
)~
SPI_I2S_FLAG
;

1217 
	}
}

1234 
ITSètus
 
	$SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

1236 
ITSètus
 
bô°©us
 = 
RESET
;

1237 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0, 
íabÀ°©us
 = 0;

1240 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1241 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_IT
(
SPI_I2S_IT
));

1244 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

1247 
ômask
 = 
SPI_I2S_IT
 >> 4;

1250 
ômask
 = 0x01 << itmask;

1253 
íabÀ°©us
 = (
SPIx
->
CR2
 & 
ômask
) ;

1256 i‡(((
SPIx
->
SR
 & 
ôpos
Ë!(
uöt16_t
)
RESET
Ë&& 
íabÀ°©us
)

1259 
bô°©us
 = 
SET
;

1264 
bô°©us
 = 
RESET
;

1267  
bô°©us
;

1268 
	}
}

1289 
	$SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

1291 
uöt16_t
 
ôpos
 = 0;

1293 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1294 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_IT
(
SPI_I2S_IT
));

1297 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

1300 
SPIx
->
SR
 = (
uöt16_t
)~
ôpos
;

1301 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_syscfg.c

50 
	~"°m32f4xx_syscfg.h
"

51 
	~"°m32f4xx_rcc.h
"

65 
	#SYSCFG_OFFSET
 (
SYSCFG_BASE
 - 
PERIPH_BASE
)

	)

68 
	#MEMRMP_OFFSET
 
SYSCFG_OFFSET


	)

69 
	#UFB_MODE_BôNumbî
 ((
uöt8_t
)0x8)

	)

70 
	#UFB_MODE_BB
 (
PERIPH_BB_BASE
 + (
MEMRMP_OFFSET
 * 32Ë+ (
UFB_MODE_BôNumbî
 * 4))

	)

75 
	#PMC_OFFSET
 (
SYSCFG_OFFSET
 + 0x04)

	)

76 
	#MII_RMII_SEL_BôNumbî
 ((
uöt8_t
)0x17)

	)

77 
	#PMC_MII_RMII_SEL_BB
 (
PERIPH_BB_BASE
 + (
PMC_OFFSET
 * 32Ë+ (
MII_RMII_SEL_BôNumbî
 * 4))

	)

81 
	#CMPCR_OFFSET
 (
SYSCFG_OFFSET
 + 0x20)

	)

82 
	#CMP_PD_BôNumbî
 ((
uöt8_t
)0x00)

	)

83 
	#CMPCR_CMP_PD_BB
 (
PERIPH_BB_BASE
 + (
CMPCR_OFFSET
 * 32Ë+ (
CMP_PD_BôNumbî
 * 4))

	)

100 
	$SYSCFG_DeInô
()

102 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SYSCFG
, 
ENABLE
);

103 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SYSCFG
, 
DISABLE
);

104 
	}
}

118 
	$SYSCFG_Mem‹yRem≠C⁄fig
(
uöt8_t
 
SYSCFG_Mem‹yRem≠
)

121 
	`as£π_∑øm
(
	`IS_SYSCFG_MEMORY_REMAP_CONFING
(
SYSCFG_Mem‹yRem≠
));

123 
SYSCFG
->
MEMRMP
 = 
SYSCFG_Mem‹yRem≠
;

124 
	}
}

139 
	$SYSCFG_Mem‹ySw≠pögB™k
(
Fun˘i⁄ÆSèã
 
NewSèã
)

142 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

144 *(
__IO
 
uöt32_t
 *Ë
UFB_MODE_BB
 = (uöt32_t)
NewSèã
;

145 
	}
}

162 
	$SYSCFG_EXTILöeC⁄fig
(
uöt8_t
 
EXTI_P‹tSour˚GPIOx
, uöt8_à
EXTI_PöSour˚x
)

164 
uöt32_t
 
tmp
 = 0x00;

167 
	`as£π_∑øm
(
	`IS_EXTI_PORT_SOURCE
(
EXTI_P‹tSour˚GPIOx
));

168 
	`as£π_∑øm
(
	`IS_EXTI_PIN_SOURCE
(
EXTI_PöSour˚x
));

170 
tmp
 = ((
uöt32_t
)0x0FË<< (0x04 * (
EXTI_PöSour˚x
 & (
uöt8_t
)0x03));

171 
SYSCFG
->
EXTICR
[
EXTI_PöSour˚x
 >> 0x02] &~
tmp
;

172 
SYSCFG
->
EXTICR
[
EXTI_PöSour˚x
 >> 0x02] |(((
uöt32_t
)
EXTI_P‹tSour˚GPIOx
Ë<< (0x04 * (EXTI_PöSour˚x & (
uöt8_t
)0x03)));

173 
	}
}

183 
	$SYSCFG_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
SYSCFG_ETH_MedüI¡îÁ˚
)

185 
	`as£π_∑øm
(
	`IS_SYSCFG_ETH_MEDIA_INTERFACE
(
SYSCFG_ETH_MedüI¡îÁ˚
));

187 *(
__IO
 
uöt32_t
 *Ë
PMC_MII_RMII_SEL_BB
 = 
SYSCFG_ETH_MedüI¡îÁ˚
;

188 
	}
}

200 
	$SYSCFG_Com≥nßti⁄CñlCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

203 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

205 *(
__IO
 
uöt32_t
 *Ë
CMPCR_CMP_PD_BB
 = (uöt32_t)
NewSèã
;

206 
	}
}

213 
FœgSètus
 
	$SYSCFG_GëCom≥nßti⁄CñlSètus
()

215 
FœgSètus
 
bô°©us
 = 
RESET
;

217 i‡((
SYSCFG
->
CMPCR
 & 
SYSCFG_CMPCR_READY
 ) !(
uöt32_t
)
RESET
)

219 
bô°©us
 = 
SET
;

223 
bô°©us
 = 
RESET
;

225  
bô°©us
;

226 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_tim.c

119 
	~"°m32f4xx_tim.h
"

120 
	~"°m32f4xx_rcc.h
"

135 
	#SMCR_ETR_MASK
 ((
uöt16_t
)0x00FF)

	)

136 
	#CCMR_OFFSET
 ((
uöt16_t
)0x0018)

	)

137 
	#CCER_CCE_SET
 ((
uöt16_t
)0x0001)

	)

138 
	#CCER_CCNE_SET
 ((
uöt16_t
)0x0004)

	)

139 
	#CCMR_OC13M_MASK
 ((
uöt16_t
)0xFF8F)

	)

140 
	#CCMR_OC24M_MASK
 ((
uöt16_t
)0x8FFF)

	)

145 
TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

146 
uöt16_t
 
TIM_ICFûãr
);

147 
TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

148 
uöt16_t
 
TIM_ICFûãr
);

149 
TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

150 
uöt16_t
 
TIM_ICFûãr
);

151 
TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

152 
uöt16_t
 
TIM_ICFûãr
);

200 
	$TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
)

203 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

205 i‡(
TIMx
 =
TIM1
)

207 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
ENABLE
);

208 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
DISABLE
);

210 i‡(
TIMx
 =
TIM2
)

212 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
ENABLE
);

213 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
DISABLE
);

215 i‡(
TIMx
 =
TIM3
)

217 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

218 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
DISABLE
);

220 i‡(
TIMx
 =
TIM4
)

222 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

223 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
DISABLE
);

225 i‡(
TIMx
 =
TIM5
)

227 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
ENABLE
);

228 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
DISABLE
);

230 i‡(
TIMx
 =
TIM6
)

232 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
ENABLE
);

233 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
DISABLE
);

235 i‡(
TIMx
 =
TIM7
)

237 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
ENABLE
);

238 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
DISABLE
);

240 i‡(
TIMx
 =
TIM8
)

242 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
ENABLE
);

243 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
DISABLE
);

245 i‡(
TIMx
 =
TIM9
)

247 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
ENABLE
);

248 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
DISABLE
);

250 i‡(
TIMx
 =
TIM10
)

252 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
ENABLE
);

253 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
DISABLE
);

255 i‡(
TIMx
 =
TIM11
)

257 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
ENABLE
);

258 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
DISABLE
);

260 i‡(
TIMx
 =
TIM12
)

262 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
ENABLE
);

263 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
DISABLE
);

265 i‡(
TIMx
 =
TIM13
)

267 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
ENABLE
);

268 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
DISABLE
);

272 i‡(
TIMx
 =
TIM14
)

274 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
ENABLE
);

275 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
DISABLE
);

278 
	}
}

288 
	$TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

290 
uöt16_t
 
tmp¸1
 = 0;

293 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

294 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
));

295 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
));

297 
tmp¸1
 = 
TIMx
->
CR1
;

299 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)||

300 (
TIMx
 =
TIM2
Ë|| (TIMx =
TIM3
)||

301 (
TIMx
 =
TIM4
Ë|| (TIMx =
TIM5
))

304 
tmp¸1
 &(
uöt16_t
)(~(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
));

305 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
;

308 if((
TIMx
 !
TIM6
Ë&& (TIMx !
TIM7
))

311 
tmp¸1
 &(
uöt16_t
)(~
TIM_CR1_CKD
);

312 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
;

315 
TIMx
->
CR1
 = 
tmp¸1
;

318 
TIMx
->
ARR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 ;

321 
TIMx
->
PSC
 = 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
;

323 i‡((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

326 
TIMx
->
RCR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
;

331 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode_Immedüã
;

332 
	}
}

340 
	$TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

343 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 = 0xFFFFFFFF;

344 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
 = 0x0000;

345 
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

346 
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

347 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
 = 0x0000;

348 
	}
}

360 
	$TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
)

363 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

364 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER_RELOAD
(
TIM_PSCRñﬂdMode
));

366 
TIMx
->
PSC
 = 
PªsˇÀr
;

368 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode
;

369 
	}
}

383 
	$TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
)

385 
uöt16_t
 
tmp¸1
 = 0;

388 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

389 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_Cou¡îMode
));

391 
tmp¸1
 = 
TIMx
->
CR1
;

394 
tmp¸1
 &(
uöt16_t
)~(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
);

397 
tmp¸1
 |
TIM_Cou¡îMode
;

400 
TIMx
->
CR1
 = 
tmp¸1
;

401 
	}
}

409 
	$TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Cou¡î
)

412 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

415 
TIMx
->
CNT
 = 
Cou¡î
;

416 
	}
}

424 
	$TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Aut‹ñﬂd
)

427 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

430 
TIMx
->
ARR
 = 
Aut‹ñﬂd
;

431 
	}
}

438 
uöt32_t
 
	$TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
)

441 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

444  
TIMx
->
CNT
;

445 
	}
}

452 
uöt16_t
 
	$TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
)

455 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

458  
TIMx
->
PSC
;

459 
	}
}

468 
	$TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

471 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

472 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

474 i‡(
NewSèã
 !
DISABLE
)

477 
TIMx
->
CR1
 |
TIM_CR1_UDIS
;

482 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_UDIS
;

484 
	}
}

497 
	$TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
)

500 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

501 
	`as£π_∑øm
(
	`IS_TIM_UPDATE_SOURCE
(
TIM_Upd©eSour˚
));

503 i‡(
TIM_Upd©eSour˚
 !
TIM_Upd©eSour˚_GlobÆ
)

506 
TIMx
->
CR1
 |
TIM_CR1_URS
;

511 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_URS
;

513 
	}
}

522 
	$TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

525 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

526 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

528 i‡(
NewSèã
 !
DISABLE
)

531 
TIMx
->
CR1
 |
TIM_CR1_ARPE
;

536 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_ARPE
;

538 
	}
}

549 
	$TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
)

552 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

553 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
TIM_OPMode
));

556 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_OPM
;

559 
TIMx
->
CR1
 |
TIM_OPMode
;

560 
	}
}

572 
	$TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
)

575 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

576 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_CKD
));

579 
TIMx
->
CR1
 &(
uöt16_t
)(~
TIM_CR1_CKD
);

582 
TIMx
->
CR1
 |
TIM_CKD
;

583 
	}
}

592 
	$TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

595 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

596 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

598 i‡(
NewSèã
 !
DISABLE
)

601 
TIMx
->
CR1
 |
TIM_CR1_CEN
;

606 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_CEN
;

608 
	}
}

673 
	$TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

675 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

678 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

679 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

680 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

681 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

684 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC1E
;

687 
tmpc˚r
 = 
TIMx
->
CCER
;

689 
tmp¸2
 = 
TIMx
->
CR2
;

692 
tmpccmrx
 = 
TIMx
->
CCMR1
;

695 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_OC1M
;

696 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_CC1S
;

698 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

701 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1P
;

703 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
;

706 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutSèã
;

708 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

710 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

711 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

712 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

713 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

716 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1NP
;

718 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
;

720 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1NE
;

723 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
;

725 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS1
;

726 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS1N
;

728 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
;

730 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
;

733 
TIMx
->
CR2
 = 
tmp¸2
;

736 
TIMx
->
CCMR1
 = 
tmpccmrx
;

739 
TIMx
->
CCR1
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

742 
TIMx
->
CCER
 = 
tmpc˚r
;

743 
	}
}

754 
	$TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

756 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

759 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

760 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

761 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

762 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

765 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC2E
;

768 
tmpc˚r
 = 
TIMx
->
CCER
;

770 
tmp¸2
 = 
TIMx
->
CR2
;

773 
tmpccmrx
 = 
TIMx
->
CCMR1
;

776 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_OC2M
;

777 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_CC2S
;

780 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

783 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2P
;

785 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 4);

788 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 4);

790 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

792 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

793 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

794 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

795 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

798 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2NP
;

800 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 4);

802 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2NE
;

805 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 4);

807 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS2
;

808 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS2N
;

810 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 2);

812 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 2);

815 
TIMx
->
CR2
 = 
tmp¸2
;

818 
TIMx
->
CCMR1
 = 
tmpccmrx
;

821 
TIMx
->
CCR2
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

824 
TIMx
->
CCER
 = 
tmpc˚r
;

825 
	}
}

835 
	$TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

837 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

840 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

841 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

842 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

843 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

846 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC3E
;

849 
tmpc˚r
 = 
TIMx
->
CCER
;

851 
tmp¸2
 = 
TIMx
->
CR2
;

854 
tmpccmrx
 = 
TIMx
->
CCMR2
;

857 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_OC3M
;

858 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_CC3S
;

860 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

863 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3P
;

865 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 8);

868 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 8);

870 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

872 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

873 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

874 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

875 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

878 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3NP
;

880 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 8);

882 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3NE
;

885 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 8);

887 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS3
;

888 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS3N
;

890 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 4);

892 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 4);

895 
TIMx
->
CR2
 = 
tmp¸2
;

898 
TIMx
->
CCMR2
 = 
tmpccmrx
;

901 
TIMx
->
CCR3
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

904 
TIMx
->
CCER
 = 
tmpc˚r
;

905 
	}
}

915 
	$TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

917 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

920 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

921 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

922 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

923 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

926 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC4E
;

929 
tmpc˚r
 = 
TIMx
->
CCER
;

931 
tmp¸2
 = 
TIMx
->
CR2
;

934 
tmpccmrx
 = 
TIMx
->
CCMR2
;

937 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_OC4M
;

938 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_CC4S
;

941 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

944 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC4P
;

946 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 12);

949 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 12);

951 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

953 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

955 
tmp¸2
 &=(
uöt16_t
Ë~
TIM_CR2_OIS4
;

957 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 6);

960 
TIMx
->
CR2
 = 
tmp¸2
;

963 
TIMx
->
CCMR2
 = 
tmpccmrx
;

966 
TIMx
->
CCR4
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

969 
TIMx
->
CCER
 = 
tmpc˚r
;

970 
	}
}

978 
	$TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

981 
TIM_OCInôSåu˘
->
TIM_OCMode
 = 
TIM_OCMode_Timög
;

982 
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 = 
TIM_OuçutSèã_DißbÀ
;

983 
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 = 
TIM_OuçutNSèã_DißbÀ
;

984 
TIM_OCInôSåu˘
->
TIM_Pul£
 = 0x00000000;

985 
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

986 
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

987 
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

988 
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 = 
TIM_OCNIdÀSèã_Re£t
;

989 
	}
}

1014 
	$TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
)

1016 
uöt32_t
 
tmp
 = 0;

1017 
uöt16_t
 
tmp1
 = 0;

1020 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1021 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1022 
	`as£π_∑øm
(
	`IS_TIM_OCM
(
TIM_OCMode
));

1024 
tmp
 = (
uöt32_t
Ë
TIMx
;

1025 
tmp
 +
CCMR_OFFSET
;

1027 
tmp1
 = 
CCER_CCE_SET
 << (
uöt16_t
)
TIM_Ch™√l
;

1030 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp1
;

1032 if((
TIM_Ch™√l
 =
TIM_Ch™√l_1
Ë||(TIM_Ch™√»=
TIM_Ch™√l_3
))

1034 
tmp
 +(
TIM_Ch™√l
>>1);

1037 *(
__IO
 
uöt32_t
 *Ë
tmp
 &
CCMR_OC13M_MASK
;

1040 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
TIM_OCMode
;

1044 
tmp
 +(
uöt16_t
)(
TIM_Ch™√l
 - (uint16_t)4)>> (uint16_t)1;

1047 *(
__IO
 
uöt32_t
 *Ë
tmp
 &
CCMR_OC24M_MASK
;

1050 *(
__IO
 
uöt32_t
 *Ë
tmp
 |(
uöt16_t
)(
TIM_OCMode
 << 8);

1052 
	}
}

1060 
	$TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª1
)

1063 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1066 
TIMx
->
CCR1
 = 
Com∑ª1
;

1067 
	}
}

1076 
	$TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª2
)

1079 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1082 
TIMx
->
CCR2
 = 
Com∑ª2
;

1083 
	}
}

1091 
	$TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª3
)

1094 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1097 
TIMx
->
CCR3
 = 
Com∑ª3
;

1098 
	}
}

1106 
	$TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª4
)

1109 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1112 
TIMx
->
CCR4
 = 
Com∑ª4
;

1113 
	}
}

1124 
	$TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1126 
uöt16_t
 
tmpccmr1
 = 0;

1129 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1130 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1131 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1134 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC1M
;

1137 
tmpccmr1
 |
TIM_F‹˚dA˘i⁄
;

1140 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1141 
	}
}

1153 
	$TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1155 
uöt16_t
 
tmpccmr1
 = 0;

1158 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1159 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1160 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1163 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC2M
;

1166 
tmpccmr1
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1169 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1170 
	}
}

1181 
	$TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1183 
uöt16_t
 
tmpccmr2
 = 0;

1186 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1187 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1189 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1192 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC3M
;

1195 
tmpccmr2
 |
TIM_F‹˚dA˘i⁄
;

1198 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1199 
	}
}

1210 
	$TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1212 
uöt16_t
 
tmpccmr2
 = 0;

1215 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1216 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1217 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1220 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC4M
;

1223 
tmpccmr2
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1226 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1227 
	}
}

1238 
	$TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1240 
uöt16_t
 
tmpccmr1
 = 0;

1243 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1244 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1246 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1249 
tmpccmr1
 &(
uöt16_t
)(~
TIM_CCMR1_OC1PE
);

1252 
tmpccmr1
 |
TIM_OCPªlﬂd
;

1255 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1256 
	}
}

1268 
	$TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1270 
uöt16_t
 
tmpccmr1
 = 0;

1273 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1274 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1276 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1279 
tmpccmr1
 &(
uöt16_t
)(~
TIM_CCMR1_OC2PE
);

1282 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1285 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1286 
	}
}

1297 
	$TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1299 
uöt16_t
 
tmpccmr2
 = 0;

1302 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1303 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1305 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1308 
tmpccmr2
 &(
uöt16_t
)(~
TIM_CCMR2_OC3PE
);

1311 
tmpccmr2
 |
TIM_OCPªlﬂd
;

1314 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1315 
	}
}

1326 
	$TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1328 
uöt16_t
 
tmpccmr2
 = 0;

1331 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1332 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1334 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1337 
tmpccmr2
 &(
uöt16_t
)(~
TIM_CCMR2_OC4PE
);

1340 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1343 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1344 
	}
}

1355 
	$TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1357 
uöt16_t
 
tmpccmr1
 = 0;

1360 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1361 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1364 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1367 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC1FE
;

1370 
tmpccmr1
 |
TIM_OCFa°
;

1373 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1374 
	}
}

1386 
	$TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1388 
uöt16_t
 
tmpccmr1
 = 0;

1391 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1392 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1395 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1398 
tmpccmr1
 &(
uöt16_t
)(~
TIM_CCMR1_OC2FE
);

1401 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1404 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1405 
	}
}

1416 
	$TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1418 
uöt16_t
 
tmpccmr2
 = 0;

1421 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1422 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1425 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1428 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC3FE
;

1431 
tmpccmr2
 |
TIM_OCFa°
;

1434 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1435 
	}
}

1446 
	$TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1448 
uöt16_t
 
tmpccmr2
 = 0;

1451 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1452 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1455 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1458 
tmpccmr2
 &(
uöt16_t
)(~
TIM_CCMR2_OC4FE
);

1461 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1464 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1465 
	}
}

1476 
	$TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1478 
uöt16_t
 
tmpccmr1
 = 0;

1481 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1482 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1484 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1487 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC1CE
;

1490 
tmpccmr1
 |
TIM_OCCÀ¨
;

1493 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1494 
	}
}

1506 
	$TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1508 
uöt16_t
 
tmpccmr1
 = 0;

1511 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1512 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1514 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1517 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC2CE
;

1520 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1523 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1524 
	}
}

1535 
	$TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1537 
uöt16_t
 
tmpccmr2
 = 0;

1540 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1541 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1543 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1546 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC3CE
;

1549 
tmpccmr2
 |
TIM_OCCÀ¨
;

1552 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1553 
	}
}

1564 
	$TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1566 
uöt16_t
 
tmpccmr2
 = 0;

1569 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1570 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1572 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1575 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC4CE
;

1578 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1581 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1582 
	}
}

1593 
	$TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1595 
uöt16_t
 
tmpc˚r
 = 0;

1598 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1599 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1601 
tmpc˚r
 = 
TIMx
->
CCER
;

1604 
tmpc˚r
 &(
uöt16_t
)(~
TIM_CCER_CC1P
);

1605 
tmpc˚r
 |
TIM_OCPﬁ¨ôy
;

1608 
TIMx
->
CCER
 = 
tmpc˚r
;

1609 
	}
}

1620 
	$TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1622 
uöt16_t
 
tmpc˚r
 = 0;

1624 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1625 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1627 
tmpc˚r
 = 
TIMx
->
CCER
;

1630 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1NP
;

1631 
tmpc˚r
 |
TIM_OCNPﬁ¨ôy
;

1634 
TIMx
->
CCER
 = 
tmpc˚r
;

1635 
	}
}

1647 
	$TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1649 
uöt16_t
 
tmpc˚r
 = 0;

1652 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1653 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1655 
tmpc˚r
 = 
TIMx
->
CCER
;

1658 
tmpc˚r
 &(
uöt16_t
)(~
TIM_CCER_CC2P
);

1659 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 4);

1662 
TIMx
->
CCER
 = 
tmpc˚r
;

1663 
	}
}

1674 
	$TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1676 
uöt16_t
 
tmpc˚r
 = 0;

1679 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1680 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1682 
tmpc˚r
 = 
TIMx
->
CCER
;

1685 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2NP
;

1686 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 4);

1689 
TIMx
->
CCER
 = 
tmpc˚r
;

1690 
	}
}

1701 
	$TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1703 
uöt16_t
 
tmpc˚r
 = 0;

1706 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1707 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1709 
tmpc˚r
 = 
TIMx
->
CCER
;

1712 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3P
;

1713 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 8);

1716 
TIMx
->
CCER
 = 
tmpc˚r
;

1717 
	}
}

1728 
	$TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1730 
uöt16_t
 
tmpc˚r
 = 0;

1733 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1734 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1736 
tmpc˚r
 = 
TIMx
->
CCER
;

1739 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3NP
;

1740 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 8);

1743 
TIMx
->
CCER
 = 
tmpc˚r
;

1744 
	}
}

1755 
	$TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1757 
uöt16_t
 
tmpc˚r
 = 0;

1760 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1761 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1763 
tmpc˚r
 = 
TIMx
->
CCER
;

1766 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC4P
;

1767 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 12);

1770 
TIMx
->
CCER
 = 
tmpc˚r
;

1771 
	}
}

1786 
	$TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
)

1788 
uöt16_t
 
tmp
 = 0;

1791 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1792 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1793 
	`as£π_∑øm
(
	`IS_TIM_CCX
(
TIM_CCx
));

1795 
tmp
 = 
CCER_CCE_SET
 << 
TIM_Ch™√l
;

1798 
TIMx
->
CCER
 &(
uöt16_t
)~ 
tmp
;

1801 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCx
 << 
TIM_Ch™√l
);

1802 
	}
}

1816 
	$TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
)

1818 
uöt16_t
 
tmp
 = 0;

1821 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1822 
	`as£π_∑øm
(
	`IS_TIM_COMPLEMENTARY_CHANNEL
(
TIM_Ch™√l
));

1823 
	`as£π_∑øm
(
	`IS_TIM_CCXN
(
TIM_CCxN
));

1825 
tmp
 = 
CCER_CCNE_SET
 << 
TIM_Ch™√l
;

1828 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp
;

1831 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCxN
 << 
TIM_Ch™√l
);

1832 
	}
}

1900 
	$TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1903 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1904 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

1905 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
));

1906 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
));

1907 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
TIM_ICInôSåu˘
->
TIM_ICFûãr
));

1909 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

1912 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1913 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1914 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1916 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1918 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_2
)

1921 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1922 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1923 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1924 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1926 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1928 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_3
)

1931 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1932 
	`TI3_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1933 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1934 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1936 
	`TIM_SëIC3PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1941 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1942 
	`TI4_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1943 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1944 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1946 
	`TIM_SëIC4PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1948 
	}
}

1956 
	$TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1959 
TIM_ICInôSåu˘
->
TIM_Ch™√l
 = 
TIM_Ch™√l_1
;

1960 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1961 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

1962 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
 = 
TIM_ICPSC_DIV1
;

1963 
TIM_ICInôSåu˘
->
TIM_ICFûãr
 = 0x00;

1964 
	}
}

1975 
	$TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1977 
uöt16_t
 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1978 
uöt16_t
 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

1981 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1984 i‡(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 =
TIM_ICPﬁ¨ôy_Risög
)

1986 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_FÆlög
;

1990 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1993 i‡(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 =
TIM_ICSñe˘i⁄_Dúe˘TI
)

1995 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Indúe˘TI
;

1999 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

2001 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

2004 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

2005 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2007 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2009 
	`TI2_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2011 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2016 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

2017 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2019 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2021 
	`TI1_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2023 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2025 
	}
}

2032 
uöt32_t
 
	$TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
)

2035 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2038  
TIMx
->
CCR1
;

2039 
	}
}

2047 
uöt32_t
 
	$TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
)

2050 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2053  
TIMx
->
CCR2
;

2054 
	}
}

2061 
uöt32_t
 
	$TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
)

2064 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2067  
TIMx
->
CCR3
;

2068 
	}
}

2075 
uöt32_t
 
	$TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
)

2078 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2081  
TIMx
->
CCR4
;

2082 
	}
}

2095 
	$TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2098 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2099 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2102 
TIMx
->
CCMR1
 &(
uöt16_t
)~
TIM_CCMR1_IC1PSC
;

2105 
TIMx
->
CCMR1
 |
TIM_ICPSC
;

2106 
	}
}

2120 
	$TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2123 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2124 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2127 
TIMx
->
CCMR1
 &(
uöt16_t
)~
TIM_CCMR1_IC2PSC
;

2130 
TIMx
->
CCMR1
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2131 
	}
}

2144 
	$TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2147 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2148 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2151 
TIMx
->
CCMR2
 &(
uöt16_t
)~
TIM_CCMR2_IC3PSC
;

2154 
TIMx
->
CCMR2
 |
TIM_ICPSC
;

2155 
	}
}

2168 
	$TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2171 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2172 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2175 
TIMx
->
CCMR2
 &(
uöt16_t
)~
TIM_CCMR2_IC4PSC
;

2178 
TIMx
->
CCMR2
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2179 
	}
}

2221 
	$TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
)

2224 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2225 
	`as£π_∑øm
(
	`IS_TIM_OSSR_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
));

2226 
	`as£π_∑øm
(
	`IS_TIM_OSSI_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
));

2227 
	`as£π_∑øm
(
	`IS_TIM_LOCK_LEVEL
(
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
));

2228 
	`as£π_∑øm
(
	`IS_TIM_BREAK_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Bªak
));

2229 
	`as£π_∑øm
(
	`IS_TIM_BREAK_POLARITY
(
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
));

2230 
	`as£π_∑øm
(
	`IS_TIM_AUTOMATIC_OUTPUT_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
));

2234 
TIMx
->
BDTR
 = (
uöt32_t
)
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 | TIM_BDTRInôSåu˘->
TIM_OSSISèã
 |

2235 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 | TIM_BDTRInôSåu˘->
TIM_DódTime
 |

2236 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 | TIM_BDTRInôSåu˘->
TIM_BªakPﬁ¨ôy
 |

2237 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
;

2238 
	}
}

2246 
	$TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
)

2249 
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 = 
TIM_OSSRSèã_DißbÀ
;

2250 
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
 = 
TIM_OSSISèã_DißbÀ
;

2251 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 = 
TIM_LOCKLevñ_OFF
;

2252 
TIM_BDTRInôSåu˘
->
TIM_DódTime
 = 0x00;

2253 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 = 
TIM_Bªak_DißbÀ
;

2254 
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
 = 
TIM_BªakPﬁ¨ôy_Low
;

2255 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
 = 
TIM_Autom©icOuçut_DißbÀ
;

2256 
	}
}

2265 
	$TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2268 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2269 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2271 i‡(
NewSèã
 !
DISABLE
)

2274 
TIMx
->
BDTR
 |
TIM_BDTR_MOE
;

2279 
TIMx
->
BDTR
 &(
uöt16_t
)~
TIM_BDTR_MOE
;

2281 
	}
}

2290 
	$TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2293 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2294 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2296 i‡(
NewSèã
 !
DISABLE
)

2299 
TIMx
->
CR2
 |
TIM_CR2_CCUS
;

2304 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCUS
;

2306 
	}
}

2315 
	$TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2318 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2319 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2320 i‡(
NewSèã
 !
DISABLE
)

2323 
TIMx
->
CR2
 |
TIM_CR2_CCPC
;

2328 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCPC
;

2330 
	}
}

2372 
	$TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2375 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2376 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

2377 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2379 i‡(
NewSèã
 !
DISABLE
)

2382 
TIMx
->
DIER
 |
TIM_IT
;

2387 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_IT
;

2389 
	}
}

2410 
	$TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
)

2413 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2414 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
TIM_EvítSour˚
));

2417 
TIMx
->
EGR
 = 
TIM_EvítSour˚
;

2418 
	}
}

2443 
FœgSètus
 
	$TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2445 
ITSètus
 
bô°©us
 = 
RESET
;

2447 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2448 
	`as£π_∑øm
(
	`IS_TIM_GET_FLAG
(
TIM_FLAG
));

2451 i‡((
TIMx
->
SR
 & 
TIM_FLAG
Ë!(
uöt16_t
)
RESET
)

2453 
bô°©us
 = 
SET
;

2457 
bô°©us
 = 
RESET
;

2459  
bô°©us
;

2460 
	}
}

2485 
	$TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2488 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2491 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_FLAG
;

2492 
	}
}

2513 
ITSètus
 
	$TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2515 
ITSètus
 
bô°©us
 = 
RESET
;

2516 
uöt16_t
 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

2518 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2519 
	`as£π_∑øm
(
	`IS_TIM_GET_IT
(
TIM_IT
));

2521 
ô°©us
 = 
TIMx
->
SR
 & 
TIM_IT
;

2523 
ôíabÀ
 = 
TIMx
->
DIER
 & 
TIM_IT
;

2524 i‡((
ô°©us
 !(
uöt16_t
)
RESET
Ë&& (
ôíabÀ
 != (uint16_t)RESET))

2526 
bô°©us
 = 
SET
;

2530 
bô°©us
 = 
RESET
;

2532  
bô°©us
;

2533 
	}
}

2554 
	$TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2557 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2560 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_IT
;

2561 
	}
}

2591 
	$TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
)

2594 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2595 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
TIM_DMABa£
));

2596 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
TIM_DMABur°Lígth
));

2599 
TIMx
->
DCR
 = 
TIM_DMABa£
 | 
TIM_DMABur°Lígth
;

2600 
	}
}

2618 
	$TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2621 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

2622 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
TIM_DMASour˚
));

2623 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2625 i‡(
NewSèã
 !
DISABLE
)

2628 
TIMx
->
DIER
 |
TIM_DMASour˚
;

2633 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_DMASour˚
;

2635 
	}
}

2644 
	$TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2647 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2648 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2650 i‡(
NewSèã
 !
DISABLE
)

2653 
TIMx
->
CR2
 |
TIM_CR2_CCDS
;

2658 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCDS
;

2660 
	}
}

2683 
	$TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
)

2686 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2689 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

2690 
	}
}

2704 
	$TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

2707 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2708 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

2711 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_I≈utTriggîSour˚
);

2714 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

2715 
	}
}

2734 
	$TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

2735 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
)

2738 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2739 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICPﬁ¨ôy
));

2740 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
ICFûãr
));

2743 i‡(
TIM_TIxExã∫ÆCLKSour˚
 =
TIM_TIxExã∫ÆCLK1Sour˚_TI2
)

2745 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

2749 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

2752 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_TIxExã∫ÆCLKSour˚
);

2754 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

2755 
	}
}

2774 
	$TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

2775 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

2777 
uöt16_t
 
tmpsm¸
 = 0;

2780 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2781 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

2782 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

2783 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

2785 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

2788 
tmpsm¸
 = 
TIMx
->
SMCR
;

2791 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

2794 
tmpsm¸
 |
TIM_SœveMode_Exã∫Æ1
;

2797 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_TS
;

2798 
tmpsm¸
 |
TIM_TS_ETRF
;

2801 
TIMx
->
SMCR
 = 
tmpsm¸
;

2802 
	}
}

2821 
	$TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

2822 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

2825 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2826 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

2827 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

2828 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

2831 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

2834 
TIMx
->
SMCR
 |
TIM_SMCR_ECE
;

2835 
	}
}

2892 
	$TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

2894 
uöt16_t
 
tmpsm¸
 = 0;

2897 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2898 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

2901 
tmpsm¸
 = 
TIMx
->
SMCR
;

2904 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_TS
;

2907 
tmpsm¸
 |
TIM_I≈utTriggîSour˚
;

2910 
TIMx
->
SMCR
 = 
tmpsm¸
;

2911 
	}
}

2935 
	$TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
)

2938 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

2939 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
TIM_TRGOSour˚
));

2942 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_MMS
;

2944 
TIMx
->
CR2
 |
TIM_TRGOSour˚
;

2945 
	}
}

2959 
	$TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
)

2962 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2963 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
TIM_SœveMode
));

2966 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

2969 
TIMx
->
SMCR
 |
TIM_SœveMode
;

2970 
	}
}

2982 
	$TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
)

2985 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2986 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
TIM_Ma°îSœveMode
));

2989 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_MSM
;

2992 
TIMx
->
SMCR
 |
TIM_Ma°îSœveMode
;

2993 
	}
}

3012 
	$TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

3013 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

3015 
uöt16_t
 
tmpsm¸
 = 0;

3018 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

3019 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

3020 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

3021 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

3023 
tmpsm¸
 = 
TIMx
->
SMCR
;

3026 
tmpsm¸
 &
SMCR_ETR_MASK
;

3029 
tmpsm¸
 |(
uöt16_t
)(
TIM_ExtTRGPªsˇÀr
 | (uöt16_t)(
TIM_ExtTRGPﬁ¨ôy
 | (uöt16_t)(
ExtTRGFûãr
 << (uint16_t)8)));

3032 
TIMx
->
SMCR
 = 
tmpsm¸
;

3033 
	}
}

3070 
	$TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

3071 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
)

3073 
uöt16_t
 
tmpsm¸
 = 0;

3074 
uöt16_t
 
tmpccmr1
 = 0;

3075 
uöt16_t
 
tmpc˚r
 = 0;

3078 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

3079 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
TIM_EncodîMode
));

3080 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC1Pﬁ¨ôy
));

3081 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC2Pﬁ¨ôy
));

3084 
tmpsm¸
 = 
TIMx
->
SMCR
;

3087 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3090 
tmpc˚r
 = 
TIMx
->
CCER
;

3093 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

3094 
tmpsm¸
 |
TIM_EncodîMode
;

3097 
tmpccmr1
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR1_CC2S
);

3098 
tmpccmr1
 |
TIM_CCMR1_CC1S_0
 | 
TIM_CCMR1_CC2S_0
;

3101 
tmpc˚r
 &((
uöt16_t
)~
TIM_CCER_CC1P
Ë& ((uöt16_t)~
TIM_CCER_CC2P
);

3102 
tmpc˚r
 |(
uöt16_t
)(
TIM_IC1Pﬁ¨ôy
 | (uöt16_t)(
TIM_IC2Pﬁ¨ôy
 << (uint16_t)4));

3105 
TIMx
->
SMCR
 = 
tmpsm¸
;

3108 
TIMx
->
CCMR1
 = 
tmpccmr1
;

3111 
TIMx
->
CCER
 = 
tmpc˚r
;

3112 
	}
}

3122 
	$TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

3125 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

3126 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

3128 i‡(
NewSèã
 !
DISABLE
)

3131 
TIMx
->
CR2
 |
TIM_CR2_TI1S
;

3136 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_TI1S
;

3138 
	}
}

3173 
	$TIM_Rem≠C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Rem≠
)

3176 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

3177 
	`as£π_∑øm
(
	`IS_TIM_REMAP
(
TIM_Rem≠
));

3180 
TIMx
->
OR
 = 
TIM_Rem≠
;

3181 
	}
}

3204 
	$TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3205 
uöt16_t
 
TIM_ICFûãr
)

3207 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0;

3210 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC1E
;

3211 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3212 
tmpc˚r
 = 
TIMx
->
CCER
;

3215 
tmpccmr1
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR1_IC1F
);

3216 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

3219 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
);

3220 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC1E
);

3223 
TIMx
->
CCMR1
 = 
tmpccmr1
;

3224 
TIMx
->
CCER
 = 
tmpc˚r
;

3225 
	}
}

3245 
	$TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3246 
uöt16_t
 
TIM_ICFûãr
)

3248 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3251 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC2E
;

3252 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3253 
tmpc˚r
 = 
TIMx
->
CCER
;

3254 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 4);

3257 
tmpccmr1
 &((
uöt16_t
)~
TIM_CCMR1_CC2S
Ë& ((uöt16_t)~
TIM_CCMR1_IC2F
);

3258 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

3259 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

3262 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
);

3263 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC2E
);

3266 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

3267 
TIMx
->
CCER
 = 
tmpc˚r
;

3268 
	}
}

3287 
	$TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3288 
uöt16_t
 
TIM_ICFûãr
)

3290 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3293 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC3E
;

3294 
tmpccmr2
 = 
TIMx
->
CCMR2
;

3295 
tmpc˚r
 = 
TIMx
->
CCER
;

3296 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 8);

3299 
tmpccmr2
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR2_IC3F
);

3300 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

3303 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC3P
 | 
TIM_CCER_CC3NP
);

3304 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC3E
);

3307 
TIMx
->
CCMR2
 = 
tmpccmr2
;

3308 
TIMx
->
CCER
 = 
tmpc˚r
;

3309 
	}
}

3328 
	$TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3329 
uöt16_t
 
TIM_ICFûãr
)

3331 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3334 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC4E
;

3335 
tmpccmr2
 = 
TIMx
->
CCMR2
;

3336 
tmpc˚r
 = 
TIMx
->
CCER
;

3337 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 12);

3340 
tmpccmr2
 &((
uöt16_t
)~
TIM_CCMR1_CC2S
Ë& ((uöt16_t)~
TIM_CCMR1_IC2F
);

3341 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

3342 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

3345 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC4P
 | 
TIM_CCER_CC4NP
);

3346 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC4E
);

3349 
TIMx
->
CCMR2
 = 
tmpccmr2
;

3350 
TIMx
->
CCER
 = 
tmpc˚r
 ;

3351 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c

92 
	~"°m32f4xx_ußπ.h
"

93 
	~"°m32f4xx_rcc.h
"

108 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR1_M
 | 
USART_CR1_PCE
 | \

109 
USART_CR1_PS
 | 
USART_CR1_TE
 | \

110 
USART_CR1_RE
))

	)

113 
	#CR2_CLOCK_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR2_CLKEN
 | 
USART_CR2_CPOL
 | \

114 
USART_CR2_CPHA
 | 
USART_CR2_LBCL
))

	)

117 
	#CR3_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR3_RTSE
 | 
USART_CR3_CTSE
))

	)

120 
	#IT_MASK
 ((
uöt16_t
)0x001F)

	)

187 
	$USART_DeInô
(
USART_Ty≥Def
* 
USARTx
)

190 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

192 i‡(
USARTx
 =
USART1
)

194 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
ENABLE
);

195 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
DISABLE
);

197 i‡(
USARTx
 =
USART2
)

199 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

200 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
DISABLE
);

202 i‡(
USARTx
 =
USART3
)

204 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

205 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
DISABLE
);

207 i‡(
USARTx
 =
UART4
)

209 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
ENABLE
);

210 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
DISABLE
);

212 i‡(
USARTx
 =
UART5
)

214 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
ENABLE
);

215 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
DISABLE
);

217 i‡(
USARTx
 =
USART6
)

219 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART6
, 
ENABLE
);

220 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART6
, 
DISABLE
);

222 i‡(
USARTx
 =
UART7
)

224 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART7
, 
ENABLE
);

225 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART7
, 
DISABLE
);

229 i‡(
USARTx
 =
UART8
)

231 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART8
, 
ENABLE
);

232 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART8
, 
DISABLE
);

235 
	}
}

246 
	$USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
)

248 
uöt32_t
 
tm¥eg
 = 0x00, 
≠b˛ock
 = 0x00;

249 
uöt32_t
 
öãgîdividî
 = 0x00;

250 
uöt32_t
 
‰a˘i⁄Ædividî
 = 0x00;

251 
RCC_ClocksTy≥Def
 
RCC_ClocksSètus
;

254 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

255 
	`as£π_∑øm
(
	`IS_USART_BAUDRATE
(
USART_InôSåu˘
->
USART_BaudR©e
));

256 
	`as£π_∑øm
(
	`IS_USART_WORD_LENGTH
(
USART_InôSåu˘
->
USART_W‹dLígth
));

257 
	`as£π_∑øm
(
	`IS_USART_STOPBITS
(
USART_InôSåu˘
->
USART_St›Bôs
));

258 
	`as£π_∑øm
(
	`IS_USART_PARITY
(
USART_InôSåu˘
->
USART_P¨ôy
));

259 
	`as£π_∑øm
(
	`IS_USART_MODE
(
USART_InôSåu˘
->
USART_Mode
));

260 
	`as£π_∑øm
(
	`IS_USART_HARDWARE_FLOW_CONTROL
(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
));

263 i‡(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 !
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
)

265 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

269 
tm¥eg
 = 
USARTx
->
CR2
;

272 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_STOP
);

276 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_St›Bôs
;

279 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

282 
tm¥eg
 = 
USARTx
->
CR1
;

285 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR1_CLEAR_MASK
);

291 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_W‹dLígth
 | USART_InôSåu˘->
USART_P¨ôy
 |

292 
USART_InôSåu˘
->
USART_Mode
;

295 
USARTx
->
CR1
 = (
uöt16_t
)
tm¥eg
;

298 
tm¥eg
 = 
USARTx
->
CR3
;

301 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR3_CLEAR_MASK
);

305 
tm¥eg
 |
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
;

308 
USARTx
->
CR3
 = (
uöt16_t
)
tm¥eg
;

312 
	`RCC_GëClocksFªq
(&
RCC_ClocksSètus
);

314 i‡((
USARTx
 =
USART1
Ë|| (USARTx =
USART6
))

316 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK2_Fªquícy
;

320 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK1_Fªquícy
;

324 i‡((
USARTx
->
CR1
 & 
USART_CR1_OVER8
) != 0)

327 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (2 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

332 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (4 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

334 
tm¥eg
 = (
öãgîdividî
 / 100) << 4;

337 
‰a˘i⁄Ædividî
 = 
öãgîdividî
 - (100 * (
tm¥eg
 >> 4));

340 i‡((
USARTx
->
CR1
 & 
USART_CR1_OVER8
) != 0)

342 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 8Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x07);

346 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 16Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x0F);

350 
USARTx
->
BRR
 = (
uöt16_t
)
tm¥eg
;

351 
	}
}

359 
	$USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
)

362 
USART_InôSåu˘
->
USART_BaudR©e
 = 9600;

363 
USART_InôSåu˘
->
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

364 
USART_InôSåu˘
->
USART_St›Bôs
 = 
USART_St›Bôs_1
;

365 
USART_InôSåu˘
->
USART_P¨ôy
 = 
USART_P¨ôy_No
 ;

366 
USART_InôSåu˘
->
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

367 
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

368 
	}
}

379 
	$USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

381 
uöt32_t
 
tm¥eg
 = 0x00;

383 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

384 
	`as£π_∑øm
(
	`IS_USART_CLOCK
(
USART_ClockInôSåu˘
->
USART_Clock
));

385 
	`as£π_∑øm
(
	`IS_USART_CPOL
(
USART_ClockInôSåu˘
->
USART_CPOL
));

386 
	`as£π_∑øm
(
	`IS_USART_CPHA
(
USART_ClockInôSåu˘
->
USART_CPHA
));

387 
	`as£π_∑øm
(
	`IS_USART_LASTBIT
(
USART_ClockInôSåu˘
->
USART_La°Bô
));

390 
tm¥eg
 = 
USARTx
->
CR2
;

392 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR2_CLOCK_CLEAR_MASK
);

398 
tm¥eg
 |(
uöt32_t
)
USART_ClockInôSåu˘
->
USART_Clock
 | USART_ClockInôSåu˘->
USART_CPOL
 |

399 
USART_ClockInôSåu˘
->
USART_CPHA
 | USART_ClockInôSåu˘->
USART_La°Bô
;

401 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

402 
	}
}

410 
	$USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

413 
USART_ClockInôSåu˘
->
USART_Clock
 = 
USART_Clock_DißbÀ
;

414 
USART_ClockInôSåu˘
->
USART_CPOL
 = 
USART_CPOL_Low
;

415 
USART_ClockInôSåu˘
->
USART_CPHA
 = 
USART_CPHA_1Edge
;

416 
USART_ClockInôSåu˘
->
USART_La°Bô
 = 
USART_La°Bô_DißbÀ
;

417 
	}
}

427 
	$USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

430 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

431 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

433 i‡(
NewSèã
 !
DISABLE
)

436 
USARTx
->
CR1
 |
USART_CR1_UE
;

441 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_UE
);

443 
	}
}

453 
	$USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
)

456 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

459 
USARTx
->
GTPR
 &
USART_GTPR_GT
;

461 
USARTx
->
GTPR
 |
USART_PªsˇÀr
;

462 
	}
}

474 
	$USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

477 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

478 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

480 i‡(
NewSèã
 !
DISABLE
)

483 
USARTx
->
CR1
 |
USART_CR1_OVER8
;

488 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_OVER8
);

490 
	}
}

500 
	$USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

503 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

504 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

506 i‡(
NewSèã
 !
DISABLE
)

509 
USARTx
->
CR3
 |
USART_CR3_ONEBIT
;

514 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_ONEBIT
);

516 
	}
}

557 
	$USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
)

560 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

561 
	`as£π_∑øm
(
	`IS_USART_DATA
(
D©a
));

564 
USARTx
->
DR
 = (
D©a
 & (
uöt16_t
)0x01FF);

565 
	}
}

573 
uöt16_t
 
	$USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
)

576 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

579  (
uöt16_t
)(
USARTx
->
DR
 & (uint16_t)0x01FF);

580 
	}
}

625 
	$USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
)

628 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

629 
	`as£π_∑øm
(
	`IS_USART_ADDRESS
(
USART_Addªss
));

632 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_ADD
);

634 
USARTx
->
CR2
 |
USART_Addªss
;

635 
	}
}

645 
	$USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

648 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

649 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

651 i‡(
NewSèã
 !
DISABLE
)

654 
USARTx
->
CR1
 |
USART_CR1_RWU
;

659 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_RWU
);

661 
	}
}

672 
	$USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
)

675 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

676 
	`as£π_∑øm
(
	`IS_USART_WAKEUP
(
USART_WakeUp
));

678 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_WAKE
);

679 
USARTx
->
CR1
 |
USART_WakeUp
;

680 
	}
}

741 
	$USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
)

744 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

745 
	`as£π_∑øm
(
	`IS_USART_LIN_BREAK_DETECT_LENGTH
(
USART_LINBªakDëe˘Lígth
));

747 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_LBDL
);

748 
USARTx
->
CR2
 |
USART_LINBªakDëe˘Lígth
;

749 
	}
}

759 
	$USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

762 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

763 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

765 i‡(
NewSèã
 !
DISABLE
)

768 
USARTx
->
CR2
 |
USART_CR2_LINEN
;

773 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_LINEN
);

775 
	}
}

783 
	$USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
)

786 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

789 
USARTx
->
CR1
 |
USART_CR1_SBK
;

790 
	}
}

836 
	$USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

839 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

840 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

842 i‡(
NewSèã
 !
DISABLE
)

845 
USARTx
->
CR3
 |
USART_CR3_HDSEL
;

850 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_HDSEL
);

852 
	}
}

920 
	$USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
)

923 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

926 
USARTx
->
GTPR
 &
USART_GTPR_PSC
;

928 
USARTx
->
GTPR
 |(
uöt16_t
)((uöt16_t)
USART_Gu¨dTime
 << 0x08);

929 
	}
}

939 
	$USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

942 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

943 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

944 i‡(
NewSèã
 !
DISABLE
)

947 
USARTx
->
CR3
 |
USART_CR3_SCEN
;

952 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_SCEN
);

954 
	}
}

964 
	$USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

967 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

968 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

969 i‡(
NewSèã
 !
DISABLE
)

972 
USARTx
->
CR3
 |
USART_CR3_NACK
;

977 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_NACK
);

979 
	}
}

1035 
	$USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
)

1038 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1039 
	`as£π_∑øm
(
	`IS_USART_IRDA_MODE
(
USART_IrDAMode
));

1041 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_IRLP
);

1042 
USARTx
->
CR3
 |
USART_IrDAMode
;

1043 
	}
}

1053 
	$USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1056 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1057 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1059 i‡(
NewSèã
 !
DISABLE
)

1062 
USARTx
->
CR3
 |
USART_CR3_IREN
;

1067 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_IREN
);

1069 
	}
}

1099 
	$USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1102 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1103 
	`as£π_∑øm
(
	`IS_USART_DMAREQ
(
USART_DMAReq
));

1104 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1106 i‡(
NewSèã
 !
DISABLE
)

1110 
USARTx
->
CR3
 |
USART_DMAReq
;

1116 
USARTx
->
CR3
 &(
uöt16_t
)~
USART_DMAReq
;

1118 
	}
}

1231 
	$USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1233 
uöt32_t
 
ußπªg
 = 0x00, 
ôpos
 = 0x00, 
ômask
 = 0x00;

1234 
uöt32_t
 
ußπxba£
 = 0x00;

1236 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1237 
	`as£π_∑øm
(
	`IS_USART_CONFIG_IT
(
USART_IT
));

1238 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1241 i‡(
USART_IT
 =
USART_IT_CTS
)

1243 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1246 
ußπxba£
 = (
uöt32_t
)
USARTx
;

1249 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

1252 
ôpos
 = 
USART_IT
 & 
IT_MASK
;

1253 
ômask
 = (((
uöt32_t
)0x01Ë<< 
ôpos
);

1255 i‡(
ußπªg
 == 0x01)

1257 
ußπxba£
 += 0x0C;

1259 i‡(
ußπªg
 == 0x02)

1261 
ußπxba£
 += 0x10;

1265 
ußπxba£
 += 0x14;

1267 i‡(
NewSèã
 !
DISABLE
)

1269 *(
__IO
 
uöt32_t
*)
ußπxba£
 |
ômask
;

1273 *(
__IO
 
uöt32_t
*)
ußπxba£
 &~
ômask
;

1275 
	}
}

1295 
FœgSètus
 
	$USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

1297 
FœgSètus
 
bô°©us
 = 
RESET
;

1299 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1300 
	`as£π_∑øm
(
	`IS_USART_FLAG
(
USART_FLAG
));

1303 i‡(
USART_FLAG
 =
USART_FLAG_CTS
)

1305 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1308 i‡((
USARTx
->
SR
 & 
USART_FLAG
Ë!(
uöt16_t
)
RESET
)

1310 
bô°©us
 = 
SET
;

1314 
bô°©us
 = 
RESET
;

1316  
bô°©us
;

1317 
	}
}

1344 
	$USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

1347 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1348 
	`as£π_∑øm
(
	`IS_USART_CLEAR_FLAG
(
USART_FLAG
));

1351 i‡((
USART_FLAG
 & 
USART_FLAG_CTS
) == USART_FLAG_CTS)

1353 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1356 
USARTx
->
SR
 = (
uöt16_t
)~
USART_FLAG
;

1357 
	}
}

1378 
ITSètus
 
	$USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1380 
uöt32_t
 
bôpos
 = 0x00, 
ômask
 = 0x00, 
ußπªg
 = 0x00;

1381 
ITSètus
 
bô°©us
 = 
RESET
;

1383 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1384 
	`as£π_∑øm
(
	`IS_USART_GET_IT
(
USART_IT
));

1387 i‡(
USART_IT
 =
USART_IT_CTS
)

1389 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1393 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

1395 
ômask
 = 
USART_IT
 & 
IT_MASK
;

1396 
ômask
 = (
uöt32_t
)0x01 << itmask;

1398 i‡(
ußπªg
 == 0x01)

1400 
ômask
 &
USARTx
->
CR1
;

1402 i‡(
ußπªg
 == 0x02)

1404 
ômask
 &
USARTx
->
CR2
;

1408 
ômask
 &
USARTx
->
CR3
;

1411 
bôpos
 = 
USART_IT
 >> 0x08;

1412 
bôpos
 = (
uöt32_t
)0x01 << bitpos;

1413 
bôpos
 &
USARTx
->
SR
;

1414 i‡((
ômask
 !(
uöt16_t
)
RESET
)&&(
bôpos
 != (uint16_t)RESET))

1416 
bô°©us
 = 
SET
;

1420 
bô°©us
 = 
RESET
;

1423  
bô°©us
;

1424 
	}
}

1452 
	$USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1454 
uöt16_t
 
bôpos
 = 0x00, 
ômask
 = 0x00;

1456 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1457 
	`as£π_∑øm
(
	`IS_USART_CLEAR_IT
(
USART_IT
));

1460 i‡(
USART_IT
 =
USART_IT_CTS
)

1462 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1465 
bôpos
 = 
USART_IT
 >> 0x08;

1466 
ômask
 = ((
uöt16_t
)0x01 << (uöt16_t)
bôpos
);

1467 
USARTx
->
SR
 = (
uöt16_t
)~
ômask
;

1468 
	}
}

	@FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c

84 
	~"°m32f4xx_wwdg.h
"

85 
	~"°m32f4xx_rcc.h
"

100 
	#WWDG_OFFSET
 (
WWDG_BASE
 - 
PERIPH_BASE
)

	)

102 
	#CFR_OFFSET
 (
WWDG_OFFSET
 + 0x04)

	)

103 
	#EWI_BôNumbî
 0x09

	)

104 
	#CFR_EWI_BB
 (
PERIPH_BB_BASE
 + (
CFR_OFFSET
 * 32Ë+ (
EWI_BôNumbî
 * 4))

	)

108 
	#CFR_WDGTB_MASK
 ((
uöt32_t
)0xFFFFFE7F)

	)

109 
	#CFR_W_MASK
 ((
uöt32_t
)0xFFFFFF80)

	)

110 
	#BIT_MASK
 ((
uöt8_t
)0x7F)

	)

138 
	$WWDG_DeInô
()

140 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
ENABLE
);

141 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
DISABLE
);

142 
	}
}

154 
	$WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
)

156 
uöt32_t
 
tm¥eg
 = 0;

158 
	`as£π_∑øm
(
	`IS_WWDG_PRESCALER
(
WWDG_PªsˇÀr
));

160 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_WDGTB_MASK
;

162 
tm¥eg
 |
WWDG_PªsˇÀr
;

164 
WWDG
->
CFR
 = 
tm¥eg
;

165 
	}
}

173 
	$WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
)

175 
__IO
 
uöt32_t
 
tm¥eg
 = 0;

178 
	`as£π_∑øm
(
	`IS_WWDG_WINDOW_VALUE
(
WödowVÆue
));

181 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_W_MASK
;

184 
tm¥eg
 |
WödowVÆue
 & (
uöt32_t
Ë
BIT_MASK
;

187 
WWDG
->
CFR
 = 
tm¥eg
;

188 
	}
}

196 
	$WWDG_E«bÀIT
()

198 *(
__IO
 
uöt32_t
 *Ë
CFR_EWI_BB
 = (uöt32_t)
ENABLE
;

199 
	}
}

208 
	$WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
)

211 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

214 
WWDG
->
CR
 = 
Cou¡î
 & 
BIT_MASK
;

215 
	}
}

239 
	$WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
)

242 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

243 
WWDG
->
CR
 = 
WWDG_CR_WDGA
 | 
Cou¡î
;

244 
	}
}

266 
FœgSètus
 
	$WWDG_GëFœgSètus
()

268 
FœgSètus
 
bô°©us
 = 
RESET
;

270 i‡((
WWDG
->
SR
Ë!(
uöt32_t
)
RESET
)

272 
bô°©us
 = 
SET
;

276 
bô°©us
 = 
RESET
;

278  
bô°©us
;

279 
	}
}

286 
	$WWDG_CÀ¨Fœg
()

288 
WWDG
->
SR
 = (
uöt32_t
)
RESET
;

289 
	}
}

	@HARDWARE/inc/Iiclib.h

1 #i‚de‡
__IICDMA_H


2 
	#__IICDMA_H


	)

4 #ifde‡
__˝lu•lus


9 
	~"°m32f4xx.h
"

14 
	#FAST_I2C_MODE


	)

21 #ifde‡
FAST_I2C_MODE


22 
	#I2C_SPEED
 340000

	)

23 
	#I2C_DUTYCYCLE
 
I2C_DutyCy˛e_16_9


	)

25 
	#I2C_SPEED
 100000

	)

26 
	#I2C_DUTYCYCLE
 
I2C_DutyCy˛e_2


	)

30 
	#SLAVE_ADDRESS
 0x93

	)

31 
	#USER_TIMEOUT
 0x64

	)

35 
	#I2Cx_DMA
 
DMA1


	)

36 
	#I2Cx_DMA_CHANNEL
 
DMA_Ch™√l_1


	)

37 
	#I2Cx_DR_ADDRESS
 ((
uöt32_t
)0x40005410)

	)

38 
	#I2Cx_DMA_STREAM_TX
 
DMA1_Såóm6


	)

39 
	#I2Cx_DMA_STREAM_RX
 
DMA1_Såóm0


	)

40 
	#I2Cx_TX_DMA_TCFLAG
 
DMA_FLAG_TCIF6


	)

41 
	#I2Cx_TX_DMA_FEIFLAG
 
DMA_FLAG_FEIF6


	)

42 
	#I2Cx_TX_DMA_DMEIFLAG
 
DMA_FLAG_DMEIF6


	)

43 
	#I2Cx_TX_DMA_TEIFLAG
 
DMA_FLAG_TEIF6


	)

44 
	#I2Cx_TX_DMA_HTIFLAG
 
DMA_FLAG_HTIF6


	)

45 
	#I2Cx_RX_DMA_TCFLAG
 
DMA_FLAG_TCIF0


	)

46 
	#I2Cx_RX_DMA_FEIFLAG
 
DMA_FLAG_FEIF0


	)

47 
	#I2Cx_RX_DMA_DMEIFLAG
 
DMA_FLAG_DMEIF0


	)

48 
	#I2Cx_RX_DMA_TEIFLAG
 
DMA_FLAG_TEIF0


	)

49 
	#I2Cx_RX_DMA_HTIFLAG
 
DMA_FLAG_HTIF0


	)

50 
	#DMAx_CLK
 
RCC_AHB1Pîùh_DMA1


	)

52 
	#I2Cx
 
I2C1


	)

53 
	#I2Cx_CLK
 
RCC_APB1Pîùh_I2C1


	)

54 
	#I2Cx_SDA_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOB


	)

55 
	#I2Cx_SDA_PIN
 
GPIO_Pö_9


	)

56 
	#I2Cx_SDA_GPIO_PORT
 
GPIOB


	)

57 
	#I2Cx_SDA_SOURCE
 
GPIO_PöSour˚9


	)

58 
	#I2Cx_SDA_AF
 
GPIO_AF_I2C1


	)

60 
	#I2Cx_SCL_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOB


	)

61 
	#I2Cx_SCL_PIN
 
GPIO_Pö_8


	)

62 
	#I2Cx_SCL_GPIO_PORT
 
GPIOB


	)

63 
	#I2Cx_SCL_SOURCE
 
GPIO_PöSour˚8


	)

64 
	#I2Cx_SCL_AF
 
GPIO_AF_I2C1


	)

69 
	#I2Cx_DMA
 
DMA1


	)

70 
	#I2Cx_DMA_CHANNEL
 
DMA_Ch™√l_7


	)

72 
	#I2Cx_DR_ADDRESS
 ((
uöt32_t
)0x40005810)

73 
	#I2Cx_DMA_STREAM_TX
 
DMA1_Såóm7


	)

74 
	#I2Cx_DMA_STREAM_RX
 
DMA1_Såóm3


	)

75 
	#I2Cx_TX_DMA_TCFLAG
 
DMA_FLAG_TCIF6


	)

76 
	#I2Cx_TX_DMA_FEIFLAG
 
DMA_FLAG_FEIF6


	)

77 
	#I2Cx_TX_DMA_DMEIFLAG
 
DMA_FLAG_DMEIF6


	)

78 
	#I2Cx_TX_DMA_TEIFLAG
 
DMA_FLAG_TEIF6


	)

79 
	#I2Cx_TX_DMA_HTIFLAG
 
DMA_FLAG_HTIF6


	)

80 
	#I2Cx_RX_DMA_TCFLAG
 
DMA_FLAG_TCIF0


	)

81 
	#I2Cx_RX_DMA_FEIFLAG
 
DMA_FLAG_FEIF0


	)

82 
	#I2Cx_RX_DMA_DMEIFLAG
 
DMA_FLAG_DMEIF0


	)

83 
	#I2Cx_RX_DMA_TEIFLAG
 
DMA_FLAG_TEIF0


	)

84 
	#I2Cx_RX_DMA_HTIFLAG
 
DMA_FLAG_HTIF0


	)

85 
	#DMAx_CLK
 
RCC_AHB1Pîùh_DMA1


	)

87 
	#I2Cx
 
I2C2


	)

88 
	#I2Cx_CLK
 
RCC_APB1Pîùh_I2C2


	)

89 
	#I2Cx_SDA_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOB


	)

90 
	#I2Cx_SDA_PIN
 
GPIO_Pö_11


	)

91 
	#I2Cx_SDA_GPIO_PORT
 
GPIOB


	)

92 
	#I2Cx_SDA_SOURCE
 
GPIO_PöSour˚11


	)

93 
	#I2Cx_SDA_AF
 
GPIO_AF_I2C2


	)

95 
	#I2Cx_SCL_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOB


	)

96 
	#I2Cx_SCL_PIN
 
GPIO_Pö_10


	)

97 
	#I2Cx_SCL_GPIO_PORT
 
GPIOB


	)

98 
	#I2Cx_SCL_SOURCE
 
GPIO_PöSour˚10


	)

99 
	#I2Cx_SCL_AF
 
GPIO_AF_I2C2


	)

105 
I2C_INIT
();

106 
uöt16_t
 
Re˚iveI2cDmaD©a
(
uöt8_t
 
SœveAddr
);

108 #ifde‡
__˝lu•lus


	@HARDWARE/inc/Target_Init.h

8 #i‚de‡
TARGET_INIT


9 
	#TARGET_INIT


	)

10 
	~"gpio.h
"

11 
	~"Ii˛ib.h
"

12 
	~"dac.h
"

13 
	~"adc.h
"

14 
	~"pwm.h
"

15 
	~"dac.h
"

16 
	~"adc.h
"

17 
T¨gë_Inô
();

	@HARDWARE/inc/adc.h

1 #i‚de‡
__ADC_H


2 
	#__ADC_H


	)

3 
	~"sys.h
"

17 
Adc_Inô
();

18 
u16
 
Gë_Adc
(
u8
 
ch
);

19 
u16
 
Gë_Adc_Avîage
(
u8
 
ch
,u8 
times
);

	@HARDWARE/inc/dac.h

1 #i‚de‡
__DAC_H


2 
	#__DAC_H


	)

3 
	~"sys.h
"

4 
Dac_Inô
();

6 
Dac1_Së_Vﬁ
(
u16
 
vﬁ
);

7 
Dac2_Së_Vﬁ
(
u16
 
vﬁ
);

	@HARDWARE/inc/dma.h

1 #i‚de‡
__DMA_H


2 
	#__DMA_H


	)

3 
	~"sys.h
"

18 
MYDMA_C⁄fig
(
DMA_Såóm_Ty≥Def
 *
DMA_Såómx
,
u32
 
chx
,u32 
∑r
,u32 
m¨
,
u16
 
ndå
);

19 
MYDMA_E«bÀ
(
DMA_Såóm_Ty≥Def
 *
DMA_Såómx
,
u16
 
ndå
);

	@HARDWARE/inc/exti.h

1 #i‚de‡
__EXTI_H


2 
	#__EXIT_H


	)

3 
	~"sys.h
"

19 
EXTIX_Inô
();

	@HARDWARE/inc/gpio.h

1 #i‚de‡
__GPIO_H


2 
	#__GPIO_H


	)

3 
	~"sys.h
"

4 
	~"comm⁄.h
"

18 
	#Ród_CS
 (
	`GPIO_RódI≈utD©aBô
(
GPIOC
 , 
GPIO_Pö_5
 )==1)

	)

19 
	#Ród_Dö
 (
	`GPIO_RódI≈utD©aBô
(
GPIOA
 , 
GPIO_Pö_7
 )==1)

	)

21 
	#Dout_H
 
	`GPIO_SëBôs
 (
GPIOC
,
GPIO_Pö_4
);

	)

22 
	#Dout_L
 
	`GPIO_Re£tBôs
(
GPIOC
,
GPIO_Pö_4
);

	)

24 
Gpio_Inô
();

25 
SëCpuLed
(
BOOLEAN
 
°a
);

26 
SëPA15
(
BOOLEAN
 
°a
);

27 
BOOLEAN
 
GëPöD10Sè
();

28 
BOOLEAN
 
GëPöD11Sè
();

	@HARDWARE/inc/pwm.h

1 #i‚de‡
_TIMER_H


2 
	#_TIMER_H


	)

3 
	~"sys.h
"

17 
TIM14_PWM_Inô
(
u32
 
¨r
,u32 
psc
);

	@HARDWARE/inc/spi.h

1 #i‚de‡
__SPI_H


2 
	#__SPI_H


	)

3 
	~"sys.h
"

17 
SPI1_Inô
();

18 
SPI1_SëS≥ed
(
u8
 
S≥edSë
);

19 
u8
 
SPI1_RódWrôeByã
(u8 
TxD©a
);

	@HARDWARE/inc/stmflash.h

1 #i‚de‡
__STMFLASH_H__


2 
	#__STMFLASH_H__


	)

3 
	~"sys.h
"

20 
	#STM32_FLASH_BASE
 0x08000000

21 

	)

24 
	#ADDR_FLASH_SECTOR_0
 ((
u32
)0x08000000)

25 
	#ADDR_FLASH_SECTOR_1
 ((
u32
)0x08004000)

26 
	#ADDR_FLASH_SECTOR_2
 ((
u32
)0x08008000)

27 
	#ADDR_FLASH_SECTOR_3
 ((
u32
)0x0800C000)

28 
	#ADDR_FLASH_SECTOR_4
 ((
u32
)0x08010000)

29 
	#ADDR_FLASH_SECTOR_5
 ((
u32
)0x08020000)

30 
	#ADDR_FLASH_SECTOR_6
 ((
u32
)0x08040000)

31 
	#ADDR_FLASH_SECTOR_7
 ((
u32
)0x08060000)

32 
	#ADDR_FLASH_SECTOR_8
 ((
u32
)0x08080000)

33 
	#ADDR_FLASH_SECTOR_9
 ((
u32
)0x080A0000)

34 
	#ADDR_FLASH_SECTOR_10
 ((
u32
)0x080C0000)

35 
	#ADDR_FLASH_SECTOR_11
 ((
u32
)0x080E0000)

36 

	)

37 
u32
 
STMFLASH_RódW‹d
(u32 
Áddr
);

38 
STMFLASH_Wrôe
(
u32
 
WrôeAddr
,u32 *
pBuf„r
,u32 
NumToWrôe
);

39 
STMFLASH_Ród
(
u32
 
RódAddr
,u32 *
pBuf„r
,u32 
NumToRód
);

	@HARDWARE/inc/usart1.h

1 #i‚de‡
__USART_H


2 
	#__USART_H


	)

3 
	~"°dio.h
"

4 
	~"°m32f4xx_c⁄f.h
"

5 
	~"sys.h
"

29 
	#USART_REC_LEN
 200

30 
	#EN_USART1_RX
 1

31 

	)

32 
u8
 
USART_RX_BUF
[
USART_REC_LEN
];

33 
u16
 
USART_RX_STA
;

35 
u¨t_öô
(
u32
 
bound
);

	@HARDWARE/src/Iiclib.c

2 
	~"Ii˛ib.h
"

5 
	#RXBUFFERSIZE
 2

	)

6 
uöt8_t
 
	gaRxBuf„r
[
RXBUFFERSIZE
];

9 
TimeOut_U£rCÆlback
();

10 
uöt16_t
 
	$D©aPro˚ss
(
uöt8_t
* 
pd©a
)

12 
uöt16_t
 
ªt
=0;

13 
ªt
 = (
pd©a
[0]<<8) +Ödata[1];

14  
ªt
;

15 
	}
}

17 
uöt16_t
 
	$Re˚iveI2cDmaD©a
(
uöt8_t
 
SœveAddr
)

19 
I2C_InôTy≥Def
 
I2C_InôSåu˘uª
;

20 
__IO
 
uöt32_t
 
TimeOut
 = 0x0;

23 
I2C_InôSåu˘uª
.
I2C_Mode
 = 
I2C_Mode_I2C
;

24 
I2C_InôSåu˘uª
.
I2C_DutyCy˛e
 = 
I2C_DUTYCYCLE
;

25 
I2C_InôSåu˘uª
.
I2C_OwnAddªss1
 = 0xA0;

26 
I2C_InôSåu˘uª
.
I2C_Ack
 = 
I2C_Ack_E«bÀ
;

27 
I2C_InôSåu˘uª
.
I2C_ClockS≥ed
 = 
I2C_SPEED
;

28 
I2C_InôSåu˘uª
.
I2C_AcknowÀdgedAddªss
 = 
I2C_AcknowÀdgedAddªss_7bô
;

30 
	`I2C_Inô
(
I2Cx
, &
I2C_InôSåu˘uª
);

34 
	`I2C_DMALa°Tøns„rCmd
(
I2Cx
, 
ENABLE
);

36 
	`I2C_Gíî©eSTART
(
I2Cx
, 
ENABLE
);

38 
TimeOut
 = 
USER_TIMEOUT
;

39 (!
	`I2C_CheckEvít
(
I2Cx
, 
I2C_EVENT_MASTER_MODE_SELECT
))&&(
TimeOut
 != 0x00))

41 if(
TimeOut
 == 0)

43 
	`TimeOut_U£rCÆlback
();

46 
	`I2C_Síd7bôAddªss
(
I2Cx
, 
SœveAddr
, 
I2C_Dúe˘i⁄_Re˚ivî
);

48 
TimeOut
 = 
USER_TIMEOUT
;

49 (!
	`I2C_CheckEvít
(
I2Cx
, 
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
))&&(
TimeOut
 != 0x00))

51 if(
TimeOut
 == 0)

53 
	`TimeOut_U£rCÆlback
();

56 
	`I2C_DMACmd
(
I2Cx
, 
ENABLE
);

58 
	`DMA_Cmd
(
I2Cx_DMA_STREAM_RX
, 
ENABLE
);

60 
TimeOut
 = 
USER_TIMEOUT
;

61 (
	`DMA_GëCmdSètus
(
I2Cx_DMA_STREAM_RX
)!
ENABLE
)&&(
TimeOut
 != 0x00))

63 if(
TimeOut
 == 0)

65 
	`TimeOut_U£rCÆlback
();

68 
TimeOut
 = 
USER_TIMEOUT
;

69 (
	`DMA_GëFœgSètus
(
I2Cx_DMA_STREAM_RX
,
I2Cx_RX_DMA_TCFLAG
)==
RESET
)&&(
TimeOut
 != 0x00))

71 if(
TimeOut
 == 0)

73 
	`TimeOut_U£rCÆlback
();

76 
	`I2C_Gíî©eSTOP
(
I2Cx
, 
ENABLE
);

78 
	`DMA_Cmd
(
I2Cx_DMA_STREAM_RX
, 
DISABLE
);

80 
TimeOut
 = 
USER_TIMEOUT
;

81 (
	`DMA_GëCmdSètus
(
I2Cx_DMA_STREAM_RX
)!
DISABLE
)&&(
TimeOut
 != 0x00))

83 if(
TimeOut
 == 0)

85 
	`TimeOut_U£rCÆlback
();

88 
	`I2C_DMACmd
(
I2Cx
,
DISABLE
);

90 
	`DMA_CÀ¨Fœg
(
I2Cx_DMA_STREAM_RX
, 
I2Cx_RX_DMA_TCFLAG
 | 
I2Cx_RX_DMA_FEIFLAG
 | 
I2Cx_RX_DMA_DMEIFLAG
 | \

91 
I2Cx_RX_DMA_TEIFLAG
 | 
I2Cx_RX_DMA_HTIFLAG
);

92  
	`D©aPro˚ss
(
aRxBuf„r
);

94 
	}
}

102 
	$I2C_INIT
()

104 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

105 
DMA_InôTy≥Def
 
DMA_InôSåu˘uª
;

108 
	`RCC_APB1PîùhClockCmd
(
I2Cx_CLK
, 
ENABLE
);

109 
	`RCC_AHB1PîùhClockCmd
(
I2Cx_SDA_GPIO_CLK
, 
ENABLE
);

110 
	`RCC_AHB1PîùhClockCmd
(
I2Cx_SCL_GPIO_CLK
, 
ENABLE
);

112 
	`RCC_APB1PîùhRe£tCmd
(
I2Cx_CLK
, 
ENABLE
);

113 
	`RCC_APB1PîùhRe£tCmd
(
I2Cx_CLK
, 
DISABLE
);

114 
	`RCC_AHB1PîùhClockCmd
(
DMAx_CLK
, 
ENABLE
);

118 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
I2Cx_SCL_PIN
;

119 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

120 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

121 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_OD
;

122 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

123 
	`GPIO_Inô
(
I2Cx_SCL_GPIO_PORT
, &
GPIO_InôSåu˘uª
);

126 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
I2Cx_SDA_PIN
;

127 
	`GPIO_Inô
(
I2Cx_SDA_GPIO_PORT
, &
GPIO_InôSåu˘uª
);

130 
	`GPIO_PöAFC⁄fig
(
I2Cx_SCL_GPIO_PORT
, 
I2Cx_SCL_SOURCE
, 
I2Cx_SCL_AF
);

132 
	`GPIO_PöAFC⁄fig
(
I2Cx_SDA_GPIO_PORT
, 
I2Cx_SDA_SOURCE
, 
I2Cx_SDA_AF
);

136 
	`DMA_CÀ¨Fœg
(
I2Cx_DMA_STREAM_TX
, 
I2Cx_TX_DMA_TCFLAG
 | 
I2Cx_TX_DMA_FEIFLAG
 | 
I2Cx_TX_DMA_DMEIFLAG
 | \

137 
I2Cx_TX_DMA_TEIFLAG
 | 
I2Cx_TX_DMA_HTIFLAG
);

139 
	`DMA_CÀ¨Fœg
(
I2Cx_DMA_STREAM_RX
, 
I2Cx_RX_DMA_TCFLAG
 | 
I2Cx_RX_DMA_FEIFLAG
 | 
I2Cx_RX_DMA_DMEIFLAG
 | \

140 
I2Cx_RX_DMA_TEIFLAG
 | 
I2Cx_RX_DMA_HTIFLAG
);

142 
	`DMA_Cmd
(
I2Cx_DMA_STREAM_TX
, 
DISABLE
);

144 
	`DMA_DeInô
(
I2Cx_DMA_STREAM_TX
);

146 
	`DMA_Cmd
(
I2Cx_DMA_STREAM_RX
, 
DISABLE
);

149 
	`DMA_DeInô
(
I2Cx_DMA_STREAM_RX
);

150 
DMA_InôSåu˘uª
.
DMA_Ch™√l
 = 
I2Cx_DMA_CHANNEL
;

151 
DMA_InôSåu˘uª
.
DMA_PîùhîÆBa£Addr
 = 
I2Cx_DR_ADDRESS
;

152 
DMA_InôSåu˘uª
.
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

153 
DMA_InôSåu˘uª
.
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_E«bÀ
;

154 
DMA_InôSåu˘uª
.
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

155 
DMA_InôSåu˘uª
.
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

156 
DMA_InôSåu˘uª
.
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

157 
DMA_InôSåu˘uª
.
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_VîyHigh
;

158 
DMA_InôSåu˘uª
.
DMA_FIFOMode
 = 
DMA_FIFOMode_E«bÀ
;

159 
DMA_InôSåu˘uª
.
DMA_FIFOThªshﬁd
 = 
DMA_FIFOThªshﬁd_FuŒ
;

160 
DMA_InôSåu˘uª
.
DMA_Mem‹yBur°
 = 
DMA_Mem‹yBur°_SögÀ
;

161 
DMA_InôSåu˘uª
.
DMA_PîùhîÆBur°
 = 
DMA_PîùhîÆBur°_SögÀ
;

164 
DMA_InôSåu˘uª
.
DMA_DIR
 = 
DMA_DIR_PîùhîÆToMem‹y
;

165 
DMA_InôSåu˘uª
.
DMA_Mem‹y0Ba£Addr
 = (
uöt32_t
)
aRxBuf„r
;

166 
DMA_InôSåu˘uª
.
DMA_Buf„rSize
 = 
RXBUFFERSIZE
;

167 
	`DMA_DeInô
(
I2Cx_DMA_STREAM_RX
);

168 
	`DMA_Inô
(
I2Cx_DMA_STREAM_RX
, &
DMA_InôSåu˘uª
);

171 
	`I2C_A«logFûãrCmd
(
I2Cx
,
ENABLE
);

172 
	`I2C_DigôÆFûãrC⁄fig
(
I2Cx
,0x0F);

176 
	}
}

183 
	$TimeOut_U£rCÆlback
()

190 
	}
}

	@HARDWARE/src/Target_Init.c

9 
	~"T¨gë_Inô.h
"

10 
	~"mÆloc.h
"

11 
	~"exti.h
"

12 
	$T¨gë_Inô
()

14 
	`Gpio_Inô
();

18 
	`EXTIX_Inô
();

19 
	`my_mem_öô
(
SRAMIN
);

21 
	}
}

	@HARDWARE/src/adc.c

1 
	~"adc.h
"

2 
	~"dñay.h
"

4 
	#NUM_ADC_CHANNEL
 9

	)

8 
	$Adc_Inô
()

10 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

11 
ADC_Comm⁄InôTy≥Def
 
ADC_Comm⁄InôSåu˘uª
;

12 
ADC_InôTy≥Def
 
ADC_InôSåu˘uª
;

14 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOA
, 
ENABLE
);

15 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_ADC1
, 
ENABLE
);

18 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_1
 |
GPIO_Pö_2
;

19 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AN
;

20 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_DOWN
;

21 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

23 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
,
ENABLE
);

24 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
,
DISABLE
);

26 
ADC_Comm⁄InôSåu˘uª
.
ADC_Mode
 = 
ADC_Mode_Indïídít
;

27 
ADC_Comm⁄InôSåu˘uª
.
ADC_TwoSam∂ögDñay
 = 
ADC_TwoSam∂ögDñay_5Cy˛es
;

28 
ADC_Comm⁄InôSåu˘uª
.
ADC_DMAAc˚ssMode
 = 
ADC_DMAAc˚ssMode_DißbÀd
;

29 
ADC_Comm⁄InôSåu˘uª
.
ADC_PªsˇÀr
 = 
ADC_PªsˇÀr_Div4
;

30 
	`ADC_Comm⁄Inô
(&
ADC_Comm⁄InôSåu˘uª
);

32 
ADC_InôSåu˘uª
.
ADC_Resﬁuti⁄
 = 
ADC_Resﬁuti⁄_12b
;

33 
ADC_InôSåu˘uª
.
ADC_SˇnC⁄vMode
 = 
DISABLE
;

34 
ADC_InôSåu˘uª
.
ADC_C⁄töuousC⁄vMode
 = 
DISABLE
;

35 
ADC_InôSåu˘uª
.
ADC_Exã∫ÆTrigC⁄vEdge
 = 
ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
;

36 
ADC_InôSåu˘uª
.
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

37 
ADC_InôSåu˘uª
.
ADC_NbrOfC⁄vîsi⁄
 = 1;

38 
	`ADC_Inô
(
ADC1
, &
ADC_InôSåu˘uª
);

39 
	`ADC_Cmd
(
ADC1
, 
ENABLE
);

40 
	}
}

45 
u16
 
	$Gë_Adc
(
u8
 
ch
)

48 
	`ADC_ReguœrCh™√lC⁄fig
(
ADC1
, 
ch
, 1, 
ADC_Sam∂eTime_480Cy˛es
 );

49 
	`ADC_So·w¨eSèπC⁄v
(
ADC1
);

50 !
	`ADC_GëFœgSètus
(
ADC1
, 
ADC_FLAG_EOC
 ));

51  
	`ADC_GëC⁄vîsi⁄VÆue
(
ADC1
);

52 
	}
}

58 
u16
 
	$Gë_Adc_Avîage
(
u8
 
ch
,u8 
times
)

60 
u32
 
ãmp_vÆ
=0;

61 
u8
 
t
;

62 
t
=0;t<
times
;t++)

64 
ãmp_vÆ
+=
	`Gë_Adc
(
ch
);

65 
	`dñay_ms
(5);

67  
ãmp_vÆ
/
times
;

68 
	}
}

	@HARDWARE/src/dac.c

1 
	~"dac.h
"

5 
	$Dac_Inô
()

7 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

8 
DAC_InôTy≥Def
 
DAC_InôTy≥
;

10 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOA
, 
ENABLE
);

11 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_DAC
, 
ENABLE
);

13 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_5
|
GPIO_Pö_4
;

14 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AN
;

15 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_DOWN
;

16 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

18 
DAC_InôTy≥
.
DAC_Triggî
=
DAC_Triggî_N⁄e
;

19 
DAC_InôTy≥
.
DAC_WaveGíî©i⁄
=
DAC_WaveGíî©i⁄_N⁄e
;

20 
DAC_InôTy≥
.
DAC_LFSRUnmask_TrüngÀAm∂ôude
=
DAC_LFSRUnmask_Bô0
;

21 
DAC_InôTy≥
.
DAC_OuçutBuf„r
=
DAC_OuçutBuf„r_DißbÀ
 ;

23 
	`DAC_Inô
(
DAC_Ch™√l_1
,&
DAC_InôTy≥
);

24 
	`DAC_Cmd
(
DAC_Ch™√l_1
, 
ENABLE
);

26 
	`DAC_Inô
(
DAC_Ch™√l_2
,&
DAC_InôTy≥
);

27 
	`DAC_Cmd
(
DAC_Ch™√l_2
, 
ENABLE
);

29 
	`DAC_SëCh™√l1D©a
(
DAC_Align_12b_R
, 0);

30 
	`DAC_SëCh™√l2D©a
(
DAC_Align_12b_R
, 0);

31 
	}
}

35 
	$Dac1_Së_Vﬁ
(
u16
 
vﬁ
)

37 
ãmp
=
vﬁ
;

38 
ãmp
/=1000;

39 
ãmp
=temp*4096/3.3;

40 
	`DAC_SëCh™√l1D©a
(
DAC_Align_12b_R
,
ãmp
);

41 
	}
}

43 
	$Dac2_Së_Vﬁ
(
u16
 
vﬁ
)

45 
ãmp
=
vﬁ
;

46 
ãmp
/=1000;

47 
ãmp
=temp*4096/3.3;

48 
	`DAC_SëCh™√l1D©a
(
DAC_Align_12b_R
,
ãmp
);

49 
	}
}

	@HARDWARE/src/dma.c

1 
	~"dma.h
"

2 
	~"dñay.h
"

25 
	$MYDMA_C⁄fig
(
DMA_Såóm_Ty≥Def
 *
DMA_Såómx
,
u32
 
chx
,u32 
∑r
,u32 
m¨
,
u16
 
ndå
)

28 
DMA_InôTy≥Def
 
DMA_InôSåu˘uª
;

30 if((
u32
)
DMA_Såómx
>(u32)
DMA2
)

32 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_DMA2
,
ENABLE
);

36 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_DMA1
,
ENABLE
);

38 
	`DMA_DeInô
(
DMA_Såómx
);

40 
	`DMA_GëCmdSètus
(
DMA_Såómx
Ë!
DISABLE
){}

43 
DMA_InôSåu˘uª
.
DMA_Ch™√l
 = 
chx
;

44 
DMA_InôSåu˘uª
.
DMA_PîùhîÆBa£Addr
 = 
∑r
;

45 
DMA_InôSåu˘uª
.
DMA_Mem‹y0Ba£Addr
 = 
m¨
;

46 
DMA_InôSåu˘uª
.
DMA_DIR
 = 
DMA_DIR_Mem‹yToPîùhîÆ
;

47 
DMA_InôSåu˘uª
.
DMA_Buf„rSize
 = 
ndå
;

48 
DMA_InôSåu˘uª
.
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

49 
DMA_InôSåu˘uª
.
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_E«bÀ
;

50 
DMA_InôSåu˘uª
.
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

51 
DMA_InôSåu˘uª
.
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

52 
DMA_InôSåu˘uª
.
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

53 
DMA_InôSåu˘uª
.
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_Medium
;

54 
DMA_InôSåu˘uª
.
DMA_FIFOMode
 = 
DMA_FIFOMode_DißbÀ
;

55 
DMA_InôSåu˘uª
.
DMA_FIFOThªshﬁd
 = 
DMA_FIFOThªshﬁd_FuŒ
;

56 
DMA_InôSåu˘uª
.
DMA_Mem‹yBur°
 = 
DMA_Mem‹yBur°_SögÀ
;

57 
DMA_InôSåu˘uª
.
DMA_PîùhîÆBur°
 = 
DMA_PîùhîÆBur°_SögÀ
;

58 
	`DMA_Inô
(
DMA_Såómx
, &
DMA_InôSåu˘uª
);

61 
	}
}

65 
	$MYDMA_E«bÀ
(
DMA_Såóm_Ty≥Def
 *
DMA_Såómx
,
u16
 
ndå
)

68 
	`DMA_Cmd
(
DMA_Såómx
, 
DISABLE
);

70 
	`DMA_GëCmdSètus
(
DMA_Såómx
Ë!
DISABLE
){}

72 
	`DMA_SëCuºD©aCou¡î
(
DMA_Såómx
,
ndå
);

74 
	`DMA_Cmd
(
DMA_Såómx
, 
ENABLE
);

75 
	}
}

	@HARDWARE/src/exti.c

1 
	~"exti.h
"

2 
	~"dñay.h
"

20 
	$EXTI0_IRQH™dÀr
()

27 
	`EXTI_CÀ¨ITPídögBô
(
EXTI_Löe0
);

28 
	}
}

61 
	$ExôIo_Inô
()

64 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

67 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOA
, 
ENABLE
);

75 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_0
;

76 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_DOWN
 ;

77 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

79 
	}
}

83 
	$EXTIX_Inô
()

85 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

86 
EXTI_InôTy≥Def
 
EXTI_InôSåu˘uª
;

88 
	`ExôIo_Inô
();

90 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_SYSCFG
, 
ENABLE
);

96 
	`SYSCFG_EXTILöeC⁄fig
(
EXTI_P‹tSour˚GPIOA
, 
EXTI_PöSour˚0
);

99 
EXTI_InôSåu˘uª
.
EXTI_Löe
 = 
EXTI_Löe0
;

100 
EXTI_InôSåu˘uª
.
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

101 
EXTI_InôSåu˘uª
.
EXTI_Triggî
 = 
EXTI_Triggî_Risög
;

102 
EXTI_InôSåu˘uª
.
EXTI_LöeCmd
 = 
ENABLE
;

103 
	`EXTI_Inô
(&
EXTI_InôSåu˘uª
);

112 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
EXTI0_IRQn
;

113 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 0x00;

114 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0x02;

115 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

116 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

138 
	}
}

	@HARDWARE/src/gpio.c

1 
	~"gpio.h
"

3 
	$Gpio_Inô
()

5 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

25 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOC
, 
ENABLE
);

26 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_4
;

27 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

28 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

29 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

30 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

31 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

33 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_5
;

34 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN
;

35 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

36 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

37 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

40 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOD
, 
ENABLE
);

41 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_10
 | 
GPIO_Pö_11
;

42 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN
;

43 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

44 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_DOWN
;

45 
	`GPIO_Inô
(
GPIOD
, &
GPIO_InôSåu˘uª
);

48 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOA
, 
ENABLE
);

49 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_6
 | 
GPIO_Pö_15
;

50 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

51 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

52 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

53 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

55 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_7
;

56 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN
;

57 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

58 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

59 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

61 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOD
, 
ENABLE
);

62 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_9
;

63 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

64 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

65 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

66 
	`GPIO_Inô
(
GPIOD
, &
GPIO_InôSåu˘uª
);

68 
	}
}

70 
	$SëCpuLed
(
BOOLEAN
 
°a
)

72 if(
°a
)

73 
	`GPIO_Re£tBôs
(
GPIOA
, 
GPIO_Pö_6
);

75 
	`GPIO_SëBôs
(
GPIOA
, 
GPIO_Pö_6
);

76 
	}
}

78 
	$SëPA15
(
BOOLEAN
 
°a
)

80 if(
°a
)

81 
	`GPIO_SëBôs
(
GPIOA
, 
GPIO_Pö_15
);

83 
	`GPIO_Re£tBôs
(
GPIOA
, 
GPIO_Pö_15
);

84 
	}
}

86 
BOOLEAN
 
	$GëPöD10Sè
()

88 
BOOLEAN
 
ªt
 = 
TRUE
;

90 if(
	`GPIO_RódI≈utD©aBô
(
GPIOD
,
GPIO_Pö_10
)==
TRUE
)

91 
ªt
 = 
TRUE
;

92 if(
	`GPIO_RódI≈utD©aBô
(
GPIOD
,
GPIO_Pö_10
)==
FALSE
)

93 
ªt
 = 
FALSE
;

94  
ªt
;

95 
	}
}

97 
BOOLEAN
 
	$GëPöD11Sè
()

99 
BOOLEAN
 
ªt
 = 
TRUE
;

101 if(
	`GPIO_RódI≈utD©aBô
(
GPIOD
,
GPIO_Pö_11
)==
TRUE
)

102 
ªt
 = 
TRUE
;

103 if(
	`GPIO_RódI≈utD©aBô
(
GPIOD
,
GPIO_Pö_11
)==
FALSE
)

104 
ªt
 = 
FALSE
;

105  
ªt
;

106 
	}
}

	@HARDWARE/src/pwm.c

1 
	~"pwm.h
"

23 
	$TIM3_PWM_Inô
(
u32
 
¨r
,u32 
psc
)

27 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

28 
TIM_TimeBa£InôTy≥Def
 
TIM_TimeBa£Såu˘uª
;

29 
TIM_OCInôTy≥Def
 
TIM_OCInôSåu˘uª
;

31 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_TIM3
,
ENABLE
);

32 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOA
|
RCC_AHB1Pîùh_GPIOB
, 
ENABLE
);

34 
	`GPIO_PöAFC⁄fig
(
GPIOA
,
GPIO_PöSour˚6
,
GPIO_AF_TIM3
);

35 
	`GPIO_PöAFC⁄fig
(
GPIOA
,
GPIO_PöSour˚7
,
GPIO_AF_TIM3
);

36 
	`GPIO_PöAFC⁄fig
(
GPIOB
,
GPIO_PöSour˚0
,
GPIO_AF_TIM3
);

37 
	`GPIO_PöAFC⁄fig
(
GPIOB
,
GPIO_PöSour˚1
,
GPIO_AF_TIM3
);

39 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_6
|
GPIO_Pö_7
;

40 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

41 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

42 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

43 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

44 
	`GPIO_Inô
(
GPIOA
,&
GPIO_InôSåu˘uª
);

46 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_0
|
GPIO_Pö_1
;

47 
	`GPIO_Inô
(
GPIOB
,&
GPIO_InôSåu˘uª
);

49 
TIM_TimeBa£Såu˘uª
.
TIM_PªsˇÀr
=
psc
;

50 
TIM_TimeBa£Såu˘uª
.
TIM_Cou¡îMode
=
TIM_Cou¡îMode_Up
;

51 
TIM_TimeBa£Såu˘uª
.
TIM_Pîiod
=
¨r
;

52 
TIM_TimeBa£Såu˘uª
.
TIM_ClockDivisi⁄
=
TIM_CKD_DIV1
;

54 
	`TIM_TimeBa£Inô
(
TIM3
,&
TIM_TimeBa£Såu˘uª
);

57 
TIM_OCInôSåu˘uª
.
TIM_OCMode
 = 
TIM_OCMode_PWM1
;

58 
TIM_OCInôSåu˘uª
.
TIM_OuçutSèã
 = 
TIM_OuçutSèã_E«bÀ
;

59 
TIM_OCInôSåu˘uª
.
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_Low
;

61 
	`TIM_OC1Inô
(
TIM3
, &
TIM_OCInôSåu˘uª
);

62 
	`TIM_OC1PªlﬂdC⁄fig
(
TIM3
, 
TIM_OCPªlﬂd_E«bÀ
);

64 
	`TIM_OC2Inô
(
TIM3
, &
TIM_OCInôSåu˘uª
);

65 
	`TIM_OC2PªlﬂdC⁄fig
(
TIM3
, 
TIM_OCPªlﬂd_E«bÀ
);

67 
	`TIM_OC3Inô
(
TIM3
, &
TIM_OCInôSåu˘uª
);

68 
	`TIM_OC3PªlﬂdC⁄fig
(
TIM3
, 
TIM_OCPªlﬂd_E«bÀ
);

70 
	`TIM_OC4Inô
(
TIM3
, &
TIM_OCInôSåu˘uª
);

71 
	`TIM_OC4PªlﬂdC⁄fig
(
TIM3
, 
TIM_OCPªlﬂd_E«bÀ
);

73 
	`TIM_ARRPªlﬂdC⁄fig
(
TIM3
,
ENABLE
);

74 
	`TIM_Cmd
(
TIM3
, 
ENABLE
);

77 
	}
}

	@HARDWARE/src/spi.c

1 
	~"•i.h
"

19 
	$SPI1_Inô
()

21 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

22 
SPI_InôTy≥Def
 
SPI_InôSåu˘uª
;

24 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOA
, 
ENABLE
);

25 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_SPI1
, 
ENABLE
);

28 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_3
|
GPIO_Pö_4
|
GPIO_Pö_5
;

29 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

30 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

31 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

32 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

33 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

35 
	`GPIO_PöAFC⁄fig
(
GPIOB
,
GPIO_PöSour˚3
,
GPIO_AF_SPI1
);

36 
	`GPIO_PöAFC⁄fig
(
GPIOB
,
GPIO_PöSour˚4
,
GPIO_AF_SPI1
);

37 
	`GPIO_PöAFC⁄fig
(
GPIOB
,
GPIO_PöSour˚5
,
GPIO_AF_SPI1
);

40 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
,
ENABLE
);

41 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
,
DISABLE
);

43 
SPI_InôSåu˘uª
.
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

44 
SPI_InôSåu˘uª
.
SPI_Mode
 = 
SPI_Mode_Ma°î
;

45 
SPI_InôSåu˘uª
.
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

46 
SPI_InôSåu˘uª
.
SPI_CPOL
 = 
SPI_CPOL_High
;

47 
SPI_InôSåu˘uª
.
SPI_CPHA
 = 
SPI_CPHA_2Edge
;

48 
SPI_InôSåu˘uª
.
SPI_NSS
 = 
SPI_NSS_So·
;

49 
SPI_InôSåu˘uª
.
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_256
;

50 
SPI_InôSåu˘uª
.
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

51 
SPI_InôSåu˘uª
.
SPI_CRCPﬁynomül
 = 7;

52 
	`SPI_Inô
(
SPI1
, &
SPI_InôSåu˘uª
);

54 
	`SPI_Cmd
(
SPI1
, 
ENABLE
);

56 
	`SPI1_RódWrôeByã
(0xff);

57 
	}
}

62 
	$SPI1_SëS≥ed
(
u8
 
SPI_BaudR©ePªsˇÀr
)

64 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
SPI_BaudR©ePªsˇÀr
));

65 
SPI1
->
CR1
&=0XFFC7;

66 
SPI1
->
CR1
|=
SPI_BaudR©ePªsˇÀr
;

67 
	`SPI_Cmd
(
SPI1
,
ENABLE
);

68 
	}
}

72 
u8
 
	$SPI1_RódWrôeByã
(
u8
 
TxD©a
)

75 
	`SPI_I2S_GëFœgSètus
(
SPI1
, 
SPI_I2S_FLAG_TXE
Ë=
RESET
){}

77 
	`SPI_I2S_SídD©a
(
SPI1
, 
TxD©a
);

79 
	`SPI_I2S_GëFœgSètus
(
SPI1
, 
SPI_I2S_FLAG_RXNE
Ë=
RESET
){}

81  
	`SPI_I2S_Re˚iveD©a
(
SPI1
);

83 
	}
}

	@HARDWARE/src/stmflash.c

1 
	~"°mÊash.h
"

2 
	~"dñay.h
"

22 
u32
 
	$STMFLASH_RódW‹d
(
u32
 
Áddr
)

24  *(
vu32
*)
Áddr
;

25 
	}
}

29 
uöt16_t
 
	$STMFLASH_GëFœshSe˘‹
(
u32
 
addr
)

31 if(
addr
<
ADDR_FLASH_SECTOR_1
) 
FLASH_Se˘‹_0
;

32 if(
addr
<
ADDR_FLASH_SECTOR_2
) 
FLASH_Se˘‹_1
;

33 if(
addr
<
ADDR_FLASH_SECTOR_3
) 
FLASH_Se˘‹_2
;

34 if(
addr
<
ADDR_FLASH_SECTOR_4
) 
FLASH_Se˘‹_3
;

35 if(
addr
<
ADDR_FLASH_SECTOR_5
) 
FLASH_Se˘‹_4
;

36 if(
addr
<
ADDR_FLASH_SECTOR_6
) 
FLASH_Se˘‹_5
;

37 if(
addr
<
ADDR_FLASH_SECTOR_7
) 
FLASH_Se˘‹_6
;

38 if(
addr
<
ADDR_FLASH_SECTOR_8
) 
FLASH_Se˘‹_7
;

39 if(
addr
<
ADDR_FLASH_SECTOR_9
) 
FLASH_Se˘‹_8
;

40 if(
addr
<
ADDR_FLASH_SECTOR_10
) 
FLASH_Se˘‹_9
;

41 if(
addr
<
ADDR_FLASH_SECTOR_11
) 
FLASH_Se˘‹_10
;

42  
FLASH_Se˘‹_11
;

43 
	}
}

54 
	$STMFLASH_Wrôe
(
u32
 
WrôeAddr
,u32 *
pBuf„r
,u32 
NumToWrôe
)

56 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

57 
u32
 
addrx
=0;

58 
u32
 
ídaddr
=0;

59 if(
WrôeAddr
<
STM32_FLASH_BASE
||WriteAddr%4);

60 
	`FLASH_U∆ock
();

61 
	`FLASH_D©aCacheCmd
(
DISABLE
);

63 
addrx
=
WrôeAddr
;

64 
ídaddr
=
WrôeAddr
+
NumToWrôe
*4;

65 if(
addrx
<0X1FFF0000)

67 
addrx
<
ídaddr
)

69 if(
	`STMFLASH_RódW‹d
(
addrx
)!=0XFFFFFFFF)

71 
°©us
=
	`FLASH_Eø£Se˘‹
(
	`STMFLASH_GëFœshSe˘‹
(
addrx
),
VﬁègeR™ge_3
);

72 if(
°©us
!=
FLASH_COMPLETE
);

73 }
addrx
+=4;

76 if(
°©us
==
FLASH_COMPLETE
)

78 
WrôeAddr
<
ídaddr
)

80 if(
	`FLASH_ProgømW‹d
(
WrôeAddr
,*
pBuf„r
)!=
FLASH_COMPLETE
)

84 
WrôeAddr
+=4;

85 
pBuf„r
++;

88 
	`FLASH_D©aCacheCmd
(
ENABLE
);

89 
	`FLASH_Lock
();

90 
	}
}

96 
	$STMFLASH_Ród
(
u32
 
RódAddr
,u32 *
pBuf„r
,u32 
NumToRód
)

98 
u32
 
i
;

99 
i
=0;i<
NumToRód
;i++)

101 
pBuf„r
[
i
]=
	`STMFLASH_RódW‹d
(
RódAddr
);

102 
RódAddr
+=4;

104 
	}
}

	@HARDWARE/src/usart1.c

1 
	~"sys.h
"

2 
	~"ußπ1.h
"

5 #i‡
SYSTEM_SUPPORT_UCOS


6 
	~"ö˛udes.h
"

35 #i‡
EN_USART1_RX


38 
u8
 
	gUSART_RX_BUF
[
USART_REC_LEN
];

43 
u16
 
	gUSART_RX_STA
=0;

47 
	$u¨t_öô
(
u32
 
bound
){

49 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

50 
USART_InôTy≥Def
 
USART_InôSåu˘uª
;

51 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

53 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOA
,
ENABLE
);

54 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_USART1
,
ENABLE
);

57 
	`GPIO_PöAFC⁄fig
(
GPIOA
,
GPIO_PöSour˚9
,
GPIO_AF_USART1
);

58 
	`GPIO_PöAFC⁄fig
(
GPIOA
,
GPIO_PöSour˚10
,
GPIO_AF_USART1
);

61 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_9
 | 
GPIO_Pö_10
;

62 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

63 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

64 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

65 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

66 
	`GPIO_Inô
(
GPIOA
,&
GPIO_InôSåu˘uª
);

69 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 
bound
;

70 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

71 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

72 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

73 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

74 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

75 
	`USART_Inô
(
USART1
, &
USART_InôSåu˘uª
);

77 
	`USART_Cmd
(
USART1
, 
ENABLE
);

79 
	`USART_CÀ¨Fœg
(
USART1
, 
USART_FLAG_TC
);

81 #i‡
EN_USART1_RX


82 
	`USART_ITC⁄fig
(
USART1
, 
USART_IT_RXNE
, 
ENABLE
);

85 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USART1_IRQn
;

86 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
=3;

87 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 =3;

88 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

89 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

93 
	}
}

96 
	$USART1_IRQH™dÀr
()

98 
u8
 
Res
;

99 #ifde‡
OS_TICKS_PER_SEC


100 
	`OSI¡E¡î
();

102 if(
	`USART_GëITSètus
(
USART1
, 
USART_IT_RXNE
Ë!
RESET
)

104 
Res
 =
	`USART_Re˚iveD©a
(
USART1
);

106 if((
USART_RX_STA
&0x8000)==0)

108 if(
USART_RX_STA
&0x4000)

110 if(
Res
!=0x0a)
USART_RX_STA
=0;

111 
USART_RX_STA
|=0x8000;

115 if(
Res
==0x0d)
USART_RX_STA
|=0x4000;

118 
USART_RX_BUF
[
USART_RX_STA
&0X3FFF]=
Res
 ;

119 
USART_RX_STA
++;

120 if(
USART_RX_STA
>(
USART_REC_LEN
-1))USART_RX_STA=0;

125 #ifde‡
OS_TICKS_PER_SEC


126 
	`OSI¡Exô
();

128 
	}
}

	@SYSTEM/System_Init.c

9 
	~"Sy°em_Inô.h
"

11 
	$Sy°em_Inô
()

13 
	`dñay_öô
(168);

15 
	`u¨t_öô
(115200);

16 
	`u¨t3_öô
(19200);

17 
	`u¨t4_öô
(19200);

18 
	`u¨t5_öô
(38400);

19 
	}
}

	@SYSTEM/System_Init.h

8 #i‚de‡
SYSTEM_INIT


9 
	#SYSTEM_INIT


	)

10 
	~"sys.h
"

11 
	~"dñay.h
"

12 
	~"ußπ3.h
"

13 
	~"ußπ4.h
"

14 
	~"ußπ5.h
"

15 
	~"ußπ.h
"

16 
Sy°em_Inô
();

	@SYSTEM/delay/delay.c

1 
	~"dñay.h
"

2 
	~"sys.h
"

5 #i‡
SYSTEM_SUPPORT_UCOS


6 
	~"ö˛udes.h
"

25 #ifde‡
CPU_CFG_CRITICAL_METHOD


26 
	#OS_CRITICAL_METHOD


	)

27 
	#OS_TICKS_PER_SEC
 
OSCfg_TickR©e_Hz


	)

28 
	#OS_TRUE
 
OS_STATE_OS_RUNNING


	)

29 
	#OSLockNe°ög
 
OSI¡Ne°ögCå


	)

32 
u8
 
	gÁc_us
=0;

33 
u16
 
	gÁc_ms
=0;

35 #ifde‡
OS_CRITICAL_METHOD


37 
	$SysTick_H™dÀr
()

39 
	`OSI¡E¡î
();

40 
	`OSTimeTick
();

41 
	`OSI¡Exô
();

42 
	}
}

49 
	$dñay_öô
(
u8
 
SYSCLK
)

51 #ifde‡
OS_CRITICAL_METHOD


52 
u32
 
ªlﬂd
;

54 
	`SysTick_CLKSour˚C⁄fig
(
SysTick_CLKSour˚_HCLK_Div8
);

55 
Ác_us
=
SYSCLK
/8;

57 #ifde‡
OS_CRITICAL_METHOD


58 
ªlﬂd
=
SYSCLK
/8;

59 
ªlﬂd
*=1000000/
OS_TICKS_PER_SEC
;

61 
Ác_ms
=1000/
OS_TICKS_PER_SEC
;

62 
SysTick
->
CTRL
|=
SysTick_CTRL_TICKINT_Msk
;

63 
SysTick
->
LOAD
=
ªlﬂd
;

64 
SysTick
->
CTRL
|=
SysTick_CTRL_ENABLE_Msk
;

66 
Ác_ms
=(
u16
)
Ác_us
*1000;

68 
	}
}

71 #ifde‡
OS_CRITICAL_METHOD


74 
	$dñay_us
(
u32
 
nus
)

76 #ifde‡
CPU_CFG_CRITICAL_METHOD


77 
OS_ERR
 
îr
;

79 
u32
 
ticks
;

80 
u32
 
tﬁd
,
äow
,
t˙t
=0;

81 
u32
 
ªlﬂd
=
SysTick
->
LOAD
;

82 
ticks
=
nus
*
Ác_us
;

83 
t˙t
=0;

85 #ifde‡
CPU_CFG_CRITICAL_METHOD


86 
	`OSSchedLock
(&
îr
);

88 
	`OSSchedLock
();

91 
tﬁd
=
SysTick
->
VAL
;

94 
äow
=
SysTick
->
VAL
;

95 if(
äow
!=
tﬁd
)

97 if(
äow
<
tﬁd
)
t˙t
+=told-tnow;

98 
t˙t
+=
ªlﬂd
-
äow
+
tﬁd
;

99 
tﬁd
=
äow
;

100 if(
t˙t
>=
ticks
);

104 #ifde‡
CPU_CFG_CRITICAL_METHOD


105 
	`OSSchedU∆ock
(&
îr
);

107 
	`OSSchedU∆ock
();

109 
	}
}

113 
	$dñay_ms
(
u16
 
nms
)

115 #ifde‡
CPU_CFG_CRITICAL_METHOD


116 
OS_ERR
 
îr
;

118 if(
OSRu¬ög
==
OS_TRUE
&&
OSLockNe°ög
==0)

120 if(
nms
>=
Ác_ms
)

122 #ifde‡
CPU_CFG_CRITICAL_METHOD


123 
	`OSTimeDly
(
nms
/
Ác_ms
,
OS_OPT_TIME_PERIODIC
,&
îr
);

125 
	`OSTimeDly
(
nms
/
Ác_ms
);

128 
nms
%=
Ác_ms
;

130 
	`dñay_us
((
u32
)(
nms
*1000));

131 
	}
}

136 
	$dñay_us
(
u32
 
nus
)

138 
u32
 
ãmp
;

139 
SysTick
->
LOAD
=
nus
*
Ác_us
;

140 
SysTick
->
VAL
=0x00;

141 
SysTick
->
CTRL
|=
SysTick_CTRL_ENABLE_Msk
 ;

144 
ãmp
=
SysTick
->
CTRL
;

146 (
ãmp
&0x01)&&!(temp&(1<<16)));

147 
SysTick
->
CTRL
&=~
SysTick_CTRL_ENABLE_Msk
;

148 
SysTick
->
VAL
 =0X00;

149 
	}
}

156 
	$dñay_xms
(
u16
 
nms
)

158 
u32
 
ãmp
;

159 
SysTick
->
LOAD
=(
u32
)
nms
*
Ác_ms
;

160 
SysTick
->
VAL
 =0x00;

161 
SysTick
->
CTRL
|=
SysTick_CTRL_ENABLE_Msk
 ;

164 
ãmp
=
SysTick
->
CTRL
;

166 (
ãmp
&0x01)&&!(temp&(1<<16)));

167 
SysTick
->
CTRL
&=~
SysTick_CTRL_ENABLE_Msk
;

168 
SysTick
->
VAL
 =0X00;

169 
	}
}

172 
	$dñay_ms
(
u16
 
nms
)

174 
u8
 
ª≥©
=
nms
/540;

176 
u16
 
ªmaö
=
nms
%540;

177 
ª≥©
)

179 
	`dñay_xms
(540);

180 
ª≥©
--;

182 if(
ªmaö
)
	`dñay_xms
(remain);

183 
	}
}

	@SYSTEM/delay/delay.h

1 #i‚de‡
__DELAY_H


2 
	#__DELAY_H


	)

3 
	~<sys.h
>

21 
dñay_öô
(
u8
 
SYSCLK
);

22 
dñay_ms
(
u16
 
nms
);

23 
dñay_us
(
u32
 
nus
);

	@SYSTEM/sys/sys.c

1 
	~"sys.h
"

22 
__asm
 
	$WFI_SET
()

24 
WFI
;

25 
	}
}

27 
__asm
 
	$INTX_DISABLE
()

29 
CPSID
 
I


30 
BX
 
LR


31 
	}
}

33 
__asm
 
	$INTX_ENABLE
()

35 
CPSIE
 
I


36 
BX
 
LR


37 
	}
}

40 
__asm
 
	$MSR_MSP
(
u32
 
addr
)

42 
MSR
 
MSP
, 
r0


43 
BX
 
r14


44 
	}
}

	@SYSTEM/sys/sys.h

1 #i‚de‡
__SYS_H


2 
	#__SYS_H


	)

3 
	~"°m32f4xx.h
"

23 
	#SYSTEM_SUPPORT_UCOS
 1

24 

	)

29 
	#BITBAND
(
addr
, 
bônum
Ë(◊dd∏& 0xF0000000)+0x2000000+(◊dd∏&0xFFFFF)<<5)+(bônum<<2))

	)

30 
	#MEM_ADDR
(
addr
Ë*((vﬁ©ûê*)◊ddr))

	)

31 
	#BIT_ADDR
(
addr
, 
bônum
Ë
	`MEM_ADDR
(
	`BITBAND
◊ddr, bônum))

	)

33 
	#GPIOA_ODR_Addr
 (
GPIOA_BASE
+20)

34 
	#GPIOB_ODR_Addr
 (
GPIOB_BASE
+20)

35 
	#GPIOC_ODR_Addr
 (
GPIOC_BASE
+20)

36 
	#GPIOD_ODR_Addr
 (
GPIOD_BASE
+20)

37 
	#GPIOE_ODR_Addr
 (
GPIOE_BASE
+20)

38 
	#GPIOF_ODR_Addr
 (
GPIOF_BASE
+20)

39 
	#GPIOG_ODR_Addr
 (
GPIOG_BASE
+20)

40 
	#GPIOH_ODR_Addr
 (
GPIOH_BASE
+20)

41 
	#GPIOI_ODR_Addr
 (
GPIOI_BASE
+20)

42 

	)

43 
	#GPIOA_IDR_Addr
 (
GPIOA_BASE
+16)

44 
	#GPIOB_IDR_Addr
 (
GPIOB_BASE
+16)

45 
	#GPIOC_IDR_Addr
 (
GPIOC_BASE
+16)

46 
	#GPIOD_IDR_Addr
 (
GPIOD_BASE
+16)

47 
	#GPIOE_IDR_Addr
 (
GPIOE_BASE
+16)

48 
	#GPIOF_IDR_Addr
 (
GPIOF_BASE
+16)

49 
	#GPIOG_IDR_Addr
 (
GPIOG_BASE
+16)

50 
	#GPIOH_IDR_Addr
 (
GPIOH_BASE
+16)

51 
	#GPIOI_IDR_Addr
 (
GPIOI_BASE
+16)

52 

	)

55 
	#PAout
(
n
Ë
	`BIT_ADDR
(
GPIOA_ODR_Addr
,n)

56 
	#PAö
(
n
Ë
	`BIT_ADDR
(
GPIOA_IDR_Addr
,n)

57 

	)

58 
	#PBout
(
n
Ë
	`BIT_ADDR
(
GPIOB_ODR_Addr
,n)

59 
	#PBö
(
n
Ë
	`BIT_ADDR
(
GPIOB_IDR_Addr
,n)

60 

	)

61 
	#PCout
(
n
Ë
	`BIT_ADDR
(
GPIOC_ODR_Addr
,n)

62 
	#PCö
(
n
Ë
	`BIT_ADDR
(
GPIOC_IDR_Addr
,n)

63 

	)

64 
	#PDout
(
n
Ë
	`BIT_ADDR
(
GPIOD_ODR_Addr
,n)

65 
	#PDö
(
n
Ë
	`BIT_ADDR
(
GPIOD_IDR_Addr
,n)

66 

	)

67 
	#PEout
(
n
Ë
	`BIT_ADDR
(
GPIOE_ODR_Addr
,n)

68 
	#PEö
(
n
Ë
	`BIT_ADDR
(
GPIOE_IDR_Addr
,n)

69 

	)

70 
	#PFout
(
n
Ë
	`BIT_ADDR
(
GPIOF_ODR_Addr
,n)

71 
	#PFö
(
n
Ë
	`BIT_ADDR
(
GPIOF_IDR_Addr
,n)

72 

	)

73 
	#PGout
(
n
Ë
	`BIT_ADDR
(
GPIOG_ODR_Addr
,n)

74 
	#PGö
(
n
Ë
	`BIT_ADDR
(
GPIOG_IDR_Addr
,n)

75 

	)

76 
	#PHout
(
n
Ë
	`BIT_ADDR
(
GPIOH_ODR_Addr
,n)

77 
	#PHö
(
n
Ë
	`BIT_ADDR
(
GPIOH_IDR_Addr
,n)

78 

	)

79 
	#PIout
(
n
Ë
	`BIT_ADDR
(
GPIOI_ODR_Addr
,n)

80 
	#PIö
(
n
Ë
	`BIT_ADDR
(
GPIOI_IDR_Addr
,n)

81 

	)

83 
WFI_SET
();

84 
INTX_DISABLE
();

85 
INTX_ENABLE
();

86 
MSR_MSP
(
u32
 
addr
);

	@SYSTEM/usart/usart.c

1 
	~"sys.h
"

2 
	~"ußπ.h
"

5 #i‡
SYSTEM_SUPPORT_UCOS


6 
	~"ö˛udes.h
"

38 #¥agm®
imp‹t
(
__u£_no_£miho°ög
)

40 
	s__FILE


42 
	mh™dÀ
;

45 
FILE
 
	g__°dout
;

47 
	$_sys_exô
(
x
)

49 
x
 = x;

50 
	}
}

52 
	$Âutc
(
ch
, 
FILE
 *
f
)

54 (
USART1
->
SR
&0X40)==0);

55 
USART1
->
DR
 = (
u8
Ë
ch
;

56  
ch
;

57 
	}
}

58 
	$_âywrch
(
ch
)

60 (
USART1
->
SR
&0X40)==0);

61 
USART1
->
DR
 = (
u8
Ë
ch
;

62 
	}
}

65 #i‡
EN_USART1_RX


68 
u8
 
	gUSART_RX_BUF
[
USART_REC_LEN
];

73 
u16
 
	gUSART_RX_STA
=0;

77 
	$u¨t_öô
(
u32
 
bound
){

79 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

80 
USART_InôTy≥Def
 
USART_InôSåu˘uª
;

81 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

83 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOA
,
ENABLE
);

84 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_USART1
,
ENABLE
);

87 
	`GPIO_PöAFC⁄fig
(
GPIOA
,
GPIO_PöSour˚9
,
GPIO_AF_USART1
);

88 
	`GPIO_PöAFC⁄fig
(
GPIOA
,
GPIO_PöSour˚10
,
GPIO_AF_USART1
);

91 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_9
 | 
GPIO_Pö_10
;

92 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

93 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

94 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

95 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

96 
	`GPIO_Inô
(
GPIOA
,&
GPIO_InôSåu˘uª
);

99 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 
bound
;

100 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

101 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

102 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

103 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

104 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

105 
	`USART_Inô
(
USART1
, &
USART_InôSåu˘uª
);

107 
	`USART_Cmd
(
USART1
, 
ENABLE
);

109 
	`USART_CÀ¨Fœg
(
USART1
, 
USART_FLAG_TC
);

111 #i‡
EN_USART1_RX


112 
	`USART_ITC⁄fig
(
USART1
, 
USART_IT_RXNE
, 
ENABLE
);

115 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USART1_IRQn
;

116 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
=3;

117 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 =3;

118 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

119 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

123 
	}
}

126 
	$USART1_IRQH™dÀr
()

128 
u8
 
Res
;

129 #ifde‡
OS_TICKS_PER_SEC


130 
	`OSI¡E¡î
();

132 if(
	`USART_GëITSètus
(
USART1
, 
USART_IT_RXNE
Ë!
RESET
)

134 
Res
 =
	`USART_Re˚iveD©a
(
USART1
);

136 if((
USART_RX_STA
&0x8000)==0)

138 if(
USART_RX_STA
&0x4000)

140 if(
Res
!=0x0a)
USART_RX_STA
=0;

141 
USART_RX_STA
|=0x8000;

145 if(
Res
==0x0d)
USART_RX_STA
|=0x4000;

148 
USART_RX_BUF
[
USART_RX_STA
&0X3FFF]=
Res
 ;

149 
USART_RX_STA
++;

150 if(
USART_RX_STA
>(
USART_REC_LEN
-1))USART_RX_STA=0;

155 #ifde‡
OS_TICKS_PER_SEC


156 
	`OSI¡Exô
();

158 
	}
}

	@SYSTEM/usart/usart.h

1 #i‚de‡
__USART_H


2 
	#__USART_H


	)

3 
	~"°dio.h
"

4 
	~"°m32f4xx_c⁄f.h
"

5 
	~"sys.h
"

29 
	#USART_REC_LEN
 200

30 
	#EN_USART1_RX
 1

31 

	)

32 
u8
 
USART_RX_BUF
[
USART_REC_LEN
];

33 
u16
 
USART_RX_STA
;

35 
u¨t_öô
(
u32
 
bound
);

	@SYSTEM/usart/usart3.c

1 
	~"sys.h
"

2 
	~"ußπ3.h
"

5 #i‡
SYSTEM_SUPPORT_UCOS


6 
	~"ö˛udes.h
"

21 
	$u¨t3_öô
(
u32
 
bound
){

23 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

24 
USART_InôTy≥Def
 
USART_InôSåu˘uª
;

25 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

27 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOB
,
ENABLE
);

28 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_USART3
,
ENABLE
);

34 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_11
 | 
GPIO_Pö_10
;

35 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

36 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

37 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

38 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

39 
	`GPIO_Inô
(
GPIOB
,&
GPIO_InôSåu˘uª
);

41 
	`GPIO_PöAFC⁄fig
(
GPIOB
,
GPIO_PöSour˚11
,
GPIO_AF_USART3
);

42 
	`GPIO_PöAFC⁄fig
(
GPIOB
,
GPIO_PöSour˚10
,
GPIO_AF_USART3
);

45 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 
bound
;

46 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

47 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

48 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

49 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

50 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

51 
	`USART_Inô
(
USART3
, &
USART_InôSåu˘uª
);

53 
	`USART_Cmd
(
USART3
, 
ENABLE
);

55 
	`USART_CÀ¨Fœg
(
USART3
, 
USART_FLAG_TC
);

57 
	`USART_ITC⁄fig
(
USART3
, 
USART_IT_RXNE
, 
ENABLE
);

60 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USART3_IRQn
;

61 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
=2;

62 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 =3;

63 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

64 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

66 
	}
}

67 
	$Ußπ3SídD©a
(
uöt8_t
 *
pd©a
, uöt8_à
Àn
)

69 
uöt8_t
 
i
;

70 
i
=0;i<
Àn
;i++)

72 
	`USART_SídD©a
(
USART3
, 
pd©a
[
i
]);

73 
	`USART_GëFœgSètus
(
USART3
, 
USART_FLAG_TXE
Ë=
RESET
);

75 
	}
}

76 
u16
 
	gComp_S≥ed_CNT
 =0;

77 
	$USART3_IRQH™dÀr
()

79 
u8
 
Res
;

80 if(
	`USART_GëITSètus
(
USART3
, 
USART_IT_RXNE
Ë!
RESET
)

82 
	`USART_CÀ¨ITPídögBô
(
USART3
,
USART_IT_RXNE
);

83 
Res
 =
	`USART_Re˚iveD©a
(
USART3
);

84 if(
Res
<65)

85 
Comp_S≥ed_CNT
 = (
u16
)(
Res
*63.6);

87 
	}
}

89 
u16
 
	$GëS≥íd
()

91  
Comp_S≥ed_CNT
;

92 
	}
}

	@SYSTEM/usart/usart3.h

1 #i‚de‡
__USART3_H


2 
	#__USART3_H


	)

3 
	~"°dio.h
"

4 
	~"°m32f4xx_c⁄f.h
"

5 
	~"sys.h
"

7 
	#USART_REC_LEN
 200

8 
	#EN_USART1_RX
 1

12 
	`u¨t3_öô
(
u32
 
bound
);

	)

13 
Ußπ3SídD©a
(
uöt8_t
 *
pd©a
, uöt8_à
Àn
);

14 
u16
 
GëS≥íd
();

	@SYSTEM/usart/usart4.c

1 
	~"sys.h
"

2 
	~"ußπ4.h
"

5 #i‡
SYSTEM_SUPPORT_UCOS


6 
	~"ö˛udes.h
"

21 
	$u¨t4_öô
(
u32
 
bound
){

23 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

24 
USART_InôTy≥Def
 
USART_InôSåu˘uª
;

25 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

27 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOC
,
ENABLE
);

28 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_UART4
,
ENABLE
);

34 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_11
 | 
GPIO_Pö_10
;

35 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

36 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

37 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

38 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_DOWN
;

39 
	`GPIO_Inô
(
GPIOC
,&
GPIO_InôSåu˘uª
);

41 
	`GPIO_PöAFC⁄fig
(
GPIOC
,
GPIO_PöSour˚11
,
GPIO_AF_UART4
);

42 
	`GPIO_PöAFC⁄fig
(
GPIOC
,
GPIO_PöSour˚10
,
GPIO_AF_UART4
);

45 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 
bound
;

46 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

47 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

48 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

49 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

50 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

51 
	`USART_Inô
(
UART4
, &
USART_InôSåu˘uª
);

53 
	`USART_Cmd
(
UART4
, 
ENABLE
);

55 
	`USART_CÀ¨Fœg
(
UART4
, 
USART_FLAG_TC
);

57 
	`USART_ITC⁄fig
(
UART4
, 
USART_IT_RXNE
, 
ENABLE
);

60 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
UART4_IRQn
;

61 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
=2;

62 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 =3;

63 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

64 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

66 
	}
}

67 
	$U¨t4SídD©a
(
uöt8_t
 *
pd©a
, uöt8_à
Àn
)

69 
uöt8_t
 
i
;

70 
i
=0;i<
Àn
;i++)

72 
	`USART_SídD©a
(
UART4
, 
pd©a
[
i
]);

73 
	`USART_GëFœgSètus
(
UART4
, 
USART_FLAG_TXE
Ë=
RESET
);

75 
	}
}

77 
	$UART4_IRQH™dÀr
()

79 
u8
 
Res
;

80 if(
	`USART_GëITSètus
(
UART4
, 
USART_IT_RXNE
Ë!
RESET
)

82 
	`USART_CÀ¨ITPídögBô
(
UART4
,
USART_IT_RXNE
);

83 
Res
 =
	`USART_Re˚iveD©a
(
UART4
);

84 
	`¥ötf
("0x%x ",
Res
);

86 
	}
}

	@SYSTEM/usart/usart4.h

1 #i‚de‡
__UART4_H


2 
	#__UART4_H


	)

3 
	~"°dio.h
"

4 
	~"°m32f4xx_c⁄f.h
"

5 
	~"sys.h
"

7 
u¨t4_öô
(
u32
 
bound
);

8 
Ußπ4SídD©a
(
uöt8_t
 *
pd©a
, uöt8_à
Àn
);

	@SYSTEM/usart/usart5.c

1 
	~"sys.h
"

2 
	~"ußπ5.h
"

5 #i‡
SYSTEM_SUPPORT_UCOS


6 
	~"ö˛udes.h
"

21 
	$u¨t5_öô
(
u32
 
bound
){

23 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

24 
USART_InôTy≥Def
 
USART_InôSåu˘uª
;

25 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

27 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_UART5
,
ENABLE
);

33 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOC
,
ENABLE
);

34 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_12
;

35 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

36 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

37 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

38 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_DOWN
;

39 
	`GPIO_Inô
(
GPIOC
,&
GPIO_InôSåu˘uª
);

41 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOD
,
ENABLE
);

42 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_2
;

43 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

44 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

45 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

46 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_DOWN
;

47 
	`GPIO_Inô
(
GPIOD
,&
GPIO_InôSåu˘uª
);

49 
	`GPIO_PöAFC⁄fig
(
GPIOD
,
GPIO_PöSour˚2
,
GPIO_AF_UART5
);

50 
	`GPIO_PöAFC⁄fig
(
GPIOC
,
GPIO_PöSour˚12
,
GPIO_AF_UART5
);

53 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 
bound
;

54 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

55 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

56 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

57 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

58 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

59 
	`USART_Inô
(
UART5
, &
USART_InôSåu˘uª
);

61 
	`USART_Cmd
(
UART5
, 
ENABLE
);

63 
	`USART_CÀ¨Fœg
(
UART5
, 
USART_FLAG_TC
);

65 
	`USART_ITC⁄fig
(
UART5
, 
USART_IT_RXNE
, 
ENABLE
);

68 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
UART5_IRQn
;

69 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
=2;

70 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 =3;

71 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

72 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

74 
	}
}

75 
	$U¨t5SídD©a
(
uöt8_t
 *
pd©a
, uöt8_à
Àn
)

77 
uöt8_t
 
i
;

78 
i
=0;i<
Àn
;i++)

80 
	`USART_SídD©a
(
UART5
, 
pd©a
[
i
]);

81 
	`USART_GëFœgSètus
(
UART5
, 
USART_FLAG_TXE
Ë=
RESET
);

83 
	}
}

85 
	$UART5_IRQH™dÀr
()

87 
u8
 
Res
;

88 if(
	`USART_GëITSètus
(
UART5
, 
USART_IT_RXNE
Ë!
RESET
)

90 
	`USART_CÀ¨ITPídögBô
(
UART5
,
USART_IT_RXNE
);

91 
Res
 =
	`USART_Re˚iveD©a
(
UART5
);

92 
	`¥ötf
("0x%x ",
Res
);

94 
	}
}

	@SYSTEM/usart/usart5.h

1 #i‚de‡
__USART5_H


2 
	#__USART5_H


	)

3 
	~"°dio.h
"

4 
	~"°m32f4xx_c⁄f.h
"

5 
	~"sys.h
"

8 
u¨t5_öô
(
u32
 
bound
);

9 
U¨t5SídD©a
(
uöt8_t
 *
pd©a
, uöt8_à
Àn
);

	@UCOSIII/UCOS_BSP/bsp.c

1 
	#BSP_MODULE


	)

2 
	~<b•.h
>

5 
	#BSP_REG_DEM_CR
 (*(
CPU_REG32
 *)0xE000EDFC)

6 
	#BSP_REG_DWT_CR
 (*(
CPU_REG32
 *)0xE0001000)

7 
	#BSP_REG_DWT_CYCCNT
 (*(
CPU_REG32
 *)0xE0001004)

8 
	#BSP_REG_DBGMCU_CR
 (*(
CPU_REG32
 *)0xE0042004)

	)

11 
	#BSP_BIT_DEM_CR_TRCENA
 
DEF_BIT_24


	)

14 
	#BSP_BIT_DWT_CR_CYCCNTENA
 
DEF_BIT_00


	)

27 
CPU_INT32U
 
	$BSP_CPU_ClkFªq
 ()

29 
RCC_ClocksTy≥Def
 
rcc_˛ocks
;

31 
	`RCC_GëClocksFªq
(&
rcc_˛ocks
);

33  ((
CPU_INT32U
)
rcc_˛ocks
.
HCLK_Fªquícy
);

34 
	}
}

76 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

77 
	$CPU_TS_TmrInô
 ()

79 
CPU_INT32U
 
f˛k_‰eq
;

82 
f˛k_‰eq
 = 
	`BSP_CPU_ClkFªq
();

84 
BSP_REG_DEM_CR
 |(
CPU_INT32U
)
BSP_BIT_DEM_CR_TRCENA
;

85 
BSP_REG_DWT_CYCCNT
 = (
CPU_INT32U
)0u;

86 
BSP_REG_DWT_CR
 |(
CPU_INT32U
)
BSP_BIT_DWT_CR_CYCCNTENA
;

88 
	`CPU_TS_TmrFªqSë
((
CPU_TS_TMR_FREQ
)
f˛k_‰eq
);

89 
	}
}

158 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

159 
CPU_TS_TMR
 
	$CPU_TS_TmrRd
 ()

161 
CPU_TS_TMR
 
ts_tmr_˙ts
;

164 
ts_tmr_˙ts
 = (
CPU_TS_TMR
)
BSP_REG_DWT_CYCCNT
;

166  (
ts_tmr_˙ts
);

167 
	}
}

219 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
)

220 
CPU_INT64U
 
	$CPU_TS32_to_uSec
 (
CPU_TS32
 
ts_˙ts
)

222 
CPU_INT64U
 
ts_us
;

223 
CPU_INT64U
 
f˛k_‰eq
;

226 
f˛k_‰eq
 = 
	`BSP_CPU_ClkFªq
();

227 
ts_us
 = 
ts_˙ts
 / (
f˛k_‰eq
 / 
DEF_TIME_NBR_uS_PER_SEC
);

229  (
ts_us
);

230 
	}
}

234 #i‡(
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
)

235 
CPU_INT64U
 
	$CPU_TS64_to_uSec
 (
CPU_TS64
 
ts_˙ts
)

237 
CPU_INT64U
 
ts_us
;

238 
CPU_INT64U
 
f˛k_‰eq
;

241 
f˛k_‰eq
 = 
	`BSP_CPU_ClkFªq
();

242 
ts_us
 = 
ts_˙ts
 / (
f˛k_‰eq
 / 
DEF_TIME_NBR_uS_PER_SEC
);

244  (
ts_us
);

245 
	}
}

	@UCOSIII/UCOS_BSP/bsp.h

1 #i‚de‡ 
BSP_PRESENT


2 
	#BSP_PRESENT


	)

5 #ifde‡ 
BSP_MODULE


6 
	#BSP_EXT


	)

8 
	#BSP_EXT
 

	)

12 
	~<°dio.h
>

13 
	~<°d¨g.h
>

14 
	~<˝u.h
>

15 
	~<˝u_c‹e.h
>

16 
	~<lib_def.h
>

17 
	~<lib_ascii.h
>

18 
	~<°m32f4xx_c⁄f.h
>

	@UCOSIII/uC-CPU/ARM-Cortex-M4/GNU/cpu.h

47 #i‚de‡ 
CPU_MODULE_PRESENT


48 
	#CPU_MODULE_PRESENT


	)

84 
	~<˝u_def.h
>

85 
	~<˝u_cfg.h
>

116 
	tCPU_VOID
;

117 
	tCPU_CHAR
;

118 
	tCPU_BOOLEAN
;

119 
	tCPU_INT08U
;

120 sig√d 
	tCPU_INT08S
;

121 
	tCPU_INT16U
;

122 sig√d 
	tCPU_INT16S
;

123 
	tCPU_INT32U
;

124 sig√d 
	tCPU_INT32S
;

125 
	tCPU_INT64U
;

126 sig√d 
	tCPU_INT64S
;

128 
	tCPU_FP32
;

129 
	tCPU_FP64
;

132 vﬁ©ûê
	tCPU_INT08U
 
	tCPU_REG08
;

133 vﬁ©ûê
	tCPU_INT16U
 
	tCPU_REG16
;

134 vﬁ©ûê
	tCPU_INT32U
 
	tCPU_REG32
;

135 vﬁ©ûê
	tCPU_INT64U
 
	tCPU_REG64
;

138 (*
	tCPU_FNCT_VOID
)();

139 (*
	tCPU_FNCT_PTR
 )(*
	tp_obj
);

164 
	#CPU_CFG_ADDR_SIZE
 
CPU_WORD_SIZE_32


	)

165 
	#CPU_CFG_DATA_SIZE
 
CPU_WORD_SIZE_32


	)

166 
	#CPU_CFG_DATA_SIZE_MAX
 
CPU_WORD_SIZE_64


	)

168 
	#CPU_CFG_ENDIAN_TYPE
 
CPU_ENDIAN_TYPE_LITTLE


	)

178 #i‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_32
)

179 
CPU_INT32U
 
	tCPU_ADDR
;

180 #ñi‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_16
)

181 
CPU_INT16U
 
	tCPU_ADDR
;

183 
CPU_INT08U
 
	tCPU_ADDR
;

187 #i‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
)

188 
CPU_INT32U
 
	tCPU_DATA
;

189 #ñi‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

190 
CPU_INT16U
 
	tCPU_DATA
;

192 
CPU_INT08U
 
	tCPU_DATA
;

196 
CPU_DATA
 
	tCPU_ALIGN
;

197 
CPU_ADDR
 
	tCPU_SIZE_T
;

218 
	#CPU_CFG_STK_GROWTH
 
CPU_STK_GROWTH_HI_TO_LO


	)

220 
	#CPU_CFG_STK_ALIGN_BYTES
 (8uË

	)

222 
CPU_INT32U
 
	tCPU_STK
;

223 
CPU_ADDR
 
	tCPU_STK_SIZE
;

298 
	#CPU_CFG_CRITICAL_METHOD
 
CPU_CRITICAL_METHOD_STATUS_LOCAL


	)

300 
CPU_INT32U
 
	tCPU_SR
;

303 #i‡ (
CPU_CFG_CRITICAL_METHOD
 =
CPU_CRITICAL_METHOD_STATUS_LOCAL
)

304 
	#CPU_SR_ALLOC
(Ë
CPU_SR
 
˝u_§
 = (CPU_SR)0

	)

306 
	#CPU_SR_ALLOC
()

	)

311 
	#CPU_INT_DIS
(Ëdÿ{ 
˝u_§
 = 
	`CPU_SR_Save
(); 
	}
} 0Ë

	)

312 
	#CPU_INT_EN
(Ëdÿ{ 
	`CPU_SR_Re°‹e
(
˝u_§
); } 0Ë

	)

315 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


318 
	#CPU_CRITICAL_ENTER
(Ëdÿ{ 
	`CPU_INT_DIS
(); \

319 
	`CPU_I¡DisMósSèπ
(); } 0)

	)

322 
	#CPU_CRITICAL_EXIT
(Ëdÿ{ 
	`CPU_I¡DisMósSt›
(); \

323 
	`CPU_INT_EN
(); } 0)

	)

327 
	#CPU_CRITICAL_ENTER
(Ëdÿ{ 
	`CPU_INT_DIS
(); } 0Ë

	)

328 
	#CPU_CRITICAL_EXIT
(Ëdÿ{ 
	`CPU_INT_EN
(); } 0Ë

	)

346 
	#CPU_MB
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("dsb" : : : "mem‹y")

	)

347 
	#CPU_RMB
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("dsb" : : : "mem‹y")

	)

348 
	#CPU_WMB
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("dsb" : : : "mem‹y")

	)

376 
	#CPU_CFG_LEAD_ZEROS_ASM_PRESENT


	)

379 
	#CPU_CFG_TRAIL_ZEROS_ASM_PRESENT


	)

388 
CPU_I¡Dis
 ();

389 
CPU_I¡En
 ();

391 
CPU_I¡SrcDis
 (
CPU_INT08U
 
pos
);

392 
CPU_I¡SrcEn
 (
CPU_INT08U
 
pos
);

393 
CPU_I¡SrcPídCÃ
(
CPU_INT08U
 
pos
);

394 
CPU_INT16S
 
CPU_I¡SrcPrioGë
(
CPU_INT08U
 
pos
);

395 
CPU_I¡SrcPrioSë
(
CPU_INT08U
 
pos
,

396 
CPU_INT08U
 
¥io
);

399 
CPU_SR
 
CPU_SR_Save
 ();

400 
CPU_SR_Re°‹e
 (
CPU_SR
 
˝u_§
);

403 
CPU_WaôF‹I¡
 ();

404 
CPU_WaôF‹Ex˚±
();

407 
CPU_DATA
 
CPU_RevBôs
 (CPU_DATA 
vÆ
);

409 
CPU_BôB™dCÃ
 (
CPU_ADDR
 
addr
,

410 
CPU_INT08U
 
bô_nbr
);

411 
CPU_BôB™dSë
 (
CPU_ADDR
 
addr
,

412 
CPU_INT08U
 
bô_nbr
);

421 
	#CPU_INT_STK_PTR
 0u

	)

422 
	#CPU_INT_RESET
 1u

	)

423 
	#CPU_INT_NMI
 2u

	)

424 
	#CPU_INT_HFAULT
 3u

	)

425 
	#CPU_INT_MEM
 4u

	)

426 
	#CPU_INT_BUSFAULT
 5u

	)

427 
	#CPU_INT_USAGEFAULT
 6u

	)

428 
	#CPU_INT_RSVD_07
 7u

	)

429 
	#CPU_INT_RSVD_08
 8u

	)

430 
	#CPU_INT_RSVD_09
 9u

	)

431 
	#CPU_INT_RSVD_10
 10u

	)

432 
	#CPU_INT_SVCALL
 11u

	)

433 
	#CPU_INT_DBGMON
 12u

	)

434 
	#CPU_INT_RSVD_13
 13u

	)

435 
	#CPU_INT_PENDSV
 14u

	)

436 
	#CPU_INT_SYSTICK
 15u

	)

437 
	#CPU_INT_EXT0
 16u

	)

445 
	#CPU_REG_NVIC_NVIC
 (*((
CPU_REG32
 *)(0xE000E004))Ë

	)

446 
	#CPU_REG_NVIC_ST_CTRL
 (*((
CPU_REG32
 *)(0xE000E010))Ë

	)

447 
	#CPU_REG_NVIC_ST_RELOAD
 (*((
CPU_REG32
 *)(0xE000E014))Ë

	)

448 
	#CPU_REG_NVIC_ST_CURRENT
 (*((
CPU_REG32
 *)(0xE000E018))Ë

	)

449 
	#CPU_REG_NVIC_ST_CAL
 (*((
CPU_REG32
 *)(0xE000E01C))Ë

	)

451 
	#CPU_REG_NVIC_SETEN
(
n
Ë(*((
CPU_REG32
 *)(0xE000E100 + (nË* 4u))Ë

	)

452 
	#CPU_REG_NVIC_CLREN
(
n
Ë(*((
CPU_REG32
 *)(0xE000E180 + (nË* 4u))Ë

	)

453 
	#CPU_REG_NVIC_SETPEND
(
n
Ë(*((
CPU_REG32
 *)(0xE000E200 + (nË* 4u))Ë

	)

454 
	#CPU_REG_NVIC_CLRPEND
(
n
Ë(*((
CPU_REG32
 *)(0xE000E280 + (nË* 4u))Ë

	)

455 
	#CPU_REG_NVIC_ACTIVE
(
n
Ë(*((
CPU_REG32
 *)(0xE000E300 + (nË* 4u))Ë

	)

456 
	#CPU_REG_NVIC_PRIO
(
n
Ë(*((
CPU_REG32
 *)(0xE000E400 + (nË* 4u))Ë

	)

458 
	#CPU_REG_NVIC_CPUID
 (*((
CPU_REG32
 *)(0xE000ED00))Ë

	)

459 
	#CPU_REG_NVIC_ICSR
 (*((
CPU_REG32
 *)(0xE000ED04))Ë

	)

460 
	#CPU_REG_NVIC_VTOR
 (*((
CPU_REG32
 *)(0xE000ED08))Ë

	)

461 
	#CPU_REG_NVIC_AIRCR
 (*((
CPU_REG32
 *)(0xE000ED0C))Ë

	)

462 
	#CPU_REG_NVIC_SCR
 (*((
CPU_REG32
 *)(0xE000ED10))Ë

	)

463 
	#CPU_REG_NVIC_CCR
 (*((
CPU_REG32
 *)(0xE000ED14))Ë

	)

464 
	#CPU_REG_NVIC_SHPRI1
 (*((
CPU_REG32
 *)(0xE000ED18))Ë

	)

465 
	#CPU_REG_NVIC_SHPRI2
 (*((
CPU_REG32
 *)(0xE000ED1C))Ë

	)

466 
	#CPU_REG_NVIC_SHPRI3
 (*((
CPU_REG32
 *)(0xE000ED20))Ë

	)

467 
	#CPU_REG_NVIC_SHCSR
 (*((
CPU_REG32
 *)(0xE000ED24))Ë

	)

468 
	#CPU_REG_NVIC_CFSR
 (*((
CPU_REG32
 *)(0xE000ED28))Ë

	)

469 
	#CPU_REG_NVIC_HFSR
 (*((
CPU_REG32
 *)(0xE000ED2C))Ë

	)

470 
	#CPU_REG_NVIC_DFSR
 (*((
CPU_REG32
 *)(0xE000ED30))Ë

	)

471 
	#CPU_REG_NVIC_MMFAR
 (*((
CPU_REG32
 *)(0xE000ED34))Ë

	)

472 
	#CPU_REG_NVIC_BFAR
 (*((
CPU_REG32
 *)(0xE000ED38))Ë

	)

473 
	#CPU_REG_NVIC_AFSR
 (*((
CPU_REG32
 *)(0xE000ED3C))Ë

	)

475 
	#CPU_REG_NVIC_PFR0
 (*((
CPU_REG32
 *)(0xE000ED40))Ë

	)

476 
	#CPU_REG_NVIC_PFR1
 (*((
CPU_REG32
 *)(0xE000ED44))Ë

	)

477 
	#CPU_REG_NVIC_DFR0
 (*((
CPU_REG32
 *)(0xE000ED48))Ë

	)

478 
	#CPU_REG_NVIC_AFR0
 (*((
CPU_REG32
 *)(0xE000ED4C))Ë

	)

479 
	#CPU_REG_NVIC_MMFR0
 (*((
CPU_REG32
 *)(0xE000ED50))Ë

	)

480 
	#CPU_REG_NVIC_MMFR1
 (*((
CPU_REG32
 *)(0xE000ED54))Ë

	)

481 
	#CPU_REG_NVIC_MMFR2
 (*((
CPU_REG32
 *)(0xE000ED58))Ë

	)

482 
	#CPU_REG_NVIC_MMFR3
 (*((
CPU_REG32
 *)(0xE000ED5C))Ë

	)

483 
	#CPU_REG_NVIC_ISAFR0
 (*((
CPU_REG32
 *)(0xE000ED60))Ë

	)

484 
	#CPU_REG_NVIC_ISAFR1
 (*((
CPU_REG32
 *)(0xE000ED64))Ë

	)

485 
	#CPU_REG_NVIC_ISAFR2
 (*((
CPU_REG32
 *)(0xE000ED68))Ë

	)

486 
	#CPU_REG_NVIC_ISAFR3
 (*((
CPU_REG32
 *)(0xE000ED6C))Ë

	)

487 
	#CPU_REG_NVIC_ISAFR4
 (*((
CPU_REG32
 *)(0xE000ED70))Ë

	)

488 
	#CPU_REG_NVIC_SW_TRIG
 (*((
CPU_REG32
 *)(0xE000EF00))Ë

	)

490 
	#CPU_REG_MPU_TYPE
 (*((
CPU_REG32
 *)(0xE000ED90))Ë

	)

491 
	#CPU_REG_MPU_CTRL
 (*((
CPU_REG32
 *)(0xE000ED94))Ë

	)

492 
	#CPU_REG_MPU_REG_NBR
 (*((
CPU_REG32
 *)(0xE000ED98))Ë

	)

493 
	#CPU_REG_MPU_REG_BASE
 (*((
CPU_REG32
 *)(0xE000ED9C))Ë

	)

494 
	#CPU_REG_MPU_REG_ATTR
 (*((
CPU_REG32
 *)(0xE000EDA0))Ë

	)

496 
	#CPU_REG_DBG_CTRL
 (*((
CPU_REG32
 *)(0xE000EDF0))Ë

	)

497 
	#CPU_REG_DBG_SELECT
 (*((
CPU_REG32
 *)(0xE000EDF4))Ë

	)

498 
	#CPU_REG_DBG_DATA
 (*((
CPU_REG32
 *)(0xE000EDF8))Ë

	)

499 
	#CPU_REG_DBG_INT
 (*((
CPU_REG32
 *)(0xE000EDFC))Ë

	)

509 
	#CPU_REG_NVIC_ST_CTRL_COUNTFLAG
 0x00010000

	)

510 
	#CPU_REG_NVIC_ST_CTRL_CLKSOURCE
 0x00000004

	)

511 
	#CPU_REG_NVIC_ST_CTRL_TICKINT
 0x00000002

	)

512 
	#CPU_REG_NVIC_ST_CTRL_ENABLE
 0x00000001

	)

516 
	#CPU_REG_NVIC_ST_CAL_NOREF
 0x80000000

	)

517 
	#CPU_REG_NVIC_ST_CAL_SKEW
 0x40000000

	)

520 
	#CPU_REG_NVIC_ICSR_NMIPENDSET
 0x80000000

	)

521 
	#CPU_REG_NVIC_ICSR_PENDSVSET
 0x10000000

	)

522 
	#CPU_REG_NVIC_ICSR_PENDSVCLR
 0x08000000

	)

523 
	#CPU_REG_NVIC_ICSR_PENDSTSET
 0x04000000

	)

524 
	#CPU_REG_NVIC_ICSR_PENDSTCLR
 0x02000000

	)

525 
	#CPU_REG_NVIC_ICSR_ISRPREEMPT
 0x00800000

	)

526 
	#CPU_REG_NVIC_ICSR_ISRPENDING
 0x00400000

	)

527 
	#CPU_REG_NVIC_ICSR_RETTOBASE
 0x00000800

	)

530 
	#CPU_REG_NVIC_VTOR_TBLBASE
 0x20000000

	)

533 
	#CPU_REG_NVIC_AIRCR_ENDIANNESS
 0x00008000

	)

534 
	#CPU_REG_NVIC_AIRCR_SYSRESETREQ
 0x00000004

	)

535 
	#CPU_REG_NVIC_AIRCR_VECTCLRACTIVE
 0x00000002

	)

536 
	#CPU_REG_NVIC_AIRCR_VECTRESET
 0x00000001

	)

539 
	#CPU_REG_NVIC_SCR_SEVONPEND
 0x00000010

	)

540 
	#CPU_REG_NVIC_SCR_SLEEPDEEP
 0x00000004

	)

541 
	#CPU_REG_NVIC_SCR_SLEEPONEXIT
 0x00000002

	)

544 
	#CPU_REG_NVIC_CCR_STKALIGN
 0x00000200

	)

545 
	#CPU_REG_NVIC_CCR_BFHFNMIGN
 0x00000100

	)

546 
	#CPU_REG_NVIC_CCR_DIV_0_TRP
 0x00000010

	)

547 
	#CPU_REG_NVIC_CCR_UNALIGN_TRP
 0x00000008

	)

548 
	#CPU_REG_NVIC_CCR_USERSETMPEND
 0x00000002

	)

549 
	#CPU_REG_NVIC_CCR_NONBASETHRDENA
 0x00000001

	)

552 
	#CPU_REG_NVIC_SHCSR_USGFAULTENA
 0x00040000

	)

553 
	#CPU_REG_NVIC_SHCSR_BUSFAULTENA
 0x00020000

	)

554 
	#CPU_REG_NVIC_SHCSR_MEMFAULTENA
 0x00010000

	)

555 
	#CPU_REG_NVIC_SHCSR_SVCALLPENDED
 0x00008000

	)

556 
	#CPU_REG_NVIC_SHCSR_BUSFAULTPENDED
 0x00004000

	)

557 
	#CPU_REG_NVIC_SHCSR_MEMFAULTPENDED
 0x00002000

	)

558 
	#CPU_REG_NVIC_SHCSR_USGFAULTPENDED
 0x00001000

	)

559 
	#CPU_REG_NVIC_SHCSR_SYSTICKACT
 0x00000800

	)

560 
	#CPU_REG_NVIC_SHCSR_PENDSVACT
 0x00000400

	)

561 
	#CPU_REG_NVIC_SHCSR_MONITORACT
 0x00000100

	)

562 
	#CPU_REG_NVIC_SHCSR_SVCALLACT
 0x00000080

	)

563 
	#CPU_REG_NVIC_SHCSR_USGFAULTACT
 0x00000008

	)

564 
	#CPU_REG_NVIC_SHCSR_BUSFAULTACT
 0x00000002

	)

565 
	#CPU_REG_NVIC_SHCSR_MEMFAULTACT
 0x00000001

	)

568 
	#CPU_REG_NVIC_CFSR_DIVBYZERO
 0x02000000

	)

569 
	#CPU_REG_NVIC_CFSR_UNALIGNED
 0x01000000

	)

570 
	#CPU_REG_NVIC_CFSR_NOCP
 0x00080000

	)

571 
	#CPU_REG_NVIC_CFSR_INVPC
 0x00040000

	)

572 
	#CPU_REG_NVIC_CFSR_INVSTATE
 0x00020000

	)

573 
	#CPU_REG_NVIC_CFSR_UNDEFINSTR
 0x00010000

	)

574 
	#CPU_REG_NVIC_CFSR_BFARVALID
 0x00008000

	)

575 
	#CPU_REG_NVIC_CFSR_STKERR
 0x00001000

	)

576 
	#CPU_REG_NVIC_CFSR_UNSTKERR
 0x00000800

	)

577 
	#CPU_REG_NVIC_CFSR_IMPRECISERR
 0x00000400

	)

578 
	#CPU_REG_NVIC_CFSR_PRECISERR
 0x00000200

	)

579 
	#CPU_REG_NVIC_CFSR_IBUSERR
 0x00000100

	)

580 
	#CPU_REG_NVIC_CFSR_MMARVALID
 0x00000080

	)

581 
	#CPU_REG_NVIC_CFSR_MSTKERR
 0x00000010

	)

582 
	#CPU_REG_NVIC_CFSR_MUNSTKERR
 0x00000008

	)

583 
	#CPU_REG_NVIC_CFSR_DACCVIOL
 0x00000002

	)

584 
	#CPU_REG_NVIC_CFSR_IACCVIOL
 0x00000001

	)

587 
	#CPU_REG_NVIC_HFSR_DEBUGEVT
 0x80000000

	)

588 
	#CPU_REG_NVIC_HFSR_FORCED
 0x40000000

	)

589 
	#CPU_REG_NVIC_HFSR_VECTTBL
 0x00000002

	)

592 
	#CPU_REG_NVIC_DFSR_EXTERNAL
 0x00000010

	)

593 
	#CPU_REG_NVIC_DFSR_VCATCH
 0x00000008

	)

594 
	#CPU_REG_NVIC_DFSR_DWTTRAP
 0x00000004

	)

595 
	#CPU_REG_NVIC_DFSR_BKPT
 0x00000002

	)

596 
	#CPU_REG_NVIC_DFSR_HALTED
 0x00000001

	)

605 
	#CPU_MSK_NVIC_ICSR_VECT_ACTIVE
 0x000001FF

	)

614 #i‚de‡ 
CPU_CFG_ADDR_SIZE


621 #ñi‡ ((
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_08
) && \

622 (
	gCPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_16
) && \

623 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_32
) && \

624 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_64
))

633 #i‚de‡ 
CPU_CFG_DATA_SIZE


640 #ñi‡ ((
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_08
) && \

641 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_16
) && \

642 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_32
) && \

643 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_64
))

652 #i‚de‡ 
CPU_CFG_DATA_SIZE_MAX


659 #ñi‡ ((
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_08
) && \

660 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_16
) && \

661 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_32
) && \

662 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_64
))

672 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 < 
CPU_CFG_DATA_SIZE
)

680 #i‚de‡ 
CPU_CFG_ENDIAN_TYPE


685 #ñi‡ ((
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_BIG
 ) && \

686 (
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_LITTLE
))

695 #i‚de‡ 
CPU_CFG_STK_GROWTH


700 #ñi‡ ((
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_LO_TO_HI
) && \

701 (
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_HI_TO_LO
))

710 #i‚de‡ 
CPU_CFG_CRITICAL_METHOD


716 #ñi‡ ((
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_INT_DIS_EN
 ) && \

717 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_STK
 ) && \

718 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_LOCAL
))

	@UCOSIII/uC-CPU/ARM-Cortex-M4/GNU/cpu_c.c

44 
	#MICRIUM_SOURCE


	)

45 
	~<˝u.h
>

46 
	~<˝u_c‹e.h
>

48 
	~<lib_def.h
>

57 
	#CPU_INT_SRC_POS_MAX
 ((((
CPU_REG_NVIC_NVIC
 + 1Ë& 0x1FË* 32Ë+ 16)

	)

59 
	#CPU_BIT_BAND_SRAM_REG_LO
 0x20000000

	)

60 
	#CPU_BIT_BAND_SRAM_REG_HI
 0x200FFFFF

	)

61 
	#CPU_BIT_BAND_SRAM_BASE
 0x22000000

	)

64 
	#CPU_BIT_BAND_PERIPH_REG_LO
 0x40000000

	)

65 
	#CPU_BIT_BAND_PERIPH_REG_HI
 0x400FFFFF

	)

66 
	#CPU_BIT_BAND_PERIPH_BASE
 0x42000000

	)

129 
	$CPU_BôB™dCÃ
 (
CPU_ADDR
 
addr
,

130 
CPU_INT08U
 
bô_nbr
)

132 
CPU_ADDR
 
bô_w‹d_off
;

133 
CPU_ADDR
 
bô_w‹d_addr
;

136 i‡((
addr
 >
CPU_BIT_BAND_SRAM_REG_LO
) &&

137 (
addr
 <
CPU_BIT_BAND_SRAM_REG_HI
)) {

138 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_SRAM_REG_LO
 ) * 32Ë+ (
bô_nbr
 * 4);

139 
bô_w‹d_addr
 = 
CPU_BIT_BAND_SRAM_BASE
 + 
bô_w‹d_off
;

141 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 0;

143 } i‡((
addr
 >
CPU_BIT_BAND_PERIPH_REG_LO
) &&

144 (
addr
 <
CPU_BIT_BAND_PERIPH_REG_HI
)) {

145 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_PERIPH_REG_LO
Ë* 32Ë+ (
bô_nbr
 * 4);

146 
bô_w‹d_addr
 = 
CPU_BIT_BAND_PERIPH_BASE
 + 
bô_w‹d_off
;

148 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 0;

150 
	}
}

171 
	$CPU_BôB™dSë
 (
CPU_ADDR
 
addr
,

172 
CPU_INT08U
 
bô_nbr
)

174 
CPU_ADDR
 
bô_w‹d_off
;

175 
CPU_ADDR
 
bô_w‹d_addr
;

178 i‡((
addr
 >
CPU_BIT_BAND_SRAM_REG_LO
) &&

179 (
addr
 <
CPU_BIT_BAND_SRAM_REG_HI
)) {

180 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_SRAM_REG_LO
 ) * 32Ë+ (
bô_nbr
 * 4);

181 
bô_w‹d_addr
 = 
CPU_BIT_BAND_SRAM_BASE
 + 
bô_w‹d_off
;

183 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 1;

185 } i‡((
addr
 >
CPU_BIT_BAND_PERIPH_REG_LO
) &&

186 (
addr
 <
CPU_BIT_BAND_PERIPH_REG_HI
)) {

187 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_PERIPH_REG_LO
Ë* 32Ë+ (
bô_nbr
 * 4);

188 
bô_w‹d_addr
 = 
CPU_BIT_BAND_PERIPH_BASE
 + 
bô_w‹d_off
;

190 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 1;

192 
	}
}

244 
	$CPU_I¡SrcDis
 (
CPU_INT08U
 
pos
)

246 
CPU_INT08U
 
group
;

247 
CPU_INT08U
 
pos_max
;

248 
CPU_INT08U
 
nbr
;

249 
	`CPU_SR_ALLOC
();

252 
pos
) {

253 
CPU_INT_STK_PTR
:

254 
CPU_INT_RSVD_07
:

255 
CPU_INT_RSVD_08
:

256 
CPU_INT_RSVD_09
:

257 
CPU_INT_RSVD_10
:

258 
CPU_INT_RSVD_13
:

263 
CPU_INT_RESET
:

264 
CPU_INT_NMI
:

265 
CPU_INT_HFAULT
:

266 
CPU_INT_SVCALL
:

267 
CPU_INT_DBGMON
:

268 
CPU_INT_PENDSV
:

271 
CPU_INT_MEM
:

272 
	`CPU_CRITICAL_ENTER
();

273 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_MEMFAULTENA
;

274 
	`CPU_CRITICAL_EXIT
();

277 
CPU_INT_BUSFAULT
:

278 
	`CPU_CRITICAL_ENTER
();

279 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_BUSFAULTENA
;

280 
	`CPU_CRITICAL_EXIT
();

283 
CPU_INT_USAGEFAULT
:

284 
	`CPU_CRITICAL_ENTER
();

285 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_USGFAULTENA
;

286 
	`CPU_CRITICAL_EXIT
();

289 
CPU_INT_SYSTICK
:

290 
	`CPU_CRITICAL_ENTER
();

291 
CPU_REG_NVIC_ST_CTRL
 &~
CPU_REG_NVIC_ST_CTRL_ENABLE
;

292 
	`CPU_CRITICAL_EXIT
();

298 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

299 i‡(
pos
 < 
pos_max
) {

300 
group
 = (
pos
 - 16) / 32;

301 
nbr
 = (
pos
 - 16) % 32;

303 
	`CPU_CRITICAL_ENTER
();

304 
	`CPU_REG_NVIC_CLREN
(
group
Ë
	`DEF_BIT
(
nbr
);

305 
	`CPU_CRITICAL_EXIT
();

309 
	}
}

332 
	$CPU_I¡SrcEn
 (
CPU_INT08U
 
pos
)

334 
CPU_INT08U
 
group
;

335 
CPU_INT08U
 
nbr
;

336 
CPU_INT08U
 
pos_max
;

337 
	`CPU_SR_ALLOC
();

340 
pos
) {

341 
CPU_INT_STK_PTR
:

342 
CPU_INT_RSVD_07
:

343 
CPU_INT_RSVD_08
:

344 
CPU_INT_RSVD_09
:

345 
CPU_INT_RSVD_10
:

346 
CPU_INT_RSVD_13
:

351 
CPU_INT_RESET
:

352 
CPU_INT_NMI
:

353 
CPU_INT_HFAULT
:

354 
CPU_INT_SVCALL
:

355 
CPU_INT_DBGMON
:

356 
CPU_INT_PENDSV
:

359 
CPU_INT_MEM
:

360 
	`CPU_CRITICAL_ENTER
();

361 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_MEMFAULTENA
;

362 
	`CPU_CRITICAL_EXIT
();

365 
CPU_INT_BUSFAULT
:

366 
	`CPU_CRITICAL_ENTER
();

367 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_BUSFAULTENA
;

368 
	`CPU_CRITICAL_EXIT
();

371 
CPU_INT_USAGEFAULT
:

372 
	`CPU_CRITICAL_ENTER
();

373 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_USGFAULTENA
;

374 
	`CPU_CRITICAL_EXIT
();

377 
CPU_INT_SYSTICK
:

378 
	`CPU_CRITICAL_ENTER
();

379 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_ENABLE
;

380 
	`CPU_CRITICAL_EXIT
();

386 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

387 i‡(
pos
 < 
pos_max
) {

388 
group
 = (
pos
 - 16) / 32;

389 
nbr
 = (
pos
 - 16) % 32;

391 
	`CPU_CRITICAL_ENTER
();

392 
	`CPU_REG_NVIC_SETEN
(
group
Ë
	`DEF_BIT
(
nbr
);

393 
	`CPU_CRITICAL_EXIT
();

397 
	}
}

431 
	$CPU_I¡SrcPídCÃ
 (
CPU_INT08U
 
pos
)

434 
CPU_INT08U
 
group
;

435 
CPU_INT08U
 
nbr
;

436 
CPU_INT08U
 
pos_max
;

437 
	`CPU_SR_ALLOC
();

440 
pos
) {

441 
CPU_INT_STK_PTR
:

442 
CPU_INT_RSVD_07
:

443 
CPU_INT_RSVD_08
:

444 
CPU_INT_RSVD_09
:

445 
CPU_INT_RSVD_10
:

446 
CPU_INT_RSVD_13
:

449 
CPU_INT_RESET
:

450 
CPU_INT_NMI
:

451 
CPU_INT_HFAULT
:

452 
CPU_INT_MEM
:

453 
CPU_INT_SVCALL
:

454 
CPU_INT_DBGMON
:

455 
CPU_INT_PENDSV
:

456 
CPU_INT_BUSFAULT
:

457 
CPU_INT_USAGEFAULT
:

458 
CPU_INT_SYSTICK
:

462 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

463 i‡(
pos
 < 
pos_max
) {

464 
group
 = (
pos
 - 16) / 32;

465 
nbr
 = (
pos
 - 16) % 32;

467 
	`CPU_CRITICAL_ENTER
();

468 
	`CPU_REG_NVIC_CLRPEND
(
group
Ë
	`DEF_BIT
(
nbr
);

469 
	`CPU_CRITICAL_EXIT
();

473 
	}
}

502 
	$CPU_I¡SrcPrioSë
 (
CPU_INT08U
 
pos
,

503 
CPU_INT08U
 
¥io
)

505 
CPU_INT08U
 
group
;

506 
CPU_INT08U
 
nbr
;

507 
CPU_INT08U
 
pos_max
;

508 
CPU_INT32U
 
ãmp
;

509 
	`CPU_SR_ALLOC
();

512 
pos
) {

513 
CPU_INT_STK_PTR
:

514 
CPU_INT_RSVD_07
:

515 
CPU_INT_RSVD_08
:

516 
CPU_INT_RSVD_09
:

517 
CPU_INT_RSVD_10
:

518 
CPU_INT_RSVD_13
:

523 
CPU_INT_RESET
:

524 
CPU_INT_NMI
:

525 
CPU_INT_HFAULT
:

528 
CPU_INT_MEM
:

529 
	`CPU_CRITICAL_ENTER
();

530 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

531 
ãmp
 &~(
DEF_OCTET_MASK
 << (0 * 
DEF_OCTET_NBR_BITS
));

532 
ãmp
 |(
¥io
 << (0 * 
DEF_OCTET_NBR_BITS
));

533 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

534 
	`CPU_CRITICAL_EXIT
();

537 
CPU_INT_BUSFAULT
:

538 
	`CPU_CRITICAL_ENTER
();

539 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

540 
ãmp
 &~(
DEF_OCTET_MASK
 << (1 * 
DEF_OCTET_NBR_BITS
));

541 
ãmp
 |(
¥io
 << (1 * 
DEF_OCTET_NBR_BITS
));

542 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

543 
	`CPU_CRITICAL_EXIT
();

546 
CPU_INT_USAGEFAULT
:

547 
	`CPU_CRITICAL_ENTER
();

548 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

549 
ãmp
 &~(
DEF_OCTET_MASK
 << (2 * 
DEF_OCTET_NBR_BITS
));

550 
ãmp
 |(
¥io
 << (2 * 
DEF_OCTET_NBR_BITS
));

551 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

552 
	`CPU_CRITICAL_EXIT
();

555 
CPU_INT_SVCALL
:

556 
	`CPU_CRITICAL_ENTER
();

557 
ãmp
 = 
CPU_REG_NVIC_SHPRI2
;

558 
ãmp
 &~((
CPU_INT32U
)
DEF_OCTET_MASK
 << (3 * 
DEF_OCTET_NBR_BITS
));

559 
ãmp
 |(
¥io
 << (3 * 
DEF_OCTET_NBR_BITS
));

560 
CPU_REG_NVIC_SHPRI2
 = 
ãmp
;

561 
	`CPU_CRITICAL_EXIT
();

564 
CPU_INT_DBGMON
:

565 
	`CPU_CRITICAL_ENTER
();

566 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

567 
ãmp
 &~(
DEF_OCTET_MASK
 << (0 * 
DEF_OCTET_NBR_BITS
));

568 
ãmp
 |(
¥io
 << (0 * 
DEF_OCTET_NBR_BITS
));

569 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

570 
	`CPU_CRITICAL_EXIT
();

573 
CPU_INT_PENDSV
:

574 
	`CPU_CRITICAL_ENTER
();

575 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

576 
ãmp
 &~(
DEF_OCTET_MASK
 << (2 * 
DEF_OCTET_NBR_BITS
));

577 
ãmp
 |(
¥io
 << (2 * 
DEF_OCTET_NBR_BITS
));

578 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

579 
	`CPU_CRITICAL_EXIT
();

582 
CPU_INT_SYSTICK
:

583 
	`CPU_CRITICAL_ENTER
();

584 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

585 
ãmp
 &~((
CPU_INT32U
)
DEF_OCTET_MASK
 << (3 * 
DEF_OCTET_NBR_BITS
));

586 
ãmp
 |(
¥io
 << (3 * 
DEF_OCTET_NBR_BITS
));

587 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

588 
	`CPU_CRITICAL_EXIT
();

594 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

595 i‡(
pos
 < 
pos_max
) {

596 
group
 = (
pos
 - 16) / 4;

597 
nbr
 = (
pos
 - 16) % 4;

599 
	`CPU_CRITICAL_ENTER
();

600 
ãmp
 = 
	`CPU_REG_NVIC_PRIO
(
group
);

601 
ãmp
 &~(
DEF_OCTET_MASK
 << (
nbr
 * 
DEF_OCTET_NBR_BITS
));

602 
ãmp
 |(
¥io
 << (
nbr
 * 
DEF_OCTET_NBR_BITS
));

603 
	`CPU_REG_NVIC_PRIO
(
group
Ë
ãmp
;

604 
	`CPU_CRITICAL_EXIT
();

608 
	}
}

632 
CPU_INT16S
 
	$CPU_I¡SrcPrioGë
 (
CPU_INT08U
 
pos
)

634 
CPU_INT08U
 
group
;

635 
CPU_INT08U
 
nbr
;

636 
CPU_INT08U
 
pos_max
;

637 
CPU_INT16S
 
¥io
;

638 
CPU_INT32U
 
ãmp
;

639 
	`CPU_SR_ALLOC
();

642 
pos
) {

643 
CPU_INT_STK_PTR
:

644 
CPU_INT_RSVD_07
:

645 
CPU_INT_RSVD_08
:

646 
CPU_INT_RSVD_09
:

647 
CPU_INT_RSVD_10
:

648 
CPU_INT_RSVD_13
:

649 
¥io
 = 
DEF_INT_16S_MIN_VAL
;

654 
CPU_INT_RESET
:

655 
¥io
 = -3;

658 
CPU_INT_NMI
:

659 
¥io
 = -2;

662 
CPU_INT_HFAULT
:

663 
¥io
 = -1;

667 
CPU_INT_MEM
:

668 
	`CPU_CRITICAL_ENTER
();

669 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

670 
¥io
 = (
ãmp
 >> (0 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

671 
	`CPU_CRITICAL_EXIT
();

675 
CPU_INT_BUSFAULT
:

676 
	`CPU_CRITICAL_ENTER
();

677 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

678 
¥io
 = (
ãmp
 >> (1 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

679 
	`CPU_CRITICAL_EXIT
();

683 
CPU_INT_USAGEFAULT
:

684 
	`CPU_CRITICAL_ENTER
();

685 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

686 
¥io
 = (
ãmp
 >> (2 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

689 
CPU_INT_SVCALL
:

690 
	`CPU_CRITICAL_ENTER
();

691 
ãmp
 = 
CPU_REG_NVIC_SHPRI2
;

692 
¥io
 = (
ãmp
 >> (3 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

693 
	`CPU_CRITICAL_EXIT
();

696 
CPU_INT_DBGMON
:

697 
	`CPU_CRITICAL_ENTER
();

698 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

699 
¥io
 = (
ãmp
 >> (0 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

700 
	`CPU_CRITICAL_EXIT
();

703 
CPU_INT_PENDSV
:

704 
	`CPU_CRITICAL_ENTER
();

705 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

706 
¥io
 = (
ãmp
 >> (2 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

707 
	`CPU_CRITICAL_EXIT
();

710 
CPU_INT_SYSTICK
:

711 
	`CPU_CRITICAL_ENTER
();

712 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

713 
¥io
 = (
ãmp
 >> (3 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

714 
	`CPU_CRITICAL_EXIT
();

720 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

721 i‡(
pos
 < 
pos_max
) {

722 
group
 = (
pos
 - 16) / 4;

723 
nbr
 = (
pos
 - 16) % 4;

725 
	`CPU_CRITICAL_ENTER
();

726 
ãmp
 = 
	`CPU_REG_NVIC_PRIO
(
group
);

727 
	`CPU_CRITICAL_EXIT
();

729 
¥io
 = (
ãmp
 >> (
nbr
 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

731 
¥io
 = 
DEF_INT_16S_MIN_VAL
;

736  (
¥io
);

737 
	}
}

	@UCOSIII/uC-CPU/ARM-Cortex-M4/IAR/cpu.h

47 #i‚de‡ 
CPU_MODULE_PRESENT


48 
	#CPU_MODULE_PRESENT


	)

84 
	~<˝u_def.h
>

85 
	~<˝u_cfg.h
>

87 #ifde‡
__˝lu•lus


120 
	tCPU_VOID
;

121 
	tCPU_CHAR
;

122 
	tCPU_BOOLEAN
;

123 
	tCPU_INT08U
;

124 sig√d 
	tCPU_INT08S
;

125 
	tCPU_INT16U
;

126 sig√d 
	tCPU_INT16S
;

127 
	tCPU_INT32U
;

128 sig√d 
	tCPU_INT32S
;

129 
	tCPU_INT64U
;

130 sig√d 
	tCPU_INT64S
;

132 
	tCPU_FP32
;

133 
	tCPU_FP64
;

136 vﬁ©ûê
	tCPU_INT08U
 
	tCPU_REG08
;

137 vﬁ©ûê
	tCPU_INT16U
 
	tCPU_REG16
;

138 vﬁ©ûê
	tCPU_INT32U
 
	tCPU_REG32
;

139 vﬁ©ûê
	tCPU_INT64U
 
	tCPU_REG64
;

142 (*
CPU_FNCT_VOID
)();

143 (*
CPU_FNCT_PTR
 )(*
	tp_obj
);

168 
	#CPU_CFG_ADDR_SIZE
 
CPU_WORD_SIZE_32


	)

169 
	#CPU_CFG_DATA_SIZE
 
CPU_WORD_SIZE_32


	)

170 
	#CPU_CFG_DATA_SIZE_MAX
 
CPU_WORD_SIZE_64


	)

172 
	#CPU_CFG_ENDIAN_TYPE
 
CPU_ENDIAN_TYPE_LITTLE


	)

182 #i‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_32
)

183 
CPU_INT32U
 
	tCPU_ADDR
;

184 #ñi‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_16
)

185 
CPU_INT16U
 
	tCPU_ADDR
;

187 
CPU_INT08U
 
	tCPU_ADDR
;

191 #i‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
)

192 
CPU_INT32U
 
	tCPU_DATA
;

193 #ñi‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

194 
CPU_INT16U
 
	tCPU_DATA
;

196 
CPU_INT08U
 
	tCPU_DATA
;

200 
CPU_DATA
 
	tCPU_ALIGN
;

201 
CPU_ADDR
 
	tCPU_SIZE_T
;

222 
	#CPU_CFG_STK_GROWTH
 
CPU_STK_GROWTH_HI_TO_LO


	)

224 
	#CPU_CFG_STK_ALIGN_BYTES
 (8uË

	)

226 
CPU_INT32U
 
	tCPU_STK
;

227 
CPU_ADDR
 
	tCPU_STK_SIZE
;

302 
	#CPU_CFG_CRITICAL_METHOD
 
CPU_CRITICAL_METHOD_STATUS_LOCAL


	)

304 
CPU_INT32U
 
	tCPU_SR
;

307 #i‡ (
CPU_CFG_CRITICAL_METHOD
 =
CPU_CRITICAL_METHOD_STATUS_LOCAL
)

308 
	#CPU_SR_ALLOC
(Ë
CPU_SR
 
˝u_§
 = (CPU_SR)0

	)

310 
	#CPU_SR_ALLOC
()

	)

315 
	#CPU_INT_DIS
(Ëdÿ{ 
˝u_§
 = 
	`CPU_SR_Save
(); } 0Ë

	)

316 
	#CPU_INT_EN
(Ëdÿ{ 
	`CPU_SR_Re°‹e
(
˝u_§
); } 0Ë

	)

319 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


322 
	#CPU_CRITICAL_ENTER
(Ëdÿ{ 
	`CPU_INT_DIS
(); \

323 
	`CPU_I¡DisMósSèπ
(); } 0)

	)

326 
	#CPU_CRITICAL_EXIT
(Ëdÿ{ 
	`CPU_I¡DisMósSt›
(); \

327 
	`CPU_INT_EN
(); } 0)

	)

331 
	#CPU_CRITICAL_ENTER
(Ëdÿ{ 
	`CPU_INT_DIS
(); } 0Ë

	)

332 
	#CPU_CRITICAL_EXIT
(Ëdÿ{ 
	`CPU_INT_EN
(); } 0Ë

	)

350 
	#CPU_MB
(Ë
	`__DSB
()

	)

351 
	#CPU_RMB
(Ë
	`__DSB
()

	)

352 
	#CPU_WMB
(Ë
	`__DSB
()

	)

380 
	#CPU_CFG_LEAD_ZEROS_ASM_PRESENT


	)

383 
	#CPU_CFG_TRAIL_ZEROS_ASM_PRESENT


	)

392 
CPU_I¡Dis
 ();

393 
CPU_I¡En
 ();

395 
CPU_I¡SrcDis
 (
CPU_INT08U
 
pos
);

396 
CPU_I¡SrcEn
 (
CPU_INT08U
 
pos
);

397 
CPU_I¡SrcPídCÃ
(
CPU_INT08U
 
pos
);

398 
CPU_INT16S
 
CPU_I¡SrcPrioGë
(
CPU_INT08U
 
pos
);

399 
CPU_I¡SrcPrioSë
(
CPU_INT08U
 
pos
,

400 
CPU_INT08U
 
¥io
);

403 
CPU_SR
 
CPU_SR_Save
 ();

404 
CPU_SR_Re°‹e
 (
CPU_SR
 
˝u_§
);

407 
CPU_WaôF‹I¡
 ();

408 
CPU_WaôF‹Ex˚±
();

411 
CPU_DATA
 
CPU_RevBôs
 (CPU_DATA 
vÆ
);

413 
CPU_BôB™dCÃ
 (
CPU_ADDR
 
addr
,

414 
CPU_INT08U
 
bô_nbr
);

415 
CPU_BôB™dSë
 (
CPU_ADDR
 
addr
,

416 
CPU_INT08U
 
bô_nbr
);

425 
	#CPU_INT_STK_PTR
 0u

	)

426 
	#CPU_INT_RESET
 1u

	)

427 
	#CPU_INT_NMI
 2u

	)

428 
	#CPU_INT_HFAULT
 3u

	)

429 
	#CPU_INT_MEM
 4u

	)

430 
	#CPU_INT_BUSFAULT
 5u

	)

431 
	#CPU_INT_USAGEFAULT
 6u

	)

432 
	#CPU_INT_RSVD_07
 7u

	)

433 
	#CPU_INT_RSVD_08
 8u

	)

434 
	#CPU_INT_RSVD_09
 9u

	)

435 
	#CPU_INT_RSVD_10
 10u

	)

436 
	#CPU_INT_SVCALL
 11u

	)

437 
	#CPU_INT_DBGMON
 12u

	)

438 
	#CPU_INT_RSVD_13
 13u

	)

439 
	#CPU_INT_PENDSV
 14u

	)

440 
	#CPU_INT_SYSTICK
 15u

	)

441 
	#CPU_INT_EXT0
 16u

	)

449 
	#CPU_REG_NVIC_NVIC
 (*((
CPU_REG32
 *)(0xE000E004))Ë

	)

450 
	#CPU_REG_NVIC_ST_CTRL
 (*((
CPU_REG32
 *)(0xE000E010))Ë

	)

451 
	#CPU_REG_NVIC_ST_RELOAD
 (*((
CPU_REG32
 *)(0xE000E014))Ë

	)

452 
	#CPU_REG_NVIC_ST_CURRENT
 (*((
CPU_REG32
 *)(0xE000E018))Ë

	)

453 
	#CPU_REG_NVIC_ST_CAL
 (*((
CPU_REG32
 *)(0xE000E01C))Ë

	)

455 
	#CPU_REG_NVIC_SETEN
(
n
Ë(*((
CPU_REG32
 *)(0xE000E100 + (nË* 4u))Ë

	)

456 
	#CPU_REG_NVIC_CLREN
(
n
Ë(*((
CPU_REG32
 *)(0xE000E180 + (nË* 4u))Ë

	)

457 
	#CPU_REG_NVIC_SETPEND
(
n
Ë(*((
CPU_REG32
 *)(0xE000E200 + (nË* 4u))Ë

	)

458 
	#CPU_REG_NVIC_CLRPEND
(
n
Ë(*((
CPU_REG32
 *)(0xE000E280 + (nË* 4u))Ë

	)

459 
	#CPU_REG_NVIC_ACTIVE
(
n
Ë(*((
CPU_REG32
 *)(0xE000E300 + (nË* 4u))Ë

	)

460 
	#CPU_REG_NVIC_PRIO
(
n
Ë(*((
CPU_REG32
 *)(0xE000E400 + (nË* 4u))Ë

	)

462 
	#CPU_REG_NVIC_CPUID
 (*((
CPU_REG32
 *)(0xE000ED00))Ë

	)

463 
	#CPU_REG_NVIC_ICSR
 (*((
CPU_REG32
 *)(0xE000ED04))Ë

	)

464 
	#CPU_REG_NVIC_VTOR
 (*((
CPU_REG32
 *)(0xE000ED08))Ë

	)

465 
	#CPU_REG_NVIC_AIRCR
 (*((
CPU_REG32
 *)(0xE000ED0C))Ë

	)

466 
	#CPU_REG_NVIC_SCR
 (*((
CPU_REG32
 *)(0xE000ED10))Ë

	)

467 
	#CPU_REG_NVIC_CCR
 (*((
CPU_REG32
 *)(0xE000ED14))Ë

	)

468 
	#CPU_REG_NVIC_SHPRI1
 (*((
CPU_REG32
 *)(0xE000ED18))Ë

	)

469 
	#CPU_REG_NVIC_SHPRI2
 (*((
CPU_REG32
 *)(0xE000ED1C))Ë

	)

470 
	#CPU_REG_NVIC_SHPRI3
 (*((
CPU_REG32
 *)(0xE000ED20))Ë

	)

471 
	#CPU_REG_NVIC_SHCSR
 (*((
CPU_REG32
 *)(0xE000ED24))Ë

	)

472 
	#CPU_REG_NVIC_CFSR
 (*((
CPU_REG32
 *)(0xE000ED28))Ë

	)

473 
	#CPU_REG_NVIC_HFSR
 (*((
CPU_REG32
 *)(0xE000ED2C))Ë

	)

474 
	#CPU_REG_NVIC_DFSR
 (*((
CPU_REG32
 *)(0xE000ED30))Ë

	)

475 
	#CPU_REG_NVIC_MMFAR
 (*((
CPU_REG32
 *)(0xE000ED34))Ë

	)

476 
	#CPU_REG_NVIC_BFAR
 (*((
CPU_REG32
 *)(0xE000ED38))Ë

	)

477 
	#CPU_REG_NVIC_AFSR
 (*((
CPU_REG32
 *)(0xE000ED3C))Ë

	)

478 
	#CPU_REG_NVIC_CPACR
 (*((
CPU_REG32
 *)(0xE000ED88))Ë

	)

480 
	#CPU_REG_NVIC_PFR0
 (*((
CPU_REG32
 *)(0xE000ED40))Ë

	)

481 
	#CPU_REG_NVIC_PFR1
 (*((
CPU_REG32
 *)(0xE000ED44))Ë

	)

482 
	#CPU_REG_NVIC_DFR0
 (*((
CPU_REG32
 *)(0xE000ED48))Ë

	)

483 
	#CPU_REG_NVIC_AFR0
 (*((
CPU_REG32
 *)(0xE000ED4C))Ë

	)

484 
	#CPU_REG_NVIC_MMFR0
 (*((
CPU_REG32
 *)(0xE000ED50))Ë

	)

485 
	#CPU_REG_NVIC_MMFR1
 (*((
CPU_REG32
 *)(0xE000ED54))Ë

	)

486 
	#CPU_REG_NVIC_MMFR2
 (*((
CPU_REG32
 *)(0xE000ED58))Ë

	)

487 
	#CPU_REG_NVIC_MMFR3
 (*((
CPU_REG32
 *)(0xE000ED5C))Ë

	)

488 
	#CPU_REG_NVIC_ISAFR0
 (*((
CPU_REG32
 *)(0xE000ED60))Ë

	)

489 
	#CPU_REG_NVIC_ISAFR1
 (*((
CPU_REG32
 *)(0xE000ED64))Ë

	)

490 
	#CPU_REG_NVIC_ISAFR2
 (*((
CPU_REG32
 *)(0xE000ED68))Ë

	)

491 
	#CPU_REG_NVIC_ISAFR3
 (*((
CPU_REG32
 *)(0xE000ED6C))Ë

	)

492 
	#CPU_REG_NVIC_ISAFR4
 (*((
CPU_REG32
 *)(0xE000ED70))Ë

	)

493 
	#CPU_REG_NVIC_SW_TRIG
 (*((
CPU_REG32
 *)(0xE000EF00))Ë

	)

495 
	#CPU_REG_MPU_TYPE
 (*((
CPU_REG32
 *)(0xE000ED90))Ë

	)

496 
	#CPU_REG_MPU_CTRL
 (*((
CPU_REG32
 *)(0xE000ED94))Ë

	)

497 
	#CPU_REG_MPU_REG_NBR
 (*((
CPU_REG32
 *)(0xE000ED98))Ë

	)

498 
	#CPU_REG_MPU_REG_BASE
 (*((
CPU_REG32
 *)(0xE000ED9C))Ë

	)

499 
	#CPU_REG_MPU_REG_ATTR
 (*((
CPU_REG32
 *)(0xE000EDA0))Ë

	)

501 
	#CPU_REG_DBG_CTRL
 (*((
CPU_REG32
 *)(0xE000EDF0))Ë

	)

502 
	#CPU_REG_DBG_SELECT
 (*((
CPU_REG32
 *)(0xE000EDF4))Ë

	)

503 
	#CPU_REG_DBG_DATA
 (*((
CPU_REG32
 *)(0xE000EDF8))Ë

	)

504 
	#CPU_REG_DBG_INT
 (*((
CPU_REG32
 *)(0xE000EDFC))Ë

	)

506 
	#CPU_REG_SCB_FPCCR
 (*((
CPU_REG32
 *)(0xE000EF34))Ë

	)

507 
	#CPU_REG_SCB_FPCAR
 (*((
CPU_REG32
 *)(0xE000EF38))Ë

	)

508 
	#CPU_REG_SCB_FPDSCR
 (*((
CPU_REG32
 *)(0xE000EF3C))Ë

	)

518 
	#CPU_REG_NVIC_ST_CTRL_COUNTFLAG
 0x00010000

	)

519 
	#CPU_REG_NVIC_ST_CTRL_CLKSOURCE
 0x00000004

	)

520 
	#CPU_REG_NVIC_ST_CTRL_TICKINT
 0x00000002

	)

521 
	#CPU_REG_NVIC_ST_CTRL_ENABLE
 0x00000001

	)

525 
	#CPU_REG_NVIC_ST_CAL_NOREF
 0x80000000

	)

526 
	#CPU_REG_NVIC_ST_CAL_SKEW
 0x40000000

	)

529 
	#CPU_REG_NVIC_ICSR_NMIPENDSET
 0x80000000

	)

530 
	#CPU_REG_NVIC_ICSR_PENDSVSET
 0x10000000

	)

531 
	#CPU_REG_NVIC_ICSR_PENDSVCLR
 0x08000000

	)

532 
	#CPU_REG_NVIC_ICSR_PENDSTSET
 0x04000000

	)

533 
	#CPU_REG_NVIC_ICSR_PENDSTCLR
 0x02000000

	)

534 
	#CPU_REG_NVIC_ICSR_ISRPREEMPT
 0x00800000

	)

535 
	#CPU_REG_NVIC_ICSR_ISRPENDING
 0x00400000

	)

536 
	#CPU_REG_NVIC_ICSR_RETTOBASE
 0x00000800

	)

539 
	#CPU_REG_NVIC_VTOR_TBLBASE
 0x20000000

	)

542 
	#CPU_REG_NVIC_AIRCR_ENDIANNESS
 0x00008000

	)

543 
	#CPU_REG_NVIC_AIRCR_SYSRESETREQ
 0x00000004

	)

544 
	#CPU_REG_NVIC_AIRCR_VECTCLRACTIVE
 0x00000002

	)

545 
	#CPU_REG_NVIC_AIRCR_VECTRESET
 0x00000001

	)

548 
	#CPU_REG_NVIC_SCR_SEVONPEND
 0x00000010

	)

549 
	#CPU_REG_NVIC_SCR_SLEEPDEEP
 0x00000004

	)

550 
	#CPU_REG_NVIC_SCR_SLEEPONEXIT
 0x00000002

	)

553 
	#CPU_REG_NVIC_CCR_STKALIGN
 0x00000200

	)

554 
	#CPU_REG_NVIC_CCR_BFHFNMIGN
 0x00000100

	)

555 
	#CPU_REG_NVIC_CCR_DIV_0_TRP
 0x00000010

	)

556 
	#CPU_REG_NVIC_CCR_UNALIGN_TRP
 0x00000008

	)

557 
	#CPU_REG_NVIC_CCR_USERSETMPEND
 0x00000002

	)

558 
	#CPU_REG_NVIC_CCR_NONBASETHRDENA
 0x00000001

	)

561 
	#CPU_REG_NVIC_SHCSR_USGFAULTENA
 0x00040000

	)

562 
	#CPU_REG_NVIC_SHCSR_BUSFAULTENA
 0x00020000

	)

563 
	#CPU_REG_NVIC_SHCSR_MEMFAULTENA
 0x00010000

	)

564 
	#CPU_REG_NVIC_SHCSR_SVCALLPENDED
 0x00008000

	)

565 
	#CPU_REG_NVIC_SHCSR_BUSFAULTPENDED
 0x00004000

	)

566 
	#CPU_REG_NVIC_SHCSR_MEMFAULTPENDED
 0x00002000

	)

567 
	#CPU_REG_NVIC_SHCSR_USGFAULTPENDED
 0x00001000

	)

568 
	#CPU_REG_NVIC_SHCSR_SYSTICKACT
 0x00000800

	)

569 
	#CPU_REG_NVIC_SHCSR_PENDSVACT
 0x00000400

	)

570 
	#CPU_REG_NVIC_SHCSR_MONITORACT
 0x00000100

	)

571 
	#CPU_REG_NVIC_SHCSR_SVCALLACT
 0x00000080

	)

572 
	#CPU_REG_NVIC_SHCSR_USGFAULTACT
 0x00000008

	)

573 
	#CPU_REG_NVIC_SHCSR_BUSFAULTACT
 0x00000002

	)

574 
	#CPU_REG_NVIC_SHCSR_MEMFAULTACT
 0x00000001

	)

577 
	#CPU_REG_NVIC_CFSR_DIVBYZERO
 0x02000000

	)

578 
	#CPU_REG_NVIC_CFSR_UNALIGNED
 0x01000000

	)

579 
	#CPU_REG_NVIC_CFSR_NOCP
 0x00080000

	)

580 
	#CPU_REG_NVIC_CFSR_INVPC
 0x00040000

	)

581 
	#CPU_REG_NVIC_CFSR_INVSTATE
 0x00020000

	)

582 
	#CPU_REG_NVIC_CFSR_UNDEFINSTR
 0x00010000

	)

583 
	#CPU_REG_NVIC_CFSR_BFARVALID
 0x00008000

	)

584 
	#CPU_REG_NVIC_CFSR_STKERR
 0x00001000

	)

585 
	#CPU_REG_NVIC_CFSR_UNSTKERR
 0x00000800

	)

586 
	#CPU_REG_NVIC_CFSR_IMPRECISERR
 0x00000400

	)

587 
	#CPU_REG_NVIC_CFSR_PRECISERR
 0x00000200

	)

588 
	#CPU_REG_NVIC_CFSR_IBUSERR
 0x00000100

	)

589 
	#CPU_REG_NVIC_CFSR_MMARVALID
 0x00000080

	)

590 
	#CPU_REG_NVIC_CFSR_MSTKERR
 0x00000010

	)

591 
	#CPU_REG_NVIC_CFSR_MUNSTKERR
 0x00000008

	)

592 
	#CPU_REG_NVIC_CFSR_DACCVIOL
 0x00000002

	)

593 
	#CPU_REG_NVIC_CFSR_IACCVIOL
 0x00000001

	)

596 
	#CPU_REG_NVIC_HFSR_DEBUGEVT
 0x80000000

	)

597 
	#CPU_REG_NVIC_HFSR_FORCED
 0x40000000

	)

598 
	#CPU_REG_NVIC_HFSR_VECTTBL
 0x00000002

	)

601 
	#CPU_REG_NVIC_DFSR_EXTERNAL
 0x00000010

	)

602 
	#CPU_REG_NVIC_DFSR_VCATCH
 0x00000008

	)

603 
	#CPU_REG_NVIC_DFSR_DWTTRAP
 0x00000004

	)

604 
	#CPU_REG_NVIC_DFSR_BKPT
 0x00000002

	)

605 
	#CPU_REG_NVIC_DFSR_HALTED
 0x00000001

	)

608 
	#CPU_REG_NVIC_CPACR_CP10_FULL_ACCESS
 0x00300000

	)

609 
	#CPU_REG_NVIC_CPACR_CP11_FULL_ACCESS
 0x00C00000

	)

617 
	#CPU_MSK_NVIC_ICSR_VECT_ACTIVE
 0x000001FF

	)

626 #i‚de‡ 
CPU_CFG_ADDR_SIZE


633 #ñi‡ ((
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_08
) && \

634 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_16
) && \

635 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_32
) && \

636 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_64
))

645 #i‚de‡ 
CPU_CFG_DATA_SIZE


652 #ñi‡ ((
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_08
) && \

653 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_16
) && \

654 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_32
) && \

655 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_64
))

664 #i‚de‡ 
CPU_CFG_DATA_SIZE_MAX


671 #ñi‡ ((
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_08
) && \

672 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_16
) && \

673 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_32
) && \

674 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_64
))

684 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 < 
CPU_CFG_DATA_SIZE
)

692 #i‚de‡ 
CPU_CFG_ENDIAN_TYPE


697 #ñi‡ ((
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_BIG
 ) && \

698 (
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_LITTLE
))

707 #i‚de‡ 
CPU_CFG_STK_GROWTH


712 #ñi‡ ((
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_LO_TO_HI
) && \

713 (
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_HI_TO_LO
))

722 #i‚de‡ 
CPU_CFG_CRITICAL_METHOD


728 #ñi‡ ((
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_INT_DIS_EN
 ) && \

729 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_STK
 ) && \

730 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_LOCAL
))

746 #ifde‡
__˝lu•lus


	@UCOSIII/uC-CPU/ARM-Cortex-M4/IAR/cpu_c.c

44 
	#MICRIUM_SOURCE


	)

45 
	~<˝u.h
>

46 
	~<˝u_c‹e.h
>

48 
	~<lib_def.h
>

50 #ifde‡
__˝lu•lus


61 
	#CPU_INT_SRC_POS_MAX
 ((((
CPU_REG_NVIC_NVIC
 + 1Ë& 0x1FË* 32Ë+ 16)

	)

63 
	#CPU_BIT_BAND_SRAM_REG_LO
 0x20000000

	)

64 
	#CPU_BIT_BAND_SRAM_REG_HI
 0x200FFFFF

	)

65 
	#CPU_BIT_BAND_SRAM_BASE
 0x22000000

	)

68 
	#CPU_BIT_BAND_PERIPH_REG_LO
 0x40000000

	)

69 
	#CPU_BIT_BAND_PERIPH_REG_HI
 0x400FFFFF

	)

70 
	#CPU_BIT_BAND_PERIPH_BASE
 0x42000000

	)

133 
CPU_BôB™dCÃ
 (
CPU_ADDR
 
addr
,

134 
CPU_INT08U
 
bô_nbr
)

136 
CPU_ADDR
 
bô_w‹d_off
;

137 
CPU_ADDR
 
bô_w‹d_addr
;

140 i‡((
addr
 >
CPU_BIT_BAND_SRAM_REG_LO
) &&

141 (
addr
 <
CPU_BIT_BAND_SRAM_REG_HI
)) {

142 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_SRAM_REG_LO
 ) * 32Ë+ (
bô_nbr
 * 4);

143 
bô_w‹d_addr
 = 
CPU_BIT_BAND_SRAM_BASE
 + 
bô_w‹d_off
;

145 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 0;

147 } i‡((
addr
 >
CPU_BIT_BAND_PERIPH_REG_LO
) &&

148 (
addr
 <
CPU_BIT_BAND_PERIPH_REG_HI
)) {

149 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_PERIPH_REG_LO
Ë* 32Ë+ (
bô_nbr
 * 4);

150 
bô_w‹d_addr
 = 
CPU_BIT_BAND_PERIPH_BASE
 + 
bô_w‹d_off
;

152 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 0;

175 
CPU_BôB™dSë
 (
CPU_ADDR
 
addr
,

176 
CPU_INT08U
 
bô_nbr
)

178 
CPU_ADDR
 
bô_w‹d_off
;

179 
CPU_ADDR
 
bô_w‹d_addr
;

182 i‡((
addr
 >
CPU_BIT_BAND_SRAM_REG_LO
) &&

183 (
addr
 <
CPU_BIT_BAND_SRAM_REG_HI
)) {

184 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_SRAM_REG_LO
 ) * 32Ë+ (
bô_nbr
 * 4);

185 
bô_w‹d_addr
 = 
CPU_BIT_BAND_SRAM_BASE
 + 
bô_w‹d_off
;

187 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 1;

189 } i‡((
addr
 >
CPU_BIT_BAND_PERIPH_REG_LO
) &&

190 (
addr
 <
CPU_BIT_BAND_PERIPH_REG_HI
)) {

191 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_PERIPH_REG_LO
Ë* 32Ë+ (
bô_nbr
 * 4);

192 
bô_w‹d_addr
 = 
CPU_BIT_BAND_PERIPH_BASE
 + 
bô_w‹d_off
;

194 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 1;

247 
CPU_I¡SrcDis
 (
CPU_INT08U
 
pos
)

249 
CPU_INT08U
 
group
;

250 
CPU_INT08U
 
pos_max
;

251 
CPU_INT08U
 
nbr
;

252 
CPU_SR_ALLOC
();

255 
pos
) {

256 
CPU_INT_STK_PTR
:

257 
CPU_INT_RSVD_07
:

258 
CPU_INT_RSVD_08
:

259 
CPU_INT_RSVD_09
:

260 
CPU_INT_RSVD_10
:

261 
CPU_INT_RSVD_13
:

266 
CPU_INT_RESET
:

267 
CPU_INT_NMI
:

268 
CPU_INT_HFAULT
:

269 
CPU_INT_SVCALL
:

270 
CPU_INT_DBGMON
:

271 
CPU_INT_PENDSV
:

274 
CPU_INT_MEM
:

275 
CPU_CRITICAL_ENTER
();

276 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_MEMFAULTENA
;

277 
CPU_CRITICAL_EXIT
();

280 
CPU_INT_BUSFAULT
:

281 
CPU_CRITICAL_ENTER
();

282 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_BUSFAULTENA
;

283 
CPU_CRITICAL_EXIT
();

286 
CPU_INT_USAGEFAULT
:

287 
CPU_CRITICAL_ENTER
();

288 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_USGFAULTENA
;

289 
CPU_CRITICAL_EXIT
();

292 
CPU_INT_SYSTICK
:

293 
CPU_CRITICAL_ENTER
();

294 
CPU_REG_NVIC_ST_CTRL
 &~
CPU_REG_NVIC_ST_CTRL_ENABLE
;

295 
CPU_CRITICAL_EXIT
();

301 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

302 i‡(
pos
 < 
pos_max
) {

303 
group
 = (
pos
 - 16) / 32;

304 
nbr
 = (
pos
 - 16) % 32;

306 
CPU_CRITICAL_ENTER
();

307 
CPU_REG_NVIC_CLREN
(
group
Ë
DEF_BIT
(
nbr
);

308 
CPU_CRITICAL_EXIT
();

335 
CPU_I¡SrcEn
 (
CPU_INT08U
 
pos
)

337 
CPU_INT08U
 
group
;

338 
CPU_INT08U
 
nbr
;

339 
CPU_INT08U
 
pos_max
;

340 
CPU_SR_ALLOC
();

343 
pos
) {

344 
CPU_INT_STK_PTR
:

345 
CPU_INT_RSVD_07
:

346 
CPU_INT_RSVD_08
:

347 
CPU_INT_RSVD_09
:

348 
CPU_INT_RSVD_10
:

349 
CPU_INT_RSVD_13
:

354 
CPU_INT_RESET
:

355 
CPU_INT_NMI
:

356 
CPU_INT_HFAULT
:

357 
CPU_INT_SVCALL
:

358 
CPU_INT_DBGMON
:

359 
CPU_INT_PENDSV
:

362 
CPU_INT_MEM
:

363 
CPU_CRITICAL_ENTER
();

364 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_MEMFAULTENA
;

365 
CPU_CRITICAL_EXIT
();

368 
CPU_INT_BUSFAULT
:

369 
CPU_CRITICAL_ENTER
();

370 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_BUSFAULTENA
;

371 
CPU_CRITICAL_EXIT
();

374 
CPU_INT_USAGEFAULT
:

375 
CPU_CRITICAL_ENTER
();

376 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_USGFAULTENA
;

377 
CPU_CRITICAL_EXIT
();

380 
CPU_INT_SYSTICK
:

381 
CPU_CRITICAL_ENTER
();

382 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_ENABLE
;

383 
CPU_CRITICAL_EXIT
();

389 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

390 i‡(
pos
 < 
pos_max
) {

391 
group
 = (
pos
 - 16) / 32;

392 
nbr
 = (
pos
 - 16) % 32;

394 
CPU_CRITICAL_ENTER
();

395 
CPU_REG_NVIC_SETEN
(
group
Ë
DEF_BIT
(
nbr
);

396 
CPU_CRITICAL_EXIT
();

433 
CPU_I¡SrcPídCÃ
 (
CPU_INT08U
 
pos
)

436 
CPU_INT08U
 
group
;

437 
CPU_INT08U
 
nbr
;

438 
CPU_INT08U
 
pos_max
;

439 
CPU_SR_ALLOC
();

442 
pos
) {

443 
CPU_INT_STK_PTR
:

444 
CPU_INT_RSVD_07
:

445 
CPU_INT_RSVD_08
:

446 
CPU_INT_RSVD_09
:

447 
CPU_INT_RSVD_10
:

448 
CPU_INT_RSVD_13
:

451 
CPU_INT_RESET
:

452 
CPU_INT_NMI
:

453 
CPU_INT_HFAULT
:

454 
CPU_INT_MEM
:

455 
CPU_INT_SVCALL
:

456 
CPU_INT_DBGMON
:

457 
CPU_INT_PENDSV
:

458 
CPU_INT_BUSFAULT
:

459 
CPU_INT_USAGEFAULT
:

460 
CPU_INT_SYSTICK
:

464 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

465 i‡(
pos
 < 
pos_max
) {

466 
group
 = (
pos
 - 16) / 32;

467 
nbr
 = (
pos
 - 16) % 32;

469 
CPU_CRITICAL_ENTER
();

470 
CPU_REG_NVIC_CLRPEND
(
group
Ë
DEF_BIT
(
nbr
);

471 
CPU_CRITICAL_EXIT
();

504 
CPU_I¡SrcPrioSë
 (
CPU_INT08U
 
pos
,

505 
CPU_INT08U
 
¥io
)

507 
CPU_INT08U
 
group
;

508 
CPU_INT08U
 
nbr
;

509 
CPU_INT08U
 
pos_max
;

510 
CPU_INT32U
 
ãmp
;

511 
CPU_SR_ALLOC
();

514 
pos
) {

515 
CPU_INT_STK_PTR
:

516 
CPU_INT_RSVD_07
:

517 
CPU_INT_RSVD_08
:

518 
CPU_INT_RSVD_09
:

519 
CPU_INT_RSVD_10
:

520 
CPU_INT_RSVD_13
:

525 
CPU_INT_RESET
:

526 
CPU_INT_NMI
:

527 
CPU_INT_HFAULT
:

530 
CPU_INT_MEM
:

531 
CPU_CRITICAL_ENTER
();

532 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

533 
ãmp
 &~(
DEF_OCTET_MASK
 << (0 * 
DEF_OCTET_NBR_BITS
));

534 
ãmp
 |(
¥io
 << (0 * 
DEF_OCTET_NBR_BITS
));

535 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

536 
CPU_CRITICAL_EXIT
();

539 
CPU_INT_BUSFAULT
:

540 
CPU_CRITICAL_ENTER
();

541 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

542 
ãmp
 &~(
DEF_OCTET_MASK
 << (1 * 
DEF_OCTET_NBR_BITS
));

543 
ãmp
 |(
¥io
 << (1 * 
DEF_OCTET_NBR_BITS
));

544 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

545 
CPU_CRITICAL_EXIT
();

548 
CPU_INT_USAGEFAULT
:

549 
CPU_CRITICAL_ENTER
();

550 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

551 
ãmp
 &~(
DEF_OCTET_MASK
 << (2 * 
DEF_OCTET_NBR_BITS
));

552 
ãmp
 |(
¥io
 << (2 * 
DEF_OCTET_NBR_BITS
));

553 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

554 
CPU_CRITICAL_EXIT
();

557 
CPU_INT_SVCALL
:

558 
CPU_CRITICAL_ENTER
();

559 
ãmp
 = 
CPU_REG_NVIC_SHPRI2
;

560 
ãmp
 &~((
CPU_INT32U
)
DEF_OCTET_MASK
 << (3 * 
DEF_OCTET_NBR_BITS
));

561 
ãmp
 |(
¥io
 << (3 * 
DEF_OCTET_NBR_BITS
));

562 
CPU_REG_NVIC_SHPRI2
 = 
ãmp
;

563 
CPU_CRITICAL_EXIT
();

566 
CPU_INT_DBGMON
:

567 
CPU_CRITICAL_ENTER
();

568 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

569 
ãmp
 &~(
DEF_OCTET_MASK
 << (0 * 
DEF_OCTET_NBR_BITS
));

570 
ãmp
 |(
¥io
 << (0 * 
DEF_OCTET_NBR_BITS
));

571 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

572 
CPU_CRITICAL_EXIT
();

575 
CPU_INT_PENDSV
:

576 
CPU_CRITICAL_ENTER
();

577 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

578 
ãmp
 &~(
DEF_OCTET_MASK
 << (2 * 
DEF_OCTET_NBR_BITS
));

579 
ãmp
 |(
¥io
 << (2 * 
DEF_OCTET_NBR_BITS
));

580 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

581 
CPU_CRITICAL_EXIT
();

584 
CPU_INT_SYSTICK
:

585 
CPU_CRITICAL_ENTER
();

586 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

587 
ãmp
 &~((
CPU_INT32U
)
DEF_OCTET_MASK
 << (3 * 
DEF_OCTET_NBR_BITS
));

588 
ãmp
 |(
¥io
 << (3 * 
DEF_OCTET_NBR_BITS
));

589 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

590 
CPU_CRITICAL_EXIT
();

596 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

597 i‡(
pos
 < 
pos_max
) {

598 
group
 = (
pos
 - 16) / 4;

599 
nbr
 = (
pos
 - 16) % 4;

601 
CPU_CRITICAL_ENTER
();

602 
ãmp
 = 
CPU_REG_NVIC_PRIO
(
group
);

603 
ãmp
 &~(
DEF_OCTET_MASK
 << (
nbr
 * 
DEF_OCTET_NBR_BITS
));

604 
ãmp
 |(
¥io
 << (
nbr
 * 
DEF_OCTET_NBR_BITS
));

605 
CPU_REG_NVIC_PRIO
(
group
Ë
ãmp
;

606 
CPU_CRITICAL_EXIT
();

634 
CPU_INT16S
 
CPU_I¡SrcPrioGë
 (
CPU_INT08U
 
pos
)

636 
CPU_INT08U
 
group
;

637 
CPU_INT08U
 
nbr
;

638 
CPU_INT08U
 
pos_max
;

639 
CPU_INT16S
 
¥io
;

640 
CPU_INT32U
 
ãmp
;

641 
CPU_SR_ALLOC
();

644 
pos
) {

645 
CPU_INT_STK_PTR
:

646 
CPU_INT_RSVD_07
:

647 
CPU_INT_RSVD_08
:

648 
CPU_INT_RSVD_09
:

649 
CPU_INT_RSVD_10
:

650 
CPU_INT_RSVD_13
:

651 
¥io
 = 
DEF_INT_16S_MIN_VAL
;

656 
CPU_INT_RESET
:

657 
¥io
 = -3;

660 
CPU_INT_NMI
:

661 
¥io
 = -2;

664 
CPU_INT_HFAULT
:

665 
¥io
 = -1;

669 
CPU_INT_MEM
:

670 
CPU_CRITICAL_ENTER
();

671 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

672 
¥io
 = (
ãmp
 >> (0 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

673 
CPU_CRITICAL_EXIT
();

677 
CPU_INT_BUSFAULT
:

678 
CPU_CRITICAL_ENTER
();

679 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

680 
¥io
 = (
ãmp
 >> (1 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

681 
CPU_CRITICAL_EXIT
();

685 
CPU_INT_USAGEFAULT
:

686 
CPU_CRITICAL_ENTER
();

687 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

688 
¥io
 = (
ãmp
 >> (2 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

691 
CPU_INT_SVCALL
:

692 
CPU_CRITICAL_ENTER
();

693 
ãmp
 = 
CPU_REG_NVIC_SHPRI2
;

694 
¥io
 = (
ãmp
 >> (3 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

695 
CPU_CRITICAL_EXIT
();

698 
CPU_INT_DBGMON
:

699 
CPU_CRITICAL_ENTER
();

700 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

701 
¥io
 = (
ãmp
 >> (0 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

702 
CPU_CRITICAL_EXIT
();

705 
CPU_INT_PENDSV
:

706 
CPU_CRITICAL_ENTER
();

707 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

708 
¥io
 = (
ãmp
 >> (2 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

709 
CPU_CRITICAL_EXIT
();

712 
CPU_INT_SYSTICK
:

713 
CPU_CRITICAL_ENTER
();

714 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

715 
¥io
 = (
ãmp
 >> (3 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

716 
CPU_CRITICAL_EXIT
();

722 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

723 i‡(
pos
 < 
pos_max
) {

724 
group
 = (
pos
 - 16) / 4;

725 
nbr
 = (
pos
 - 16) % 4;

727 
CPU_CRITICAL_ENTER
();

728 
ãmp
 = 
CPU_REG_NVIC_PRIO
(
group
);

729 
CPU_CRITICAL_EXIT
();

731 
¥io
 = (
ãmp
 >> (
nbr
 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

733 
¥io
 = 
DEF_INT_16S_MIN_VAL
;

738  (
¥io
);

741 #ifde‡
__˝lu•lus


	@UCOSIII/uC-CPU/ARM-Cortex-M4/RealView/cpu.h

50 #i‚de‡ 
CPU_MODULE_PRESENT


51 
	#CPU_MODULE_PRESENT


	)

87 
	~<˝u_def.h
>

88 
	~<˝u_cfg.h
>

119 
	tCPU_VOID
;

120 
	tCPU_CHAR
;

121 
	tCPU_BOOLEAN
;

122 
	tCPU_INT08U
;

123 sig√d 
	tCPU_INT08S
;

124 
	tCPU_INT16U
;

125 sig√d 
	tCPU_INT16S
;

126 
	tCPU_INT32U
;

127 sig√d 
	tCPU_INT32S
;

128 
	tCPU_INT64U
;

129 sig√d 
	tCPU_INT64S
;

131 
	tCPU_FP32
;

132 
	tCPU_FP64
;

135 vﬁ©ûê
	tCPU_INT08U
 
	tCPU_REG08
;

136 vﬁ©ûê
	tCPU_INT16U
 
	tCPU_REG16
;

137 vﬁ©ûê
	tCPU_INT32U
 
	tCPU_REG32
;

138 vﬁ©ûê
	tCPU_INT64U
 
	tCPU_REG64
;

141 (*
	tCPU_FNCT_VOID
)();

142 (*
	tCPU_FNCT_PTR
 )(*
	tp_obj
);

167 
	#CPU_CFG_ADDR_SIZE
 
CPU_WORD_SIZE_32


	)

168 
	#CPU_CFG_DATA_SIZE
 
CPU_WORD_SIZE_32


	)

169 
	#CPU_CFG_DATA_SIZE_MAX
 
CPU_WORD_SIZE_64


	)

171 
	#CPU_CFG_ENDIAN_TYPE
 
CPU_ENDIAN_TYPE_LITTLE


	)

181 #i‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_32
)

182 
CPU_INT32U
 
	tCPU_ADDR
;

183 #ñi‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_16
)

184 
CPU_INT16U
 
	tCPU_ADDR
;

186 
CPU_INT08U
 
	tCPU_ADDR
;

190 #i‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
)

191 
CPU_INT32U
 
	tCPU_DATA
;

192 #ñi‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

193 
CPU_INT16U
 
	tCPU_DATA
;

195 
CPU_INT08U
 
	tCPU_DATA
;

199 
CPU_DATA
 
	tCPU_ALIGN
;

200 
CPU_ADDR
 
	tCPU_SIZE_T
;

221 
	#CPU_CFG_STK_GROWTH
 
CPU_STK_GROWTH_HI_TO_LO


	)

223 
	#CPU_CFG_STK_ALIGN_BYTES
 (8uË

	)

225 
CPU_INT32U
 
	tCPU_STK
;

226 
CPU_ADDR
 
	tCPU_STK_SIZE
;

301 
	#CPU_CFG_CRITICAL_METHOD
 
CPU_CRITICAL_METHOD_STATUS_LOCAL


	)

303 
CPU_INT32U
 
	tCPU_SR
;

306 #i‡ (
CPU_CFG_CRITICAL_METHOD
 =
CPU_CRITICAL_METHOD_STATUS_LOCAL
)

307 
	#CPU_SR_ALLOC
(Ë
CPU_SR
 
˝u_§
 = (CPU_SR)0

	)

309 
	#CPU_SR_ALLOC
()

	)

314 
	#CPU_INT_DIS
(Ëdÿ{ 
˝u_§
 = 
	`CPU_SR_Save
(); 
	}
} 0Ë

	)

315 
	#CPU_INT_EN
(Ëdÿ{ 
	`CPU_SR_Re°‹e
(
˝u_§
); } 0Ë

	)

318 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


321 
	#CPU_CRITICAL_ENTER
(Ëdÿ{ 
	`CPU_INT_DIS
(); \

322 
	`CPU_I¡DisMósSèπ
(); } 0)

	)

325 
	#CPU_CRITICAL_EXIT
(Ëdÿ{ 
	`CPU_I¡DisMósSt›
(); \

326 
	`CPU_INT_EN
(); } 0)

	)

330 
	#CPU_CRITICAL_ENTER
(Ëdÿ{ 
	`CPU_INT_DIS
(); } 0Ë

	)

331 
	#CPU_CRITICAL_EXIT
(Ëdÿ{ 
	`CPU_INT_EN
(); } 0Ë

	)

349 
	#CPU_MB
(Ë
	`__dsb
(0xF)

	)

350 
	#CPU_RMB
(Ë
	`__dsb
(0xF)

	)

351 
	#CPU_WMB
(Ë
	`__dsb
(0xF)

	)

379 
	#CPU_CFG_LEAD_ZEROS_ASM_PRESENT


	)

382 
	#CPU_CFG_TRAIL_ZEROS_ASM_PRESENT


	)

391 
CPU_I¡Dis
 ();

392 
CPU_I¡En
 ();

394 
CPU_I¡SrcDis
 (
CPU_INT08U
 
pos
);

395 
CPU_I¡SrcEn
 (
CPU_INT08U
 
pos
);

396 
CPU_I¡SrcPídCÃ
(
CPU_INT08U
 
pos
);

397 
CPU_INT16S
 
CPU_I¡SrcPrioGë
(
CPU_INT08U
 
pos
);

398 
CPU_I¡SrcPrioSë
(
CPU_INT08U
 
pos
,

399 
CPU_INT08U
 
¥io
);

402 
CPU_SR
 
CPU_SR_Save
 ();

403 
CPU_SR_Re°‹e
 (
CPU_SR
 
˝u_§
);

406 
CPU_WaôF‹I¡
 ();

407 
CPU_WaôF‹Ex˚±
();

410 
CPU_DATA
 
CPU_RevBôs
 (CPU_DATA 
vÆ
);

412 
CPU_BôB™dCÃ
 (
CPU_ADDR
 
addr
,

413 
CPU_INT08U
 
bô_nbr
);

414 
CPU_BôB™dSë
 (
CPU_ADDR
 
addr
,

415 
CPU_INT08U
 
bô_nbr
);

424 
	#CPU_INT_STK_PTR
 0u

	)

425 
	#CPU_INT_RESET
 1u

	)

426 
	#CPU_INT_NMI
 2u

	)

427 
	#CPU_INT_HFAULT
 3u

	)

428 
	#CPU_INT_MEM
 4u

	)

429 
	#CPU_INT_BUSFAULT
 5u

	)

430 
	#CPU_INT_USAGEFAULT
 6u

	)

431 
	#CPU_INT_RSVD_07
 7u

	)

432 
	#CPU_INT_RSVD_08
 8u

	)

433 
	#CPU_INT_RSVD_09
 9u

	)

434 
	#CPU_INT_RSVD_10
 10u

	)

435 
	#CPU_INT_SVCALL
 11u

	)

436 
	#CPU_INT_DBGMON
 12u

	)

437 
	#CPU_INT_RSVD_13
 13u

	)

438 
	#CPU_INT_PENDSV
 14u

	)

439 
	#CPU_INT_SYSTICK
 15u

	)

440 
	#CPU_INT_EXT0
 16u

	)

448 
	#CPU_REG_NVIC_NVIC
 (*((
CPU_REG32
 *)(0xE000E004))Ë

	)

449 
	#CPU_REG_NVIC_ST_CTRL
 (*((
CPU_REG32
 *)(0xE000E010))Ë

	)

450 
	#CPU_REG_NVIC_ST_RELOAD
 (*((
CPU_REG32
 *)(0xE000E014))Ë

	)

451 
	#CPU_REG_NVIC_ST_CURRENT
 (*((
CPU_REG32
 *)(0xE000E018))Ë

	)

452 
	#CPU_REG_NVIC_ST_CAL
 (*((
CPU_REG32
 *)(0xE000E01C))Ë

	)

454 
	#CPU_REG_NVIC_SETEN
(
n
Ë(*((
CPU_REG32
 *)(0xE000E100 + (nË* 4u))Ë

	)

455 
	#CPU_REG_NVIC_CLREN
(
n
Ë(*((
CPU_REG32
 *)(0xE000E180 + (nË* 4u))Ë

	)

456 
	#CPU_REG_NVIC_SETPEND
(
n
Ë(*((
CPU_REG32
 *)(0xE000E200 + (nË* 4u))Ë

	)

457 
	#CPU_REG_NVIC_CLRPEND
(
n
Ë(*((
CPU_REG32
 *)(0xE000E280 + (nË* 4u))Ë

	)

458 
	#CPU_REG_NVIC_ACTIVE
(
n
Ë(*((
CPU_REG32
 *)(0xE000E300 + (nË* 4u))Ë

	)

459 
	#CPU_REG_NVIC_PRIO
(
n
Ë(*((
CPU_REG32
 *)(0xE000E400 + (nË* 4u))Ë

	)

461 
	#CPU_REG_NVIC_CPUID
 (*((
CPU_REG32
 *)(0xE000ED00))Ë

	)

462 
	#CPU_REG_NVIC_ICSR
 (*((
CPU_REG32
 *)(0xE000ED04))Ë

	)

463 
	#CPU_REG_NVIC_VTOR
 (*((
CPU_REG32
 *)(0xE000ED08))Ë

	)

464 
	#CPU_REG_NVIC_AIRCR
 (*((
CPU_REG32
 *)(0xE000ED0C))Ë

	)

465 
	#CPU_REG_NVIC_SCR
 (*((
CPU_REG32
 *)(0xE000ED10))Ë

	)

466 
	#CPU_REG_NVIC_CCR
 (*((
CPU_REG32
 *)(0xE000ED14))Ë

	)

467 
	#CPU_REG_NVIC_SHPRI1
 (*((
CPU_REG32
 *)(0xE000ED18))Ë

	)

468 
	#CPU_REG_NVIC_SHPRI2
 (*((
CPU_REG32
 *)(0xE000ED1C))Ë

	)

469 
	#CPU_REG_NVIC_SHPRI3
 (*((
CPU_REG32
 *)(0xE000ED20))Ë

	)

470 
	#CPU_REG_NVIC_SHCSR
 (*((
CPU_REG32
 *)(0xE000ED24))Ë

	)

471 
	#CPU_REG_NVIC_CFSR
 (*((
CPU_REG32
 *)(0xE000ED28))Ë

	)

472 
	#CPU_REG_NVIC_HFSR
 (*((
CPU_REG32
 *)(0xE000ED2C))Ë

	)

473 
	#CPU_REG_NVIC_DFSR
 (*((
CPU_REG32
 *)(0xE000ED30))Ë

	)

474 
	#CPU_REG_NVIC_MMFAR
 (*((
CPU_REG32
 *)(0xE000ED34))Ë

	)

475 
	#CPU_REG_NVIC_BFAR
 (*((
CPU_REG32
 *)(0xE000ED38))Ë

	)

476 
	#CPU_REG_NVIC_AFSR
 (*((
CPU_REG32
 *)(0xE000ED3C))Ë

	)

478 
	#CPU_REG_NVIC_PFR0
 (*((
CPU_REG32
 *)(0xE000ED40))Ë

	)

479 
	#CPU_REG_NVIC_PFR1
 (*((
CPU_REG32
 *)(0xE000ED44))Ë

	)

480 
	#CPU_REG_NVIC_DFR0
 (*((
CPU_REG32
 *)(0xE000ED48))Ë

	)

481 
	#CPU_REG_NVIC_AFR0
 (*((
CPU_REG32
 *)(0xE000ED4C))Ë

	)

482 
	#CPU_REG_NVIC_MMFR0
 (*((
CPU_REG32
 *)(0xE000ED50))Ë

	)

483 
	#CPU_REG_NVIC_MMFR1
 (*((
CPU_REG32
 *)(0xE000ED54))Ë

	)

484 
	#CPU_REG_NVIC_MMFR2
 (*((
CPU_REG32
 *)(0xE000ED58))Ë

	)

485 
	#CPU_REG_NVIC_MMFR3
 (*((
CPU_REG32
 *)(0xE000ED5C))Ë

	)

486 
	#CPU_REG_NVIC_ISAFR0
 (*((
CPU_REG32
 *)(0xE000ED60))Ë

	)

487 
	#CPU_REG_NVIC_ISAFR1
 (*((
CPU_REG32
 *)(0xE000ED64))Ë

	)

488 
	#CPU_REG_NVIC_ISAFR2
 (*((
CPU_REG32
 *)(0xE000ED68))Ë

	)

489 
	#CPU_REG_NVIC_ISAFR3
 (*((
CPU_REG32
 *)(0xE000ED6C))Ë

	)

490 
	#CPU_REG_NVIC_ISAFR4
 (*((
CPU_REG32
 *)(0xE000ED70))Ë

	)

491 
	#CPU_REG_NVIC_SW_TRIG
 (*((
CPU_REG32
 *)(0xE000EF00))Ë

	)

493 
	#CPU_REG_MPU_TYPE
 (*((
CPU_REG32
 *)(0xE000ED90))Ë

	)

494 
	#CPU_REG_MPU_CTRL
 (*((
CPU_REG32
 *)(0xE000ED94))Ë

	)

495 
	#CPU_REG_MPU_REG_NBR
 (*((
CPU_REG32
 *)(0xE000ED98))Ë

	)

496 
	#CPU_REG_MPU_REG_BASE
 (*((
CPU_REG32
 *)(0xE000ED9C))Ë

	)

497 
	#CPU_REG_MPU_REG_ATTR
 (*((
CPU_REG32
 *)(0xE000EDA0))Ë

	)

499 
	#CPU_REG_DBG_CTRL
 (*((
CPU_REG32
 *)(0xE000EDF0))Ë

	)

500 
	#CPU_REG_DBG_SELECT
 (*((
CPU_REG32
 *)(0xE000EDF4))Ë

	)

501 
	#CPU_REG_DBG_DATA
 (*((
CPU_REG32
 *)(0xE000EDF8))Ë

	)

502 
	#CPU_REG_DBG_INT
 (*((
CPU_REG32
 *)(0xE000EDFC))Ë

	)

512 
	#CPU_REG_NVIC_ST_CTRL_COUNTFLAG
 0x00010000

	)

513 
	#CPU_REG_NVIC_ST_CTRL_CLKSOURCE
 0x00000004

	)

514 
	#CPU_REG_NVIC_ST_CTRL_TICKINT
 0x00000002

	)

515 
	#CPU_REG_NVIC_ST_CTRL_ENABLE
 0x00000001

	)

519 
	#CPU_REG_NVIC_ST_CAL_NOREF
 0x80000000

	)

520 
	#CPU_REG_NVIC_ST_CAL_SKEW
 0x40000000

	)

523 
	#CPU_REG_NVIC_ICSR_NMIPENDSET
 0x80000000

	)

524 
	#CPU_REG_NVIC_ICSR_PENDSVSET
 0x10000000

	)

525 
	#CPU_REG_NVIC_ICSR_PENDSVCLR
 0x08000000

	)

526 
	#CPU_REG_NVIC_ICSR_PENDSTSET
 0x04000000

	)

527 
	#CPU_REG_NVIC_ICSR_PENDSTCLR
 0x02000000

	)

528 
	#CPU_REG_NVIC_ICSR_ISRPREEMPT
 0x00800000

	)

529 
	#CPU_REG_NVIC_ICSR_ISRPENDING
 0x00400000

	)

530 
	#CPU_REG_NVIC_ICSR_RETTOBASE
 0x00000800

	)

533 
	#CPU_REG_NVIC_VTOR_TBLBASE
 0x20000000

	)

536 
	#CPU_REG_NVIC_AIRCR_ENDIANNESS
 0x00008000

	)

537 
	#CPU_REG_NVIC_AIRCR_SYSRESETREQ
 0x00000004

	)

538 
	#CPU_REG_NVIC_AIRCR_VECTCLRACTIVE
 0x00000002

	)

539 
	#CPU_REG_NVIC_AIRCR_VECTRESET
 0x00000001

	)

542 
	#CPU_REG_NVIC_SCR_SEVONPEND
 0x00000010

	)

543 
	#CPU_REG_NVIC_SCR_SLEEPDEEP
 0x00000004

	)

544 
	#CPU_REG_NVIC_SCR_SLEEPONEXIT
 0x00000002

	)

547 
	#CPU_REG_NVIC_CCR_STKALIGN
 0x00000200

	)

548 
	#CPU_REG_NVIC_CCR_BFHFNMIGN
 0x00000100

	)

549 
	#CPU_REG_NVIC_CCR_DIV_0_TRP
 0x00000010

	)

550 
	#CPU_REG_NVIC_CCR_UNALIGN_TRP
 0x00000008

	)

551 
	#CPU_REG_NVIC_CCR_USERSETMPEND
 0x00000002

	)

552 
	#CPU_REG_NVIC_CCR_NONBASETHRDENA
 0x00000001

	)

555 
	#CPU_REG_NVIC_SHCSR_USGFAULTENA
 0x00040000

	)

556 
	#CPU_REG_NVIC_SHCSR_BUSFAULTENA
 0x00020000

	)

557 
	#CPU_REG_NVIC_SHCSR_MEMFAULTENA
 0x00010000

	)

558 
	#CPU_REG_NVIC_SHCSR_SVCALLPENDED
 0x00008000

	)

559 
	#CPU_REG_NVIC_SHCSR_BUSFAULTPENDED
 0x00004000

	)

560 
	#CPU_REG_NVIC_SHCSR_MEMFAULTPENDED
 0x00002000

	)

561 
	#CPU_REG_NVIC_SHCSR_USGFAULTPENDED
 0x00001000

	)

562 
	#CPU_REG_NVIC_SHCSR_SYSTICKACT
 0x00000800

	)

563 
	#CPU_REG_NVIC_SHCSR_PENDSVACT
 0x00000400

	)

564 
	#CPU_REG_NVIC_SHCSR_MONITORACT
 0x00000100

	)

565 
	#CPU_REG_NVIC_SHCSR_SVCALLACT
 0x00000080

	)

566 
	#CPU_REG_NVIC_SHCSR_USGFAULTACT
 0x00000008

	)

567 
	#CPU_REG_NVIC_SHCSR_BUSFAULTACT
 0x00000002

	)

568 
	#CPU_REG_NVIC_SHCSR_MEMFAULTACT
 0x00000001

	)

571 
	#CPU_REG_NVIC_CFSR_DIVBYZERO
 0x02000000

	)

572 
	#CPU_REG_NVIC_CFSR_UNALIGNED
 0x01000000

	)

573 
	#CPU_REG_NVIC_CFSR_NOCP
 0x00080000

	)

574 
	#CPU_REG_NVIC_CFSR_INVPC
 0x00040000

	)

575 
	#CPU_REG_NVIC_CFSR_INVSTATE
 0x00020000

	)

576 
	#CPU_REG_NVIC_CFSR_UNDEFINSTR
 0x00010000

	)

577 
	#CPU_REG_NVIC_CFSR_BFARVALID
 0x00008000

	)

578 
	#CPU_REG_NVIC_CFSR_STKERR
 0x00001000

	)

579 
	#CPU_REG_NVIC_CFSR_UNSTKERR
 0x00000800

	)

580 
	#CPU_REG_NVIC_CFSR_IMPRECISERR
 0x00000400

	)

581 
	#CPU_REG_NVIC_CFSR_PRECISERR
 0x00000200

	)

582 
	#CPU_REG_NVIC_CFSR_IBUSERR
 0x00000100

	)

583 
	#CPU_REG_NVIC_CFSR_MMARVALID
 0x00000080

	)

584 
	#CPU_REG_NVIC_CFSR_MSTKERR
 0x00000010

	)

585 
	#CPU_REG_NVIC_CFSR_MUNSTKERR
 0x00000008

	)

586 
	#CPU_REG_NVIC_CFSR_DACCVIOL
 0x00000002

	)

587 
	#CPU_REG_NVIC_CFSR_IACCVIOL
 0x00000001

	)

590 
	#CPU_REG_NVIC_HFSR_DEBUGEVT
 0x80000000

	)

591 
	#CPU_REG_NVIC_HFSR_FORCED
 0x40000000

	)

592 
	#CPU_REG_NVIC_HFSR_VECTTBL
 0x00000002

	)

595 
	#CPU_REG_NVIC_DFSR_EXTERNAL
 0x00000010

	)

596 
	#CPU_REG_NVIC_DFSR_VCATCH
 0x00000008

	)

597 
	#CPU_REG_NVIC_DFSR_DWTTRAP
 0x00000004

	)

598 
	#CPU_REG_NVIC_DFSR_BKPT
 0x00000002

	)

599 
	#CPU_REG_NVIC_DFSR_HALTED
 0x00000001

	)

608 
	#CPU_MSK_NVIC_ICSR_VECT_ACTIVE
 0x000001FF

	)

617 #i‚de‡ 
CPU_CFG_ADDR_SIZE


624 #ñi‡ ((
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_08
) && \

625 (
	gCPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_16
) && \

626 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_32
) && \

627 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_64
))

636 #i‚de‡ 
CPU_CFG_DATA_SIZE


643 #ñi‡ ((
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_08
) && \

644 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_16
) && \

645 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_32
) && \

646 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_64
))

655 #i‚de‡ 
CPU_CFG_DATA_SIZE_MAX


662 #ñi‡ ((
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_08
) && \

663 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_16
) && \

664 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_32
) && \

665 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_64
))

675 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 < 
CPU_CFG_DATA_SIZE
)

683 #i‚de‡ 
CPU_CFG_ENDIAN_TYPE


688 #ñi‡ ((
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_BIG
 ) && \

689 (
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_LITTLE
))

698 #i‚de‡ 
CPU_CFG_STK_GROWTH


703 #ñi‡ ((
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_LO_TO_HI
) && \

704 (
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_HI_TO_LO
))

713 #i‚de‡ 
CPU_CFG_CRITICAL_METHOD


719 #ñi‡ ((
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_INT_DIS_EN
 ) && \

720 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_STK
 ) && \

721 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_LOCAL
))

	@UCOSIII/uC-CPU/ARM-Cortex-M4/RealView/cpu_c.c

47 
	#MICRIUM_SOURCE


	)

48 
	~<˝u.h
>

49 
	~<˝u_c‹e.h
>

51 
	~<lib_def.h
>

60 
	#CPU_INT_SRC_POS_MAX
 ((((
CPU_REG_NVIC_NVIC
 + 1Ë& 0x1FË* 32Ë+ 16)

	)

62 
	#CPU_BIT_BAND_SRAM_REG_LO
 0x20000000

	)

63 
	#CPU_BIT_BAND_SRAM_REG_HI
 0x200FFFFF

	)

64 
	#CPU_BIT_BAND_SRAM_BASE
 0x22000000

	)

67 
	#CPU_BIT_BAND_PERIPH_REG_LO
 0x40000000

	)

68 
	#CPU_BIT_BAND_PERIPH_REG_HI
 0x400FFFFF

	)

69 
	#CPU_BIT_BAND_PERIPH_BASE
 0x42000000

	)

132 
	$CPU_BôB™dCÃ
 (
CPU_ADDR
 
addr
,

133 
CPU_INT08U
 
bô_nbr
)

135 
CPU_ADDR
 
bô_w‹d_off
;

136 
CPU_ADDR
 
bô_w‹d_addr
;

139 i‡((
addr
 >
CPU_BIT_BAND_SRAM_REG_LO
) &&

140 (
addr
 <
CPU_BIT_BAND_SRAM_REG_HI
)) {

141 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_SRAM_REG_LO
 ) * 32Ë+ (
bô_nbr
 * 4);

142 
bô_w‹d_addr
 = 
CPU_BIT_BAND_SRAM_BASE
 + 
bô_w‹d_off
;

144 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 0;

146 } i‡((
addr
 >
CPU_BIT_BAND_PERIPH_REG_LO
) &&

147 (
addr
 <
CPU_BIT_BAND_PERIPH_REG_HI
)) {

148 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_PERIPH_REG_LO
Ë* 32Ë+ (
bô_nbr
 * 4);

149 
bô_w‹d_addr
 = 
CPU_BIT_BAND_PERIPH_BASE
 + 
bô_w‹d_off
;

151 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 0;

153 
	}
}

174 
	$CPU_BôB™dSë
 (
CPU_ADDR
 
addr
,

175 
CPU_INT08U
 
bô_nbr
)

177 
CPU_ADDR
 
bô_w‹d_off
;

178 
CPU_ADDR
 
bô_w‹d_addr
;

181 i‡((
addr
 >
CPU_BIT_BAND_SRAM_REG_LO
) &&

182 (
addr
 <
CPU_BIT_BAND_SRAM_REG_HI
)) {

183 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_SRAM_REG_LO
 ) * 32Ë+ (
bô_nbr
 * 4);

184 
bô_w‹d_addr
 = 
CPU_BIT_BAND_SRAM_BASE
 + 
bô_w‹d_off
;

186 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 1;

188 } i‡((
addr
 >
CPU_BIT_BAND_PERIPH_REG_LO
) &&

189 (
addr
 <
CPU_BIT_BAND_PERIPH_REG_HI
)) {

190 
bô_w‹d_off
 = ((
addr
 - 
CPU_BIT_BAND_PERIPH_REG_LO
Ë* 32Ë+ (
bô_nbr
 * 4);

191 
bô_w‹d_addr
 = 
CPU_BIT_BAND_PERIPH_BASE
 + 
bô_w‹d_off
;

193 *(vﬁ©ûê
CPU_INT32U
 *)(
bô_w‹d_addr
) = 1;

195 
	}
}

247 
	$CPU_I¡SrcDis
 (
CPU_INT08U
 
pos
)

249 
CPU_INT08U
 
group
;

250 
CPU_INT08U
 
pos_max
;

251 
CPU_INT08U
 
nbr
;

252 
	`CPU_SR_ALLOC
();

255 
pos
) {

256 
CPU_INT_STK_PTR
:

257 
CPU_INT_RSVD_07
:

258 
CPU_INT_RSVD_08
:

259 
CPU_INT_RSVD_09
:

260 
CPU_INT_RSVD_10
:

261 
CPU_INT_RSVD_13
:

266 
CPU_INT_RESET
:

267 
CPU_INT_NMI
:

268 
CPU_INT_HFAULT
:

269 
CPU_INT_SVCALL
:

270 
CPU_INT_DBGMON
:

271 
CPU_INT_PENDSV
:

274 
CPU_INT_MEM
:

275 
	`CPU_CRITICAL_ENTER
();

276 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_MEMFAULTENA
;

277 
	`CPU_CRITICAL_EXIT
();

280 
CPU_INT_BUSFAULT
:

281 
	`CPU_CRITICAL_ENTER
();

282 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_BUSFAULTENA
;

283 
	`CPU_CRITICAL_EXIT
();

286 
CPU_INT_USAGEFAULT
:

287 
	`CPU_CRITICAL_ENTER
();

288 
CPU_REG_NVIC_SHCSR
 &~
CPU_REG_NVIC_SHCSR_USGFAULTENA
;

289 
	`CPU_CRITICAL_EXIT
();

292 
CPU_INT_SYSTICK
:

293 
	`CPU_CRITICAL_ENTER
();

294 
CPU_REG_NVIC_ST_CTRL
 &~
CPU_REG_NVIC_ST_CTRL_ENABLE
;

295 
	`CPU_CRITICAL_EXIT
();

301 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

302 i‡(
pos
 < 
pos_max
) {

303 
group
 = (
pos
 - 16) / 32;

304 
nbr
 = (
pos
 - 16) % 32;

306 
	`CPU_CRITICAL_ENTER
();

307 
	`CPU_REG_NVIC_CLREN
(
group
Ë
	`DEF_BIT
(
nbr
);

308 
	`CPU_CRITICAL_EXIT
();

312 
	}
}

335 
	$CPU_I¡SrcEn
 (
CPU_INT08U
 
pos
)

337 
CPU_INT08U
 
group
;

338 
CPU_INT08U
 
nbr
;

339 
CPU_INT08U
 
pos_max
;

340 
	`CPU_SR_ALLOC
();

343 
pos
) {

344 
CPU_INT_STK_PTR
:

345 
CPU_INT_RSVD_07
:

346 
CPU_INT_RSVD_08
:

347 
CPU_INT_RSVD_09
:

348 
CPU_INT_RSVD_10
:

349 
CPU_INT_RSVD_13
:

354 
CPU_INT_RESET
:

355 
CPU_INT_NMI
:

356 
CPU_INT_HFAULT
:

357 
CPU_INT_SVCALL
:

358 
CPU_INT_DBGMON
:

359 
CPU_INT_PENDSV
:

362 
CPU_INT_MEM
:

363 
	`CPU_CRITICAL_ENTER
();

364 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_MEMFAULTENA
;

365 
	`CPU_CRITICAL_EXIT
();

368 
CPU_INT_BUSFAULT
:

369 
	`CPU_CRITICAL_ENTER
();

370 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_BUSFAULTENA
;

371 
	`CPU_CRITICAL_EXIT
();

374 
CPU_INT_USAGEFAULT
:

375 
	`CPU_CRITICAL_ENTER
();

376 
CPU_REG_NVIC_SHCSR
 |
CPU_REG_NVIC_SHCSR_USGFAULTENA
;

377 
	`CPU_CRITICAL_EXIT
();

380 
CPU_INT_SYSTICK
:

381 
	`CPU_CRITICAL_ENTER
();

382 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_ENABLE
;

383 
	`CPU_CRITICAL_EXIT
();

389 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

390 i‡(
pos
 < 
pos_max
) {

391 
group
 = (
pos
 - 16) / 32;

392 
nbr
 = (
pos
 - 16) % 32;

394 
	`CPU_CRITICAL_ENTER
();

395 
	`CPU_REG_NVIC_SETEN
(
group
Ë
	`DEF_BIT
(
nbr
);

396 
	`CPU_CRITICAL_EXIT
();

400 
	}
}

434 
	$CPU_I¡SrcPídCÃ
 (
CPU_INT08U
 
pos
)

437 
CPU_INT08U
 
group
;

438 
CPU_INT08U
 
nbr
;

439 
CPU_INT08U
 
pos_max
;

440 
	`CPU_SR_ALLOC
();

443 
pos
) {

444 
CPU_INT_STK_PTR
:

445 
CPU_INT_RSVD_07
:

446 
CPU_INT_RSVD_08
:

447 
CPU_INT_RSVD_09
:

448 
CPU_INT_RSVD_10
:

449 
CPU_INT_RSVD_13
:

452 
CPU_INT_RESET
:

453 
CPU_INT_NMI
:

454 
CPU_INT_HFAULT
:

455 
CPU_INT_MEM
:

456 
CPU_INT_SVCALL
:

457 
CPU_INT_DBGMON
:

458 
CPU_INT_PENDSV
:

459 
CPU_INT_BUSFAULT
:

460 
CPU_INT_USAGEFAULT
:

461 
CPU_INT_SYSTICK
:

465 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

466 i‡(
pos
 < 
pos_max
) {

467 
group
 = (
pos
 - 16) / 32;

468 
nbr
 = (
pos
 - 16) % 32;

470 
	`CPU_CRITICAL_ENTER
();

471 
	`CPU_REG_NVIC_CLRPEND
(
group
Ë
	`DEF_BIT
(
nbr
);

472 
	`CPU_CRITICAL_EXIT
();

476 
	}
}

505 
	$CPU_I¡SrcPrioSë
 (
CPU_INT08U
 
pos
,

506 
CPU_INT08U
 
¥io
)

508 
CPU_INT08U
 
group
;

509 
CPU_INT08U
 
nbr
;

510 
CPU_INT08U
 
pos_max
;

511 
CPU_INT32U
 
ãmp
;

512 
	`CPU_SR_ALLOC
();

515 
pos
) {

516 
CPU_INT_STK_PTR
:

517 
CPU_INT_RSVD_07
:

518 
CPU_INT_RSVD_08
:

519 
CPU_INT_RSVD_09
:

520 
CPU_INT_RSVD_10
:

521 
CPU_INT_RSVD_13
:

526 
CPU_INT_RESET
:

527 
CPU_INT_NMI
:

528 
CPU_INT_HFAULT
:

531 
CPU_INT_MEM
:

532 
	`CPU_CRITICAL_ENTER
();

533 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

534 
ãmp
 &~(
DEF_OCTET_MASK
 << (0 * 
DEF_OCTET_NBR_BITS
));

535 
ãmp
 |(
¥io
 << (0 * 
DEF_OCTET_NBR_BITS
));

536 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

537 
	`CPU_CRITICAL_EXIT
();

540 
CPU_INT_BUSFAULT
:

541 
	`CPU_CRITICAL_ENTER
();

542 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

543 
ãmp
 &~(
DEF_OCTET_MASK
 << (1 * 
DEF_OCTET_NBR_BITS
));

544 
ãmp
 |(
¥io
 << (1 * 
DEF_OCTET_NBR_BITS
));

545 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

546 
	`CPU_CRITICAL_EXIT
();

549 
CPU_INT_USAGEFAULT
:

550 
	`CPU_CRITICAL_ENTER
();

551 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

552 
ãmp
 &~(
DEF_OCTET_MASK
 << (2 * 
DEF_OCTET_NBR_BITS
));

553 
ãmp
 |(
¥io
 << (2 * 
DEF_OCTET_NBR_BITS
));

554 
CPU_REG_NVIC_SHPRI1
 = 
ãmp
;

555 
	`CPU_CRITICAL_EXIT
();

558 
CPU_INT_SVCALL
:

559 
	`CPU_CRITICAL_ENTER
();

560 
ãmp
 = 
CPU_REG_NVIC_SHPRI2
;

561 
ãmp
 &~((
CPU_INT32U
)
DEF_OCTET_MASK
 << (3 * 
DEF_OCTET_NBR_BITS
));

562 
ãmp
 |(
¥io
 << (3 * 
DEF_OCTET_NBR_BITS
));

563 
CPU_REG_NVIC_SHPRI2
 = 
ãmp
;

564 
	`CPU_CRITICAL_EXIT
();

567 
CPU_INT_DBGMON
:

568 
	`CPU_CRITICAL_ENTER
();

569 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

570 
ãmp
 &~(
DEF_OCTET_MASK
 << (0 * 
DEF_OCTET_NBR_BITS
));

571 
ãmp
 |(
¥io
 << (0 * 
DEF_OCTET_NBR_BITS
));

572 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

573 
	`CPU_CRITICAL_EXIT
();

576 
CPU_INT_PENDSV
:

577 
	`CPU_CRITICAL_ENTER
();

578 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

579 
ãmp
 &~(
DEF_OCTET_MASK
 << (2 * 
DEF_OCTET_NBR_BITS
));

580 
ãmp
 |(
¥io
 << (2 * 
DEF_OCTET_NBR_BITS
));

581 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

582 
	`CPU_CRITICAL_EXIT
();

585 
CPU_INT_SYSTICK
:

586 
	`CPU_CRITICAL_ENTER
();

587 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

588 
ãmp
 &~((
CPU_INT32U
)
DEF_OCTET_MASK
 << (3 * 
DEF_OCTET_NBR_BITS
));

589 
ãmp
 |(
¥io
 << (3 * 
DEF_OCTET_NBR_BITS
));

590 
CPU_REG_NVIC_SHPRI3
 = 
ãmp
;

591 
	`CPU_CRITICAL_EXIT
();

597 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

598 i‡(
pos
 < 
pos_max
) {

599 
group
 = (
pos
 - 16) / 4;

600 
nbr
 = (
pos
 - 16) % 4;

602 
	`CPU_CRITICAL_ENTER
();

603 
ãmp
 = 
	`CPU_REG_NVIC_PRIO
(
group
);

604 
ãmp
 &~(
DEF_OCTET_MASK
 << (
nbr
 * 
DEF_OCTET_NBR_BITS
));

605 
ãmp
 |(
¥io
 << (
nbr
 * 
DEF_OCTET_NBR_BITS
));

606 
	`CPU_REG_NVIC_PRIO
(
group
Ë
ãmp
;

607 
	`CPU_CRITICAL_EXIT
();

611 
	}
}

635 
CPU_INT16S
 
	$CPU_I¡SrcPrioGë
 (
CPU_INT08U
 
pos
)

637 
CPU_INT08U
 
group
;

638 
CPU_INT08U
 
nbr
;

639 
CPU_INT08U
 
pos_max
;

640 
CPU_INT16S
 
¥io
;

641 
CPU_INT32U
 
ãmp
;

642 
	`CPU_SR_ALLOC
();

645 
pos
) {

646 
CPU_INT_STK_PTR
:

647 
CPU_INT_RSVD_07
:

648 
CPU_INT_RSVD_08
:

649 
CPU_INT_RSVD_09
:

650 
CPU_INT_RSVD_10
:

651 
CPU_INT_RSVD_13
:

652 
¥io
 = 
DEF_INT_16S_MIN_VAL
;

657 
CPU_INT_RESET
:

658 
¥io
 = -3;

661 
CPU_INT_NMI
:

662 
¥io
 = -2;

665 
CPU_INT_HFAULT
:

666 
¥io
 = -1;

670 
CPU_INT_MEM
:

671 
	`CPU_CRITICAL_ENTER
();

672 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

673 
¥io
 = (
ãmp
 >> (0 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

674 
	`CPU_CRITICAL_EXIT
();

678 
CPU_INT_BUSFAULT
:

679 
	`CPU_CRITICAL_ENTER
();

680 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

681 
¥io
 = (
ãmp
 >> (1 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

682 
	`CPU_CRITICAL_EXIT
();

686 
CPU_INT_USAGEFAULT
:

687 
	`CPU_CRITICAL_ENTER
();

688 
ãmp
 = 
CPU_REG_NVIC_SHPRI1
;

689 
¥io
 = (
ãmp
 >> (2 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

692 
CPU_INT_SVCALL
:

693 
	`CPU_CRITICAL_ENTER
();

694 
ãmp
 = 
CPU_REG_NVIC_SHPRI2
;

695 
¥io
 = (
ãmp
 >> (3 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

696 
	`CPU_CRITICAL_EXIT
();

699 
CPU_INT_DBGMON
:

700 
	`CPU_CRITICAL_ENTER
();

701 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

702 
¥io
 = (
ãmp
 >> (0 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

703 
	`CPU_CRITICAL_EXIT
();

706 
CPU_INT_PENDSV
:

707 
	`CPU_CRITICAL_ENTER
();

708 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

709 
¥io
 = (
ãmp
 >> (2 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

710 
	`CPU_CRITICAL_EXIT
();

713 
CPU_INT_SYSTICK
:

714 
	`CPU_CRITICAL_ENTER
();

715 
ãmp
 = 
CPU_REG_NVIC_SHPRI3
;

716 
¥io
 = (
ãmp
 >> (3 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

717 
	`CPU_CRITICAL_EXIT
();

723 
pos_max
 = 
CPU_INT_SRC_POS_MAX
;

724 i‡(
pos
 < 
pos_max
) {

725 
group
 = (
pos
 - 16) / 4;

726 
nbr
 = (
pos
 - 16) % 4;

728 
	`CPU_CRITICAL_ENTER
();

729 
ãmp
 = 
	`CPU_REG_NVIC_PRIO
(
group
);

730 
	`CPU_CRITICAL_EXIT
();

732 
¥io
 = (
ãmp
 >> (
nbr
 * 
DEF_OCTET_NBR_BITS
)Ë& 
DEF_OCTET_MASK
;

734 
¥io
 = 
DEF_INT_16S_MIN_VAL
;

739  (
¥io
);

740 
	}
}

	@UCOSIII/uC-CPU/cpu_core.c

41 
	#MICRIUM_SOURCE


	)

42 
	#CPU_CORE_MODULE


	)

43 
	~<˝u_c‹e.h
>

93 #i‡(!(
deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) || \

94 (
	gCPU_CFG_DATA_SIZE_MAX
 > 
	gCPU_CFG_DATA_SIZE
))

95 c⁄° 
CPU_INT08U
 
	gCPU_C¡LódZîosTbl
[256] = {

123 
CPU_INT32U
 c⁄° 
	gCPU_Endü¬essTe°
 = 0x12345678LU;

132 #i‡ (
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

133 
CPU_NameInô
 ();

138 #i‡ ((
CPU_CFG_TS_EN
 =
DEF_ENABLED
) || \

139 (
	gCPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
))

140 
CPU_TS_Inô
 ();

144 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


145 
CPU_I¡DisMósInô
 ();

147 
CPU_TS_TMR
 
CPU_I¡DisMósMaxCÆc
(CPU_TS_TMR 
time_tŸ_˙ts
);

192 
	$CPU_Inô
 ()

195 #i‡((
CPU_CFG_TS_EN
 =
DEF_ENABLED
) || \

196 (
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
))

197 
	`CPU_TS_Inô
();

200 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


201 
	`CPU_I¡DisMósInô
();

205 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

206 
	`CPU_NameInô
();

208 
	}
}

231 
	$CPU_SW_Ex˚±i⁄
 ()

233 
DEF_ON
) {

236 
	}
}

259 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

260 
	$CPU_NameCÃ
 ()

262 
	`CPU_SR_ALLOC
();

265 
	`CPU_CRITICAL_ENTER
();

266 
	`Mem_CÃ
((*)&
CPU_Name
[0],

267 (
CPU_SIZE_T
Ë
CPU_CFG_NAME_SIZE
);

268 
	`CPU_CRITICAL_EXIT
();

269 
	}
}

303 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

304 
	$CPU_NameGë
 (
CPU_CHAR
 *
p_«me
,

305 
CPU_ERR
 *
p_îr
)

307 
	`CPU_SR_ALLOC
();

310 i‡(
p_îr
 =(
CPU_ERR
 *)0) {

311 
	`CPU_SW_EXCEPTION
(;);

314 i‡(
p_«me
 =(
CPU_CHAR
 *)0) {

315 *
p_îr
 = 
CPU_ERR_NULL_PTR
;

319 
	`CPU_CRITICAL_ENTER
();

320 ()
	`Så_C›y_N
(
p_«me
,

321 &
CPU_Name
[0],

322 
CPU_CFG_NAME_SIZE
);

323 
	`CPU_CRITICAL_EXIT
();

325 *
p_îr
 = 
CPU_ERR_NONE
;

326 
	}
}

356 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

357 
	$CPU_NameSë
 (c⁄° 
CPU_CHAR
 *
p_«me
,

358 
CPU_ERR
 *
p_îr
)

360 
CPU_SIZE_T
 
Àn
;

361 
	`CPU_SR_ALLOC
();

364 i‡(
p_îr
 =(
CPU_ERR
 *)0) {

365 
	`CPU_SW_EXCEPTION
(;);

368 i‡(
p_«me
 =(c⁄° 
CPU_CHAR
 *)0) {

369 *
p_îr
 = 
CPU_ERR_NULL_PTR
;

373 
Àn
 = 
	`Så_Lí_N
(
p_«me
,

374 
CPU_CFG_NAME_SIZE
);

375 i‡(
Àn
 < 
CPU_CFG_NAME_SIZE
) {

376 
	`CPU_CRITICAL_ENTER
();

377 ()
	`Så_C›y_N
(&
CPU_Name
[0],

378 
p_«me
,

379 
CPU_CFG_NAME_SIZE
);

380 
	`CPU_CRITICAL_EXIT
();

381 *
p_îr
 = 
CPU_ERR_NONE
;

384 *
p_îr
 = 
CPU_ERR_NAME_SIZE
;

386 
	}
}

442 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
)

443 
CPU_TS32
 
	$CPU_TS_Gë32
 ()

445 
CPU_TS32
 
ts
;

446 #i‡(
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
)

447 
CPU_TS_TMR
 
tmr_cur
;

448 
CPU_TS_TMR
 
tmr_dñè
;

449 
	`CPU_SR_ALLOC
();

453 #i‡(
CPU_CFG_TS_TMR_SIZE
 >
CPU_WORD_SIZE_32
)

454 
ts
 = (
CPU_TS32
)
	`CPU_TS_TmrRd
();

457 
	`CPU_INT_DIS
();

458 
tmr_cur
 = (
CPU_TS_TMR
Ë
	`CPU_TS_TmrRd
();

459 
tmr_dñè
 = (
CPU_TS_TMR
)(
tmr_cur
 - 
CPU_TS_32_TmrPªv
);

460 
CPU_TS_32_Accum
 +(
CPU_TS32
 ) 
tmr_dñè
;

461 
CPU_TS_32_TmrPªv
 = (
CPU_TS_TMR
Ë
tmr_cur
;

462 
ts
 = (
CPU_TS32
 ) 
CPU_TS_32_Accum
;

463 
	`CPU_INT_EN
();

466  (
ts
);

467 
	}
}

523 #i‡(
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
)

524 
CPU_TS64
 
	$CPU_TS_Gë64
 ()

526 
CPU_TS64
 
ts
;

527 #i‡(
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_64
)

528 
CPU_TS_TMR
 
tmr_cur
;

529 
CPU_TS_TMR
 
tmr_dñè
;

530 
	`CPU_SR_ALLOC
();

534 #i‡(
CPU_CFG_TS_TMR_SIZE
 >
CPU_WORD_SIZE_64
)

535 
ts
 = (
CPU_TS64
)
	`CPU_TS_TmrRd
();

538 
	`CPU_INT_DIS
();

539 
tmr_cur
 = (
CPU_TS_TMR
Ë
	`CPU_TS_TmrRd
();

540 
tmr_dñè
 = (
CPU_TS_TMR
)(
tmr_cur
 - 
CPU_TS_64_TmrPªv
);

541 
CPU_TS_64_Accum
 +(
CPU_TS64
 ) 
tmr_dñè
;

542 
CPU_TS_64_TmrPªv
 = (
CPU_TS_TMR
Ë
tmr_cur
;

543 
ts
 = (
CPU_TS64
 ) 
CPU_TS_64_Accum
;

544 
	`CPU_INT_EN
();

547  (
ts
);

548 
	}
}

577 #i‡(
CPU_CFG_TS_EN
 =
DEF_ENABLED
)

578 
	$CPU_TS_Upd©e
 ()

580 #i‡((
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) && \

581 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
))

582 ()
	`CPU_TS_Gë32
();

585 #i‡((
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
) && \

586 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_64
))

587 ()
	`CPU_TS_Gë64
();

589 
	}
}

619 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

620 
CPU_TS_TMR_FREQ
 
	$CPU_TS_TmrFªqGë
 (
CPU_ERR
 *
p_îr
)

622 
CPU_TS_TMR_FREQ
 
‰eq_hz
;

625 i‡(
p_îr
 =(
CPU_ERR
 *)0) {

626 
	`CPU_SW_EXCEPTION
(;);

629 
‰eq_hz
 = 
CPU_TS_TmrFªq_Hz
;

630 *
p_îr
 = (
‰eq_hz
 !0uË? 
CPU_ERR_NONE
 : 
CPU_ERR_TS_FREQ_INVALID
;

632  (
‰eq_hz
);

633 
	}
}

670 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

671 
	$CPU_TS_TmrFªqSë
 (
CPU_TS_TMR_FREQ
 
‰eq_hz
)

673 
CPU_TS_TmrFªq_Hz
 = 
‰eq_hz
;

674 
	}
}

701 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


702 
CPU_TS_TMR
 
	$CPU_I¡DisMósMaxCurRe£t
 ()

704 
CPU_TS_TMR
 
time_max_˙ts
;

705 
	`CPU_SR_ALLOC
();

708 
time_max_˙ts
 = 
	`CPU_I¡DisMósMaxCurGë
();

709 
	`CPU_INT_DIS
();

710 
CPU_I¡DisMósMaxCur_˙ts
 = 0u;

711 
	`CPU_INT_EN
();

713  (
time_max_˙ts
);

714 
	}
}

742 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


743 
CPU_TS_TMR
 
	$CPU_I¡DisMósMaxCurGë
 ()

745 
CPU_TS_TMR
 
time_tŸ_˙ts
;

746 
CPU_TS_TMR
 
time_max_˙ts
;

747 
	`CPU_SR_ALLOC
();

750 
	`CPU_INT_DIS
();

751 
time_tŸ_˙ts
 = 
CPU_I¡DisMósMaxCur_˙ts
;

752 
	`CPU_INT_EN
();

753 
time_max_˙ts
 = 
	`CPU_I¡DisMósMaxCÆc
(
time_tŸ_˙ts
);

755  (
time_max_˙ts
);

756 
	}
}

784 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


785 
CPU_TS_TMR
 
	$CPU_I¡DisMósMaxGë
 ()

787 
CPU_TS_TMR
 
time_tŸ_˙ts
;

788 
CPU_TS_TMR
 
time_max_˙ts
;

789 
	`CPU_SR_ALLOC
();

792 
	`CPU_INT_DIS
();

793 
time_tŸ_˙ts
 = 
CPU_I¡DisMósMax_˙ts
;

794 
	`CPU_INT_EN
();

795 
time_max_˙ts
 = 
	`CPU_I¡DisMósMaxCÆc
(
time_tŸ_˙ts
);

797  (
time_max_˙ts
);

798 
	}
}

821 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


822 
	$CPU_I¡DisMósSèπ
 ()

824 
CPU_I¡DisMósCå
++;

825 i‡(
CPU_I¡DisNe°Cå
 == 0u) {

826 
CPU_I¡DisMósSèπ_˙ts
 = 
	`CPU_TS_TmrRd
();

828 
CPU_I¡DisNe°Cå
++;

829 
	}
}

1005 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


1006 
	$CPU_I¡DisMósSt›
 ()

1008 
CPU_TS_TMR
 
time_öts_disd_˙ts
;

1011 
CPU_I¡DisNe°Cå
--;

1012 i‡(
CPU_I¡DisNe°Cå
 == 0u) {

1013 
CPU_I¡DisMósSt›_˙ts
 = 
	`CPU_TS_TmrRd
();

1015 
time_öts_disd_˙ts
 = 
CPU_I¡DisMósSt›_˙ts
 -

1016 
CPU_I¡DisMósSèπ_˙ts
;

1018 i‡(
CPU_I¡DisMósMaxCur_˙ts
 < 
time_öts_disd_˙ts
) {

1019 
CPU_I¡DisMósMaxCur_˙ts
 = 
time_öts_disd_˙ts
;

1021 i‡(
CPU_I¡DisMósMax_˙ts
 < 
time_öts_disd_˙ts
) {

1022 
CPU_I¡DisMósMax_˙ts
 = 
time_öts_disd_˙ts
;

1025 
	}
}

1125 #i‚de‡ 
CPU_CFG_LEAD_ZEROS_ASM_PRESENT


1126 
CPU_DATA
 
	$CPU_C¡LódZîos
 (
CPU_DATA
 
vÆ
)

1128 
CPU_DATA
 
nbr_Àad_zîos
;

1131 #i‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_08
)

1132 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos08
((
CPU_INT08U
)
vÆ
);

1134 #ñi‡(
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

1135 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos16
((
CPU_INT16U
)
vÆ
);

1137 #ñi‡(
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
)

1138 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos32
((
CPU_INT32U
)
vÆ
);

1140 #ñi‡(
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_64
)

1141 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos64
((
CPU_INT64U
)
vÆ
);

1144 
nbr_Àad_zîos
 = 
DEF_INT_CPU_U_MAX_VAL
;

1148  (
nbr_Àad_zîos
);

1149 
	}
}

1189 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_08
)

1190 
CPU_DATA
 
	$CPU_C¡LódZîos08
 (
CPU_INT08U
 
vÆ
)

1192 #i‡ (!((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1193 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_08
)))

1194 
CPU_DATA
 
ix
;

1196 
CPU_DATA
 
nbr_Àad_zîos
;

1199 #i‡((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1200 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_08
))

1201 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos
((
CPU_DATA
)
vÆ
);

1202 
nbr_Àad_zîos
 -(
CPU_CFG_DATA_SIZE
 - 
CPU_WORD_SIZE_08
Ë* 
DEF_OCTET_NBR_BITS
;

1208 
ix
 = (
CPU_DATA
)(
vÆ
 >> 0u);

1209 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 0u);

1213  (
nbr_Àad_zîos
);

1214 
	}
}

1256 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_16
)

1257 
CPU_DATA
 
	$CPU_C¡LódZîos16
 (
CPU_INT16U
 
vÆ
)

1259 #i‡ (!((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1260 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_16
)))

1261 
CPU_DATA
 
ix
;

1263 
CPU_DATA
 
nbr_Àad_zîos
;

1266 #i‡((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1267 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_16
))

1268 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos
((
CPU_DATA
)
vÆ
);

1269 
nbr_Àad_zîos
 -(
CPU_CFG_DATA_SIZE
 - 
CPU_WORD_SIZE_16
Ë* 
DEF_OCTET_NBR_BITS
;

1273 i‡(
vÆ
 > 0x00FFu) {

1275 
ix
 = (
CPU_DATA
)(
vÆ
 >> 8u);

1276 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 0u);

1280 
ix
 = (
CPU_DATA
)(
vÆ
 >> 0u);

1281 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 8u);

1286  (
nbr_Àad_zîos
);

1287 
	}
}

1329 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_32
)

1330 
CPU_DATA
 
	$CPU_C¡LódZîos32
 (
CPU_INT32U
 
vÆ
)

1332 #i‡ (!((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1333 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_32
)))

1334 
CPU_DATA
 
ix
;

1336 
CPU_DATA
 
nbr_Àad_zîos
;

1339 #i‡((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1340 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_32
))

1341 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos
((
CPU_DATA
)
vÆ
);

1342 
nbr_Àad_zîos
 -(
CPU_CFG_DATA_SIZE
 - 
CPU_WORD_SIZE_32
Ë* 
DEF_OCTET_NBR_BITS
;

1346 i‡(
vÆ
 > 0x0000FFFFu) {

1347 i‡(
vÆ
 > 0x00FFFFFFu) {

1349 
ix
 = (
CPU_DATA
)(
vÆ
 >> 24u);

1350 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 0u);

1354 
ix
 = (
CPU_DATA
)(
vÆ
 >> 16u);

1355 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 8u);

1359 i‡(
vÆ
 > 0x000000FFu) {

1361 
ix
 = (
CPU_DATA
)(
vÆ
 >> 8u);

1362 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 16u);

1366 
ix
 = (
CPU_DATA
)(
vÆ
 >> 0u);

1367 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 24u);

1373  (
nbr_Àad_zîos
);

1374 
	}
}

1416 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_64
)

1417 
CPU_DATA
 
	$CPU_C¡LódZîos64
 (
CPU_INT64U
 
vÆ
)

1419 #i‡ (!((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1420 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_64
)))

1421 
CPU_DATA
 
ix
;

1423 
CPU_DATA
 
nbr_Àad_zîos
;

1426 #i‡((
	`deföed
(
CPU_CFG_LEAD_ZEROS_ASM_PRESENT
)) && \

1427 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_64
))

1428 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos
((
CPU_DATA
)
vÆ
);

1429 
nbr_Àad_zîos
 -(
CPU_CFG_DATA_SIZE
 - 
CPU_WORD_SIZE_64
Ë* 
DEF_OCTET_NBR_BITS
;

1433 i‡(
vÆ
 > 0x00000000FFFFFFFFu) {

1434 i‡(
vÆ
 > 0x0000FFFFFFFFFFFFu) {

1435 i‡(
vÆ
 > 0x00FFFFFFFFFFFFFFu) {

1437 
ix
 = (
CPU_DATA
)(
vÆ
 >> 56u);

1438 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 0u);

1442 
ix
 = (
CPU_DATA
)(
vÆ
 >> 48u);

1443 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 8u);

1447 i‡(
vÆ
 > 0x000000FFFFFFFFFFu) {

1449 
ix
 = (
CPU_DATA
)(
vÆ
 >> 40u);

1450 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 16u);

1454 
ix
 = (
CPU_DATA
)(
vÆ
 >> 32u);

1455 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 24u);

1460 i‡(
vÆ
 > 0x000000000000FFFFu) {

1461 i‡(
vÆ
 > 0x0000000000FFFFFFu) {

1463 
ix
 = (
CPU_DATA
)(
vÆ
 >> 24u);

1464 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 32u);

1468 
ix
 = (
CPU_DATA
)(
vÆ
 >> 16u);

1469 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 40u);

1473 i‡(
vÆ
 > 0x00000000000000FFu) {

1475 
ix
 = (
CPU_DATA
)(
vÆ
 >> 8u);

1476 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 48u);

1480 
ix
 = (
CPU_DATA
)(
vÆ
 >> 0u);

1481 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
] + 56u);

1488  (
nbr_Àad_zîos
);

1489 
	}
}

1602 #i‚de‡ 
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT


1603 
CPU_DATA
 
	$CPU_C¡TøûZîos
 (
CPU_DATA
 
vÆ
)

1605 
CPU_DATA
 
vÆ_bô_mask
;

1606 
CPU_DATA
 
nbr_Àad_zîos
;

1607 
CPU_DATA
 
nbr_åaû_zîos
;

1610 i‡(
vÆ
 == 0u) {

1611  (
CPU_CFG_DATA_SIZE
 * 
DEF_OCTET_NBR_BITS
);

1615 
vÆ_bô_mask
 = 
vÆ
 & ((
CPU_DATA
)~val + 1u);

1616 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos
(
vÆ_bô_mask
);

1618 
nbr_åaû_zîos
 = ((
CPU_CFG_DATA_SIZE
 * 
DEF_OCTET_NBR_BITS
Ë- 1uË- 
nbr_Àad_zîos
;

1621  (
nbr_åaû_zîos
);

1622 
	}
}

1695 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_08
)

1696 
CPU_DATA
 
	$CPU_C¡TøûZîos08
 (
CPU_INT08U
 
vÆ
)

1698 #i‡ (!((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

1699 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_08
)))

1700 
CPU_INT08U
 
vÆ_bô_mask
;

1701 
CPU_DATA
 
nbr_Àad_zîos
;

1703 
CPU_DATA
 
nbr_åaû_zîos
;

1706 i‡(
vÆ
 == 0u) {

1707  (
CPU_WORD_SIZE_08
 * 
DEF_OCTET_NBR_BITS
);

1711 #i‡((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

1712 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_08
))

1713 
nbr_åaû_zîos
 = 
	`CPU_C¡TøûZîos
((
CPU_DATA
)
vÆ
);

1716 
vÆ_bô_mask
 = 
vÆ
 & ((
CPU_INT08U
)~val + 1u);

1717 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos08
(
vÆ_bô_mask
);

1719 
nbr_åaû_zîos
 = ((
CPU_WORD_SIZE_08
 * 
DEF_OCTET_NBR_BITS
Ë- 1uË- 
nbr_Àad_zîos
;

1723  (
nbr_åaû_zîos
);

1724 
	}
}

1799 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_16
)

1800 
CPU_DATA
 
	$CPU_C¡TøûZîos16
 (
CPU_INT16U
 
vÆ
)

1802 #i‡ (!((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

1803 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_16
)))

1804 
CPU_INT16U
 
vÆ_bô_mask
;

1805 
CPU_DATA
 
nbr_Àad_zîos
;

1807 
CPU_DATA
 
nbr_åaû_zîos
;

1810 i‡(
vÆ
 == 0u) {

1811  (
CPU_WORD_SIZE_16
 * 
DEF_OCTET_NBR_BITS
);

1815 #i‡((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

1816 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_16
))

1817 
nbr_åaû_zîos
 = 
	`CPU_C¡TøûZîos
((
CPU_DATA
)
vÆ
);

1820 
vÆ_bô_mask
 = 
vÆ
 & ((
CPU_INT16U
)~val + 1u);

1821 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos16
(
vÆ_bô_mask
);

1823 
nbr_åaû_zîos
 = ((
CPU_WORD_SIZE_16
 * 
DEF_OCTET_NBR_BITS
Ë- 1uË- 
nbr_Àad_zîos
;

1827  (
nbr_åaû_zîos
);

1828 
	}
}

1903 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_32
)

1904 
CPU_DATA
 
	$CPU_C¡TøûZîos32
 (
CPU_INT32U
 
vÆ
)

1906 #i‡ (!((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

1907 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_32
)))

1908 
CPU_INT32U
 
vÆ_bô_mask
;

1909 
CPU_DATA
 
nbr_Àad_zîos
;

1911 
CPU_DATA
 
nbr_åaû_zîos
;

1914 i‡(
vÆ
 == 0u) {

1915  (
CPU_WORD_SIZE_32
 * 
DEF_OCTET_NBR_BITS
);

1919 #i‡((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

1920 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_32
))

1921 
nbr_åaû_zîos
 = 
	`CPU_C¡TøûZîos
((
CPU_DATA
)
vÆ
);

1924 
vÆ_bô_mask
 = 
vÆ
 & ((
CPU_INT32U
)~val + 1u);

1925 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos32
(
vÆ_bô_mask
);

1927 
nbr_åaû_zîos
 = ((
CPU_WORD_SIZE_32
 * 
DEF_OCTET_NBR_BITS
Ë- 1uË- 
nbr_Àad_zîos
;

1931  (
nbr_åaû_zîos
);

1932 
	}
}

2007 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_64
)

2008 
CPU_DATA
 
	$CPU_C¡TøûZîos64
 (
CPU_INT64U
 
vÆ
)

2010 #i‡ (!((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

2011 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_64
)))

2012 
CPU_INT64U
 
vÆ_bô_mask
;

2013 
CPU_DATA
 
nbr_Àad_zîos
;

2015 
CPU_DATA
 
nbr_åaû_zîos
;

2018 i‡(
vÆ
 == 0u) {

2019  (
CPU_WORD_SIZE_64
 * 
DEF_OCTET_NBR_BITS
);

2023 #i‡((
	`deföed
(
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
)) && \

2024 (
CPU_CFG_DATA_SIZE
 >
CPU_WORD_SIZE_64
))

2025 
nbr_åaû_zîos
 = 
	`CPU_C¡TøûZîos
((
CPU_DATA
)
vÆ
);

2028 
vÆ_bô_mask
 = 
vÆ
 & ((
CPU_INT64U
)~val + 1u);

2029 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos64
(
vÆ_bô_mask
);

2031 
nbr_åaû_zîos
 = ((
CPU_WORD_SIZE_64
 * 
DEF_OCTET_NBR_BITS
Ë- 1uË- 
nbr_Àad_zîos
;

2035  (
nbr_åaû_zîos
);

2036 
	}
}

2064 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

2065 
	$CPU_NameInô
 ()

2067 
	`CPU_NameCÃ
();

2068 
	}
}

2099 #i‡((
CPU_CFG_TS_EN
 =
DEF_ENABLED
) || \

2100 (
	gCPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
))

2101 
	$CPU_TS_Inô
 ()

2103 #i‡(((
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
 ) && \

2104 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
)) || \

2105 ((
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
 ) && \

2106 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_64
)))

2107 
CPU_TS_TMR
 
ts_tmr_˙ts
;

2112 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

2113 
CPU_TS_TmrFªq_Hz
 = 0u;

2114 
	`CPU_TS_TmrInô
();

2119 #i‡(((
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
 ) && \

2120 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
)) || \

2121 ((
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
 ) && \

2122 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_64
)))

2123 
ts_tmr_˙ts
 = 
	`CPU_TS_TmrRd
();

2126 #i‡ ((
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) && \

2127 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
))

2128 
CPU_TS_32_Accum
 = 0u;

2129 
CPU_TS_32_TmrPªv
 = 
ts_tmr_˙ts
;

2132 #i‡ ((
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
) && \

2133 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_64
))

2134 
CPU_TS_64_Accum
 = 0u;

2135 
CPU_TS_64_TmrPªv
 = 
ts_tmr_˙ts
;

2137 
	}
}

2179 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


2180 
	$CPU_I¡DisMósInô
 ()

2182 
CPU_TS_TMR
 
time_mós_tŸ_˙ts
;

2183 
CPU_INT16U
 
i
;

2184 
	`CPU_SR_ALLOC
();

2187 
CPU_I¡DisMósCå
 = 0u;

2188 
CPU_I¡DisNe°Cå
 = 0u;

2189 
CPU_I¡DisMósSèπ_˙ts
 = 0u;

2190 
CPU_I¡DisMósSt›_˙ts
 = 0u;

2191 
CPU_I¡DisMósMaxCur_˙ts
 = 0u;

2192 
CPU_I¡DisMósMax_˙ts
 = 0u;

2193 
CPU_I¡DisMósOvrhd_˙ts
 = 0u;

2196 
time_mós_tŸ_˙ts
 = 0u;

2197 
	`CPU_INT_DIS
();

2198 
i
 = 0u; i < 
CPU_CFG_INT_DIS_MEAS_OVRHD_NBR
; i++) {

2199 
CPU_I¡DisMósMaxCur_˙ts
 = 0u;

2200 
	`CPU_I¡DisMósSèπ
();

2201 
	`CPU_I¡DisMósSt›
();

2202 
time_mós_tŸ_˙ts
 +
CPU_I¡DisMósMaxCur_˙ts
;

2205 
CPU_I¡DisMósOvrhd_˙ts
 = (
time_mós_tŸ_˙ts
 + (
CPU_CFG_INT_DIS_MEAS_OVRHD_NBR
 / 2u))

2206 / 
CPU_CFG_INT_DIS_MEAS_OVRHD_NBR
;

2207 
CPU_I¡DisMósMaxCur_˙ts
 = 0u;

2208 
CPU_I¡DisMósMax_˙ts
 = 0u;

2209 
	`CPU_INT_EN
();

2210 
	}
}

2312 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


2313 
CPU_TS_TMR
 
	$CPU_I¡DisMósMaxCÆc
 (
CPU_TS_TMR
 
time_tŸ_˙ts
)

2315 
CPU_TS_TMR
 
time_max_˙ts
;

2318 
time_max_˙ts
 = 
time_tŸ_˙ts
;

2319 i‡(
time_max_˙ts
 > 
CPU_I¡DisMósOvrhd_˙ts
) {

2320 
time_max_˙ts
 -
CPU_I¡DisMósOvrhd_˙ts
;

2322 
time_max_˙ts
 = 0u;

2325  (
time_max_˙ts
);

2326 
	}
}

	@UCOSIII/uC-CPU/cpu_core.h

49 #i‚de‡ 
CPU_CORE_MODULE_PRESENT


50 
	#CPU_CORE_MODULE_PRESENT


	)

59 #ifde‡ 
CPU_CORE_MODULE


60 
	#CPU_CORE_EXT


	)

62 
	#CPU_CORE_EXT
 

	)

103 
	~<˝u.h
>

104 
	~<lib_def.h
>

105 
	~<˝u_cfg.h
>

107 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

108 
	~<lib_mem.h
>

109 
	~<lib_°r.h
>

129 #ifde‡ 
CPU_CFG_TS_EN


130 #unde‡
CPU_CFG_TS_EN


134 #i‡ ((
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) || \

135 (
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
))

136 
	#CPU_CFG_TS_EN
 
DEF_ENABLED


	)

138 
	#CPU_CFG_TS_EN
 
DEF_DISABLED


	)

141 #i‡ ((
CPU_CFG_TS_EN
 =
DEF_ENABLED
) || \

142 (
	$deföed
(
CPU_CFG_INT_DIS_MEAS_EN
)))

143 
	#CPU_CFG_TS_TMR_EN
 
DEF_ENABLED


	)

145 
	#CPU_CFG_TS_TMR_EN
 
DEF_DISABLED


	)

155 
	#CPU_TIME_MEAS_NBR_MIN
 1u

	)

156 
	#CPU_TIME_MEAS_NBR_MAX
 128u

	)

172 
	e˝u_îr
 {

174 
CPU_ERR_NONE
 = 0u,

175 
CPU_ERR_NULL_PTR
 = 10u,

177 
CPU_ERR_NAME_SIZE
 = 1000u,

179 
CPU_ERR_TS_FREQ_INVALID
 = 2000u

181 } 
	tCPU_ERR
;

193 
CPU_INT32U
 
	tCPU_TS32
;

194 
CPU_INT64U
 
	tCPU_TS64
;

196 
CPU_TS32
 
	tCPU_TS
;

199 #i‡ (
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

200 #i‡ (
CPU_CFG_TS_TMR_SIZE
 =
CPU_WORD_SIZE_08
)

201 
CPU_INT08U
 
	tCPU_TS_TMR
;

202 #ñi‡ (
CPU_CFG_TS_TMR_SIZE
 =
CPU_WORD_SIZE_16
)

203 
CPU_INT16U
 
	tCPU_TS_TMR
;

204 #ñi‡ (
CPU_CFG_TS_TMR_SIZE
 =
CPU_WORD_SIZE_64
)

205 
CPU_INT64U
 
	tCPU_TS_TMR
;

207 
CPU_INT32U
 
	tCPU_TS_TMR
;

218 
CPU_INT32U
 
	tCPU_TS_TMR_FREQ
;

227 #i‡ (
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

228 
CPU_CORE_EXT
 
CPU_CHAR
 
CPU_Name
[
CPU_CFG_NAME_SIZE
];

232 #i‡((
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) && \

233 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
))

234 
CPU_CORE_EXT
 
CPU_TS32
 
CPU_TS_32_Accum
;

235 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_TS_32_TmrPªv
;

238 #i‡((
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
) && \

239 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_64
))

240 
CPU_CORE_EXT
 
CPU_TS64
 
CPU_TS_64_Accum
;

241 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_TS_64_TmrPªv
;

244 #i‡ (
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

245 
CPU_CORE_EXT
 
CPU_TS_TMR_FREQ
 
CPU_TS_TmrFªq_Hz
;

249 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


250 
CPU_CORE_EXT
 
CPU_INT16U
 
CPU_I¡DisMósCå
;

251 
CPU_CORE_EXT
 
CPU_INT16U
 
CPU_I¡DisNe°Cå
;

253 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_I¡DisMósSèπ_˙ts
;

254 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_I¡DisMósSt›_˙ts
;

255 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_I¡DisMósOvrhd_˙ts
;

256 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_I¡DisMósMaxCur_˙ts
;

257 
CPU_CORE_EXT
 
CPU_TS_TMR
 
CPU_I¡DisMósMax_˙ts
;

377 #i‚de‡ 
CPU_SW_EXCEPTION


378 
	#CPU_SW_EXCEPTION
(
îr_πn_vÆ
) do { \

379 
	`CPU_SW_Ex˚±i⁄
(); \

380 
	}
} 0)

	)

401 
	#CPU_VAL_UNUSED
(
vÆ
Ë(()&(vÆ));

	)

404 
	#CPU_VAL_IGNORED
(
vÆ
Ë
	`CPU_VAL_UNUSED
(vÆ)

	)

447 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

448 
	#CPU_TYPE_CREATE
(
ch¨_1
, 
ch¨_2
, 
ch¨_3
, 
ch¨_4
Ë(((
CPU_INT32U
)((
CPU_INT08U
)(ch¨_1)Ë<< (3u * 
DEF_OCTET_NBR_BITS
)) | \

449 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_2
)Ë<< (2u * 
DEF_OCTET_NBR_BITS
)) | \

450 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_3
)Ë<< (1u * 
DEF_OCTET_NBR_BITS
)) | \

451 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_4
)Ë<< (0u * 
DEF_OCTET_NBR_BITS
)))

	)

455 #i‡ ((
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_64
) || \

456 (
	gCPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
))

457 
	#CPU_TYPE_CREATE
(
ch¨_1
, 
ch¨_2
, 
ch¨_3
, 
ch¨_4
Ë(((
CPU_INT32U
)((
CPU_INT08U
)(ch¨_1)Ë<< (0u * 
DEF_OCTET_NBR_BITS
)) | \

458 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_2
)Ë<< (1u * 
DEF_OCTET_NBR_BITS
)) | \

459 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_3
)Ë<< (2u * 
DEF_OCTET_NBR_BITS
)) | \

460 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_4
)Ë<< (3u * 
DEF_OCTET_NBR_BITS
)))

	)

463 #ñi‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

464 
	#CPU_TYPE_CREATE
(
ch¨_1
, 
ch¨_2
, 
ch¨_3
, 
ch¨_4
Ë(((
CPU_INT32U
)((
CPU_INT08U
)(ch¨_1)Ë<< (2u * 
DEF_OCTET_NBR_BITS
)) | \

465 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_2
)Ë<< (3u * 
DEF_OCTET_NBR_BITS
)) | \

466 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_3
)Ë<< (0u * 
DEF_OCTET_NBR_BITS
)) | \

467 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_4
)Ë<< (1u * 
DEF_OCTET_NBR_BITS
)))

	)

470 
	#CPU_TYPE_CREATE
(
ch¨_1
, 
ch¨_2
, 
ch¨_3
, 
ch¨_4
Ë(((
CPU_INT32U
)((
CPU_INT08U
)(ch¨_1)Ë<< (3u * 
DEF_OCTET_NBR_BITS
)) | \

471 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_2
)Ë<< (2u * 
DEF_OCTET_NBR_BITS
)) | \

472 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_3
)Ë<< (1u * 
DEF_OCTET_NBR_BITS
)) | \

473 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_4
)Ë<< (0u * 
DEF_OCTET_NBR_BITS
)))

	)

503 
CPU_Inô
 ();

505 
CPU_SW_Ex˚±i⁄
 ();

509 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

510 
CPU_NameCÃ
 ();

512 
CPU_NameGë
 ( 
CPU_CHAR
 *
p_«me
,

513 
CPU_ERR
 *
p_îr
);

515 
CPU_NameSë
 (c⁄° 
CPU_CHAR
 *
p_«me
,

516 
CPU_ERR
 *
p_îr
);

522 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
)

523 
CPU_TS32
 
CPU_TS_Gë32
 ();

526 #i‡(
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
)

527 
CPU_TS64
 
CPU_TS_Gë64
 ();

530 #i‡(
CPU_CFG_TS_EN
 =
DEF_ENABLED
)

531 
CPU_TS_Upd©e
 ();

535 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

536 
CPU_TS_TMR_FREQ
 
CPU_TS_TmrFªqGë
 (
CPU_ERR
 *
p_îr
);

538 
CPU_TS_TmrFªqSë
 (
CPU_TS_TMR_FREQ
 
‰eq_hz
);

543 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


545 
CPU_TS_TMR
 
CPU_I¡DisMósMaxCurRe£t
();

547 
CPU_TS_TMR
 
CPU_I¡DisMósMaxCurGë
 ();

549 
CPU_TS_TMR
 
CPU_I¡DisMósMaxGë
 ();

552 
CPU_I¡DisMósSèπ
 ();

554 
CPU_I¡DisMósSt›
 ();

560 #ifde‡ 
CPU_CFG_LEAD_ZEROS_ASM_PRESENT


561 #ifde‡
__˝lu•lus


566 
CPU_DATA
 
CPU_C¡LódZîos
 (CPU_DATA 
vÆ
);

568 #ifde‡ 
CPU_CFG_LEAD_ZEROS_ASM_PRESENT


569 #ifde‡
__˝lu•lus


574 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_08
)

575 
CPU_DATA
 
CPU_C¡LódZîos08
 (
CPU_INT08U
 
vÆ
);

577 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_16
)

578 
CPU_DATA
 
CPU_C¡LódZîos16
 (
CPU_INT16U
 
vÆ
);

580 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_32
)

581 
CPU_DATA
 
CPU_C¡LódZîos32
 (
CPU_INT32U
 
vÆ
);

583 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_64
)

584 
CPU_DATA
 
CPU_C¡LódZîos64
 (
CPU_INT64U
 
vÆ
);

588 #ifde‡ 
CPU_CFG_LEAD_ZEROS_ASM_PRESENT


589 #ifde‡
__˝lu•lus


594 
CPU_DATA
 
CPU_C¡TøûZîos
 (CPU_DATA 
vÆ
);

596 #ifde‡ 
CPU_CFG_LEAD_ZEROS_ASM_PRESENT


597 #ifde‡
__˝lu•lus


602 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_08
)

603 
CPU_DATA
 
CPU_C¡TøûZîos08
 (
CPU_INT08U
 
vÆ
);

605 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_16
)

606 
CPU_DATA
 
CPU_C¡TøûZîos16
 (
CPU_INT16U
 
vÆ
);

608 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_32
)

609 
CPU_DATA
 
CPU_C¡TøûZîos32
 (
CPU_INT32U
 
vÆ
);

611 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_64
)

612 
CPU_DATA
 
CPU_C¡TøûZîos64
 (
CPU_INT64U
 
vÆ
);

675 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

676 
CPU_TS_TmrInô
();

762 #i‡(
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

763 
CPU_TS_TMR
 
CPU_TS_TmrRd
();

823 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
)

824 
CPU_INT64U
 
CPU_TS32_to_uSec
(
CPU_TS32
 
ts_˙ts
);

827 #i‡(
CPU_CFG_TS_64_EN
 =
DEF_ENABLED
)

828 
CPU_INT64U
 
CPU_TS64_to_uSec
(
CPU_TS64
 
ts_˙ts
);

838 #i‚de‡ 
CPU_CFG_NAME_EN


843 #ñi‡ ((
CPU_CFG_NAME_EN
 !
DEF_ENABLED
 ) && \

844 (
CPU_CFG_NAME_EN
 !
DEF_DISABLED
))

850 #ñi‡ (
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

852 #i‚de‡ 
CPU_CFG_NAME_SIZE


857 #ñi‡ (
DEF_CHK_VAL
(
CPU_CFG_NAME_SIZE
, \

859 
DEF_INT_08U_MAX_VAL
Ë!
DEF_OK
)

870 #i‚de‡ 
CPU_CFG_TS_32_EN


875 #ñi‡ ((
CPU_CFG_TS_32_EN
 !
DEF_DISABLED
) && \

876 (
CPU_CFG_TS_32_EN
 !
DEF_ENABLED
 ))

884 #i‚de‡ 
CPU_CFG_TS_64_EN


889 #ñi‡ ((
CPU_CFG_TS_64_EN
 !
DEF_DISABLED
) && \

890 (
CPU_CFG_TS_64_EN
 !
DEF_ENABLED
 ))

898 #i‚de‡ 
CPU_CFG_TS_EN


903 #ñi‡ ((
CPU_CFG_TS_EN
 !
DEF_DISABLED
) && \

904 (
CPU_CFG_TS_EN
 !
DEF_ENABLED
 ))

913 #i‚de‡ 
CPU_CFG_TS_TMR_EN


918 #ñi‡ ((
CPU_CFG_TS_TMR_EN
 !
DEF_DISABLED
) && \

919 (
CPU_CFG_TS_TMR_EN
 !
DEF_ENABLED
 ))

925 #ñi‡ (
CPU_CFG_TS_TMR_EN
 =
DEF_ENABLED
)

927 #i‚de‡ 
CPU_CFG_TS_TMR_SIZE


934 #ñi‡ ((
CPU_CFG_TS_TMR_SIZE
 !
CPU_WORD_SIZE_08
) && \

935 (
CPU_CFG_TS_TMR_SIZE
 !
CPU_WORD_SIZE_16
) && \

936 (
CPU_CFG_TS_TMR_SIZE
 !
CPU_WORD_SIZE_32
) && \

937 (
CPU_CFG_TS_TMR_SIZE
 !
CPU_WORD_SIZE_64
))

949 #i‚de‡ 
CPU_CFG_INT_DIS_MEAS_EN


956 #i‚de‡ 
CPU_CFG_INT_DIS_MEAS_OVRHD_NBR


961 #ñi‡ (
DEF_CHK_VAL
(
CPU_CFG_INT_DIS_MEAS_OVRHD_NBR
, \

962 
CPU_TIME_MEAS_NBR_MIN
, \

963 
CPU_TIME_MEAS_NBR_MAX
Ë!
DEF_OK
)

975 #i‚de‡ 
CPU_CFG_LEAD_ZEROS_ASM_PRESENT


982 #i‚de‡ 
CPU_CFG_TRAIL_ZEROS_ASM_PRESENT


995 #i‚de‡ 
CPU_CFG_ADDR_SIZE


999 #i‚de‡ 
CPU_CFG_DATA_SIZE


1003 #i‚de‡ 
CPU_CFG_DATA_SIZE_MAX


1015 #i‡ (
LIB_VERSION
 < 13500u)

	@UCOSIII/uC-CPU/cpu_def.h

43 #i‚de‡ 
CPU_DEF_MODULE_PRESENT


44 
	#CPU_DEF_MODULE_PRESENT


	)

74 
	#CPU_CORE_VERSION
 12902u

	)

98 
	#CPU_WORD_SIZE_08
 1

	)

99 
	#CPU_WORD_SIZE_16
 2

	)

100 
	#CPU_WORD_SIZE_32
 4

	)

101 
	#CPU_WORD_SIZE_64
 8

	)

105 
	#CPU_ENDIAN_TYPE_NONE
 0u

	)

106 
	#CPU_ENDIAN_TYPE_BIG
 1u

	)

107 
	#CPU_ENDIAN_TYPE_LITTLE
 2u

	)

124 
	#CPU_STK_GROWTH_NONE
 0u

	)

125 
	#CPU_STK_GROWTH_LO_TO_HI
 1u

	)

126 
	#CPU_STK_GROWTH_HI_TO_LO
 2u

	)

203 
	#CPU_CRITICAL_METHOD_NONE
 0u

	)

204 
	#CPU_CRITICAL_METHOD_INT_DIS_EN
 1u

	)

205 
	#CPU_CRITICAL_METHOD_STATUS_STK
 2u

	)

206 
	#CPU_CRITICAL_METHOD_STATUS_LOCAL
 3u

	)

	@UCOSIII/uC-LIB/lib_ascii.c

80 
	#MICRIUM_SOURCE


	)

81 
	#LIB_ASCII_MODULE


	)

82 
	~<lib_ascii.h
>

153 
CPU_BOOLEAN
 
	$ASCII_IsAÕha
 (
CPU_CHAR
 
c
)

155 
CPU_BOOLEAN
 
Æpha
;

158 
Æpha
 = 
	`ASCII_IS_ALPHA
(
c
);

160  (
Æpha
);

161 
	}
}

183 
CPU_BOOLEAN
 
	$ASCII_IsAÕhaNum
 (
CPU_CHAR
 
c
)

185 
CPU_BOOLEAN
 
Æpha_num
;

188 
Æpha_num
 = 
	`ASCII_IS_ALPHA_NUM
(
c
);

190  (
Æpha_num
);

191 
	}
}

213 
CPU_BOOLEAN
 
	$ASCII_IsLowî
 (
CPU_CHAR
 
c
)

215 
CPU_BOOLEAN
 
lowî
;

218 
lowî
 = 
	`ASCII_IS_LOWER
(
c
);

220  (
lowî
);

221 
	}
}

243 
CPU_BOOLEAN
 
	$ASCII_IsUµî
 (
CPU_CHAR
 
c
)

245 
CPU_BOOLEAN
 
uµî
;

248 
uµî
 = 
	`ASCII_IS_UPPER
(
c
);

250  (
uµî
);

251 
	}
}

273 
CPU_BOOLEAN
 
	$ASCII_IsDig
 (
CPU_CHAR
 
c
)

275 
CPU_BOOLEAN
 
dig
;

278 
dig
 = 
	`ASCII_IS_DIG
(
c
);

280  (
dig
);

281 
	}
}

302 
CPU_BOOLEAN
 
	$ASCII_IsDigO˘
 (
CPU_CHAR
 
c
)

304 
CPU_BOOLEAN
 
dig_o˘
;

307 
dig_o˘
 = 
	`ASCII_IS_DIG_OCT
(
c
);

309  (
dig_o˘
);

310 
	}
}

332 
CPU_BOOLEAN
 
	$ASCII_IsDigHex
 (
CPU_CHAR
 
c
)

334 
CPU_BOOLEAN
 
dig_hex
;

337 
dig_hex
 = 
	`ASCII_IS_DIG_HEX
(
c
);

339  (
dig_hex
);

340 
	}
}

365 
CPU_BOOLEAN
 
	$ASCII_IsBœnk
 (
CPU_CHAR
 
c
)

367 
CPU_BOOLEAN
 
bœnk
;

370 
bœnk
 = 
	`ASCII_IS_BLANK
(
c
);

372  (
bœnk
);

373 
	}
}

399 
CPU_BOOLEAN
 
	$ASCII_IsS∑˚
 (
CPU_CHAR
 
c
)

401 
CPU_BOOLEAN
 
•a˚
;

404 
•a˚
 = 
	`ASCII_IS_SPACE
(
c
);

406  (
•a˚
);

407 
	}
}

433 
CPU_BOOLEAN
 
	$ASCII_IsPröt
 (
CPU_CHAR
 
c
)

435 
CPU_BOOLEAN
 
¥öt
;

438 
¥öt
 = 
	`ASCII_IS_PRINT
(
c
);

440  (
¥öt
);

441 
	}
}

467 
CPU_BOOLEAN
 
	$ASCII_IsGøph
 (
CPU_CHAR
 
c
)

469 
CPU_BOOLEAN
 
gøph
;

472 
gøph
 = 
	`ASCII_IS_GRAPH
(
c
);

474  (
gøph
);

475 
	}
}

497 
CPU_BOOLEAN
 
	$ASCII_IsPun˘
 (
CPU_CHAR
 
c
)

499 
CPU_BOOLEAN
 
pun˘
;

502 
pun˘
 = 
	`ASCII_IS_PUNCT
(
c
);

504  (
pun˘
);

505 
	}
}

531 
CPU_BOOLEAN
 
	$ASCII_IsCål
 (
CPU_CHAR
 
c
)

533 
CPU_BOOLEAN
 
˘æ
;

536 
˘æ
 = 
	`ASCII_IS_CTRL
(
c
);

538  (
˘æ
);

539 
	}
}

569 
CPU_CHAR
 
	$ASCII_ToLowî
 (
CPU_CHAR
 
c
)

571 
CPU_CHAR
 
lowî
;

574 
lowî
 = 
	`ASCII_TO_LOWER
(
c
);

576  (
lowî
);

577 
	}
}

607 
CPU_CHAR
 
	$ASCII_ToUµî
 (
CPU_CHAR
 
c
)

609 
CPU_CHAR
 
uµî
;

612 
uµî
 = 
	`ASCII_TO_UPPER
(
c
);

614  (
uµî
);

615 
	}
}

638 
CPU_BOOLEAN
 
	$ASCII_Cmp
 (
CPU_CHAR
 
c1
,

639 
CPU_CHAR
 
c2
)

641 
CPU_CHAR
 
c1_uµî
;

642 
CPU_CHAR
 
c2_uµî
;

643 
CPU_BOOLEAN
 
cmp
;

646 
c1_uµî
 = 
	`ASCII_ToUµî
(
c1
);

647 
c2_uµî
 = 
	`ASCII_ToUµî
(
c2
);

648 
cmp
 = (
c1_uµî
 =
c2_uµî
Ë? (
DEF_YES
Ë: (
DEF_NO
);

650  (
cmp
);

651 
	}
}

	@UCOSIII/uC-LIB/lib_ascii.h

82 #i‚de‡ 
LIB_ASCII_MODULE_PRESENT


83 
	#LIB_ASCII_MODULE_PRESENT


	)

118 
	~<˝u.h
>

119 
	~<lib_def.h
>

128 #ifde‡ 
LIB_ASCII_MODULE


129 
	#LIB_ASCII_EXT


	)

131 
	#LIB_ASCII_EXT
 

	)

148 
	#ASCII_CHAR_NULL
 0x00

	)

149 
	#ASCII_CHAR_START_OF_HEADING
 0x01

	)

150 
	#ASCII_CHAR_START_OF_TEXT
 0x02

	)

151 
	#ASCII_CHAR_END_OF_TEXT
 0x03

	)

152 
	#ASCII_CHAR_END_OF_TRANSMISSION
 0x04

	)

153 
	#ASCII_CHAR_ENQUIRY
 0x05

	)

154 
	#ASCII_CHAR_ACKNOWLEDGE
 0x06

	)

155 
	#ASCII_CHAR_BELL
 0x07

	)

156 
	#ASCII_CHAR_BACKSPACE
 0x08

	)

157 
	#ASCII_CHAR_CHARACTER_TABULATION
 0x09

	)

158 
	#ASCII_CHAR_LINE_FEED
 0x0A

	)

159 
	#ASCII_CHAR_LINE_TABULATION
 0x0B

	)

160 
	#ASCII_CHAR_FORM_FEED
 0x0C

	)

161 
	#ASCII_CHAR_CARRIAGE_RETURN
 0x0D

	)

162 
	#ASCII_CHAR_SHIFT_OUT
 0x0E

	)

163 
	#ASCII_CHAR_SHIFT_IN
 0x0F

	)

164 
	#ASCII_CHAR_DATA_LINK_ESCAPE
 0x10

	)

165 
	#ASCII_CHAR_DEVICE_CONTROL_ONE
 0x11

	)

166 
	#ASCII_CHAR_DEVICE_CONTROL_TWO
 0x12

	)

167 
	#ASCII_CHAR_DEVICE_CONTROL_THREE
 0x13

	)

168 
	#ASCII_CHAR_DEVICE_CONTROL_FOUR
 0x14

	)

169 
	#ASCII_CHAR_NEGATIVE_ACKNOWLEDGE
 0x15

	)

170 
	#ASCII_CHAR_SYNCHRONOUS_IDLE
 0x16

	)

171 
	#ASCII_CHAR_END_OF_TRANSMISSION_BLOCK
 0x17

	)

172 
	#ASCII_CHAR_CANCEL
 0x18

	)

173 
	#ASCII_CHAR_END_OF_MEDIUM
 0x19

	)

174 
	#ASCII_CHAR_SUBSITUTE
 0x1A

	)

175 
	#ASCII_CHAR_ESCAPE
 0x1B

	)

176 
	#ASCII_CHAR_INFO_SEPARATOR_FOUR
 0x1C

	)

177 
	#ASCII_CHAR_INFO_SEPARATOR_THREE
 0x1D

	)

178 
	#ASCII_CHAR_INFO_SEPARATOR_TWO
 0x1E

	)

179 
	#ASCII_CHAR_INFO_SEPARATOR_ONE
 0x1F

	)

181 
	#ASCII_CHAR_NUL
 
ASCII_CHAR_NULL


	)

182 
	#ASCII_CHAR_SOH
 
ASCII_CHAR_START_OF_HEADING


	)

183 
	#ASCII_CHAR_START_HEADING
 
ASCII_CHAR_START_OF_HEADING


	)

184 
	#ASCII_CHAR_STX
 
ASCII_CHAR_START_OF_TEXT


	)

185 
	#ASCII_CHAR_START_TEXT
 
ASCII_CHAR_START_OF_TEXT


	)

186 
	#ASCII_CHAR_ETX
 
ASCII_CHAR_END_OF_TEXT


	)

187 
	#ASCII_CHAR_END_TEXT
 
ASCII_CHAR_END_OF_TEXT


	)

188 
	#ASCII_CHAR_EOT
 
ASCII_CHAR_END_OF_TRANSMISSION


	)

189 
	#ASCII_CHAR_END_TRANSMISSION
 
ASCII_CHAR_END_OF_TRANSMISSION


	)

190 
	#ASCII_CHAR_ENQ
 
ASCII_CHAR_ENQUIRY


	)

191 
	#ASCII_CHAR_ACK
 
ASCII_CHAR_ACKNOWLEDGE


	)

192 
	#ASCII_CHAR_BEL
 
ASCII_CHAR_BELL


	)

193 
	#ASCII_CHAR_BS
 
ASCII_CHAR_BACKSPACE


	)

194 
	#ASCII_CHAR_HT
 
ASCII_CHAR_CHARACTER_TABULATION


	)

195 
	#ASCII_CHAR_TAB
 
ASCII_CHAR_CHARACTER_TABULATION


	)

196 
	#ASCII_CHAR_LF
 
ASCII_CHAR_LINE_FEED


	)

197 
	#ASCII_CHAR_VT
 
ASCII_CHAR_LINE_TABULATION


	)

198 
	#ASCII_CHAR_FF
 
ASCII_CHAR_FORM_FEED


	)

199 
	#ASCII_CHAR_CR
 
ASCII_CHAR_CARRIAGE_RETURN


	)

200 
	#ASCII_CHAR_SO
 
ASCII_CHAR_SHIFT_OUT


	)

201 
	#ASCII_CHAR_SI
 
ASCII_CHAR_SHIFT_IN


	)

202 
	#ASCII_CHAR_DLE
 
ASCII_CHAR_DATA_LINK_ESCAPE


	)

203 
	#ASCII_CHAR_DC1
 
ASCII_CHAR_DEVICE_CONTROL_ONE


	)

204 
	#ASCII_CHAR_DC2
 
ASCII_CHAR_DEVICE_CONTROL_TWO


	)

205 
	#ASCII_CHAR_DC3
 
ASCII_CHAR_DEVICE_CONTROL_THREE


	)

206 
	#ASCII_CHAR_DC4
 
ASCII_CHAR_DEVICE_CONTROL_FOUR


	)

207 
	#ASCII_CHAR_DEV_CTRL_ONE
 
ASCII_CHAR_DEVICE_CONTROL_ONE


	)

208 
	#ASCII_CHAR_DEV_CTRL_TWO
 
ASCII_CHAR_DEVICE_CONTROL_TWO


	)

209 
	#ASCII_CHAR_DEV_CTRL_THREE
 
ASCII_CHAR_DEVICE_CONTROL_THREE


	)

210 
	#ASCII_CHAR_DEV_CTRL_FOUR
 
ASCII_CHAR_DEVICE_CONTROL_FOUR


	)

211 
	#ASCII_CHAR_NAK
 
ASCII_CHAR_NEGATIVE_ACKNOWLEDGE


	)

212 
	#ASCII_CHAR_NEG_ACK
 
ASCII_CHAR_NEGATIVE_ACKNOWLEDGE


	)

213 
	#ASCII_CHAR_SYN
 
ASCII_CHAR_SYNCHRONOUS_IDLE


	)

214 
	#ASCII_CHAR_SYNC_IDLE
 
ASCII_CHAR_SYNCHRONOUS_IDLE


	)

215 
	#ASCII_CHAR_ETB
 
ASCII_CHAR_END_OF_TRANSMISSION_BLOCK


	)

216 
	#ASCII_CHAR_END_TRANSMISSION_BLK
 
ASCII_CHAR_END_OF_TRANSMISSION_BLOCK


	)

217 
	#ASCII_CHAR_CAN
 
ASCII_CHAR_CANCEL


	)

218 
	#ASCII_CHAR_EM
 
ASCII_CHAR_END_OF_MEDIUM


	)

219 
	#ASCII_CHAR_END_MEDIUM
 
ASCII_CHAR_END_OF_MEDIUM


	)

220 
	#ASCII_CHAR_SUB
 
ASCII_CHAR_SUBSITUTE


	)

221 
	#ASCII_CHAR_ESC
 
ASCII_CHAR_ESCAPE


	)

222 
	#ASCII_CHAR_IS1
 
ASCII_CHAR_INFO_SEPARATOR_ONE


	)

223 
	#ASCII_CHAR_IS2
 
ASCII_CHAR_INFO_SEPARATOR_TWO


	)

224 
	#ASCII_CHAR_IS3
 
ASCII_CHAR_INFO_SEPARATOR_THREE


	)

225 
	#ASCII_CHAR_IS4
 
ASCII_CHAR_INFO_SEPARATOR_FOUR


	)

229 
	#ASCII_CHAR_SPACE
 0x20

	)

230 
	#ASCII_CHAR_EXCLAMATION_MARK
 0x21

	)

231 
	#ASCII_CHAR_QUOTATION_MARK
 0x22

	)

232 
	#ASCII_CHAR_NUMBER_SIGN
 0x23

	)

233 
	#ASCII_CHAR_DOLLAR_SIGN
 0x24

	)

234 
	#ASCII_CHAR_PERCENTAGE_SIGN
 0x25

	)

235 
	#ASCII_CHAR_AMPERSAND
 0x26

	)

236 
	#ASCII_CHAR_APOSTROPHE
 0x27

	)

237 
	#ASCII_CHAR_LEFT_PARENTHESIS
 0x28

	)

238 
	#ASCII_CHAR_RIGHT_PARENTHESIS
 0x29

	)

239 
	#ASCII_CHAR_ASTERISK
 0x2A

	)

240 
	#ASCII_CHAR_PLUS_SIGN
 0x2B

	)

241 
	#ASCII_CHAR_COMMA
 0x2C

	)

242 
	#ASCII_CHAR_HYPHEN_MINUS
 0x2D

	)

243 
	#ASCII_CHAR_FULL_STOP
 0x2E

	)

244 
	#ASCII_CHAR_SOLIDUS
 0x2F

	)

246 
	#ASCII_CHAR_PAREN_LEFT
 
ASCII_CHAR_LEFT_PARENTHESIS


	)

247 
	#ASCII_CHAR_PAREN_RIGHT
 
ASCII_CHAR_RIGHT_PARENTHESIS


	)

251 
	#ASCII_CHAR_DIGIT_ZERO
 0x30

	)

252 
	#ASCII_CHAR_DIGIT_ONE
 0x31

	)

253 
	#ASCII_CHAR_DIGIT_TWO
 0x32

	)

254 
	#ASCII_CHAR_DIGIT_THREE
 0x33

	)

255 
	#ASCII_CHAR_DIGIT_FOUR
 0x34

	)

256 
	#ASCII_CHAR_DIGIT_FIVE
 0x35

	)

257 
	#ASCII_CHAR_DIGIT_SIX
 0x36

	)

258 
	#ASCII_CHAR_DIGIT_SEVEN
 0x37

	)

259 
	#ASCII_CHAR_DIGIT_EIGHT
 0x38

	)

260 
	#ASCII_CHAR_DIGIT_NINE
 0x39

	)

262 
	#ASCII_CHAR_DIG_ZERO
 
ASCII_CHAR_DIGIT_ZERO


	)

263 
	#ASCII_CHAR_DIG_ONE
 
ASCII_CHAR_DIGIT_ONE


	)

264 
	#ASCII_CHAR_DIG_TWO
 
ASCII_CHAR_DIGIT_TWO


	)

265 
	#ASCII_CHAR_DIG_THREE
 
ASCII_CHAR_DIGIT_THREE


	)

266 
	#ASCII_CHAR_DIG_FOUR
 
ASCII_CHAR_DIGIT_FOUR


	)

267 
	#ASCII_CHAR_DIG_FIVE
 
ASCII_CHAR_DIGIT_FIVE


	)

268 
	#ASCII_CHAR_DIG_SIX
 
ASCII_CHAR_DIGIT_SIX


	)

269 
	#ASCII_CHAR_DIG_SEVEN
 
ASCII_CHAR_DIGIT_SEVEN


	)

270 
	#ASCII_CHAR_DIG_EIGHT
 
ASCII_CHAR_DIGIT_EIGHT


	)

271 
	#ASCII_CHAR_DIG_NINE
 
ASCII_CHAR_DIGIT_NINE


	)

275 
	#ASCII_CHAR_COLON
 0x3A

	)

276 
	#ASCII_CHAR_SEMICOLON
 0x3B

	)

277 
	#ASCII_CHAR_LESS_THAN_SIGN
 0x3C

	)

278 
	#ASCII_CHAR_EQUALS_SIGN
 0x3D

	)

279 
	#ASCII_CHAR_GREATER_THAN_SIGN
 0x3E

	)

280 
	#ASCII_CHAR_QUESTION_MARK
 0x3F

	)

281 
	#ASCII_CHAR_COMMERCIAL_AT
 0x40

	)

283 
	#ASCII_CHAR_AT_SIGN
 
ASCII_CHAR_COMMERCIAL_AT


	)

287 
	#ASCII_CHAR_LATIN_UPPER_A
 0x41

	)

288 
	#ASCII_CHAR_LATIN_UPPER_B
 0x42

	)

289 
	#ASCII_CHAR_LATIN_UPPER_C
 0x43

	)

290 
	#ASCII_CHAR_LATIN_UPPER_D
 0x44

	)

291 
	#ASCII_CHAR_LATIN_UPPER_E
 0x45

	)

292 
	#ASCII_CHAR_LATIN_UPPER_F
 0x46

	)

293 
	#ASCII_CHAR_LATIN_UPPER_G
 0x47

	)

294 
	#ASCII_CHAR_LATIN_UPPER_H
 0x48

	)

295 
	#ASCII_CHAR_LATIN_UPPER_I
 0x49

	)

296 
	#ASCII_CHAR_LATIN_UPPER_J
 0x4A

	)

297 
	#ASCII_CHAR_LATIN_UPPER_K
 0x4B

	)

298 
	#ASCII_CHAR_LATIN_UPPER_L
 0x4C

	)

299 
	#ASCII_CHAR_LATIN_UPPER_M
 0x4D

	)

300 
	#ASCII_CHAR_LATIN_UPPER_N
 0x4E

	)

301 
	#ASCII_CHAR_LATIN_UPPER_O
 0x4F

	)

302 
	#ASCII_CHAR_LATIN_UPPER_P
 0x50

	)

303 
	#ASCII_CHAR_LATIN_UPPER_Q
 0x51

	)

304 
	#ASCII_CHAR_LATIN_UPPER_R
 0x52

	)

305 
	#ASCII_CHAR_LATIN_UPPER_S
 0x53

	)

306 
	#ASCII_CHAR_LATIN_UPPER_T
 0x54

	)

307 
	#ASCII_CHAR_LATIN_UPPER_U
 0x55

	)

308 
	#ASCII_CHAR_LATIN_UPPER_V
 0x56

	)

309 
	#ASCII_CHAR_LATIN_UPPER_W
 0x57

	)

310 
	#ASCII_CHAR_LATIN_UPPER_X
 0x58

	)

311 
	#ASCII_CHAR_LATIN_UPPER_Y
 0x59

	)

312 
	#ASCII_CHAR_LATIN_UPPER_Z
 0x5A

	)

316 
	#ASCII_CHAR_LEFT_SQUARE_BRACKET
 0x5B

	)

317 
	#ASCII_CHAR_REVERSE_SOLIDUS
 0x5C

	)

318 
	#ASCII_CHAR_RIGHT_SQUARE_BRACKET
 0x5D

	)

319 
	#ASCII_CHAR_CIRCUMFLEX_ACCENT
 0x5E

	)

320 
	#ASCII_CHAR_LOW_LINE
 0x5F

	)

321 
	#ASCII_CHAR_GRAVE_ACCENT
 0x60

	)

323 
	#ASCII_CHAR_BRACKET_SQUARE_LEFT
 
ASCII_CHAR_LEFT_SQUARE_BRACKET


	)

324 
	#ASCII_CHAR_BRACKET_SQUARE_RIGHT
 
ASCII_CHAR_RIGHT_SQUARE_BRACKET


	)

328 
	#ASCII_CHAR_LATIN_LOWER_A
 0x61

	)

329 
	#ASCII_CHAR_LATIN_LOWER_B
 0x62

	)

330 
	#ASCII_CHAR_LATIN_LOWER_C
 0x63

	)

331 
	#ASCII_CHAR_LATIN_LOWER_D
 0x64

	)

332 
	#ASCII_CHAR_LATIN_LOWER_E
 0x65

	)

333 
	#ASCII_CHAR_LATIN_LOWER_F
 0x66

	)

334 
	#ASCII_CHAR_LATIN_LOWER_G
 0x67

	)

335 
	#ASCII_CHAR_LATIN_LOWER_H
 0x68

	)

336 
	#ASCII_CHAR_LATIN_LOWER_I
 0x69

	)

337 
	#ASCII_CHAR_LATIN_LOWER_J
 0x6A

	)

338 
	#ASCII_CHAR_LATIN_LOWER_K
 0x6B

	)

339 
	#ASCII_CHAR_LATIN_LOWER_L
 0x6C

	)

340 
	#ASCII_CHAR_LATIN_LOWER_M
 0x6D

	)

341 
	#ASCII_CHAR_LATIN_LOWER_N
 0x6E

	)

342 
	#ASCII_CHAR_LATIN_LOWER_O
 0x6F

	)

343 
	#ASCII_CHAR_LATIN_LOWER_P
 0x70

	)

344 
	#ASCII_CHAR_LATIN_LOWER_Q
 0x71

	)

345 
	#ASCII_CHAR_LATIN_LOWER_R
 0x72

	)

346 
	#ASCII_CHAR_LATIN_LOWER_S
 0x73

	)

347 
	#ASCII_CHAR_LATIN_LOWER_T
 0x74

	)

348 
	#ASCII_CHAR_LATIN_LOWER_U
 0x75

	)

349 
	#ASCII_CHAR_LATIN_LOWER_V
 0x76

	)

350 
	#ASCII_CHAR_LATIN_LOWER_W
 0x77

	)

351 
	#ASCII_CHAR_LATIN_LOWER_X
 0x78

	)

352 
	#ASCII_CHAR_LATIN_LOWER_Y
 0x79

	)

353 
	#ASCII_CHAR_LATIN_LOWER_Z
 0x7A

	)

357 
	#ASCII_CHAR_LEFT_CURLY_BRACKET
 0x7B

	)

358 
	#ASCII_CHAR_VERTICAL_LINE
 0x7C

	)

359 
	#ASCII_CHAR_RIGHT_CURLY_BRACKET
 0x7D

	)

360 
	#ASCII_CHAR_TILDE
 0x7E

	)

362 
	#ASCII_CHAR_BRACKET_CURLY_LEFT
 
ASCII_CHAR_LEFT_CURLY_BRACKET


	)

363 
	#ASCII_CHAR_BRACKET_CURLY_RIGHT
 
ASCII_CHAR_RIGHT_CURLY_BRACKET


	)

367 
	#ASCII_CHAR_DELETE
 0x7F

	)

369 
	#ASCII_CHAR_DEL
 
ASCII_CHAR_DELETE


	)

421 
	#ASCII_IS_DIG
(
c
Ë((((cË>
ASCII_CHAR_DIG_ZERO
Ë&& ((cË<
ASCII_CHAR_DIG_NINE
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

442 
	#ASCII_IS_DIG_OCT
(
c
Ë((((cË>
ASCII_CHAR_DIG_ZERO
Ë&& ((cË<
ASCII_CHAR_DIG_SEVEN
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

464 
	#ASCII_IS_DIG_HEX
(
c
Ë(((((cË>
ASCII_CHAR_DIG_ZERO
 ) && ((cË<
ASCII_CHAR_DIG_NINE
 )) || \

465 (((
c
Ë>
ASCII_CHAR_LATIN_UPPER_A
Ë&& ((cË<
ASCII_CHAR_LATIN_UPPER_F
)) || \

466 (((
c
Ë>
ASCII_CHAR_LATIN_LOWER_A
Ë&& ((cË<
ASCII_CHAR_LATIN_LOWER_F
))Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

488 
	#ASCII_IS_LOWER
(
c
Ë((((cË>
ASCII_CHAR_LATIN_LOWER_A
Ë&& ((cË<
ASCII_CHAR_LATIN_LOWER_Z
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

510 
	#ASCII_IS_UPPER
(
c
Ë((((cË>
ASCII_CHAR_LATIN_UPPER_A
Ë&& ((cË<
ASCII_CHAR_LATIN_UPPER_Z
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

532 
	#ASCII_IS_ALPHA
(
c
Ë((((
	`ASCII_IS_UPPER
(c)Ë=
DEF_YES
) || \

533 ((
	`ASCII_IS_LOWER
(
c
)Ë=
DEF_YES
)Ë? (DEF_YESË: (
DEF_NO
))

	)

555 
	#ASCII_IS_ALPHA_NUM
(
c
Ë((((
	`ASCII_IS_ALPHA
(c)Ë=
DEF_YES
) || \

556 ((
	`ASCII_IS_DIG
 (
c
)Ë=
DEF_YES
)Ë? (DEF_YESË: (
DEF_NO
))

	)

581 
	#ASCII_IS_BLANK
(
c
Ë((((cË=
ASCII_CHAR_SPACE
Ë|| ((cË=
ASCII_CHAR_HT
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

607 
	#ASCII_IS_SPACE
(
c
Ë((((cË=
ASCII_CHAR_SPACE
Ë|| ((cË=
ASCII_CHAR_CR
) || \

608 ((
c
Ë=
ASCII_CHAR_LF
 ) || ((cË=
ASCII_CHAR_FF
) || \

609 ((
c
Ë=
ASCII_CHAR_HT
 ) || ((cË=
ASCII_CHAR_VT
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

635 
	#ASCII_IS_PRINT
(
c
Ë((((cË>
ASCII_CHAR_SPACE
Ë&& ((cË<
ASCII_CHAR_TILDE
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

661 
	#ASCII_IS_GRAPH
(
c
Ë((((cË>
ASCII_CHAR_EXCLAMATION_MARK
Ë&& ((cË<
ASCII_CHAR_TILDE
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

683 
	#ASCII_IS_PUNCT
(
c
Ë((((
	`ASCII_IS_PRINT
(c)Ë=
DEF_YES
) && \

684 ((
	`ASCII_IS_SPACE
(
c
)Ë=
DEF_NO
 ) && \

685 ((
	`ASCII_IS_ALPHA_NUM
(
c
)Ë=
DEF_NO
 )Ë? (
DEF_YES
Ë: (DEF_NO))

	)

711 
	#ASCII_IS_CTRL
(
c
Ë(((((
CPU_INT08S
)(cË>
ASCII_CHAR_NULL
 ) && ((cË<
ASCII_CHAR_IS1
)) || \

712 ((
c
Ë=
ASCII_CHAR_DEL
)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

748 
	#ASCII_TO_LOWER
(
c
Ë(((
	`ASCII_IS_UPPER
(c)Ë=
DEF_YES
Ë? ((cË+ (
ASCII_CHAR_LATIN_LOWER_A
 - 
ASCII_CHAR_LATIN_UPPER_A
)Ë: (c))

	)

778 
	#ASCII_TO_UPPER
(
c
Ë(((
	`ASCII_IS_LOWER
(c)Ë=
DEF_YES
Ë? ((cË- (
ASCII_CHAR_LATIN_LOWER_A
 - 
ASCII_CHAR_LATIN_UPPER_A
)Ë: (c))

	)

787 
CPU_BOOLEAN
 
ASCII_IsAÕha
 (
CPU_CHAR
 
c
);

789 
CPU_BOOLEAN
 
ASCII_IsAÕhaNum
(
CPU_CHAR
 
c
);

791 
CPU_BOOLEAN
 
ASCII_IsLowî
 (
CPU_CHAR
 
c
);

793 
CPU_BOOLEAN
 
ASCII_IsUµî
 (
CPU_CHAR
 
c
);

795 
CPU_BOOLEAN
 
ASCII_IsDig
 (
CPU_CHAR
 
c
);

797 
CPU_BOOLEAN
 
ASCII_IsDigO˘
 (
CPU_CHAR
 
c
);

799 
CPU_BOOLEAN
 
ASCII_IsDigHex
 (
CPU_CHAR
 
c
);

801 
CPU_BOOLEAN
 
ASCII_IsBœnk
 (
CPU_CHAR
 
c
);

803 
CPU_BOOLEAN
 
ASCII_IsS∑˚
 (
CPU_CHAR
 
c
);

805 
CPU_BOOLEAN
 
ASCII_IsPröt
 (
CPU_CHAR
 
c
);

807 
CPU_BOOLEAN
 
ASCII_IsGøph
 (
CPU_CHAR
 
c
);

809 
CPU_BOOLEAN
 
ASCII_IsPun˘
 (
CPU_CHAR
 
c
);

811 
CPU_BOOLEAN
 
ASCII_IsCål
 (
CPU_CHAR
 
c
);

814 
CPU_CHAR
 
ASCII_ToLowî
 (CPU_CHAR 
c
);

816 
CPU_CHAR
 
ASCII_ToUµî
 (CPU_CHAR 
c
);

819 
CPU_BOOLEAN
 
ASCII_Cmp
 (
CPU_CHAR
 
c1
,

820 
CPU_CHAR
 
c2
);

	@UCOSIII/uC-LIB/lib_def.h

66 #i‚de‡ 
LIB_DEF_MODULE_PRESENT


67 
	#LIB_DEF_MODULE_PRESENT


	)

97 
	#LIB_VERSION
 13702u

	)

130 
	~<˝u_def.h
>

131 
	~<˝u.h
>

140 
	#DEF_NULL
 0

	)

144 
	#DEF_FALSE
 0u

	)

145 
	#DEF_TRUE
 1u

	)

147 
	#DEF_NO
 0u

	)

148 
	#DEF_YES
 1u

	)

150 
	#DEF_DISABLED
 0u

	)

151 
	#DEF_ENABLED
 1u

	)

153 
	#DEF_INACTIVE
 0u

	)

154 
	#DEF_ACTIVE
 1u

	)

156 
	#DEF_INVALID
 0u

	)

157 
	#DEF_VALID
 1u

	)

159 
	#DEF_OFF
 0u

	)

160 
	#DEF_ON
 1u

	)

162 
	#DEF_CLR
 0u

	)

163 
	#DEF_SET
 1u

	)

165 
	#DEF_FAIL
 0u

	)

166 
	#DEF_OK
 1u

	)

170 
	#DEF_BIT_NONE
 0x00u

	)

172 
	#DEF_BIT_00
 0x01u

	)

173 
	#DEF_BIT_01
 0x02u

	)

174 
	#DEF_BIT_02
 0x04u

	)

175 
	#DEF_BIT_03
 0x08u

	)

176 
	#DEF_BIT_04
 0x10u

	)

177 
	#DEF_BIT_05
 0x20u

	)

178 
	#DEF_BIT_06
 0x40u

	)

179 
	#DEF_BIT_07
 0x80u

	)

181 
	#DEF_BIT_08
 0x0100u

	)

182 
	#DEF_BIT_09
 0x0200u

	)

183 
	#DEF_BIT_10
 0x0400u

	)

184 
	#DEF_BIT_11
 0x0800u

	)

185 
	#DEF_BIT_12
 0x1000u

	)

186 
	#DEF_BIT_13
 0x2000u

	)

187 
	#DEF_BIT_14
 0x4000u

	)

188 
	#DEF_BIT_15
 0x8000u

	)

190 
	#DEF_BIT_16
 0x00010000u

	)

191 
	#DEF_BIT_17
 0x00020000u

	)

192 
	#DEF_BIT_18
 0x00040000u

	)

193 
	#DEF_BIT_19
 0x00080000u

	)

194 
	#DEF_BIT_20
 0x00100000u

	)

195 
	#DEF_BIT_21
 0x00200000u

	)

196 
	#DEF_BIT_22
 0x00400000u

	)

197 
	#DEF_BIT_23
 0x00800000u

	)

199 
	#DEF_BIT_24
 0x01000000u

	)

200 
	#DEF_BIT_25
 0x02000000u

	)

201 
	#DEF_BIT_26
 0x04000000u

	)

202 
	#DEF_BIT_27
 0x08000000u

	)

203 
	#DEF_BIT_28
 0x10000000u

	)

204 
	#DEF_BIT_29
 0x20000000u

	)

205 
	#DEF_BIT_30
 0x40000000u

	)

206 
	#DEF_BIT_31
 0x80000000u

	)

207 
	#DEF_BIT_32
 0x0000000100000000u

	)

208 
	#DEF_BIT_33
 0x0000000200000000u

	)

209 
	#DEF_BIT_34
 0x0000000400000000u

	)

210 
	#DEF_BIT_35
 0x0000000800000000u

	)

211 
	#DEF_BIT_36
 0x0000001000000000u

	)

212 
	#DEF_BIT_37
 0x0000002000000000u

	)

213 
	#DEF_BIT_38
 0x0000004000000000u

	)

214 
	#DEF_BIT_39
 0x0000008000000000u

	)

216 
	#DEF_BIT_40
 0x0000010000000000u

	)

217 
	#DEF_BIT_41
 0x0000020000000000u

	)

218 
	#DEF_BIT_42
 0x0000040000000000u

	)

219 
	#DEF_BIT_43
 0x0000080000000000u

	)

220 
	#DEF_BIT_44
 0x0000100000000000u

	)

221 
	#DEF_BIT_45
 0x0000200000000000u

	)

222 
	#DEF_BIT_46
 0x0000400000000000u

	)

223 
	#DEF_BIT_47
 0x0000800000000000u

	)

225 
	#DEF_BIT_48
 0x0001000000000000u

	)

226 
	#DEF_BIT_49
 0x0002000000000000u

	)

227 
	#DEF_BIT_50
 0x0004000000000000u

	)

228 
	#DEF_BIT_51
 0x0008000000000000u

	)

229 
	#DEF_BIT_52
 0x0010000000000000u

	)

230 
	#DEF_BIT_53
 0x0020000000000000u

	)

231 
	#DEF_BIT_54
 0x0040000000000000u

	)

232 
	#DEF_BIT_55
 0x0080000000000000u

	)

234 
	#DEF_BIT_56
 0x0100000000000000u

	)

235 
	#DEF_BIT_57
 0x0200000000000000u

	)

236 
	#DEF_BIT_58
 0x0400000000000000u

	)

237 
	#DEF_BIT_59
 0x0800000000000000u

	)

238 
	#DEF_BIT_60
 0x1000000000000000u

	)

239 
	#DEF_BIT_61
 0x2000000000000000u

	)

240 
	#DEF_BIT_62
 0x4000000000000000u

	)

241 
	#DEF_BIT_63
 0x8000000000000000u

	)

245 
	#DEF_ALIGN_MAX_NBR_OCTETS
 4096u

	)

249 
	#DEF_OCTET_NBR_BITS
 8u

	)

250 
	#DEF_OCTET_MASK
 0xFFu

	)

252 
	#DEF_OCTET_TO_BIT_NBR_BITS
 3u

	)

253 
	#DEF_OCTET_TO_BIT_SHIFT
 
DEF_OCTET_TO_BIT_NBR_BITS


	)

254 
	#DEF_OCTET_TO_BIT_MASK
 0x07u

	)

257 
	#DEF_NIBBLE_NBR_BITS
 4u

	)

258 
	#DEF_NIBBLE_MASK
 0x0Fu

	)

262 
	#DEF_NBR_BASE_BIN
 2u

	)

263 
	#DEF_NBR_BASE_OCT
 8u

	)

264 
	#DEF_NBR_BASE_DEC
 10u

	)

265 
	#DEF_NBR_BASE_HEX
 16u

	)

269 
	#DEF_INT_08_NBR_BITS
 8u

	)

270 
	#DEF_INT_08_MASK
 0xFFu

	)

272 
	#DEF_INT_08U_MIN_VAL
 0u

	)

273 
	#DEF_INT_08U_MAX_VAL
 255u

	)

275 
	#DEF_INT_08S_MIN_VAL_ONES_CPL
 (-127)

	)

276 
	#DEF_INT_08S_MAX_VAL_ONES_CPL
 127

	)

278 
	#DEF_INT_08S_MIN_VAL
 (
DEF_INT_08S_MIN_VAL_ONES_CPL
 - 1)

	)

279 
	#DEF_INT_08S_MAX_VAL
 
DEF_INT_08S_MAX_VAL_ONES_CPL


	)

281 
	#DEF_INT_08U_NBR_DIG_MIN
 1u

	)

282 
	#DEF_INT_08U_NBR_DIG_MAX
 3u

	)

284 
	#DEF_INT_08S_NBR_DIG_MIN
 3u

	)

285 
	#DEF_INT_08S_NBR_DIG_MAX
 3u

	)

289 
	#DEF_INT_16_NBR_BITS
 16u

	)

290 
	#DEF_INT_16_MASK
 0xFFFFu

	)

292 
	#DEF_INT_16U_MIN_VAL
 0u

	)

293 
	#DEF_INT_16U_MAX_VAL
 65535u

	)

295 
	#DEF_INT_16S_MIN_VAL_ONES_CPL
 (-32767)

	)

296 
	#DEF_INT_16S_MAX_VAL_ONES_CPL
 32767

	)

298 
	#DEF_INT_16S_MIN_VAL
 (
DEF_INT_16S_MIN_VAL_ONES_CPL
 - 1)

	)

299 
	#DEF_INT_16S_MAX_VAL
 
DEF_INT_16S_MAX_VAL_ONES_CPL


	)

301 
	#DEF_INT_16U_NBR_DIG_MIN
 1u

	)

302 
	#DEF_INT_16U_NBR_DIG_MAX
 5u

	)

304 
	#DEF_INT_16S_NBR_DIG_MIN
 5u

	)

305 
	#DEF_INT_16S_NBR_DIG_MAX
 5u

	)

309 
	#DEF_INT_32_NBR_BITS
 32u

	)

310 
	#DEF_INT_32_MASK
 0xFFFFFFFFu

	)

312 
	#DEF_INT_32U_MIN_VAL
 0u

	)

313 
	#DEF_INT_32U_MAX_VAL
 4294967295u

	)

315 
	#DEF_INT_32S_MIN_VAL_ONES_CPL
 (-2147483647)

	)

316 
	#DEF_INT_32S_MAX_VAL_ONES_CPL
 2147483647

	)

318 
	#DEF_INT_32S_MIN_VAL
 (
DEF_INT_32S_MIN_VAL_ONES_CPL
 - 1)

	)

319 
	#DEF_INT_32S_MAX_VAL
 
DEF_INT_32S_MAX_VAL_ONES_CPL


	)

321 
	#DEF_INT_32U_NBR_DIG_MIN
 1u

	)

322 
	#DEF_INT_32U_NBR_DIG_MAX
 10u

	)

324 
	#DEF_INT_32S_NBR_DIG_MIN
 10u

	)

325 
	#DEF_INT_32S_NBR_DIG_MAX
 10u

	)

329 
	#DEF_INT_64_NBR_BITS
 64u

	)

330 
	#DEF_INT_64_MASK
 0xFFFFFFFFFFFFFFFFu

	)

332 
	#DEF_INT_64U_MIN_VAL
 0u

	)

333 
	#DEF_INT_64U_MAX_VAL
 18446744073709551615u

	)

335 
	#DEF_INT_64S_MIN_VAL_ONES_CPL
 (-9223372036854775807)

	)

336 
	#DEF_INT_64S_MAX_VAL_ONES_CPL
 9223372036854775807

	)

338 
	#DEF_INT_64S_MIN_VAL
 (
DEF_INT_64S_MIN_VAL_ONES_CPL
 - 1)

	)

339 
	#DEF_INT_64S_MAX_VAL
 
DEF_INT_64S_MAX_VAL_ONES_CPL


	)

341 
	#DEF_INT_64U_NBR_DIG_MIN
 1u

	)

342 
	#DEF_INT_64U_NBR_DIG_MAX
 20u

	)

344 
	#DEF_INT_64S_NBR_DIG_MIN
 19u

	)

345 
	#DEF_INT_64S_NBR_DIG_MAX
 19u

	)

349 
	#DEF_INT_CPU_NBR_BITS
 (
CPU_CFG_DATA_SIZE
 * 
DEF_OCTET_NBR_BITS
)

	)

350 
	#DEF_INT_CPU_NBR_BITS_MAX
 (
CPU_CFG_DATA_SIZE_MAX
 * 
DEF_OCTET_NBR_BITS
)

	)

354 #i‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_08_NBR_BITS
)

357 
	#DEF_INT_CPU_MASK
 
DEF_INT_08_MASK


	)

359 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_08U_MIN_VAL


	)

360 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_08U_MAX_VAL


	)

362 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_08S_MIN_VAL


	)

363 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_08S_MAX_VAL


	)

365 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_08S_MIN_VAL_ONES_CPL


	)

366 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_08S_MAX_VAL_ONES_CPL


	)

370 #ñi‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_16_NBR_BITS
)

373 
	#DEF_INT_CPU_MASK
 
DEF_INT_16_MASK


	)

375 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_16U_MIN_VAL


	)

376 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_16U_MAX_VAL


	)

378 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_16S_MIN_VAL


	)

379 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_16S_MAX_VAL


	)

381 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_16S_MIN_VAL_ONES_CPL


	)

382 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_16S_MAX_VAL_ONES_CPL


	)

386 #ñi‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_32_NBR_BITS
)

389 
	#DEF_INT_CPU_MASK
 
DEF_INT_32_MASK


	)

391 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_32U_MIN_VAL


	)

392 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_32U_MAX_VAL


	)

394 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_32S_MIN_VAL


	)

395 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_32S_MAX_VAL


	)

397 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_32S_MIN_VAL_ONES_CPL


	)

398 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_32S_MAX_VAL_ONES_CPL


	)

402 #ñi‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_64_NBR_BITS
)

405 
	#DEF_INT_CPU_MASK
 
DEF_INT_64_MASK


	)

407 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_64U_MIN_VAL


	)

408 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_64U_MAX_VAL


	)

410 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_64S_MIN_VAL


	)

411 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_64S_MAX_VAL


	)

413 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_64S_MIN_VAL_ONES_CPL


	)

414 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_64S_MAX_VAL_ONES_CPL


	)

427 
	#DEF_TIME_NBR_DAY_PER_WK
 7u

	)

428 
	#DEF_TIME_NBR_DAY_PER_YR
 365u

	)

429 
	#DEF_TIME_NBR_DAY_PER_YR_LEAP
 366u

	)

431 
	#DEF_TIME_NBR_HR_PER_DAY
 24u

	)

432 
	#DEF_TIME_NBR_HR_PER_WK
 (
DEF_TIME_NBR_HR_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_WK
 )

	)

433 
	#DEF_TIME_NBR_HR_PER_YR
 (
DEF_TIME_NBR_HR_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_YR
 )

	)

434 
	#DEF_TIME_NBR_HR_PER_YR_LEAP
 (
DEF_TIME_NBR_HR_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_YR_LEAP
)

	)

436 
	#DEF_TIME_NBR_MIN_PER_HR
 60u

	)

437 
	#DEF_TIME_NBR_MIN_PER_DAY
 (
DEF_TIME_NBR_MIN_PER_HR
 * 
DEF_TIME_NBR_HR_PER_DAY
 )

	)

438 
	#DEF_TIME_NBR_MIN_PER_WK
 (
DEF_TIME_NBR_MIN_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_WK
 )

	)

439 
	#DEF_TIME_NBR_MIN_PER_YR
 (
DEF_TIME_NBR_MIN_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_YR
 )

	)

440 
	#DEF_TIME_NBR_MIN_PER_YR_LEAP
 (
DEF_TIME_NBR_MIN_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_YR_LEAP
)

	)

442 
	#DEF_TIME_NBR_SEC_PER_MIN
 60u

	)

443 
	#DEF_TIME_NBR_SEC_PER_HR
 (
DEF_TIME_NBR_SEC_PER_MIN
 * 
DEF_TIME_NBR_MIN_PER_HR
 )

	)

444 
	#DEF_TIME_NBR_SEC_PER_DAY
 (
DEF_TIME_NBR_SEC_PER_HR
 * 
DEF_TIME_NBR_HR_PER_DAY
 )

	)

445 
	#DEF_TIME_NBR_SEC_PER_WK
 (
DEF_TIME_NBR_SEC_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_WK
 )

	)

446 
	#DEF_TIME_NBR_SEC_PER_YR
 (
DEF_TIME_NBR_SEC_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_YR
 )

	)

447 
	#DEF_TIME_NBR_SEC_PER_YR_LEAP
 (
DEF_TIME_NBR_SEC_PER_DAY
 * 
DEF_TIME_NBR_DAY_PER_YR_LEAP
)

	)

449 
	#DEF_TIME_NBR_mS_PER_SEC
 1000u

	)

450 
	#DEF_TIME_NBR_uS_PER_SEC
 1000000u

	)

451 
	#DEF_TIME_NBR_nS_PER_SEC
 1000000000u

	)

462 
	elib_îr
 {

464 
	mLIB_ERR_NONE
 = 0u,

466 
	mLIB_MEM_ERR_NONE
 = 10000u,

467 
	mLIB_MEM_ERR_NULL_PTR
 = 10001u,

469 
	mLIB_MEM_ERR_INVALID_MEM_SIZE
 = 10100u,

470 
	mLIB_MEM_ERR_INVALID_MEM_ALIGN
 = 10101u,

471 
	mLIB_MEM_ERR_INVALID_SEG_SIZE
 = 10110u,

472 
	mLIB_MEM_ERR_INVALID_SEG_OVERLAP
 = 10111u,

473 
	mLIB_MEM_ERR_INVALID_POOL
 = 10120u,

474 
	mLIB_MEM_ERR_INVALID_BLK_NBR
 = 10130u,

475 
	mLIB_MEM_ERR_INVALID_BLK_SIZE
 = 10131u,

476 
	mLIB_MEM_ERR_INVALID_BLK_ALIGN
 = 10132u,

477 
	mLIB_MEM_ERR_INVALID_BLK_IX
 = 10133u,

478 
	mLIB_MEM_ERR_INVALID_BLK_ADDR
 = 10135u,

479 
	mLIB_MEM_ERR_INVALID_BLK_ADDR_IN_POOL
 = 10136u,

481 
	mLIB_MEM_ERR_SEG_EMPTY
 = 10200u,

482 
	mLIB_MEM_ERR_SEG_OVF
 = 10201u,

483 
	mLIB_MEM_ERR_POOL_FULL
 = 10205u,

484 
	mLIB_MEM_ERR_POOL_EMPTY
 = 10206u,

486 
	mLIB_MEM_ERR_HEAP_EMPTY
 = 10210u,

487 
	mLIB_MEM_ERR_HEAP_OVF
 = 10211u,

488 
	mLIB_MEM_ERR_HEAP_NOT_FOUND
 = 10215u

490 } 
	tLIB_ERR
;

514 #i‚de‡ 
TRACE_LEVEL_OFF


515 
	#TRACE_LEVEL_OFF
 0u

	)

518 #i‚de‡ 
TRACE_LEVEL_INFO


519 
	#TRACE_LEVEL_INFO
 1u

	)

522 #i‚de‡ 
TRACE_LEVEL_DBG


523 
	#TRACE_LEVEL_DBG
 2u

	)

526 #i‚de‡ 
TRACE_LEVEL_LOG


527 
	#TRACE_LEVEL_LOG
 3u

	)

556 
	#DEF_BIT
(
bô
Ë(1u << (bô))

	)

584 
	#DEF_BIT08
(
bô
Ë((
CPU_INT08U
)((CPU_INT08U)1u << (bô)))

	)

586 
	#DEF_BIT16
(
bô
Ë((
CPU_INT16U
)((CPU_INT16U)1u << (bô)))

	)

588 
	#DEF_BIT32
(
bô
Ë((
CPU_INT32U
)((CPU_INT32U)1u << (bô)))

	)

590 
	#DEF_BIT64
(
bô
Ë((
CPU_INT64U
)((CPU_INT64U)1u << (bô)))

	)

616 
	#DEF_BIT_MASK
(
bô_mask
, 
bô_shi·
Ë((bô_maskË<< (bô_shi·))

	)

642 
	#DEF_BIT_MASK_08
(
bô_mask
, 
bô_shi·
Ë((
CPU_INT08U
)((CPU_INT08U)(bô_maskË<< (bô_shi·)))

	)

644 
	#DEF_BIT_MASK_16
(
bô_mask
, 
bô_shi·
Ë((
CPU_INT16U
)((CPU_INT16U)(bô_maskË<< (bô_shi·)))

	)

646 
	#DEF_BIT_MASK_32
(
bô_mask
, 
bô_shi·
Ë((
CPU_INT32U
)((CPU_INT32U)(bô_maskË<< (bô_shi·)))

	)

648 
	#DEF_BIT_MASK_64
(
bô_mask
, 
bô_shi·
Ë((
CPU_INT64U
)((CPU_INT64U)(bô_maskË<< (bô_shi·)))

	)

684 
	#DEF_BIT_FIELD
(
bô_fõld
, 
bô_shi·
Ë((((bô_fõldË>
DEF_INT_CPU_NBR_BITS
Ë? (
DEF_INT_CPU_U_MAX_VAL
) \

685 : (
	`DEF_BIT
(
bô_fõld
) - 1uL)) \

686 << (
bô_shi·
))

	)

713 
	#DEF_BIT_FIELD_08
(
bô_fõld
, 
bô_shi·
Ë((
CPU_INT08U
)((((CPU_INT08U)(bô_fõldË>(CPU_INT08U)
DEF_INT_08_NBR_BITS
Ë? (CPU_INT08U)(
DEF_INT_08U_MAX_VAL
) \

714 : (
CPU_INT08U
)(
	`DEF_BIT08
(
bô_fõld
) - (CPU_INT08U)1u)) \

715 << (
bô_shi·
)))

	)

717 
	#DEF_BIT_FIELD_16
(
bô_fõld
, 
bô_shi·
Ë((
CPU_INT16U
)((((CPU_INT16U)(bô_fõldË>(CPU_INT16U)
DEF_INT_16_NBR_BITS
Ë? (CPU_INT16U)(
DEF_INT_16U_MAX_VAL
) \

718 : (
CPU_INT16U
)(
	`DEF_BIT16
(
bô_fõld
) - (CPU_INT16U)1u)) \

719 << (
bô_shi·
)))

	)

721 
	#DEF_BIT_FIELD_32
(
bô_fõld
, 
bô_shi·
Ë((
CPU_INT32U
)((((CPU_INT32U)(bô_fõldË>(CPU_INT32U)
DEF_INT_32_NBR_BITS
Ë? (CPU_INT32U)(
DEF_INT_32U_MAX_VAL
) \

722 : (
CPU_INT32U
)(
	`DEF_BIT32
(
bô_fõld
) - (CPU_INT32U)1u)) \

723 << (
bô_shi·
)))

	)

725 
	#DEF_BIT_FIELD_64
(
bô_fõld
, 
bô_shi·
Ë((
CPU_INT64U
)((((CPU_INT64U)(bô_fõldË>(CPU_INT64U)
DEF_INT_64_NBR_BITS
Ë? (CPU_INT64U)(
DEF_INT_64U_MAX_VAL
) \

726 : (
CPU_INT64U
)(
	`DEF_BIT64
(
bô_fõld
) - (CPU_INT64U)1u)) \

727 << (
bô_shi·
)))

	)

748 
	#DEF_BIT_SET
(
vÆ
, 
mask
Ë((vÆË((vÆË| (mask)))

	)

771 
	#DEF_BIT_SET_08
(
vÆ
, 
mask
Ë
	`DEF_BIT_SET
(vÆ, mask)

	)

773 
	#DEF_BIT_SET_16
(
vÆ
, 
mask
Ë
	`DEF_BIT_SET
(vÆ, mask)

	)

775 
	#DEF_BIT_SET_32
(
vÆ
, 
mask
Ë
	`DEF_BIT_SET
(vÆ, mask)

	)

777 
	#DEF_BIT_SET_64
(
vÆ
, 
mask
Ë
	`DEF_BIT_SET
(vÆ, mask)

	)

798 
	#DEF_BIT_CLR
(
vÆ
, 
mask
Ë((vÆË((vÆË& ~(mask)))

	)

821 
	#DEF_BIT_CLR_08
(
vÆ
, 
mask
Ë
	`DEF_BIT_CLR
(vÆ, mask)

	)

823 
	#DEF_BIT_CLR_16
(
vÆ
, 
mask
Ë
	`DEF_BIT_CLR
(vÆ, mask)

	)

825 
	#DEF_BIT_CLR_32
(
vÆ
, 
mask
Ë
	`DEF_BIT_CLR
(vÆ, mask)

	)

827 
	#DEF_BIT_CLR_64
(
vÆ
, 
mask
Ë
	`DEF_BIT_CLR
(vÆ, mask)

	)

852 
	#DEF_BIT_IS_SET
(
vÆ
, 
mask
) ((((mask) != 0u) && \

853 (((
vÆ
Ë& (
mask
)Ë=(mask))Ë? (
DEF_YES
Ë: (
DEF_NO
 ))

	)

878 
	#DEF_BIT_IS_CLR
(
vÆ
, 
mask
) ((((mask) != 0u) && \

879 (((
vÆ
Ë& (
mask
)Ë=0u)Ë? (
DEF_YES
Ë: (
DEF_NO
 ))

	)

904 
	#DEF_BIT_IS_SET_ANY
(
vÆ
, 
mask
Ë((((vÆË& (mask)Ë=0uË? (
DEF_NO
 ) : (
DEF_YES
))

	)

927 
	#DEF_BIT_IS_CLR_ANY
(
vÆ
, 
mask
Ë((((vÆË& (mask)Ë=(mask)Ë? (
DEF_NO
 ) : (
DEF_YES
))

	)

980 
	#DEF_CHK_VAL_MIN
(
vÆ
, 
vÆ_mö
) (((!(((val) >= 1) && ((val_min) < 1))) && \

981 ((((
vÆ_mö
Ë>1Ë&& ((
vÆ
) < 1)) || \

982 ((
vÆ
Ë< (
vÆ_mö
)))Ë? 
DEF_FAIL
 : 
DEF_OK
)

	)

1029 
	#DEF_CHK_VAL_MAX
(
vÆ
, 
vÆ_max
) (((!(((val_max) >= 1) && ((val) < 1))) && \

1030 ((((
vÆ
Ë>1Ë&& ((
vÆ_max
) < 1)) || \

1031 ((
vÆ
Ë> (
vÆ_max
)))Ë? 
DEF_FAIL
 : 
DEF_OK
)

	)

1082 
	#DEF_CHK_VAL
(
vÆ
, 
vÆ_mö
, 
vÆ_max
Ë(((
	`DEF_CHK_VAL_MIN
(vÆ, vÆ_möË=
DEF_FAIL
) || \

1083 (
	`DEF_CHK_VAL_MAX
(
vÆ
, 
vÆ_max
Ë=
DEF_FAIL
)Ë? DEF_FAIL : 
DEF_OK
)

	)

1106 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_08
)

1108 
	#DEF_GET_U_MAX_VAL
(
obj
Ë(((objË=
CPU_WORD_SIZE_08
Ë? 
DEF_INT_08U_MAX_VAL
 : 0)

	)

1111 #ñi‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_16
)

1113 
	#DEF_GET_U_MAX_VAL
(
obj
Ë(((objË=
CPU_WORD_SIZE_08
Ë? 
DEF_INT_08U_MAX_VAL
 : \

1114 (((
obj
Ë=
CPU_WORD_SIZE_16
Ë? 
DEF_INT_16U_MAX_VAL
 : 0))

	)

1117 #ñi‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_32
)

1119 
	#DEF_GET_U_MAX_VAL
(
obj
Ë(((objË=
CPU_WORD_SIZE_08
Ë? 
DEF_INT_08U_MAX_VAL
 : \

1120 (((
obj
Ë=
CPU_WORD_SIZE_16
Ë? 
DEF_INT_16U_MAX_VAL
 : \

1121 (((
obj
Ë=
CPU_WORD_SIZE_32
Ë? 
DEF_INT_32U_MAX_VAL
 : 0)))

	)

1124 #ñi‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_64
)

1126 
	#DEF_GET_U_MAX_VAL
(
obj
Ë(((objË=
CPU_WORD_SIZE_08
Ë? 
DEF_INT_08U_MAX_VAL
 : \

1127 (((
obj
Ë=
CPU_WORD_SIZE_16
Ë? 
DEF_INT_16U_MAX_VAL
 : \

1128 (((
obj
Ë=
CPU_WORD_SIZE_32
Ë? 
DEF_INT_32U_MAX_VAL
 : \

1129 (((
obj
Ë=
CPU_WORD_SIZE_64
Ë? 
DEF_INT_64U_MAX_VAL
 : 0))))

	)

1169 
	#DEF_MIN
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

1188 
	#DEF_MAX
(
a
, 
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

1207 
	#DEF_ABS
(
a
Ë((◊Ë< 0Ë? (-◊)Ë: (a))

	)

1231 #i‡ (
CPU_CORE_VERSION
 < 12900u)

	@UCOSIII/uC-LIB/lib_math.c

67 
	#MICRIUM_SOURCE


	)

68 
	#LIB_MATH_MODULE


	)

69 
	~<lib_m©h.h
>

106 
RAND_NBR
 
	gM©h_R™dSìdCur
;

144 
	$M©h_Inô
 ()

146 
	`M©h_R™dSëSìd
((
RAND_NBR
)
RAND_SEED_INIT_VAL
);

147 
	}
}

172 
	$M©h_R™dSëSìd
 (
RAND_NBR
 
£ed
)

174 
	`CPU_SR_ALLOC
();

177 
	`CPU_CRITICAL_ENTER
();

178 
M©h_R™dSìdCur
 = 
£ed
;

179 
	`CPU_CRITICAL_EXIT
();

180 
	}
}

212 
RAND_NBR
 
	$M©h_R™d
 ()

214 
RAND_NBR
 
£ed
;

215 
RAND_NBR
 
ønd_nbr
;

216 
	`CPU_SR_ALLOC
();

219 
	`CPU_CRITICAL_ENTER
();

220 
£ed
 = 
M©h_R™dSìdCur
;

221 
ønd_nbr
 = 
	`M©h_R™dSìd
(
£ed
);

222 
M©h_R™dSìdCur
 = 
ønd_nbr
;

223 
	`CPU_CRITICAL_EXIT
();

225  (
ønd_nbr
);

226 
	}
}

269 
RAND_NBR
 
	$M©h_R™dSìd
 (
RAND_NBR
 
£ed
)

271 
RAND_NBR
 
ønd_nbr
;

274 
ønd_nbr
 = (((
RAND_NBR
)
RAND_LCG_PARAM_A
 * 
£ed
Ë+ (RAND_NBR)
RAND_LCG_PARAM_B
Ë% ((RAND_NBR)
RAND_LCG_PARAM_M
 + 1u);

276  (
ønd_nbr
);

277 
	}
}

	@UCOSIII/uC-LIB/lib_math.h

70 #i‚de‡ 
LIB_MATH_MODULE_PRESENT


71 
	#LIB_MATH_MODULE_PRESENT


	)

106 
	~<˝u.h
>

107 
	~<˝u_c‹e.h
>

109 
	~<lib_def.h
>

118 #ifde‡ 
LIB_MATH_MODULE


119 
	#LIB_MATH_EXT


	)

121 
	#LIB_MATH_EXT
 

	)

165 
	#RAND_SEED_INIT_VAL
 1u

	)

167 
	#RAND_LCG_PARAM_M
 0x7FFFFFFFu

	)

168 
	#RAND_LCG_PARAM_A
 1103515245u

	)

169 
	#RAND_LCG_PARAM_B
 12345u

	)

184 
CPU_INT32U
 
	tRAND_NBR
;

200 
M©h_Inô
 ();

203 
M©h_R™dSëSìd
(
RAND_NBR
 
£ed
);

205 
RAND_NBR
 
M©h_R™d
 ();

207 
RAND_NBR
 
M©h_R™dSìd
 (RAND_NBR 
£ed
);

	@UCOSIII/uC-LIB/lib_mem.c

58 
	#MICRIUM_SOURCE


	)

59 
	#LIB_MEM_MODULE


	)

60 
	~<lib_mem.h
>

97 #i‡ (
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

98 
MEM_POOL
 *
	gMem_PoﬁTbl
;

99 
MEM_POOL
 
	gMem_PoﬁHóp
;

101 #i‚de‡ 
LIB_MEM_CFG_HEAP_BASE_ADDR


102 
CPU_INT08U
 
	gMem_Hóp
[
LIB_MEM_CFG_HEAP_SIZE
];

113 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

115 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

116 
CPU_BOOLEAN
 
Mem_PoﬁBlkIsVÆidAddr
(
MEM_POOL
 *
pmem_poﬁ
,

117 *
pmem_blk
);

121 
CPU_SIZE_T
 
Mem_SegCÆcTŸSize
 (*
pmem_addr
,

122 
MEM_POOL_BLK_QTY
 
blk_nbr
,

123 
CPU_SIZE_T
 
blk_size
,

124 
CPU_SIZE_T
 
blk_Æign
);

126 *
Mem_SegAŒoc
 (
MEM_POOL
 *
pmem_poﬁ
,

127 
CPU_SIZE_T
 
size
,

128 
CPU_SIZE_T
 
Æign
);

163 
	$Mem_Inô
 ()

165 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

166 
MEM_POOL
 *
pmem_poﬁ
;

169 
pmem_poﬁ
 = (
MEM_POOL
 *)&
Mem_PoﬁHóp
;

170 
pmem_poﬁ
->
Ty≥
 = (
LIB_MEM_TYPE
Ë
LIB_MEM_TYPE_HEAP
;

171 
pmem_poﬁ
->
SegHódPå
 = (
MEM_POOL
 *)&
Mem_PoﬁHóp
;

172 
pmem_poﬁ
->
SegPªvPå
 = (
MEM_POOL
 *) 0;

173 
pmem_poﬁ
->
SegNextPå
 = (
MEM_POOL
 *) 0;

174 
pmem_poﬁ
->
PoﬁPªvPå
 = (
MEM_POOL
 *) 0;

175 
pmem_poﬁ
->
PoﬁNextPå
 = (
MEM_POOL
 *) 0;

176 
pmem_poﬁ
->
PoﬁAddrSèπ
 = (*) 0;

177 
pmem_poﬁ
->
PoﬁAddrEnd
 = (*) 0;

178 
pmem_poﬁ
->
PoﬁPås
 = (**) 0;

179 
pmem_poﬁ
->
BlkSize
 = (
CPU_SIZE_T
 ) 0u;

180 
pmem_poﬁ
->
BlkNbr
 = (
CPU_SIZE_T
 ) 0u;

181 
pmem_poﬁ
->
BlkIx
 = (
MEM_POOL_IX
 ) 0u;

183 #ifde‡ 
LIB_MEM_CFG_HEAP_BASE_ADDR


184 
pmem_poﬁ
->
SegAddr
 = (*Ë
LIB_MEM_CFG_HEAP_BASE_ADDR
;

185 
pmem_poﬁ
->
SegAddrNextAvaû
 = (*Ë
LIB_MEM_CFG_HEAP_BASE_ADDR
;

187 
pmem_poﬁ
->
SegAddr
 = (*)&
Mem_Hóp
[0];

188 
pmem_poﬁ
->
SegAddrNextAvaû
 = (*)&
Mem_Hóp
[0];

191 
pmem_poﬁ
->
SegSizeTŸ
 = (
CPU_SIZE_T
 ) 
LIB_MEM_CFG_HEAP_SIZE
;

192 
pmem_poﬁ
->
SegSizeRem
 = (
CPU_SIZE_T
 ) 
LIB_MEM_CFG_HEAP_SIZE
;

195 
Mem_PoﬁTbl
 = &
Mem_PoﬁHóp
;

197 
	}
}

222 
	$Mem_CÃ
 (*
pmem
,

223 
CPU_SIZE_T
 
size
)

225 
	`Mem_Së
(
pmem
,

227 
size
);

228 
	}
}

265 
	$Mem_Së
 (*
pmem
,

266 
CPU_INT08U
 
d©a_vÆ
,

267 
CPU_SIZE_T
 
size
)

269 
CPU_SIZE_T
 
size_ªm
;

270 
CPU_ALIGN
 
d©a_Æign
;

271 
CPU_ALIGN
 *
pmem_Æign
;

272 
CPU_INT08U
 *
pmem_08
;

273 
CPU_DATA
 
mem_Æign_mod
;

274 
CPU_DATA
 
i
;

277 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

278 i‡(
size
 < 1) {

281 i‡(
pmem
 == (*)0) {

287 
d©a_Æign
 = 0u;

288 
i
 = 0u; i < (
CPU_ALIGN
); i++) {

289 
d©a_Æign
 <<
DEF_OCTET_NBR_BITS
;

290 
d©a_Æign
 |(
CPU_ALIGN
)
d©a_vÆ
;

293 
size_ªm
 = 
size
;

294 
mem_Æign_mod
 = (
CPU_INT08U
)((
CPU_ADDR
)
pmem
 % (
CPU_ALIGN
));

296 
pmem_08
 = (
CPU_INT08U
 *)
pmem
;

297 i‡(
mem_Æign_mod
 != 0u) {

298 
i
 = 
mem_Æign_mod
;

299 (
size_ªm
 > 0) &&

300 (
i
 < (
CPU_ALIGN
 ))) {

301 *
pmem_08
++ = 
d©a_vÆ
;

302 
size_ªm
 -(
CPU_INT08U
);

303 
i
++;

307 
pmem_Æign
 = (
CPU_ALIGN
 *)
pmem_08
;

308 
size_ªm
 >(
CPU_ALIGN
)) {

309 *
pmem_Æign
++ = 
d©a_Æign
;

310 
size_ªm
 -(
CPU_ALIGN
);

313 
pmem_08
 = (
CPU_INT08U
 *)
pmem_Æign
;

314 
size_ªm
 > 0) {

315 *
pmem_08
++ = 
d©a_vÆ
;

316 
size_ªm
 -(
CPU_INT08U
);

318 
	}
}

374 #i‡(
LIB_MEM_CFG_OPTIMIZE_ASM_EN
 !
DEF_ENABLED
)

375 
	$Mem_C›y
 ( *
pde°
,

376 c⁄° *
p§c
,

377 
CPU_SIZE_T
 
size
)

379 
CPU_SIZE_T
 
size_ªm
;

380 
CPU_SIZE_T
 
mem_g≠_o˘ës
;

381 
CPU_ALIGN
 *
pmem_Æign_de°
;

382 c⁄° 
CPU_ALIGN
 *
pmem_Æign_§c
;

383 
CPU_INT08U
 *
pmem_08_de°
;

384 c⁄° 
CPU_INT08U
 *
pmem_08_§c
;

385 
CPU_DATA
 
i
;

386 
CPU_DATA
 
mem_Æign_mod_de°
;

387 
CPU_DATA
 
mem_Æign_mod_§c
;

388 
CPU_BOOLEAN
 
mem_Æig√d
;

391 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

392 i‡(
size
 < 1) {

395 i‡(
pde°
 == (*)0) {

398 i‡(
p§c
 == (*)0) {

404 
size_ªm
 = 
size
;

406 
pmem_08_de°
 = ( 
CPU_INT08U
 *)
pde°
;

407 
pmem_08_§c
 = (c⁄° 
CPU_INT08U
 *)
p§c
;

409 
mem_g≠_o˘ës
 = 
pmem_08_§c
 - 
pmem_08_de°
;

412 i‡(
mem_g≠_o˘ës
 >(
CPU_ALIGN
)) {

414 
mem_Æign_mod_de°
 = (
CPU_INT08U
)((
CPU_ADDR
)
pmem_08_de°
 % (
CPU_ALIGN
));

415 
mem_Æign_mod_§c
 = (
CPU_INT08U
)((
CPU_ADDR
)
pmem_08_§c
 % (
CPU_ALIGN
));

417 
mem_Æig√d
 = (
mem_Æign_mod_de°
 =
mem_Æign_mod_§c
Ë? 
DEF_YES
 : 
DEF_NO
;

419 i‡(
mem_Æig√d
 =
DEF_YES
) {

421 i‡(
mem_Æign_mod_de°
 != 0u) {

422 
i
 = 
mem_Æign_mod_de°
;

423 (
size_ªm
 > 0) &&

424 (
i
 < (
CPU_ALIGN
 ))) {

425 *
pmem_08_de°
++ = *
pmem_08_§c
++;

426 
size_ªm
 -(
CPU_INT08U
);

427 
i
++;

431 
pmem_Æign_de°
 = ( 
CPU_ALIGN
 *)
pmem_08_de°
;

432 
pmem_Æign_§c
 = (c⁄° 
CPU_ALIGN
 *)
pmem_08_§c
;

433 
size_ªm
 >(
CPU_ALIGN
)) {

434 *
pmem_Æign_de°
++ = *
pmem_Æign_§c
++;

435 
size_ªm
 -(
CPU_ALIGN
);

438 
pmem_08_de°
 = ( 
CPU_INT08U
 *)
pmem_Æign_de°
;

439 
pmem_08_§c
 = (c⁄° 
CPU_INT08U
 *)
pmem_Æign_§c
;

443 
size_ªm
 > 0) {

444 *
pmem_08_de°
++ = *
pmem_08_§c
++;

445 
size_ªm
 -(
CPU_INT08U
);

447 
	}
}

488 
	$Mem_Move
 ( *
pde°
,

489 c⁄° *
p§c
,

490 
CPU_SIZE_T
 
size
)

492 
CPU_SIZE_T
 
size_ªm
;

493 
CPU_SIZE_T
 
mem_g≠_o˘ës
;

494 
CPU_ALIGN
 *
pmem_Æign_de°
;

495 c⁄° 
CPU_ALIGN
 *
pmem_Æign_§c
;

496 
CPU_INT08U
 *
pmem_08_de°
;

497 c⁄° 
CPU_INT08U
 *
pmem_08_§c
;

498 
CPU_INT08S
 
i
;

499 
CPU_DATA
 
mem_Æign_mod_de°
;

500 
CPU_DATA
 
mem_Æign_mod_§c
;

501 
CPU_BOOLEAN
 
mem_Æig√d
;

504 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

505 i‡(
size
 < 1) {

508 i‡(
pde°
 == (*)0) {

511 i‡(
p§c
 == (*)0) {

516 
pmem_08_§c
 = (c⁄° 
CPU_INT08U
 *)
p§c
;

517 
pmem_08_de°
 = ( 
CPU_INT08U
 *)
pde°
;

518 i‡(
pmem_08_§c
 > 
pmem_08_de°
) {

519 
	`Mem_C›y
(
pde°
, 
p§c
, 
size
);

523 
size_ªm
 = 
size
;

525 
pmem_08_de°
 = ( 
CPU_INT08U
 *)
pde°
 + 
size
 - 1;

526 
pmem_08_§c
 = (c⁄° 
CPU_INT08U
 *)
p§c
 + 
size
 - 1;

528 
mem_g≠_o˘ës
 = 
pmem_08_de°
 - 
pmem_08_§c
;

531 i‡(
mem_g≠_o˘ës
 >(
CPU_ALIGN
)) {

534 
mem_Æign_mod_de°
 = (
CPU_INT08U
)((
CPU_ADDR
)
pmem_08_de°
 % (
CPU_ALIGN
));

535 
mem_Æign_mod_§c
 = (
CPU_INT08U
)((
CPU_ADDR
)
pmem_08_§c
 % (
CPU_ALIGN
));

537 
mem_Æig√d
 = (
mem_Æign_mod_de°
 =
mem_Æign_mod_§c
Ë? 
DEF_YES
 : 
DEF_NO
;

539 i‡(
mem_Æig√d
 =
DEF_YES
) {

541 i‡(
mem_Æign_mod_de°
 !((
CPU_ALIGN
) - 1)) {

542 
i
 = 
mem_Æign_mod_de°
;

543 (
size_ªm
 > 0) &&

544 (
i
 >= 0)) {

545 *
pmem_08_de°
-- = *
pmem_08_§c
--;

546 
size_ªm
 -(
CPU_INT08U
);

547 
i
--;

552 
pmem_Æign_de°
 = ( 
CPU_ALIGN
 *)((
CPU_INT08U
 *)
pmem_08_de°
 - (CPU_ALIGN) + 1);

553 
pmem_Æign_§c
 = (c⁄° 
CPU_ALIGN
 *)((
CPU_INT08U
 *)
pmem_08_§c
 - (CPU_ALIGN) + 1);

554 
size_ªm
 >(
CPU_ALIGN
)) {

555 *
pmem_Æign_de°
-- = *
pmem_Æign_§c
--;

556 
size_ªm
 -(
CPU_ALIGN
);

559 
pmem_08_de°
 = ( 
CPU_INT08U
 *)
pmem_Æign_de°
 + (
CPU_ALIGN
) - 1;

560 
pmem_08_§c
 = (c⁄° 
CPU_INT08U
 *)
pmem_Æign_§c
 + (
CPU_ALIGN
) - 1;

565 
size_ªm
 > 0) {

566 *
pmem_08_de°
-- = *
pmem_08_§c
--;

567 
size_ªm
 -(
CPU_INT08U
);

569 
	}
}

614 
CPU_BOOLEAN
 
	$Mem_Cmp
 (c⁄° *
p1_mem
,

615 c⁄° *
p2_mem
,

616 
CPU_SIZE_T
 
size
)

618 
CPU_SIZE_T
 
size_ªm
;

619 
CPU_ALIGN
 *
p1_mem_Æign
;

620 
CPU_ALIGN
 *
p2_mem_Æign
;

621 c⁄° 
CPU_INT08U
 *
p1_mem_08
;

622 c⁄° 
CPU_INT08U
 *
p2_mem_08
;

623 
CPU_DATA
 
i
;

624 
CPU_DATA
 
mem_Æign_mod_1
;

625 
CPU_DATA
 
mem_Æign_mod_2
;

626 
CPU_BOOLEAN
 
mem_Æig√d
;

627 
CPU_BOOLEAN
 
mem_cmp
;

630 i‡(
size
 < 1) {

631  (
DEF_YES
);

633 i‡(
p1_mem
 == (*)0) {

634  (
DEF_NO
);

636 i‡(
p2_mem
 == (*)0) {

637  (
DEF_NO
);

641 
mem_cmp
 = 
DEF_YES
;

642 
size_ªm
 = 
size
;

644 
p1_mem_08
 = (c⁄° 
CPU_INT08U
 *)
p1_mem
 + 
size
;

645 
p2_mem_08
 = (c⁄° 
CPU_INT08U
 *)
p2_mem
 + 
size
;

647 
mem_Æign_mod_1
 = (
CPU_INT08U
)((
CPU_ADDR
)
p1_mem_08
 % (
CPU_ALIGN
));

648 
mem_Æign_mod_2
 = (
CPU_INT08U
)((
CPU_ADDR
)
p2_mem_08
 % (
CPU_ALIGN
));

650 
mem_Æig√d
 = (
mem_Æign_mod_1
 =
mem_Æign_mod_2
Ë? 
DEF_YES
 : 
DEF_NO
;

652 i‡(
mem_Æig√d
 =
DEF_YES
) {

654 i‡(
mem_Æign_mod_1
 != 0u) {

655 
i
 = 
mem_Æign_mod_1
;

656 (
mem_cmp
 =
DEF_YES
) &&

657 (
size_ªm
 > 0) &&

658 (
i
 > 0)) {

659 
p1_mem_08
--;

660 
p2_mem_08
--;

661 i‡(*
p1_mem_08
 !*
p2_mem_08
) {

662 
mem_cmp
 = 
DEF_NO
;

664 
size_ªm
 -(
CPU_INT08U
);

665 
i
--;

669 i‡(
mem_cmp
 =
DEF_YES
) {

670 
p1_mem_Æign
 = (
CPU_ALIGN
 *)
p1_mem_08
;

671 
p2_mem_Æign
 = (
CPU_ALIGN
 *)
p2_mem_08
;

673 (
mem_cmp
 =
DEF_YES
) &&

674 (
size_ªm
 >(
CPU_ALIGN
))) {

675 
p1_mem_Æign
--;

676 
p2_mem_Æign
--;

677 i‡(*
p1_mem_Æign
 !*
p2_mem_Æign
) {

678 
mem_cmp
 = 
DEF_NO
;

680 
size_ªm
 -(
CPU_ALIGN
);

683 
p1_mem_08
 = (
CPU_INT08U
 *)
p1_mem_Æign
;

684 
p2_mem_08
 = (
CPU_INT08U
 *)
p2_mem_Æign
;

688 (
mem_cmp
 =
DEF_YES
) &&

689 (
size_ªm
 > 0)) {

690 
p1_mem_08
--;

691 
p2_mem_08
--;

692 i‡(*
p1_mem_08
 !*
p2_mem_08
) {

693 
mem_cmp
 = 
DEF_NO
;

695 
size_ªm
 -(
CPU_INT08U
);

698  (
mem_cmp
);

699 
	}
}

740 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

741 *
	$Mem_HópAŒoc
 (
CPU_SIZE_T
 
size
,

742 
CPU_SIZE_T
 
Æign
,

743 
CPU_SIZE_T
 *
po˘ës_ªqd
,

744 
LIB_ERR
 *
≥º
)

746 
MEM_POOL
 *
pmem_poﬁ_hóp
;

747 *
pmem_addr
;

748 *
pmem_blk
;

749 
CPU_SIZE_T
 
o˘ës_ªqd_unu£d
;

750 
CPU_SIZE_T
 
size_ªm
;

751 
CPU_SIZE_T
 
size_ªq
;

752 
	`CPU_SR_ALLOC
();

755 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

756 i‡(
≥º
 =(
LIB_ERR
 *)0) {

757 
	`CPU_SW_EXCEPTION
((*)0);

762 i‡(
po˘ës_ªqd
 =(
CPU_SIZE_T
 *) 0) {

763 
po˘ës_ªqd
 = (
CPU_SIZE_T
 *)&
o˘ës_ªqd_unu£d
;

764 ()&
o˘ës_ªqd_unu£d
;

766 *
po˘ës_ªqd
 = 0u;

769 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

770 i‡(
size
 < 1) {

771 *
≥º
 = 
LIB_MEM_ERR_INVALID_MEM_SIZE
;

775 i‡(
Æign
 < 1) {

776 *
≥º
 = 
LIB_MEM_ERR_INVALID_MEM_ALIGN
;

782 
pmem_poﬁ_hóp
 = &
Mem_PoﬁHóp
;

784 
	`CPU_CRITICAL_ENTER
();

786 
pmem_addr
 = 
pmem_poﬁ_hóp
->
SegAddrNextAvaû
;

787 
size_ªm
 = 
pmem_poﬁ_hóp
->
SegSizeRem
;

788 
size_ªq
 = 
	`Mem_SegCÆcTŸSize
(
pmem_addr
,

790 
size
,

791 
Æign
);

792 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

793 i‡(
size_ªq
 < 1) {

794 
	`CPU_CRITICAL_EXIT
();

795 *
po˘ës_ªqd
 = 
size
;

796 *
≥º
 = 
LIB_MEM_ERR_HEAP_OVF
;

801 i‡(
size_ªq
 > 
size_ªm
) {

802 
	`CPU_CRITICAL_EXIT
();

803 *
po˘ës_ªqd
 = 
size_ªq
 - 
size_ªm
;

804 *
≥º
 = 
LIB_MEM_ERR_HEAP_EMPTY
;

808 
pmem_blk
 = 
	`Mem_SegAŒoc
(
pmem_poﬁ_hóp
, 
size
, 
Æign
);

809 i‡(
pmem_blk
 == (*)0) {

810 
	`CPU_CRITICAL_EXIT
();

811 *
po˘ës_ªqd
 = 
size_ªq
;

812 *
≥º
 = 
LIB_MEM_ERR_HEAP_EMPTY
;

816 
	`CPU_CRITICAL_EXIT
();

818 *
≥º
 = 
LIB_MEM_ERR_NONE
;

820  (
pmem_blk
);

821 
	}
}

852 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

853 
CPU_SIZE_T
 
	$Mem_HópGëSizeRem
 (
CPU_SIZE_T
 
Æign
,

854 
LIB_ERR
 *
≥º
)

856 
CPU_SIZE_T
 
size_ªm
;

859 
size_ªm
 = 
	`Mem_SegGëSizeRem
(&
Mem_PoﬁHóp
, 
Æign
, 
≥º
);

861  (
size_ªm
);

862 
	}
}

899 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

900 
CPU_SIZE_T
 
	$Mem_SegGëSizeRem
 (
MEM_POOL
 *
pmem_poﬁ
,

901 
CPU_SIZE_T
 
Æign
,

902 
LIB_ERR
 *
≥º
)

904 
MEM_POOL
 *
pmem_£g
;

905 
MEM_POOL
 *
pmem_£g_size
;

906 
CPU_SIZE_T
 
size_ªm
;

907 
CPU_SIZE_T
 
size_ªm_mod
;

908 
CPU_SIZE_T
 
£g_addr_mod
;

909 
CPU_ADDR
 
£g_addr
;

910 
	`CPU_SR_ALLOC
();

913 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

915 i‡(
≥º
 =(
LIB_ERR
 *)0) {

916 
	`CPU_SW_EXCEPTION
(0u);

919 i‡(
Æign
 < 1) {

920 *
≥º
 = 
LIB_MEM_ERR_INVALID_MEM_ALIGN
;

923 i‡(
Æign
 > 
DEF_ALIGN_MAX_NBR_OCTETS
) {

924 *
≥º
 = 
LIB_MEM_ERR_INVALID_MEM_ALIGN
;

928 i‡(
pmem_poﬁ
 =(
MEM_POOL
 *)0) {

929 *
≥º
 = 
LIB_MEM_ERR_NULL_PTR
;

934 
	`CPU_CRITICAL_ENTER
();

936 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

937 
pmem_poﬁ
->
Ty≥
) {

938 
LIB_MEM_TYPE_HEAP
:

939 
LIB_MEM_TYPE_POOL
:

943 
LIB_MEM_TYPE_NONE
:

945 
	`CPU_CRITICAL_EXIT
();

946 *
≥º
 = 
LIB_MEM_ERR_INVALID_POOL
;

952 
pmem_£g
 = 
pmem_poﬁ
->
SegHódPå
;

953 
pmem_£g_size
 = (
pmem_£g
->
SegAddr
 != (*)0)

954 ? 
pmem_£g
 : &
Mem_PoﬁHóp
;

955 
size_ªm
 = 
pmem_£g_size
->
SegSizeRem
;

956 
£g_addr
 = (
CPU_ADDR
)
pmem_£g_size
->
SegAddrNextAvaû
;

958 
	`CPU_CRITICAL_EXIT
();

960 i‡(
Æign
 > 1) {

961 
£g_addr_mod
 = 
£g_addr
 % 
Æign
;

962 
size_ªm_mod
 = (
£g_addr_mod
 > 0uË? (
Æign
 - seg_addr_mod) : 0u;

963 
size_ªm
 -
size_ªm_mod
;

967 *
≥º
 = 
LIB_MEM_ERR_NONE
;

969  (
size_ªm
);

970 
	}
}

1003 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

1004 
	$Mem_PoﬁCÃ
 (
MEM_POOL
 *
pmem_poﬁ
,

1005 
LIB_ERR
 *
≥º
)

1008 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1009 i‡(
≥º
 =(
LIB_ERR
 *)0) {

1010 
	`CPU_SW_EXCEPTION
(;);

1015 i‡(
pmem_poﬁ
 =(
MEM_POOL
 *)0) {

1016 *
≥º
 = 
LIB_MEM_ERR_NULL_PTR
;

1021 
pmem_poﬁ
->
Ty≥
 = (
LIB_MEM_TYPE
)
LIB_MEM_TYPE_NONE
;

1022 
pmem_poﬁ
->
SegHódPå
 = (
MEM_POOL
 *)0;

1023 
pmem_poﬁ
->
SegPªvPå
 = (
MEM_POOL
 *)0;

1024 
pmem_poﬁ
->
SegNextPå
 = (
MEM_POOL
 *)0;

1025 
pmem_poﬁ
->
PoﬁPªvPå
 = (
MEM_POOL
 *)0;

1026 
pmem_poﬁ
->
PoﬁNextPå
 = (
MEM_POOL
 *)0;

1027 
pmem_poﬁ
->
PoﬁAddrSèπ
 = (*)0;

1028 
pmem_poﬁ
->
PoﬁAddrEnd
 = (*)0;

1029 
pmem_poﬁ
->
PoﬁPås
 = (**)0;

1030 
pmem_poﬁ
->
PoﬁSize
 = (
CPU_SIZE_T
 )0u;

1031 
pmem_poﬁ
->
BlkAlign
 = (
CPU_SIZE_T
 )0u;

1032 
pmem_poﬁ
->
BlkSize
 = (
CPU_SIZE_T
 )0u;

1033 
pmem_poﬁ
->
BlkNbr
 = (
CPU_SIZE_T
 )0u;

1034 
pmem_poﬁ
->
BlkIx
 = (
MEM_POOL_IX
 )0u;

1035 
pmem_poﬁ
->
SegAddr
 = (*)0;

1036 
pmem_poﬁ
->
SegAddrNextAvaû
 = (*)0;

1037 
pmem_poﬁ
->
SegSizeTŸ
 = (
CPU_SIZE_T
 )0u;

1038 
pmem_poﬁ
->
SegSizeRem
 = (
CPU_SIZE_T
 )0u;

1041 *
≥º
 = 
LIB_MEM_ERR_NONE
;

1042 
	}
}

1197 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

1198 
	$Mem_PoﬁCª©e
 (
MEM_POOL
 *
pmem_poﬁ
,

1199 *
pmem_ba£_addr
,

1200 
CPU_SIZE_T
 
mem_size
,

1201 
MEM_POOL_BLK_QTY
 
blk_nbr
,

1202 
CPU_SIZE_T
 
blk_size
,

1203 
CPU_SIZE_T
 
blk_Æign
,

1204 
CPU_SIZE_T
 *
po˘ës_ªqd
,

1205 
LIB_ERR
 *
≥º
)

1207 
MEM_POOL
 *
pmem_poﬁ_hóp
;

1208 
MEM_POOL
 *
pmem_poﬁ_√xt
;

1209 
MEM_POOL
 *
pmem_£g
;

1210 
MEM_POOL
 *
pmem_£g_¥ev
;

1211 
MEM_POOL
 *
pmem_£g_√xt
;

1212 **
µoﬁ_±r
;

1213 *
pmem_blk
;

1214 
CPU_INT08U
 *
pmem_addr_±rs
;

1215 
CPU_INT08U
 *
pmem_addr_poﬁ
;

1216 
CPU_INT08U
 *
pmem_ba£_addr_°¨t
;

1217 
CPU_INT08U
 *
pmem_ba£_addr_íd
;

1218 
CPU_INT08U
 *
pmem_£g_addr_°¨t
;

1219 
CPU_INT08U
 *
pmem_£g_addr_íd
;

1220 
MEM_POOL_BLK_QTY
 
blk_ªm
;

1221 
CPU_SIZE_T
 
o˘ës_ªqd_unu£d
;

1222 
CPU_SIZE_T
 
size_tŸ
;

1223 
CPU_SIZE_T
 
size_tŸ_±rs
;

1224 
CPU_SIZE_T
 
size_tŸ_poﬁ
;

1225 
CPU_SIZE_T
 
size_ªm
;

1226 
CPU_SIZE_T
 
size_poﬁ_±rs
;

1227 
CPU_SIZE_T
 
i
;

1228 
	`CPU_SR_ALLOC
();

1231 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1232 i‡(
≥º
 =(
LIB_ERR
 *)0) {

1233 
	`CPU_SW_EXCEPTION
(;);

1238 i‡(
po˘ës_ªqd
 =(
CPU_SIZE_T
 *) 0) {

1239 
po˘ës_ªqd
 = (
CPU_SIZE_T
 *)&
o˘ës_ªqd_unu£d
;

1240 ()&
o˘ës_ªqd_unu£d
;

1242 *
po˘ës_ªqd
 = 0u;

1246 
	`Mem_PoﬁCÃ
(
pmem_poﬁ
, 
≥º
);

1247 i‡(*
≥º
 !
LIB_MEM_ERR_NONE
) {

1253 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1254 i‡(
pmem_ba£_addr
 != (*)0) {

1255 i‡(
mem_size
 < 1) {

1256 *
≥º
 = 
LIB_MEM_ERR_INVALID_SEG_SIZE
;

1261 i‡(
blk_nbr
 < 1) {

1262 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_NBR
;

1266 i‡(
blk_size
 < 1) {

1267 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_SIZE
;

1271 i‡(
blk_Æign
 < 1) {

1272 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_ALIGN
;

1279 i‡(
Mem_PoﬁTbl
 =(
MEM_POOL
 *)0) {

1280 *
≥º
 = 
LIB_MEM_ERR_HEAP_NOT_FOUND
;

1286 
pmem_poﬁ_hóp
 = (
MEM_POOL
 *)&
Mem_PoﬁHóp
;

1287 
size_tŸ
 = (
CPU_SIZE_T
) 0u;

1289 
	`CPU_CRITICAL_ENTER
();

1291 i‡(
pmem_ba£_addr
 == (*)0) {

1292 
pmem_£g
 = 
pmem_poﬁ_hóp
;

1293 
pmem_£g_¥ev
 = 
pmem_poﬁ_hóp
;

1294 
pmem_£g_√xt
 = 
pmem_poﬁ_hóp
;

1298 
pmem_addr_±rs
 = (
CPU_INT08U
 *)
pmem_poﬁ_hóp
->
SegAddrNextAvaû
;

1299 
size_tŸ_±rs
 = 
	`Mem_SegCÆcTŸSize
((*)
pmem_addr_±rs
,

1300 (
CPU_SIZE_T
)
blk_nbr
,

1301 (
CPU_SIZE_T
)(*),

1302 (
CPU_SIZE_T
)(*));

1303 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1304 i‡(
size_tŸ_±rs
 < 1) {

1305 
	`CPU_CRITICAL_EXIT
();

1306 *
≥º
 = 
LIB_MEM_ERR_HEAP_OVF
;

1311 
pmem_addr_poﬁ
 = 
pmem_addr_±rs
 + 
size_tŸ_±rs
;

1312 
size_tŸ_poﬁ
 = 
	`Mem_SegCÆcTŸSize
((*)
pmem_addr_poﬁ
,

1313 (
CPU_SIZE_T
)
blk_nbr
,

1314 (
CPU_SIZE_T
)
blk_size
,

1315 (
CPU_SIZE_T
)
blk_Æign
);

1316 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1317 i‡(
size_tŸ_poﬁ
 < 1) {

1318 
	`CPU_CRITICAL_EXIT
();

1319 *
≥º
 = 
LIB_MEM_ERR_HEAP_OVF
;

1324 
size_tŸ
 = 
size_tŸ_±rs
 + 
size_tŸ_poﬁ
;

1326 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1327 i‡((
size_tŸ
 < 
size_tŸ_±rs
) ||

1328 (
size_tŸ
 < 
size_tŸ_poﬁ
)) {

1329 
	`CPU_CRITICAL_EXIT
();

1330 *
≥º
 = 
LIB_MEM_ERR_HEAP_OVF
;

1335 
size_ªm
 = 
pmem_poﬁ_hóp
->
SegSizeRem
;

1336 i‡(
size_tŸ
 > 
size_ªm
) {

1337 
	`CPU_CRITICAL_EXIT
();

1338 *
po˘ës_ªqd
 = 
size_tŸ
 - 
size_ªm
;

1339 *
≥º
 = 
LIB_MEM_ERR_HEAP_EMPTY
;

1345 
pmem_ba£_addr_°¨t
 = (
CPU_INT08U
 *)
pmem_ba£_addr
;

1346 
pmem_ba£_addr_íd
 = (
CPU_INT08U
 *)
pmem_ba£_addr
 + 
mem_size
 - 1;

1348 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1349 i‡(
pmem_ba£_addr_íd
 < 
pmem_ba£_addr_°¨t
) {

1350 
	`CPU_CRITICAL_EXIT
();

1351 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_ADDR
;

1356 
pmem_£g
 = (
MEM_POOL
 *)0;

1357 
pmem_£g_¥ev
 = (
MEM_POOL
 *)0;

1358 
pmem_£g_√xt
 = 
Mem_PoﬁTbl
;

1360 
pmem_£g_√xt
 !(
MEM_POOL
 *)0) {

1362 i‡((
pmem_ba£_addr
 =
pmem_£g_√xt
->
SegAddr
) &&

1363 (
mem_size
 =
pmem_£g_√xt
->
SegSizeTŸ
)) {

1365 
pmem_£g
 = 
pmem_£g_√xt
;

1369 
pmem_£g_addr_°¨t
 = (
CPU_INT08U
 *)
pmem_£g_√xt
->
SegAddr
;

1370 
pmem_£g_addr_íd
 = (
CPU_INT08U
 *)
pmem_£g_√xt
->
SegAddr
 +Ömem_£g_√xt->
SegSizeTŸ
 - 1;

1373 i‡(
pmem_ba£_addr_íd
 < 
pmem_£g_addr_°¨t
) {

1377 } i‡(((
pmem_ba£_addr_°¨t
 <
pmem_£g_addr_°¨t
) &&

1378 (
pmem_ba£_addr_íd
 >
pmem_£g_addr_°¨t
)) ||

1379 ((
pmem_ba£_addr_°¨t
 >
pmem_£g_addr_°¨t
) &&

1380 (
pmem_ba£_addr_íd
 <
pmem_£g_addr_íd
 )) ||

1381 ((
pmem_ba£_addr_°¨t
 <
pmem_£g_addr_íd
 ) &&

1382 (
pmem_ba£_addr_íd
 >
pmem_£g_addr_íd
 ))) {

1383 
	`CPU_CRITICAL_EXIT
();

1384 *
≥º
 = 
LIB_MEM_ERR_INVALID_SEG_OVERLAP
;

1389 
pmem_£g_¥ev
 = 
pmem_£g_√xt
;

1390 
pmem_£g_√xt
 =Ömem_£g_√xt->
SegNextPå
;

1393 i‡(
pmem_£g
 =(
MEM_POOL
 *)0) {

1394 
pmem_£g
 = 
pmem_poﬁ
;

1395 
pmem_poﬁ
->
SegAddr
 = 
pmem_ba£_addr
;

1396 
pmem_poﬁ
->
SegAddrNextAvaû
 = 
pmem_ba£_addr
;

1397 
pmem_poﬁ
->
SegSizeTŸ
 = 
mem_size
;

1398 
pmem_poﬁ
->
SegSizeRem
 = 
mem_size
;

1403 
pmem_addr_±rs
 = (
CPU_INT08U
 *)
pmem_poﬁ_hóp
->
SegAddrNextAvaû
;

1404 
size_tŸ_±rs
 = 
	`Mem_SegCÆcTŸSize
((*)
pmem_addr_±rs
,

1405 (
CPU_SIZE_T
)
blk_nbr
,

1406 (
CPU_SIZE_T
)(*),

1407 (
CPU_SIZE_T
)(*));

1408 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1409 i‡(
size_tŸ_±rs
 < 1) {

1410 
	`CPU_CRITICAL_EXIT
();

1411 *
≥º
 = 
LIB_MEM_ERR_HEAP_OVF
;

1416 
size_ªm
 = 
pmem_poﬁ_hóp
->
SegSizeRem
;

1417 i‡(
size_tŸ_±rs
 > 
size_ªm
) {

1418 
	`CPU_CRITICAL_EXIT
();

1419 *
po˘ës_ªqd
 = 
size_tŸ_±rs
 - 
size_ªm
;

1420 *
≥º
 = 
LIB_MEM_ERR_HEAP_EMPTY
;

1425 
pmem_addr_poﬁ
 = (
CPU_INT08U
 *)
pmem_£g
->
SegAddrNextAvaû
;

1426 
size_tŸ_poﬁ
 = 
	`Mem_SegCÆcTŸSize
((*)
pmem_addr_poﬁ
,

1427 (
CPU_SIZE_T
)
blk_nbr
,

1428 (
CPU_SIZE_T
)
blk_size
,

1429 (
CPU_SIZE_T
)
blk_Æign
);

1430 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1431 i‡(
size_tŸ_poﬁ
 < 1) {

1432 
	`CPU_CRITICAL_EXIT
();

1433 *
≥º
 = 
LIB_MEM_ERR_SEG_OVF
;

1438 
size_ªm
 = 
pmem_£g
->
SegSizeRem
;

1439 i‡(
size_tŸ_poﬁ
 > 
size_ªm
) {

1440 
	`CPU_CRITICAL_EXIT
();

1441 *
po˘ës_ªqd
 = 
size_tŸ_poﬁ
 - 
size_ªm
;

1442 *
≥º
 = 
LIB_MEM_ERR_SEG_EMPTY
;

1449 
size_poﬁ_±rs
 = (
CPU_SIZE_T
)(
blk_nbr
 * (*));

1451 
µoﬁ_±r
 = (**)
	`Mem_SegAŒoc
((
MEM_POOL
 *)
pmem_poﬁ_hóp
,

1452 (
CPU_SIZE_T
)
size_poﬁ_±rs
,

1453 (
CPU_SIZE_T
)(*));

1454 i‡(
µoﬁ_±r
 == (**)0) {

1455 
size_ªm
 = 
pmem_poﬁ_hóp
->
SegSizeRem
;

1456 
	`CPU_CRITICAL_EXIT
();

1458 i‡(
pmem_ba£_addr
 == (*)0) {

1459 i‡(
size_tŸ
 > 
size_ªm
) {

1460 *
po˘ës_ªqd
 = 
size_tŸ
 - 
size_ªm
;

1462 *
po˘ës_ªqd
 = 
size_tŸ
;

1465 i‡(
size_poﬁ_±rs
 > 
size_ªm
) {

1466 *
po˘ës_ªqd
 = 
size_poﬁ_±rs
 - 
size_ªm
;

1468 *
po˘ës_ªqd
 = 
size_poﬁ_±rs
;

1471 *
≥º
 = 
LIB_MEM_ERR_HEAP_EMPTY
;

1475 
i
 = 0u; i < (
CPU_SIZE_T
)
blk_nbr
; i++) {

1476 
pmem_blk
 = (*)
	`Mem_SegAŒoc
(
pmem_£g
, 
blk_size
, 
blk_Æign
);

1477 i‡(
pmem_blk
 == (*)0) {

1478 
pmem_addr_poﬁ
 = (
CPU_INT08U
 *)
pmem_£g
->
SegAddrNextAvaû
;

1479 
size_ªm
 = (
CPU_SIZE_T
 )
pmem_£g
->
SegSizeRem
;

1480 
	`CPU_CRITICAL_EXIT
();

1481 
blk_ªm
 = 
blk_nbr
 - (
MEM_POOL_BLK_QTY
)
i
;

1482 
size_tŸ
 = 
	`Mem_SegCÆcTŸSize
((*)
pmem_addr_poﬁ
,

1483 (
MEM_POOL_BLK_QTY
)
blk_ªm
,

1484 (
CPU_SIZE_T
 )
blk_size
,

1485 (
CPU_SIZE_T
 )
blk_Æign
);

1487 i‡(
size_tŸ
 > 
size_ªm
) {

1488 *
po˘ës_ªqd
 = 
size_tŸ
 - 
size_ªm
;

1490 *
po˘ës_ªqd
 = 
size_tŸ
;

1492 *
≥º
 = 
LIB_MEM_ERR_SEG_EMPTY
;

1495 
µoﬁ_±r
[
i
] = 
pmem_blk
;

1500 i‡(
pmem_£g
 =
pmem_poﬁ
) {

1502 
pmem_poﬁ
->
SegPªvPå
 = 
pmem_£g_¥ev
;

1503 
pmem_poﬁ
->
SegNextPå
 = 
pmem_£g_√xt
;

1505 i‡(
pmem_£g_¥ev
 !(
MEM_POOL
 *)0) {

1506 
pmem_£g_¥ev
->
SegNextPå
 = 
pmem_poﬁ
;

1508 
Mem_PoﬁTbl
 = 
pmem_poﬁ
;

1511 i‡(
pmem_£g_√xt
 !(
MEM_POOL
 *)0) {

1512 
pmem_£g_√xt
->
SegPªvPå
 = 
pmem_poﬁ
;

1517 
pmem_poﬁ_√xt
 = 
pmem_£g
->
PoﬁNextPå
;

1518 
pmem_poﬁ
->
PoﬁPªvPå
 = 
pmem_£g
;

1519 
pmem_poﬁ
->
PoﬁNextPå
 = 
pmem_poﬁ_√xt
;

1521 
pmem_£g
->
PoﬁNextPå
 = 
pmem_poﬁ
;

1523 i‡(
pmem_poﬁ_√xt
 !(
MEM_POOL
 *)0) {

1524 
pmem_poﬁ_√xt
->
PoﬁPªvPå
 = 
pmem_poﬁ
;

1531 
pmem_poﬁ
->
Ty≥
 = (
LIB_MEM_TYPE
 ) 
LIB_MEM_TYPE_POOL
;

1532 
pmem_poﬁ
->
SegHódPå
 = (
MEM_POOL
 *Ë
pmem_£g
;

1533 
pmem_poﬁ
->
PoﬁAddrSèπ
 = (*Ë
pmem_addr_poﬁ
;

1534 
pmem_poﬁ
->
PoﬁAddrEnd
 = (*)(
pmem_addr_poﬁ
 + 
size_tŸ_poﬁ
 - 1);

1535 
pmem_poﬁ
->
PoﬁPås
 = (**Ë
µoﬁ_±r
;

1536 
pmem_poﬁ
->
PoﬁSize
 = (
CPU_SIZE_T
 ) 
size_tŸ_poﬁ
;

1537 
pmem_poﬁ
->
BlkAlign
 = (
CPU_SIZE_T
 ) 
blk_Æign
;

1538 
pmem_poﬁ
->
BlkSize
 = (
CPU_SIZE_T
 ) 
blk_size
;

1539 
pmem_poﬁ
->
BlkNbr
 = (
MEM_POOL_BLK_QTY
Ë
blk_nbr
;

1540 
pmem_poﬁ
->
BlkIx
 = (
MEM_POOL_IX
 ) 
blk_nbr
;

1543 
	`CPU_CRITICAL_EXIT
();

1545 *
≥º
 = 
LIB_MEM_ERR_NONE
;

1546 
	}
}

1578 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

1579 
MEM_POOL_BLK_QTY
 
	$Mem_PoﬁBlkGëNbrAvaû
 (
MEM_POOL
 *
pmem_poﬁ
,

1580 
LIB_ERR
 *
≥º
)

1582 
MEM_POOL_BLK_QTY
 
nbr_blk_ªm
;

1583 
	`CPU_SR_ALLOC
();

1586 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1588 i‡(
≥º
 =(
LIB_ERR
 *)0) {

1589 
	`CPU_SW_EXCEPTION
(0u);

1592 i‡(
pmem_poﬁ
 =(
MEM_POOL
 *)0) {

1593 *
≥º
 = 
LIB_MEM_ERR_NULL_PTR
;

1598 
	`CPU_CRITICAL_ENTER
();

1600 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1601 
pmem_poﬁ
->
Ty≥
) {

1602 
LIB_MEM_TYPE_POOL
:

1606 
LIB_MEM_TYPE_NONE
:

1607 
LIB_MEM_TYPE_HEAP
:

1609 
	`CPU_CRITICAL_EXIT
();

1610 *
≥º
 = 
LIB_MEM_ERR_INVALID_POOL
;

1616 
nbr_blk_ªm
 = 
pmem_poﬁ
->
BlkIx
;

1618 
	`CPU_CRITICAL_EXIT
();

1621 *
≥º
 = 
LIB_MEM_ERR_NONE
;

1623  (
nbr_blk_ªm
);

1624 
	}
}

1658 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

1659 *
	$Mem_PoﬁBlkGë
 (
MEM_POOL
 *
pmem_poﬁ
,

1660 
CPU_SIZE_T
 
size
,

1661 
LIB_ERR
 *
≥º
)

1663 *
pmem_blk
;

1664 
	`CPU_SR_ALLOC
();

1667 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1668 i‡(
≥º
 =(
LIB_ERR
 *)0) {

1669 
	`CPU_SW_EXCEPTION
((*)0);

1674 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1675 i‡(
pmem_poﬁ
 =(
MEM_POOL
 *)0) {

1676 *
≥º
 = 
LIB_MEM_ERR_NULL_PTR
;

1680 i‡(
size
 < 1) {

1681 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_SIZE
;

1686 
	`CPU_CRITICAL_ENTER
();

1688 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1689 i‡(
pmem_poﬁ
->
Ty≥
 !
LIB_MEM_TYPE_POOL
) {

1690 
	`CPU_CRITICAL_EXIT
();

1691 *
≥º
 = 
LIB_MEM_ERR_INVALID_POOL
;

1695 i‡(
size
 > 
pmem_poﬁ
->
BlkSize
) {

1696 
	`CPU_CRITICAL_EXIT
();

1697 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_SIZE
;

1702 ()&
size
;

1704 i‡(
pmem_poﬁ
->
BlkIx
 < 1) {

1705 
	`CPU_CRITICAL_EXIT
();

1706 *
≥º
 = 
LIB_MEM_ERR_POOL_EMPTY
;

1710 i‡(
pmem_poﬁ
->
BlkIx
 >Ömem_poﬁ->
BlkNbr
) {

1711 
	`CPU_CRITICAL_EXIT
();

1712 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_IX
;

1717 
pmem_poﬁ
->
BlkIx
--;

1718 
pmem_blk
 = 
pmem_poﬁ
->
PoﬁPås
[pmem_poﬁ->
BlkIx
];

1720 
	`CPU_CRITICAL_EXIT
();

1722 *
≥º
 = 
LIB_MEM_ERR_NONE
;

1724  (
pmem_blk
);

1725 
	}
}

1762 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

1763 *
	$Mem_PoﬁBlkGëU£dAtIx
 (
MEM_POOL
 *
pmem_poﬁ
,

1764 
MEM_POOL_IX
 
u£d_ix
,

1765 
LIB_ERR
 *
≥º
)

1767 
MEM_POOL_IX
 
blk_ix
;

1768 *
pmem_blk
;

1769 
	`CPU_SR_ALLOC
();

1772 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1773 i‡(
≥º
 =(
LIB_ERR
 *)0) {

1774 
	`CPU_SW_EXCEPTION
((*)0);

1779 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1780 i‡(
pmem_poﬁ
 =(
MEM_POOL
 *)0) {

1781 *
≥º
 = 
LIB_MEM_ERR_NULL_PTR
;

1786 
	`CPU_CRITICAL_ENTER
();

1788 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1789 i‡(
pmem_poﬁ
->
Ty≥
 !
LIB_MEM_TYPE_POOL
) {

1790 
	`CPU_CRITICAL_EXIT
();

1791 *
≥º
 = 
LIB_MEM_ERR_INVALID_POOL
;

1795 i‡(
pmem_poﬁ
->
BlkIx
 >pmem_poﬁ->
BlkNbr
) {

1796 
	`CPU_CRITICAL_EXIT
();

1797 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_IX
;

1802 
blk_ix
 = 
pmem_poﬁ
->
BlkNbr
 - 
u£d_ix
 - 1u;

1804 i‡(
blk_ix
 >
pmem_poﬁ
->
BlkNbr
) {

1805 
	`CPU_CRITICAL_EXIT
();

1806 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_IX
;

1810 i‡(
blk_ix
 < 
pmem_poﬁ
->
BlkIx
) {

1811 
	`CPU_CRITICAL_EXIT
();

1812 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_IX
;

1816 
pmem_blk
 = 
pmem_poﬁ
->
PoﬁPås
[
blk_ix
];

1818 
	`CPU_CRITICAL_EXIT
();

1820 *
≥º
 = 
LIB_MEM_ERR_NONE
;

1822  (
pmem_blk
);

1823 
	}
}

1858 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

1859 
	$Mem_PoﬁBlkFªe
 (
MEM_POOL
 *
pmem_poﬁ
,

1860 *
pmem_blk
,

1861 
LIB_ERR
 *
≥º
)

1863 *
p_addr
;

1864 
CPU_BOOLEAN
 
addr_vÆid
;

1865 
MEM_POOL_IX
 
i
;

1866 
	`CPU_SR_ALLOC
();

1869 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1870 i‡(
≥º
 =(
LIB_ERR
 *)0) {

1871 
	`CPU_SW_EXCEPTION
(;);

1876 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1877 i‡(
pmem_poﬁ
 =(
MEM_POOL
 *)0) {

1878 *
≥º
 = 
LIB_MEM_ERR_NULL_PTR
;

1882 i‡(
pmem_blk
 == (*)0) {

1883 *
≥º
 = 
LIB_MEM_ERR_NULL_PTR
;

1888 
	`CPU_CRITICAL_ENTER
();

1890 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1891 i‡(
pmem_poﬁ
->
Ty≥
 !
LIB_MEM_TYPE_POOL
) {

1892 
	`CPU_CRITICAL_EXIT
();

1893 *
≥º
 = 
LIB_MEM_ERR_INVALID_POOL
;

1897 
addr_vÆid
 = 
	`Mem_PoﬁBlkIsVÆidAddr
(
pmem_poﬁ
, 
pmem_blk
);

1898 i‡(
addr_vÆid
 !
DEF_OK
) {

1899 
	`CPU_CRITICAL_EXIT
();

1900 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_ADDR
;

1904 
i
 = 0u; i < 
pmem_poﬁ
->
BlkIx
; i++) {

1905 i‡(
pmem_blk
 =
pmem_poﬁ
->
PoﬁPås
[
i
]) {

1906 
	`CPU_CRITICAL_EXIT
();

1907 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_ADDR_IN_POOL
;

1913 i‡(
pmem_poﬁ
->
BlkIx
 >pmem_poﬁ->
BlkNbr
) {

1914 
	`CPU_CRITICAL_EXIT
();

1915 *
≥º
 = 
LIB_MEM_ERR_POOL_FULL
;

1920 
addr_vÆid
 = 
DEF_NO
;

1921 
i
 = 
pmem_poﬁ
->
BlkIx
; i <Ömem_poﬁ->
BlkNbr
; i++) {

1922 
p_addr
 = 
pmem_poﬁ
->
PoﬁPås
[
i
];

1923 i‡(
p_addr
 =
pmem_blk
) {

1924 
addr_vÆid
 = 
DEF_YES
;

1929 i‡(
addr_vÆid
 =
DEF_YES
) {

1930 
pmem_poﬁ
->
PoﬁPås
[
i
] =Ömem_poﬁ->PoﬁPås[pmem_poﬁ->
BlkIx
];

1932 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

1933 
	`CPU_CRITICAL_EXIT
();

1934 *
≥º
 = 
LIB_MEM_ERR_INVALID_POOL
;

1940 
pmem_poﬁ
->
PoﬁPås
[pmem_poﬁ->
BlkIx
] = 
pmem_blk
;

1941 
pmem_poﬁ
->
BlkIx
++;

1943 
	`CPU_CRITICAL_EXIT
();

1945 *
≥º
 = 
LIB_MEM_ERR_NONE
;

1946 
	}
}

1985 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

1986 
MEM_POOL_IX
 
	$Mem_PoﬁBlkIxGë
 (
MEM_POOL
 *
pmem_poﬁ
,

1987 *
pmem_blk
,

1988 
LIB_ERR
 *
≥º
)

1990 *
p_addr
;

1991 
CPU_BOOLEAN
 
addr_vÆid
;

1992 
MEM_POOL_IX
 
i
;

1993 
MEM_POOL_IX
 
poﬁ_ix
;

1994 
MEM_POOL_IX
 
övÆid_ix
;

1995 
	`CPU_SR_ALLOC
();

1998 
övÆid_ix
 = 
	`DEF_GET_U_MAX_VAL
(
MEM_POOL_IX
);

1999 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

2000 i‡(
≥º
 =(
LIB_ERR
 *)0) {

2001 
	`CPU_SW_EXCEPTION
(
övÆid_ix
);

2006 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

2007 i‡(
pmem_poﬁ
 =(
MEM_POOL
 *)0) {

2008 *
≥º
 = 
LIB_MEM_ERR_NULL_PTR
;

2009  (
övÆid_ix
);

2012 i‡(
pmem_blk
 == (*)0) {

2013 *
≥º
 = 
LIB_MEM_ERR_NULL_PTR
;

2014  (
övÆid_ix
);

2018 
	`CPU_CRITICAL_ENTER
();

2020 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

2021 i‡(
pmem_poﬁ
->
Ty≥
 !
LIB_MEM_TYPE_POOL
) {

2022 
	`CPU_CRITICAL_EXIT
();

2023 *
≥º
 = 
LIB_MEM_ERR_INVALID_POOL
;

2024 (
övÆid_ix
);

2027 
addr_vÆid
 = 
	`Mem_PoﬁBlkIsVÆidAddr
(
pmem_poﬁ
, 
pmem_blk
);

2028 i‡(
addr_vÆid
 !
DEF_OK
) {

2029 
	`CPU_CRITICAL_EXIT
();

2030 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_ADDR
;

2031  (
övÆid_ix
);

2034 
i
 = 0u; i < 
pmem_poﬁ
->
BlkIx
; i++) {

2035 i‡(
pmem_blk
 =
pmem_poﬁ
->
PoﬁPås
[
i
]) {

2036 
	`CPU_CRITICAL_EXIT
();

2037 *
≥º
 = 
LIB_MEM_ERR_INVALID_BLK_ADDR_IN_POOL
;

2038  (
övÆid_ix
);

2043 i‡(
pmem_poﬁ
->
BlkIx
 >pmem_poﬁ->
BlkNbr
) {

2044 
	`CPU_CRITICAL_EXIT
();

2045 *
≥º
 = 
LIB_MEM_ERR_POOL_FULL
;

2046  (
övÆid_ix
);

2049 
addr_vÆid
 = 
DEF_NO
;

2050 
i
 = 
pmem_poﬁ
->
BlkIx
; i <Ömem_poﬁ->
BlkNbr
; i++) {

2051 
p_addr
 = 
pmem_poﬁ
->
PoﬁPås
[
i
];

2052 i‡(
p_addr
 =
pmem_blk
) {

2053 
addr_vÆid
 = 
DEF_YES
;

2058 i‡(
addr_vÆid
 =
DEF_YES
) {

2059 
poﬁ_ix
 = 
pmem_poﬁ
->
BlkNbr
 - 1 - 
i
;

2060 
	`CPU_CRITICAL_EXIT
();

2061 *
≥º
 = 
LIB_MEM_ERR_NONE
;

2062  (
poﬁ_ix
);

2064 
	`CPU_CRITICAL_EXIT
();

2065 *
≥º
 = 
LIB_MEM_ERR_INVALID_POOL
;

2066  (
övÆid_ix
);

2069 
	}
}

2103 #i‡((
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
) && \

2104 (
	gLIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
))

2105 
CPU_BOOLEAN
 
	$Mem_PoﬁBlkIsVÆidAddr
 (
MEM_POOL
 *
pmem_poﬁ
,

2106 *
pmem_blk
)

2108 
CPU_INT08U
 *
µoﬁ_addr_fú°
;

2109 *
µoﬁ_addr_°¨t
;

2110 *
µoﬁ_addr_íd
;

2111 
CPU_SIZE_T
 
Æign_off£t
;

2112 
CPU_SIZE_T
 
blk_Æign
;

2113 
CPU_SIZE_T
 
blk_Æign_off£t
;

2114 
CPU_SIZE_T
 
blk_size
;

2115 
CPU_SIZE_T
 
mem_Æign
;

2116 
CPU_SIZE_T
 
mem_Æign_off£t
;

2117 
CPU_SIZE_T
 
mem_diff
;

2118 
CPU_BOOLEAN
 
addr_vÆid
;

2121 
µoﬁ_addr_°¨t
 = 
pmem_poﬁ
->
PoﬁAddrSèπ
;

2122 
µoﬁ_addr_íd
 = 
pmem_poﬁ
->
PoﬁAddrEnd
;

2124 i‡((
pmem_blk
 < 
µoﬁ_addr_°¨t
) ||

2125 (
pmem_blk
 > 
µoﬁ_addr_íd
)) {

2126  (
DEF_NO
);

2129 
blk_Æign
 = (
CPU_SIZE_T
)
pmem_poﬁ
->
BlkAlign
;

2130 
Æign_off£t
 = (
CPU_SIZE_T
)((
CPU_ADDR
)
µoﬁ_addr_°¨t
 % 
blk_Æign
);

2131 i‡(
Æign_off£t
 != 0u) {

2132 
mem_Æign_off£t
 = 
blk_Æign
 - 
Æign_off£t
;

2134 
mem_Æign_off£t
 = 0u;

2137 
blk_size
 = 
pmem_poﬁ
->
BlkSize
;

2138 
Æign_off£t
 = 
blk_size
 % 
blk_Æign
;

2139 i‡(
Æign_off£t
 != 0u) {

2140 
blk_Æign_off£t
 = 
blk_Æign
 - 
Æign_off£t
;

2142 
blk_Æign_off£t
 = 0u;

2145 
µoﬁ_addr_fú°
 = (
CPU_INT08U
 *)((CPU_INT08U *)
µoﬁ_addr_°¨t
 + 
mem_Æign_off£t
);

2146 
mem_diff
 = (
CPU_SIZE_T
 )((
CPU_INT08U
 *)
pmem_blk
 - 
µoﬁ_addr_fú°
);

2147 
mem_Æign
 = (
CPU_SIZE_T
 )–
blk_size
 + 
blk_Æign_off£t
);

2149 
addr_vÆid
 = ((
mem_diff
 % 
mem_Æign
Ë=0uË? 
DEF_YES
 : 
DEF_NO
;

2151  (
addr_vÆid
);

2152 
	}
}

2259 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

2260 
CPU_SIZE_T
 
	$Mem_SegCÆcTŸSize
 (*
pmem_addr
,

2261 
MEM_POOL_BLK_QTY
 
blk_nbr
,

2262 
CPU_SIZE_T
 
blk_size
,

2263 
CPU_SIZE_T
 
blk_Æign
)

2265 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

2266 
CPU_SIZE_T
 
blk_size_mem_Æig√d
;

2267 
CPU_SIZE_T
 
blk_size_Æig√d
;

2268 
CPU_SIZE_T
 
blk_size_Æig√d_nbr
;

2269 
CPU_SIZE_T
 
blk_size_tŸ
;

2271 
CPU_SIZE_T
 
Æign_off£t
;

2272 
CPU_SIZE_T
 
mem_Æign_off£t
;

2273 
CPU_SIZE_T
 
blk_Æign_off£t
;

2274 
CPU_SIZE_T
 
size_tŸ
;

2277 
Æign_off£t
 = (
CPU_ADDR
)
pmem_addr
 % 
blk_Æign
;

2278 i‡(
Æign_off£t
 != 0u) {

2279 
mem_Æign_off£t
 = 
blk_Æign
 - 
Æign_off£t
;

2281 
mem_Æign_off£t
 = 0u;

2284 
Æign_off£t
 = 
blk_size
 % 
blk_Æign
;

2285 i‡(
Æign_off£t
 != 0u) {

2286 
blk_Æign_off£t
 = 
blk_Æign
 - 
Æign_off£t
;

2288 
blk_Æign_off£t
 = 0u;

2291 
size_tŸ
 = 
mem_Æign_off£t
 + ((
blk_size
 + 
blk_Æign_off£t
Ë* ((
CPU_SIZE_T
)
blk_nbr
 - 1)) + blk_size;

2293 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

2294 
blk_size_mem_Æig√d
 = 
mem_Æign_off£t
 + 
blk_size
;

2295 i‡((
blk_size_mem_Æig√d
 < 
mem_Æign_off£t
) ||

2296 (
blk_size_mem_Æig√d
 < 
blk_size
)) {

2300 i‡(
blk_nbr
 > 1) {

2301 
blk_size_Æig√d
 = 
blk_size
 + 
blk_Æign_off£t
;

2302 i‡((
blk_size_Æig√d
 < 
blk_Æign_off£t
) ||

2303 (
blk_size_Æig√d
 < 
blk_size
)) {

2307 
blk_size_Æig√d_nbr
 = 
blk_size_Æig√d
 * ((
CPU_SIZE_T
)
blk_nbr
 - 1);

2308 i‡((
blk_size_Æig√d_nbr
 < 
blk_size_Æig√d
) ||

2309 (
blk_size_Æig√d_nbr
 < 
blk_Æign_off£t
) ||

2310 (
blk_size_Æig√d_nbr
 < 
blk_size
)) {

2314 
blk_size_tŸ
 = 
blk_size_Æig√d_nbr
 + 
blk_size
;

2315 i‡((
blk_size_tŸ
 < 
blk_size_Æig√d_nbr
) ||

2316 (
blk_size_tŸ
 < 
blk_size
)) {

2320 i‡((
size_tŸ
 < 
blk_size_mem_Æig√d
) ||

2321 (
size_tŸ
 < 
blk_size_Æig√d_nbr
) ||

2322 (
size_tŸ
 < 
blk_size_tŸ
)) {

2328  (
size_tŸ
);

2329 
	}
}

2366 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

2367 *
	$Mem_SegAŒoc
 (
MEM_POOL
 *
pmem_poﬁ
,

2368 
CPU_SIZE_T
 
size
,

2369 
CPU_SIZE_T
 
Æign
)

2371 
CPU_INT08U
 *
pmem_addr
;

2372 
CPU_INT08U
 *
pmem_addr_√xt
;

2373 
CPU_SIZE_T
 
mem_Æign
;

2374 
CPU_SIZE_T
 
Æign_off£t
;

2375 
CPU_SIZE_T
 
size_tŸ
;

2378 
pmem_addr
 = (
CPU_INT08U
 *)
pmem_poﬁ
->
SegAddrNextAvaû
;

2380 
mem_Æign
 = (
CPU_SIZE_T
)((
CPU_ADDR
)
pmem_addr
 % 
Æign
);

2382 i‡(
mem_Æign
 != 0u) {

2383 
Æign_off£t
 = 
Æign
 - 
mem_Æign
;

2385 
Æign_off£t
 = 0u;

2388 
size_tŸ
 = 
Æign_off£t
 + 
size
;

2389 i‡(
size_tŸ
 > 
pmem_poﬁ
->
SegSizeRem
) {

2393 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

2394 i‡((
size_tŸ
 < 
Æign_off£t
) ||

2395 (
size_tŸ
 < 
size
)) {

2400 
pmem_addr_√xt
 = 
pmem_addr
 + 
size_tŸ
;

2402 #i‡(
LIB_MEM_CFG_ARG_CHK_EXT_EN
 =
DEF_ENABLED
)

2403 i‡(
pmem_addr_√xt
 < 
pmem_addr
) {

2408 
pmem_addr
 +
Æign_off£t
;

2410 
pmem_poﬁ
->
SegAddrNextAvaû
 = (*)
pmem_addr_√xt
;

2411 
pmem_poﬁ
->
SegSizeRem
 -(
CPU_SIZE_T
)
size_tŸ
;

2413  ((*)
pmem_addr
);

2414 
	}
}

	@UCOSIII/uC-LIB/lib_mem.h

64 #i‚de‡ 
LIB_MEM_MODULE_PRESENT


65 
	#LIB_MEM_MODULE_PRESENT


	)

105 
	~<˝u.h
>

106 
	~<˝u_c‹e.h
>

108 
	~<lib_def.h
>

109 
	~<lib_cfg.h
>

118 #ifde‡ 
LIB_MEM_MODULE


119 
	#LIB_MEM_EXT


	)

121 
	#LIB_MEM_EXT
 

	)

147 #i‚de‡ 
LIB_MEM_CFG_ARG_CHK_EXT_EN


148 
	#LIB_MEM_CFG_ARG_CHK_EXT_EN
 
DEF_DISABLED


	)

163 #i‚de‡ 
LIB_MEM_CFG_OPTIMIZE_ASM_EN


164 
	#LIB_MEM_CFG_OPTIMIZE_ASM_EN
 
DEF_DISABLED


	)

179 #i‚de‡ 
LIB_MEM_CFG_ALLOC_EN


180 
	#LIB_MEM_CFG_ALLOC_EN
 
DEF_DISABLED


	)

203 
	#LIB_MEM_TYPE_NONE
 
	`CPU_TYPE_CREATE
('N', 'O', 'N', 'E')

	)

204 
	#LIB_MEM_TYPE_HEAP
 
	`CPU_TYPE_CREATE
('H', 'E', 'A', 'P')

	)

205 
	#LIB_MEM_TYPE_POOL
 
	`CPU_TYPE_CREATE
('P', 'O', 'O', 'L')

	)

223 
CPU_INT32U
 
	tLIB_MEM_TYPE
;

232 
CPU_SIZE_T
 
	tMEM_POOL_BLK_QTY
;

241 
MEM_POOL_BLK_QTY
 
	tMEM_POOL_IX
;

288 
mem_poﬁ
 
	tMEM_POOL
;

291 
	smem_poﬁ
 {

292 
LIB_MEM_TYPE
 
	mTy≥
;

294 
MEM_POOL
 *
	mSegHódPå
;

295 
MEM_POOL
 *
	mSegPªvPå
;

296 
MEM_POOL
 *
	mSegNextPå
;

297 
MEM_POOL
 *
	mPoﬁPªvPå
;

298 
MEM_POOL
 *
	mPoﬁNextPå
;

300 *
	mPoﬁAddrSèπ
;

301 *
	mPoﬁAddrEnd
;

302 **
	mPoﬁPås
;

303 
MEM_POOL_IX
 
	mBlkIx
;

304 
CPU_SIZE_T
 
	mPoﬁSize
;

305 
MEM_POOL_BLK_QTY
 
	mBlkNbr
;

306 
CPU_SIZE_T
 
	mBlkSize
;

307 
CPU_SIZE_T
 
	mBlkAlign
;

310 *
	mSegAddr
;

311 *
	mSegAddrNextAvaû
;

312 
CPU_SIZE_T
 
	mSegSizeTŸ
;

313 
CPU_SIZE_T
 
	mSegSizeRem
;

403 #i‡ ((
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_64
) || \

404 (
	gCPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
))

406 
	#MEM_VAL_BIG_TO_LITTLE_16
(
vÆ
Ë((
CPU_INT16U
)(((CPU_INT16U)((((CPU_INT16U)(vÆ)Ë& (CPU_INT16UË0xFF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))) | \

407 ((
CPU_INT16U
)((((CPU_INT16U)(
vÆ
)Ë& (CPU_INT16UË0x00FFuË<< (1u * 
DEF_OCTET_NBR_BITS
)))))

	)

409 
	#MEM_VAL_BIG_TO_LITTLE_32
(
vÆ
Ë((
CPU_INT32U
)(((CPU_INT32U)((((CPU_INT32U)(vÆ)Ë& (CPU_INT32U)0xFF000000uË>> (3u * 
DEF_OCTET_NBR_BITS
))) | \

410 ((
CPU_INT32U
)((((CPU_INT32U)(
vÆ
)Ë& (CPU_INT32U)0x00FF0000uË>> (1u * 
DEF_OCTET_NBR_BITS
))) | \

411 ((
CPU_INT32U
)((((CPU_INT32U)(
vÆ
)Ë& (CPU_INT32U)0x0000FF00uË<< (1u * 
DEF_OCTET_NBR_BITS
))) | \

412 ((
CPU_INT32U
)((((CPU_INT32U)(
vÆ
)Ë& (CPU_INT32U)0x000000FFuË<< (3u * 
DEF_OCTET_NBR_BITS
)))))

	)

414 #ñi‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

416 
	#MEM_VAL_BIG_TO_LITTLE_16
(
vÆ
Ë((
CPU_INT16U
)(((CPU_INT16U)((((CPU_INT16U)(vÆ)Ë& (CPU_INT16UË0xFF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))) | \

417 ((
CPU_INT16U
)((((CPU_INT16U)(
vÆ
)Ë& (CPU_INT16UË0x00FFuË<< (1u * 
DEF_OCTET_NBR_BITS
)))))

	)

419 
	#MEM_VAL_BIG_TO_LITTLE_32
(
vÆ
Ë((
CPU_INT32U
)(((CPU_INT32U)((((CPU_INT32U)(vÆ)Ë& (CPU_INT32U)0xFF000000uË>> (1u * 
DEF_OCTET_NBR_BITS
))) | \

420 ((
CPU_INT32U
)((((CPU_INT32U)(
vÆ
)Ë& (CPU_INT32U)0x00FF0000uË<< (1u * 
DEF_OCTET_NBR_BITS
))) | \

421 ((
CPU_INT32U
)((((CPU_INT32U)(
vÆ
)Ë& (CPU_INT32U)0x0000FF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))) | \

422 ((
CPU_INT32U
)((((CPU_INT32U)(
vÆ
)Ë& (CPU_INT32U)0x000000FFuË<< (1u * 
DEF_OCTET_NBR_BITS
)))))

	)

426 
	#MEM_VAL_BIG_TO_LITTLE_16
(
vÆ
Ë(vÆ)

	)

427 
	#MEM_VAL_BIG_TO_LITTLE_32
(
vÆ
Ë(vÆ)

	)

432 
	#MEM_VAL_LITTLE_TO_BIG_16
(
vÆ
Ë
	`MEM_VAL_BIG_TO_LITTLE_16
(vÆ)

	)

433 
	#MEM_VAL_LITTLE_TO_BIG_32
(
vÆ
Ë
	`MEM_VAL_BIG_TO_LITTLE_32
(vÆ)

	)

437 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

439 
	#MEM_VAL_BIG_TO_HOST_16
(
vÆ
Ë(vÆ)

	)

440 
	#MEM_VAL_BIG_TO_HOST_32
(
vÆ
Ë(vÆ)

	)

441 
	#MEM_VAL_LITTLE_TO_HOST_16
(
vÆ
Ë
	`MEM_VAL_LITTLE_TO_BIG_16
(vÆ)

	)

442 
	#MEM_VAL_LITTLE_TO_HOST_32
(
vÆ
Ë
	`MEM_VAL_LITTLE_TO_BIG_32
(vÆ)

	)

444 #ñi‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_LITTLE
)

446 
	#MEM_VAL_BIG_TO_HOST_16
(
vÆ
Ë
	`MEM_VAL_BIG_TO_LITTLE_16
(vÆ)

	)

447 
	#MEM_VAL_BIG_TO_HOST_32
(
vÆ
Ë
	`MEM_VAL_BIG_TO_LITTLE_32
(vÆ)

	)

448 
	#MEM_VAL_LITTLE_TO_HOST_16
(
vÆ
Ë(vÆ)

	)

449 
	#MEM_VAL_LITTLE_TO_HOST_32
(
vÆ
Ë(vÆ)

	)

459 
	#MEM_VAL_HOST_TO_BIG_16
(
vÆ
Ë
	`MEM_VAL_BIG_TO_HOST_16
(vÆ)

	)

460 
	#MEM_VAL_HOST_TO_BIG_32
(
vÆ
Ë
	`MEM_VAL_BIG_TO_HOST_32
(vÆ)

	)

461 
	#MEM_VAL_HOST_TO_LITTLE_16
(
vÆ
Ë
	`MEM_VAL_LITTLE_TO_HOST_16
(vÆ)

	)

462 
	#MEM_VAL_HOST_TO_LITTLE_32
(
vÆ
Ë
	`MEM_VAL_LITTLE_TO_HOST_32
(vÆ)

	)

516 
	#MEM_VAL_GET_INT08U_BIG
(
addr
Ë((
CPU_INT08U
Ë((CPU_INT08U)(((CPU_INT08U)(*(((CPU_INT08U *)◊ddr)Ë+ 0))Ë<< (0u * 
DEF_OCTET_NBR_BITS
))))

	)

518 
	#MEM_VAL_GET_INT16U_BIG
(
addr
Ë((
CPU_INT16U
)(((CPU_INT16U)(((CPU_INT16U)(*(((
CPU_INT08U
 *)◊ddr)Ë+ 0))Ë<< (1u * 
DEF_OCTET_NBR_BITS
))) + \

519 ((
CPU_INT16U
)(((CPU_INT16U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 1))Ë<< (0u * 
DEF_OCTET_NBR_BITS
)))))

	)

521 
	#MEM_VAL_GET_INT32U_BIG
(
addr
Ë((
CPU_INT32U
)(((CPU_INT32U)(((CPU_INT32U)(*(((
CPU_INT08U
 *)◊ddr)Ë+ 0))Ë<< (3u * 
DEF_OCTET_NBR_BITS
))) + \

522 ((
CPU_INT32U
)(((CPU_INT32U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 1))Ë<< (2u * 
DEF_OCTET_NBR_BITS
))) + \

523 ((
CPU_INT32U
)(((CPU_INT32U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 2))Ë<< (1u * 
DEF_OCTET_NBR_BITS
))) + \

524 ((
CPU_INT32U
)(((CPU_INT32U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 3))Ë<< (0u * 
DEF_OCTET_NBR_BITS
)))))

	)

528 
	#MEM_VAL_GET_INT08U_LITTLE
(
addr
Ë((
CPU_INT08U
Ë((CPU_INT08U)(((CPU_INT08U)(*(((CPU_INT08U *)◊ddr)Ë+ 0))Ë<< (0u * 
DEF_OCTET_NBR_BITS
))))

	)

530 
	#MEM_VAL_GET_INT16U_LITTLE
(
addr
Ë((
CPU_INT16U
)(((CPU_INT16U)(((CPU_INT16U)(*(((
CPU_INT08U
 *)◊ddr)Ë+ 0))Ë<< (0u * 
DEF_OCTET_NBR_BITS
))) + \

531 ((
CPU_INT16U
)(((CPU_INT16U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 1))Ë<< (1u * 
DEF_OCTET_NBR_BITS
)))))

	)

533 
	#MEM_VAL_GET_INT32U_LITTLE
(
addr
Ë((
CPU_INT32U
)(((CPU_INT32U)(((CPU_INT32U)(*(((
CPU_INT08U
 *)◊ddr)Ë+ 0))Ë<< (0u * 
DEF_OCTET_NBR_BITS
))) + \

534 ((
CPU_INT32U
)(((CPU_INT32U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 1))Ë<< (1u * 
DEF_OCTET_NBR_BITS
))) + \

535 ((
CPU_INT32U
)(((CPU_INT32U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 2))Ë<< (2u * 
DEF_OCTET_NBR_BITS
))) + \

536 ((
CPU_INT32U
)(((CPU_INT32U)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 3))Ë<< (3u * 
DEF_OCTET_NBR_BITS
)))))

	)

540 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

542 
	#MEM_VAL_GET_INT08U
(
addr
Ë
	`MEM_VAL_GET_INT08U_BIG
◊ddr)

	)

543 
	#MEM_VAL_GET_INT16U
(
addr
Ë
	`MEM_VAL_GET_INT16U_BIG
◊ddr)

	)

544 
	#MEM_VAL_GET_INT32U
(
addr
Ë
	`MEM_VAL_GET_INT32U_BIG
◊ddr)

	)

546 #ñi‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_LITTLE
)

548 
	#MEM_VAL_GET_INT08U
(
addr
Ë
	`MEM_VAL_GET_INT08U_LITTLE
◊ddr)

	)

549 
	#MEM_VAL_GET_INT16U
(
addr
Ë
	`MEM_VAL_GET_INT16U_LITTLE
◊ddr)

	)

550 
	#MEM_VAL_GET_INT32U
(
addr
Ë
	`MEM_VAL_GET_INT32U_LITTLE
◊ddr)

	)

612 
	#MEM_VAL_SET_INT08U_BIG
(
addr
, 
vÆ
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((CPU_INT08U)(vÆ)Ë& (CPU_INT08UË0xFFuË>> (0u * 
DEF_OCTET_NBR_BITS
))); } 0)

	)

614 
	#MEM_VAL_SET_INT16U_BIG
(
addr
, 
vÆ
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((
CPU_INT16U
)(vÆ)Ë& (CPU_INT16UË0xFF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))); \

615 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 1)Ë((CPU_INT08U)((((
CPU_INT16U
)(
vÆ
)Ë& (CPU_INT16UË0x00FFuË>> (0u * 
DEF_OCTET_NBR_BITS
))); } 0)

	)

617 
	#MEM_VAL_SET_INT32U_BIG
(
addr
, 
vÆ
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((
CPU_INT32U
)(vÆ)Ë& (CPU_INT32U)0xFF000000uË>> (3u * 
DEF_OCTET_NBR_BITS
))); \

618 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 1)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& (CPU_INT32U)0x00FF0000uË>> (2u * 
DEF_OCTET_NBR_BITS
))); \

619 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 2)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& (CPU_INT32U)0x0000FF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))); \

620 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 3)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& (CPU_INT32U)0x000000FFuË>> (0u * 
DEF_OCTET_NBR_BITS
))); } 0)

	)

624 
	#MEM_VAL_SET_INT08U_LITTLE
(
addr
, 
vÆ
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((CPU_INT08U)(vÆ)Ë& (CPU_INT08UË0xFFuË>> (0u * 
DEF_OCTET_NBR_BITS
))); } 0)

	)

626 
	#MEM_VAL_SET_INT16U_LITTLE
(
addr
, 
vÆ
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((
CPU_INT16U
)(vÆ)Ë& (CPU_INT16UË0x00FFuË>> (0u * 
DEF_OCTET_NBR_BITS
))); \

627 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 1)Ë((CPU_INT08U)((((
CPU_INT16U
)(
vÆ
)Ë& (CPU_INT16UË0xFF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))); } 0)

	)

629 
	#MEM_VAL_SET_INT32U_LITTLE
(
addr
, 
vÆ
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((
CPU_INT32U
)(vÆ)Ë& (CPU_INT32U)0x000000FFuË>> (0u * 
DEF_OCTET_NBR_BITS
))); \

630 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 1)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& (CPU_INT32U)0x0000FF00uË>> (1u * 
DEF_OCTET_NBR_BITS
))); \

631 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 2)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& (CPU_INT32U)0x00FF0000uË>> (2u * 
DEF_OCTET_NBR_BITS
))); \

632 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 3)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& (CPU_INT32U)0xFF000000uË>> (3u * 
DEF_OCTET_NBR_BITS
))); } 0)

	)

636 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

638 
	#MEM_VAL_SET_INT08U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT08U_BIG
◊ddr, vÆ)

	)

639 
	#MEM_VAL_SET_INT16U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT16U_BIG
◊ddr, vÆ)

	)

640 
	#MEM_VAL_SET_INT32U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT32U_BIG
◊ddr, vÆ)

	)

642 #ñi‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_LITTLE
)

644 
	#MEM_VAL_SET_INT08U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT08U_LITTLE
◊ddr, vÆ)

	)

645 
	#MEM_VAL_SET_INT16U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT16U_LITTLE
◊ddr, vÆ)

	)

646 
	#MEM_VAL_SET_INT32U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT32U_LITTLE
◊ddr, vÆ)

	)

718 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

721 
	#MEM_VAL_COPY_GET_INT08U_BIG
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); } 0)

	)

723 
	#MEM_VAL_COPY_GET_INT16U_BIG
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

724 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 1)); } 0)

	)

726 
	#MEM_VAL_COPY_GET_INT32U_BIG
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

727 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

728 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

729 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 3)); } 0)

	)

733 
	#MEM_VAL_COPY_GET_INT08U_LITTLE
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); } 0)

	)

735 
	#MEM_VAL_COPY_GET_INT16U_LITTLE
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \

736 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 0)); } 0)

	)

738 
	#MEM_VAL_COPY_GET_INT32U_LITTLE
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3)); \

739 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

740 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

741 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 0)); } 0)

	)

745 
	#MEM_VAL_COPY_GET_INT08U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U_BIG
◊ddr_de°,áddr_§c)

	)

746 
	#MEM_VAL_COPY_GET_INT16U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U_BIG
◊ddr_de°,áddr_§c)

	)

747 
	#MEM_VAL_COPY_GET_INT32U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U_BIG
◊ddr_de°,áddr_§c)

	)

752 #ñi‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_LITTLE
)

755 
	#MEM_VAL_COPY_GET_INT08U_BIG
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); } 0)

	)

757 
	#MEM_VAL_COPY_GET_INT16U_BIG
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \

758 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 0)); } 0)

	)

760 
	#MEM_VAL_COPY_GET_INT32U_BIG
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3)); \

761 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

762 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

763 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 0)); } 0)

	)

767 
	#MEM_VAL_COPY_GET_INT08U_LITTLE
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); } 0)

	)

769 
	#MEM_VAL_COPY_GET_INT16U_LITTLE
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

770 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 1)); } 0)

	)

772 
	#MEM_VAL_COPY_GET_INT32U_LITTLE
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

773 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

774 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

775 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 3)); } 0)

	)

779 
	#MEM_VAL_COPY_GET_INT08U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U_LITTLE
◊ddr_de°,áddr_§c)

	)

780 
	#MEM_VAL_COPY_GET_INT16U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U_LITTLE
◊ddr_de°,áddr_§c)

	)

781 
	#MEM_VAL_COPY_GET_INT32U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U_LITTLE
◊ddr_de°,áddr_§c)

	)

866 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

869 
	#MEM_VAL_COPY_GET_INTU_BIG
(
addr_de°
, 
addr_§c
, 
vÆ_size
) do { \

870 
CPU_SIZE_T
 
_i
; \

872 
_i
 = 0; _ò< (
vÆ_size
); _i++) { \

873 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 
_i
)Ë(*(((CPU_INT08U *)(
addr_§c
)) + _i)); \

875 } 0)

	)

878 
	#MEM_VAL_COPY_GET_INTU_LITTLE
(
addr_de°
, 
addr_§c
, 
vÆ_size
) do { \

879 
CPU_SIZE_T
 
_i
; \

880 
CPU_SIZE_T
 
_j
; \

883 
_j
 = (
vÆ_size
) - 1; \

885 
_i
 = 0; _ò< (
vÆ_size
); _i++) { \

886 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 
_i
)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 
_j
)); \

887 
_j
--; \

889 } 0)

	)

892 
	#MEM_VAL_COPY_GET_INTU
(
addr_de°
, 
addr_§c
, 
vÆ_size
Ë
	`MEM_VAL_COPY_GET_INTU_BIG
◊ddr_de°,áddr_§c, vÆ_size)

	)

897 #ñi‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_LITTLE
)

900 
	#MEM_VAL_COPY_GET_INTU_BIG
(
addr_de°
, 
addr_§c
, 
vÆ_size
) do { \

901 
CPU_SIZE_T
 
_i
; \

902 
CPU_SIZE_T
 
_j
; \

905 
_j
 = (
vÆ_size
) - 1; \

907 
_i
 = 0; _ò< (
vÆ_size
); _i++) { \

908 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 
_i
)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 
_j
)); \

909 
_j
--; \

911 } 0)

	)

914 
	#MEM_VAL_COPY_GET_INTU_LITTLE
(
addr_de°
, 
addr_§c
, 
vÆ_size
) do { \

915 
CPU_SIZE_T
 
_i
; \

917 
_i
 = 0; _ò< (
vÆ_size
); _i++) { \

918 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 
_i
)Ë(*(((CPU_INT08U *)(
addr_§c
)) + _i)); \

920 } 0)

	)

923 
	#MEM_VAL_COPY_GET_INTU
(
addr_de°
, 
addr_§c
, 
vÆ_size
Ë
	`MEM_VAL_COPY_GET_INTU_LITTLE
◊ddr_de°,áddr_§c, vÆ_size)

	)

993 
	#MEM_VAL_COPY_SET_INT08U_BIG
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U_BIG
◊ddr_de°,áddr_§c)

	)

994 
	#MEM_VAL_COPY_SET_INT16U_BIG
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U_BIG
◊ddr_de°,áddr_§c)

	)

995 
	#MEM_VAL_COPY_SET_INT32U_BIG
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U_BIG
◊ddr_de°,áddr_§c)

	)

997 
	#MEM_VAL_COPY_SET_INT08U_LITTLE
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U_LITTLE
◊ddr_de°,áddr_§c)

	)

998 
	#MEM_VAL_COPY_SET_INT16U_LITTLE
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U_LITTLE
◊ddr_de°,áddr_§c)

	)

999 
	#MEM_VAL_COPY_SET_INT32U_LITTLE
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U_LITTLE
◊ddr_de°,áddr_§c)

	)

1002 
	#MEM_VAL_COPY_SET_INT08U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U
◊ddr_de°,áddr_§c)

	)

1003 
	#MEM_VAL_COPY_SET_INT16U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U
◊ddr_de°,áddr_§c)

	)

1004 
	#MEM_VAL_COPY_SET_INT32U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U
◊ddr_de°,áddr_§c)

	)

1067 
	#MEM_VAL_COPY_SET_INTU_BIG
(
addr_de°
, 
addr_§c
, 
vÆ_size
Ë
	`MEM_VAL_COPY_GET_INTU_BIG
◊ddr_de°,áddr_§c, vÆ_size)

	)

1068 
	#MEM_VAL_COPY_SET_INTU_LITTLE
(
addr_de°
, 
addr_§c
, 
vÆ_size
Ë
	`MEM_VAL_COPY_GET_INTU_LITTLE
◊ddr_de°,áddr_§c, vÆ_size)

	)

1069 
	#MEM_VAL_COPY_SET_INTU
(
addr_de°
, 
addr_§c
, 
vÆ_size
Ë
	`MEM_VAL_COPY_GET_INTU
◊ddr_de°,áddr_§c, vÆ_size)

	)

1120 
	#MEM_VAL_COPY_08
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); } 0)

	)

1122 
	#MEM_VAL_COPY_16
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

1123 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 1)); } 0)

	)

1125 
	#MEM_VAL_COPY_32
(
addr_de°
, 
addr_§c
Ëdÿ{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

1126 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

1127 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

1128 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 3)); } 0)

	)

1131 
	#MEM_VAL_COPY
(
addr_de°
, 
addr_§c
, 
vÆ_size
) do { \

1132 
CPU_SIZE_T
 
_i
; \

1134 
_i
 = 0; _ò< (
vÆ_size
); _i++) { \

1135 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+
_i
)Ë(*(((CPU_INT08U *)(
addr_§c
)) +_i)); \

1137 } 0)

	)

1146 
Mem_Inô
 ( );

1149 
Mem_CÃ
 ( *
pmem
,

1150 
CPU_SIZE_T
 
size
);

1152 
Mem_Së
 ( *
pmem
,

1153 
CPU_INT08U
 
d©a_vÆ
,

1154 
CPU_SIZE_T
 
size
);

1156 
Mem_C›y
 ( *
pde°
,

1157 c⁄° *
p§c
,

1158 
CPU_SIZE_T
 
size
);

1160 
Mem_Move
 ( *
pde°
,

1161 c⁄° *
p§c
,

1162 
CPU_SIZE_T
 
size
);

1164 
CPU_BOOLEAN
 
Mem_Cmp
 (c⁄° *
p1_mem
,

1165 c⁄° *
p2_mem
,

1166 
CPU_SIZE_T
 
size
);

1170 #i‡(
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

1172 *
Mem_HópAŒoc
 ( 
CPU_SIZE_T
 
size
,

1173 
CPU_SIZE_T
 
Æign
,

1174 
CPU_SIZE_T
 *
po˘ës_ªqd
,

1175 
LIB_ERR
 *
≥º
);

1177 
CPU_SIZE_T
 
Mem_HópGëSizeRem
 ( CPU_SIZE_T 
Æign
,

1178 
LIB_ERR
 *
≥º
);

1181 
CPU_SIZE_T
 
Mem_SegGëSizeRem
 ( 
MEM_POOL
 *
pmem_poﬁ
,

1182 
CPU_SIZE_T
 
Æign
,

1183 
LIB_ERR
 *
≥º
);

1186 
Mem_PoﬁCÃ
 ( 
MEM_POOL
 *
pmem_poﬁ
,

1187 
LIB_ERR
 *
≥º
);

1189 
Mem_PoﬁCª©e
 ( 
MEM_POOL
 *
pmem_poﬁ
,

1190 *
pmem_ba£_addr
,

1191 
CPU_SIZE_T
 
mem_size
,

1192 
MEM_POOL_BLK_QTY
 
blk_nbr
,

1193 
CPU_SIZE_T
 
blk_size
,

1194 
CPU_SIZE_T
 
blk_Æign
,

1195 
CPU_SIZE_T
 *
po˘ës_ªqd
,

1196 
LIB_ERR
 *
≥º
);

1199 
MEM_POOL_BLK_QTY
 
Mem_PoﬁBlkGëNbrAvaû
–
MEM_POOL
 *
pmem_poﬁ
,

1200 
LIB_ERR
 *
≥º
);

1202 *
Mem_PoﬁBlkGë
 ( 
MEM_POOL
 *
pmem_poﬁ
,

1203 
CPU_SIZE_T
 
size
,

1204 
LIB_ERR
 *
≥º
);

1206 *
Mem_PoﬁBlkGëU£dAtIx
–
MEM_POOL
 *
pmem_poﬁ
,

1207 
MEM_POOL_IX
 
u£d_ix
,

1208 
LIB_ERR
 *
≥º
);

1210 
Mem_PoﬁBlkFªe
 ( 
MEM_POOL
 *
pmem_poﬁ
,

1211 *
pmem_blk
,

1212 
LIB_ERR
 *
≥º
);

1214 
MEM_POOL_IX
 
Mem_PoﬁBlkIxGë
 ( 
MEM_POOL
 *
pmem_poﬁ
,

1215 *
pmem_blk
,

1216 
LIB_ERR
 *
≥º
);

1227 #i‚de‡ 
LIB_MEM_CFG_ARG_CHK_EXT_EN


1232 #ñi‡ ((
LIB_MEM_CFG_ARG_CHK_EXT_EN
 !
DEF_DISABLED
) && \

1233 (
	gLIB_MEM_CFG_ARG_CHK_EXT_EN
 !
DEF_ENABLED
 ))

1241 #i‚de‡ 
LIB_MEM_CFG_OPTIMIZE_ASM_EN


1246 #ñi‡ ((
LIB_MEM_CFG_OPTIMIZE_ASM_EN
 !
DEF_DISABLED
) && \

1247 (
LIB_MEM_CFG_OPTIMIZE_ASM_EN
 !
DEF_ENABLED
 ))

1256 #i‚de‡ 
LIB_MEM_CFG_ALLOC_EN


1261 #ñi‡ ((
LIB_MEM_CFG_ALLOC_EN
 !
DEF_DISABLED
) && \

1262 (
LIB_MEM_CFG_ALLOC_EN
 !
DEF_ENABLED
 ))

1268 #ñi‡ (
LIB_MEM_CFG_ALLOC_EN
 =
DEF_ENABLED
)

1271 #i‚de‡ 
LIB_MEM_CFG_HEAP_SIZE


1275 #ñi‡ (
DEF_CHK_VAL_MIN
(
LIB_MEM_CFG_HEAP_SIZE
, 1Ë!
DEF_OK
)

1281 #ifde‡ 
LIB_MEM_CFG_HEAP_BASE_ADDR


1282 #i‡ (
LIB_MEM_CFG_HEAP_BASE_ADDR
 == 0x0)

1299 #i‡ (
CPU_CORE_VERSION
 < 127u)

	@UCOSIII/uC-LIB/lib_str.c

68 
	#MICRIUM_SOURCE


	)

69 
	#LIB_STR_MODULE


	)

70 
	~<lib_°r.h
>

100 c⁄° 
CPU_INT32U
 
	gSå_Mu…OvfThTbl_I¡32U
[] = {

101 (
CPU_INT32U
Ë
DEF_INT_32U_MAX_VAL
,

102 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 1u),

103 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 2u),

104 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 3u),

105 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 4u),

106 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 5u),

107 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 6u),

108 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 7u),

109 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 8u),

110 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 9u),

111 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 10u),

112 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 11u),

113 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 12u),

114 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 13u),

115 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 14u),

116 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 15u),

117 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 16u),

118 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 17u),

119 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 18u),

120 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 19u),

121 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 20u),

122 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 21u),

123 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 22u),

124 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 23u),

125 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 24u),

126 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 25u),

127 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 26u),

128 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 27u),

129 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 28u),

130 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 29u),

131 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 30u),

132 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 31u),

133 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 32u),

134 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 33u),

135 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 34u),

136 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 35u),

137 (
CPU_INT32U
)(
DEF_INT_32U_MAX_VAL
 / 36u)

154 
CPU_CHAR
 *
Så_FmtNbr_I¡32
 ( 
CPU_INT32U
 
nbr
,

155 
CPU_INT08U
 
nbr_dig
,

156 
CPU_INT08U
 
nbr_ba£
,

157 
CPU_BOOLEAN
 
nbr_√g
,

158 
CPU_CHAR
 
Àad_ch¨
,

159 
CPU_BOOLEAN
 
lowî_ˇ£
,

160 
CPU_BOOLEAN
 
nul
,

161 
CPU_CHAR
 *
p°r
);

163 
CPU_INT32U
 
Så_P¨£Nbr_I¡32
(c⁄° 
CPU_CHAR
 *
p°r
,

164 
CPU_CHAR
 **
p°r_√xt
,

165 
CPU_INT08U
 
nbr_ba£
,

166 
CPU_BOOLEAN
 
nbr_sig√d
,

167 
CPU_BOOLEAN
 *
≤br_√g
);

216 
CPU_SIZE_T
 
	$Så_Lí
 (c⁄° 
CPU_CHAR
 *
p°r
)

218 
CPU_SIZE_T
 
Àn
;

221 
Àn
 = 
	`Så_Lí_N
(
p°r
,

222 
DEF_INT_CPU_U_MAX_VAL
);

224  (
Àn
);

225 
	}
}

275 
CPU_SIZE_T
 
	$Så_Lí_N
 (c⁄° 
CPU_CHAR
 *
p°r
,

276 
CPU_SIZE_T
 
Àn_max
)

278 c⁄° 
CPU_CHAR
 *
p°r_Àn
;

279 
CPU_SIZE_T
 
Àn
;

282 
p°r_Àn
 = 
p°r
;

283 
Àn
 = 0u;

284 –
p°r_Àn
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

285 (*
p°r_Àn
 !–
CPU_CHAR
 )'\0') &&

286 –
Àn
 < ( 
CPU_SIZE_T
)
Àn_max
)) {

287 
p°r_Àn
++;

288 
Àn
++;

291  (
Àn
);

292 
	}
}

347 
CPU_CHAR
 *
	$Så_C›y
 ( 
CPU_CHAR
 *
p°r_de°
,

348 c⁄° 
CPU_CHAR
 *
p°r_§c
)

350 
CPU_CHAR
 *
p°r_πn
;

353 
p°r_πn
 = 
	`Så_C›y_N
(
p°r_de°
,

354 
p°r_§c
,

355 
DEF_INT_CPU_U_MAX_VAL
);

357  (
p°r_πn
);

358 
	}
}

437 
CPU_CHAR
 *
	$Så_C›y_N
 ( 
CPU_CHAR
 *
p°r_de°
,

438 c⁄° 
CPU_CHAR
 *
p°r_§c
,

439 
CPU_SIZE_T
 
Àn_max
)

441 
CPU_CHAR
 *
p°r_c›y_de°
;

442 c⁄° 
CPU_CHAR
 *
p°r_c›y_§c
;

443 
CPU_SIZE_T
 
Àn_c›y
;

446 i‡(
p°r_de°
 =(
CPU_CHAR
 *)0) {

447  ((
CPU_CHAR
 *)0);

449 i‡(
p°r_§c
 =(c⁄° 
CPU_CHAR
 *)0) {

450  ((
CPU_CHAR
 *)0);

454 
p°r_c›y_de°
 = 
p°r_de°
;

455 
p°r_c›y_§c
 = 
p°r_§c
;

456 
Àn_c›y
 = 0u;

458 –
p°r_c›y_de°
 !–
CPU_CHAR
 *) 0 ) &&

459 –
p°r_c›y_§c
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

460 (*
p°r_c›y_§c
 !–
CPU_CHAR
 )'\0') &&

461 –
Àn_c›y
 < ( 
CPU_SIZE_T
)
Àn_max
)) {

462 *
p°r_c›y_de°
 = *
p°r_c›y_§c
;

463 
p°r_c›y_de°
++;

464 
p°r_c›y_§c
++;

465 
Àn_c›y
++;

468 i‡((
p°r_c›y_de°
 =–
CPU_CHAR
 *)0) ||

469 (
p°r_c›y_§c
 =(c⁄° 
CPU_CHAR
 *)0)) {

470  ((
CPU_CHAR
 *)0);

473 i‡(
Àn_c›y
 < 
Àn_max
) {

474 *
p°r_c›y_de°
 = (
CPU_CHAR
)'\0';

478  (
p°r_de°
);

479 
	}
}

538 
CPU_CHAR
 *
	$Så_C©
 ( 
CPU_CHAR
 *
p°r_de°
,

539 c⁄° 
CPU_CHAR
 *
p°r_ˇt
)

541 
CPU_CHAR
 *
p°r_πn
;

544 
p°r_πn
 = 
	`Så_C©_N
(
p°r_de°
,

545 
p°r_ˇt
,

546 
DEF_INT_CPU_U_MAX_VAL
);

548  (
p°r_πn
);

549 
	}
}

620 
CPU_CHAR
 *
	$Så_C©_N
 ( 
CPU_CHAR
 *
p°r_de°
,

621 c⁄° 
CPU_CHAR
 *
p°r_ˇt
,

622 
CPU_SIZE_T
 
Àn_max
)

624 
CPU_CHAR
 *
p°r_ˇt_de°
;

625 c⁄° 
CPU_CHAR
 *
p°r_ˇt_§c
;

626 
CPU_SIZE_T
 
Àn_ˇt
;

629 i‡(
p°r_de°
 =(
CPU_CHAR
 *)0) {

630  ((
CPU_CHAR
 *)0);

632 i‡(
p°r_ˇt
 =(c⁄° 
CPU_CHAR
 *)0) {

633  ((
CPU_CHAR
 *)0);

636 i‡(
Àn_max
 < 1) {

637  ((
CPU_CHAR
 *)
p°r_de°
);

641 
p°r_ˇt_de°
 = 
p°r_de°
;

642 –
p°r_ˇt_de°
 !(
CPU_CHAR
 *) 0 ) &&

643 (*
p°r_ˇt_de°
 !(
CPU_CHAR
 )'\0')) {

644 
p°r_ˇt_de°
++;

646 i‡(
p°r_ˇt_de°
 =(
CPU_CHAR
 *)0) {

647  ((
CPU_CHAR
 *)0);

650 
p°r_ˇt_§c
 = 
p°r_ˇt
;

651 
Àn_ˇt
 = 0u;

653 –
p°r_ˇt_de°
 !–
CPU_CHAR
 *) 0 ) &&

654 –
p°r_ˇt_§c
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

655 (*
p°r_ˇt_§c
 !–
CPU_CHAR
 )'\0') &&

656 –
Àn_ˇt
 < ( 
CPU_SIZE_T
)
Àn_max
)) {

657 *
p°r_ˇt_de°
 = *
p°r_ˇt_§c
;

658 
p°r_ˇt_de°
++;

659 
p°r_ˇt_§c
++;

660 
Àn_ˇt
++;

663 i‡((
p°r_ˇt_de°
 =–
CPU_CHAR
 *)0) ||

664 (
p°r_ˇt_§c
 =(c⁄° 
CPU_CHAR
 *)0)) {

665  ((
CPU_CHAR
 *)0);

668 *
p°r_ˇt_de°
 = (
CPU_CHAR
)'\0';

671  (
p°r_de°
);

672 
	}
}

750 
CPU_INT16S
 
	$Så_Cmp
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

751 c⁄° 
CPU_CHAR
 *
p2_°r
)

753 
CPU_INT16S
 
cmp_vÆ
;

756 
cmp_vÆ
 = 
	`Så_Cmp_N
(
p1_°r
,

757 
p2_°r
,

758 
DEF_INT_CPU_U_MAX_VAL
);

760  (
cmp_vÆ
);

761 
	}
}

851 
CPU_INT16S
 
	$Så_Cmp_N
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

852 c⁄° 
CPU_CHAR
 *
p2_°r
,

853 
CPU_SIZE_T
 
Àn_max
)

855 c⁄° 
CPU_CHAR
 *
p1_°r_cmp
;

856 c⁄° 
CPU_CHAR
 *
p2_°r_cmp
;

857 c⁄° 
CPU_CHAR
 *
p1_°r_cmp_√xt
;

858 c⁄° 
CPU_CHAR
 *
p2_°r_cmp_√xt
;

859 
CPU_INT16S
 
cmp_vÆ
;

860 
CPU_SIZE_T
 
cmp_Àn
;

863 i‡(
Àn_max
 < 1) {

867 i‡(
p1_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

868 i‡(
p2_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

871 
cmp_vÆ
 = (
CPU_INT16S
)0 - (CPU_INT16S)(*
p2_°r
);

872  (
cmp_vÆ
);

874 i‡(
p2_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

875 
cmp_vÆ
 = (
CPU_INT16S
)(*
p1_°r
);

876  (
cmp_vÆ
);

880 
p1_°r_cmp
 = 
p1_°r
;

881 
p2_°r_cmp
 = 
p2_°r
;

882 
p1_°r_cmp_√xt
 = 
p1_°r_cmp
;

883 
p2_°r_cmp_√xt
 = 
p2_°r_cmp
;

884 
p1_°r_cmp_√xt
++;

885 
p2_°r_cmp_√xt
++;

886 
cmp_Àn
 = 0u;

888 (*
p1_°r_cmp
 =*
p2_°r_cmp
) &&

889 (*
p1_°r_cmp
 !–
CPU_CHAR
 )'\0') &&

890 –
p1_°r_cmp_√xt
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

891 –
p2_°r_cmp_√xt
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

892 –
cmp_Àn
 < ( 
CPU_SIZE_T
)
Àn_max
)) {

893 
p1_°r_cmp
++;

894 
p2_°r_cmp
++;

895 
p1_°r_cmp_√xt
++;

896 
p2_°r_cmp_√xt
++;

897 
cmp_Àn
++;

901 i‡(
cmp_Àn
 =
Àn_max
) {

905 i‡(*
p1_°r_cmp
 !*
p2_°r_cmp
) {

907 
cmp_vÆ
 = (
CPU_INT16S
)(*
p1_°r_cmp
Ë- (CPU_INT16S)(*
p2_°r_cmp
);

909 } i‡(*
p1_°r_cmp
 =(
CPU_CHAR
)'\0') {

910 
cmp_vÆ
 = (
CPU_INT16S
)0;

913 i‡(
p1_°r_cmp_√xt
 =(c⁄° 
CPU_CHAR
 *)0) {

914 i‡(
p2_°r_cmp_√xt
 =(c⁄° 
CPU_CHAR
 *)0) {

915 
cmp_vÆ
 = (
CPU_INT16S
)0;

918 
cmp_vÆ
 = (
CPU_INT16S
)0 - (CPU_INT16S)(*
p2_°r_cmp_√xt
);

921 
cmp_vÆ
 = (
CPU_INT16S
)(*
p1_°r_cmp_√xt
);

926  (
cmp_vÆ
);

927 
	}
}

1015 
CPU_INT16S
 
	$Så_CmpIgn‹eCa£
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

1016 c⁄° 
CPU_CHAR
 *
p2_°r
)

1018 
CPU_INT16S
 
cmp_vÆ
;

1021 
cmp_vÆ
 = 
	`Så_CmpIgn‹eCa£_N
(
p1_°r
,

1022 
p2_°r
,

1023 
DEF_INT_CPU_U_MAX_VAL
);

1025  (
cmp_vÆ
);

1026 
	}
}

1126 
CPU_INT16S
 
	$Så_CmpIgn‹eCa£_N
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

1127 c⁄° 
CPU_CHAR
 *
p2_°r
,

1128 
CPU_SIZE_T
 
Àn_max
)

1130 c⁄° 
CPU_CHAR
 *
p1_°r_cmp
;

1131 c⁄° 
CPU_CHAR
 *
p2_°r_cmp
;

1132 c⁄° 
CPU_CHAR
 *
p1_°r_cmp_√xt
;

1133 c⁄° 
CPU_CHAR
 *
p2_°r_cmp_√xt
;

1134 
CPU_CHAR
 
ch¨_1
;

1135 
CPU_CHAR
 
ch¨_2
;

1136 
CPU_INT16S
 
cmp_vÆ
;

1137 
CPU_SIZE_T
 
cmp_Àn
;

1140 i‡(
Àn_max
 < 1) {

1144 i‡(
p1_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1145 i‡(
p2_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1148 
ch¨_2
 = 
	`ASCII_ToLowî
(*
p2_°r
);

1149 
cmp_vÆ
 = (
CPU_INT16S
)0 - (CPU_INT16S)
ch¨_2
;

1150  (
cmp_vÆ
);

1152 i‡(
p2_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1153 
ch¨_1
 = 
	`ASCII_ToLowî
(*
p1_°r
);

1154 
cmp_vÆ
 = (
CPU_INT16S
)
ch¨_1
;

1155  (
cmp_vÆ
);

1159 
p1_°r_cmp
 = 
p1_°r
;

1160 
p2_°r_cmp
 = 
p2_°r
;

1161 
p1_°r_cmp_√xt
 = 
p1_°r_cmp
;

1162 
p2_°r_cmp_√xt
 = 
p2_°r_cmp
;

1163 
p1_°r_cmp_√xt
++;

1164 
p2_°r_cmp_√xt
++;

1165 
ch¨_1
 = 
	`ASCII_ToLowî
(*
p1_°r_cmp
);

1166 
ch¨_2
 = 
	`ASCII_ToLowî
(*
p2_°r_cmp
);

1167 
cmp_Àn
 = 0u;

1169 –
ch¨_1
 =
ch¨_2
) &&

1170 (*
p1_°r_cmp
 !–
CPU_CHAR
 )'\0') &&

1171 –
p1_°r_cmp_√xt
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

1172 –
p2_°r_cmp_√xt
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

1173 –
cmp_Àn
 < ( 
CPU_SIZE_T
)
Àn_max
)) {

1174 
p1_°r_cmp
++;

1175 
p2_°r_cmp
++;

1176 
p1_°r_cmp_√xt
++;

1177 
p2_°r_cmp_√xt
++;

1178 
cmp_Àn
++;

1179 
ch¨_1
 = 
	`ASCII_ToLowî
(*
p1_°r_cmp
);

1180 
ch¨_2
 = 
	`ASCII_ToLowî
(*
p2_°r_cmp
);

1184 i‡(
cmp_Àn
 =
Àn_max
) {

1188 i‡(
ch¨_1
 !
ch¨_2
) {

1189 
cmp_vÆ
 = (
CPU_INT16S
)
ch¨_1
 - (CPU_INT16S)
ch¨_2
;

1191 } i‡(
ch¨_1
 =(
CPU_CHAR
)'\0') {

1192 
cmp_vÆ
 = (
CPU_INT16S
)0;

1195 i‡(
p1_°r_cmp_√xt
 =(c⁄° 
CPU_CHAR
 *)0) {

1196 i‡(
p2_°r_cmp_√xt
 =(c⁄° 
CPU_CHAR
 *)0) {

1197 
cmp_vÆ
 = (
CPU_INT16S
)0;

1199 
ch¨_2
 = 
	`ASCII_ToLowî
(*
p2_°r_cmp_√xt
);

1200 
cmp_vÆ
 = (
CPU_INT16S
)0 - (CPU_INT16S)
ch¨_2
;

1203 
ch¨_1
 = 
	`ASCII_ToLowî
(*
p1_°r_cmp_√xt
);

1204 
cmp_vÆ
 = (
CPU_INT16S
)
ch¨_1
;

1209  (
cmp_vÆ
);

1210 
	}
}

1265 
CPU_CHAR
 *
	$Så_Ch¨
 (c⁄° 
CPU_CHAR
 *
p°r
,

1266 
CPU_CHAR
 
§ch_ch¨
)

1268 
CPU_CHAR
 *
p°r_πn
;

1271 
p°r_πn
 = 
	`Så_Ch¨_N
(
p°r
,

1272 
DEF_INT_CPU_U_MAX_VAL
,

1273 
§ch_ch¨
);

1275  (
p°r_πn
);

1276 
	}
}

1345 
CPU_CHAR
 *
	$Så_Ch¨_N
 (c⁄° 
CPU_CHAR
 *
p°r
,

1346 
CPU_SIZE_T
 
Àn_max
,

1347 
CPU_CHAR
 
§ch_ch¨
)

1349 c⁄° 
CPU_CHAR
 *
p°r_ch¨
;

1350 
CPU_SIZE_T
 
Àn_§ch
;

1353 i‡(
p°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1354  ((
CPU_CHAR
 *)0);

1357 i‡(
Àn_max
 < 1) {

1358  ((
CPU_CHAR
 *)0);

1362 
p°r_ch¨
 = 
p°r
;

1363 
Àn_§ch
 = 0u;

1365 –
p°r_ch¨
 !(c⁄° 
CPU_CHAR
 *) 0 ) &&

1366 (*
p°r_ch¨
 !–
CPU_CHAR
 )'\0') &&

1367 (*
p°r_ch¨
 !–
CPU_CHAR
 )
§ch_ch¨
) &&

1368 –
Àn_§ch
 < ( 
CPU_SIZE_T
)
Àn_max
)) {

1369 
p°r_ch¨
++;

1370 
Àn_§ch
++;

1374 i‡(
p°r_ch¨
 =(c⁄° 
CPU_CHAR
 *)0) {

1375  ((
CPU_CHAR
 *)0);

1378 i‡(
Àn_§ch
 >
Àn_max
) {

1379  ((
CPU_CHAR
 *)0);

1382 i‡(*
p°r_ch¨
 !
§ch_ch¨
) {

1383  ((
CPU_CHAR
 *)0);

1387  ((
CPU_CHAR
 *)
p°r_ch¨
);

1388 
	}
}

1442 
CPU_CHAR
 *
	$Så_Ch¨_La°
 (c⁄° 
CPU_CHAR
 *
p°r
,

1443 
CPU_CHAR
 
§ch_ch¨
)

1445 
CPU_CHAR
 *
p°r_πn
;

1448 
p°r_πn
 = 
	`Så_Ch¨_La°_N
(
p°r
,

1449 
DEF_INT_CPU_U_MAX_VAL
,

1450 
§ch_ch¨
);

1452  (
p°r_πn
);

1453 
	}
}

1524 
CPU_CHAR
 *
	$Så_Ch¨_La°_N
 (c⁄° 
CPU_CHAR
 *
p°r
,

1525 
CPU_SIZE_T
 
Àn_max
,

1526 
CPU_CHAR
 
§ch_ch¨
)

1528 c⁄° 
CPU_CHAR
 *
p°r_ch¨
;

1529 
CPU_SIZE_T
 
°r_Àn_max
;

1530 
CPU_SIZE_T
 
°r_Àn
;

1533 i‡(
p°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1534  ((
CPU_CHAR
 *)0);

1537 i‡(
Àn_max
 < 1) {

1538  ((
CPU_CHAR
 *)0);

1542 
p°r_ch¨
 = 
p°r
;

1543 
°r_Àn_max
 = 
Àn_max
 - ((
CPU_CHAR
)'\0');

1544 
°r_Àn
 = 
	`Så_Lí_N
(
p°r_ch¨
, 
°r_Àn_max
);

1545 
p°r_ch¨
 +
°r_Àn
;

1547 i‡(
p°r_ch¨
 =(c⁄° 
CPU_CHAR
 *)0) {

1548  ((
CPU_CHAR
 *)0);

1551 –
p°r_ch¨
 !
p°r
) &&

1552 (*
p°r_ch¨
 !
§ch_ch¨
)) {

1553 
p°r_ch¨
--;

1557 i‡(*
p°r_ch¨
 !
§ch_ch¨
) {

1558  ((
CPU_CHAR
 *)0);

1562  ((
CPU_CHAR
 *)
p°r_ch¨
);

1563 
	}
}

1603 
CPU_CHAR
 *
	$Så_Ch¨_Rïœ˚
 (
CPU_CHAR
 *
p°r
,

1604 
CPU_CHAR
 
ch¨_§ch
,

1605 
CPU_CHAR
 
ch¨_ª∂a˚
)

1607 
CPU_CHAR
 *
p°r_πn
;

1610 
p°r_πn
 = 
	`Så_Ch¨_Rïœ˚_N
(
p°r
,

1611 
ch¨_§ch
,

1612 
ch¨_ª∂a˚
,

1613 
DEF_INT_CPU_U_MAX_VAL
);

1615  (
p°r_πn
);

1616 
	}
}

1665 
CPU_CHAR
 *
	$Så_Ch¨_Rïœ˚_N
 (
CPU_CHAR
 *
p°r
,

1666 
CPU_CHAR
 
ch¨_§ch
,

1667 
CPU_CHAR
 
ch¨_ª∂a˚
,

1668 
CPU_SIZE_T
 
Àn_max
)

1670 
CPU_CHAR
 *
p°r_ch¨
;

1671 
CPU_SIZE_T
 
Àn
;

1674 i‡(
p°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1675  ((
CPU_CHAR
 *)0);

1678 i‡(
Àn_max
 < 1) {

1679  ((
CPU_CHAR
 *)0);

1682 
p°r_ch¨
 = 
p°r
;

1683 
Àn
 = 
Àn_max
;

1685 –
p°r_ch¨
 !(c⁄° 
CPU_CHAR
 *)0) &&

1686 (*
p°r_ch¨
 !
ASCII_CHAR_NULL
 ) &&

1687 –
Àn
 > 0)) {

1689 i‡(*
p°r_ch¨
 =
ch¨_§ch
) {

1690 *
p°r_ch¨
 = 
ch¨_ª∂a˚
;

1693 
p°r_ch¨
++;

1694 
Àn
--;

1697  (
p°r
);

1698 
	}
}

1761 
CPU_CHAR
 *
	$Så_Så
 (c⁄° 
CPU_CHAR
 *
p°r
,

1762 c⁄° 
CPU_CHAR
 *
p°r_§ch
)

1764 
CPU_CHAR
 *
p°r_πn
;

1767 
p°r_πn
 = 
	`Så_Så_N
(
p°r
,

1768 
p°r_§ch
,

1769 
DEF_INT_CPU_U_MAX_VAL
);

1771  (
p°r_πn
);

1772 
	}
}

1845 
CPU_CHAR
 *
	$Så_Så_N
 (c⁄° 
CPU_CHAR
 *
p°r
,

1846 c⁄° 
CPU_CHAR
 *
p°r_§ch
,

1847 
CPU_SIZE_T
 
Àn_max
)

1849 
CPU_SIZE_T
 
°r_Àn
;

1850 
CPU_SIZE_T
 
°r_Àn_§ch
;

1851 
CPU_SIZE_T
 
Àn_max_§ch
;

1852 
CPU_SIZE_T
 
§ch_Àn
;

1853 
CPU_SIZE_T
 
§ch_ix
;

1854 
CPU_BOOLEAN
 
§ch_d⁄e
;

1855 
CPU_INT16S
 
§ch_cmp
;

1856 c⁄° 
CPU_CHAR
 *
p°r_°r
;

1857 c⁄° 
CPU_CHAR
 *
p°r_§ch_ix
;

1860 i‡(
p°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1861  ((
CPU_CHAR
 *)0);

1863 i‡(
p°r_§ch
 =(c⁄° 
CPU_CHAR
 *)0) {

1864  ((
CPU_CHAR
 *)0);

1867 i‡(
Àn_max
 < 1) {

1868  ((
CPU_CHAR
 *)0);

1872 
Àn_max_§ch
 = (
Àn_max
 < 
DEF_INT_CPU_U_MAX_VAL
)

1873 ? (
Àn_max
 + 1uË: 
DEF_INT_CPU_U_MAX_VAL
;

1875 
°r_Àn
 = 
	`Så_Lí_N
(
p°r
, 
Àn_max
);

1876 
°r_Àn_§ch
 = 
	`Så_Lí_N
(
p°r_§ch
, 
Àn_max_§ch
);

1877 i‡(
°r_Àn_§ch
 < 1) {

1878  ((
CPU_CHAR
 *)
p°r
);

1880 i‡(
°r_Àn_§ch
 > 
°r_Àn
) {

1881  ((
CPU_CHAR
 *)0);

1884 
p°r_°r
 = 
p°r
 + 
°r_Àn
;

1885 i‡(
p°r_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1886  ((
CPU_CHAR
 *)0);

1888 
p°r_°r
 = 
p°r_§ch
 + 
°r_Àn_§ch
;

1889 i‡(
p°r_°r
 =(c⁄° 
CPU_CHAR
 *)0) {

1890  ((
CPU_CHAR
 *)0);

1894 
§ch_Àn
 = 
°r_Àn
 - 
°r_Àn_§ch
;

1895 
§ch_ix
 = 0u;

1896 
§ch_d⁄e
 = 
DEF_NO
;

1899 
p°r_§ch_ix
 = (c⁄° 
CPU_CHAR
 *)(
p°r
 + 
§ch_ix
);

1900 
§ch_cmp
 = 
	`Så_Cmp_N
(
p°r_§ch_ix
, 
p°r_§ch
, 
°r_Àn_§ch
);

1901 
§ch_d⁄e
 = (
§ch_cmp
 =0Ë? 
DEF_YES
 : 
DEF_NO
;

1902 
§ch_ix
++;

1903 } (
§ch_d⁄e
 =
DEF_NO
Ë&& (
§ch_ix
 <
§ch_Àn
));

1906 i‡(
§ch_cmp
 != 0) {

1907  ((
CPU_CHAR
 *)0);

1910  ((
CPU_CHAR
 *)
p°r_§ch_ix
);

1911 
	}
}

2038 
CPU_CHAR
 *
	$Så_FmtNbr_I¡32U
 (
CPU_INT32U
 
nbr
,

2039 
CPU_INT08U
 
nbr_dig
,

2040 
CPU_INT08U
 
nbr_ba£
,

2041 
CPU_CHAR
 
Àad_ch¨
,

2042 
CPU_BOOLEAN
 
lowî_ˇ£
,

2043 
CPU_BOOLEAN
 
nul
,

2044 
CPU_CHAR
 *
p°r
)

2046 
CPU_CHAR
 *
p°r_fmt
;

2049 
p°r_fmt
 = 
	`Så_FmtNbr_I¡32
(
nbr
,

2050 
nbr_dig
,

2051 
nbr_ba£
,

2052 
DEF_NO
,

2053 
Àad_ch¨
,

2054 
lowî_ˇ£
,

2055 
nul
,

2056 
p°r
);

2058  (
p°r_fmt
);

2059 
	}
}

2254 
CPU_CHAR
 *
	$Så_FmtNbr_I¡32S
 (
CPU_INT32S
 
nbr
,

2255 
CPU_INT08U
 
nbr_dig
,

2256 
CPU_INT08U
 
nbr_ba£
,

2257 
CPU_CHAR
 
Àad_ch¨
,

2258 
CPU_BOOLEAN
 
lowî_ˇ£
,

2259 
CPU_BOOLEAN
 
nul
,

2260 
CPU_CHAR
 *
p°r
)

2262 
CPU_CHAR
 *
p°r_fmt
;

2263 
CPU_INT32S
 
nbr_fmt
;

2264 
CPU_BOOLEAN
 
nbr_√g
;

2267 i‡(
nbr
 < 0) {

2268 
nbr_fmt
 = -
nbr
;

2269 
nbr_√g
 = 
DEF_YES
;

2271 
nbr_fmt
 = 
nbr
;

2272 
nbr_√g
 = 
DEF_NO
;

2275 
p°r_fmt
 = 
	`Så_FmtNbr_I¡32
((
CPU_INT32U
)
nbr_fmt
,

2276 
nbr_dig
,

2277 
nbr_ba£
,

2278 
nbr_√g
,

2279 
Àad_ch¨
,

2280 
lowî_ˇ£
,

2281 
nul
,

2282 
p°r
);

2284  (
p°r_fmt
);

2285 
	}
}

2567 #i‡(
LIB_STR_CFG_FP_EN
 =
DEF_ENABLED
)

2568 
CPU_CHAR
 *
	$Så_FmtNbr_32
 (
CPU_FP32
 
nbr
,

2569 
CPU_INT08U
 
nbr_dig
,

2570 
CPU_INT08U
 
nbr_dp
,

2571 
CPU_CHAR
 
Àad_ch¨
,

2572 
CPU_BOOLEAN
 
nul
,

2573 
CPU_CHAR
 *
p°r
)

2575 
CPU_CHAR
 *
p°r_fmt
;

2576 
CPU_DATA
 
i
;

2577 
CPU_FP32
 
nbr_fmt
;

2578 
CPU_FP32
 
nbr_log
;

2579 
CPU_INT32U
 
nbr_shi·d
;

2580 
CPU_INT16U
 
nbr_dig_max
;

2581 
CPU_INT16U
 
nbr_dig_sig
;

2582 
CPU_INT08U
 
nbr_√g_sign
;

2583 
CPU_INT08U
 
dig_vÆ
;

2584 
CPU_FP32
 
dig_exp
;

2585 
CPU_FP32
 
dp_exp
;

2586 
CPU_BOOLEAN
 
Àad_ch¨_dig
;

2587 
CPU_BOOLEAN
 
Àad_ch¨_fmtd
;

2588 
CPU_BOOLEAN
 
Àad_ch¨_0
;

2589 
CPU_BOOLEAN
 
fmt_övÆid
;

2590 
CPU_BOOLEAN
 
¥öt_ch¨
;

2591 
CPU_BOOLEAN
 
nbr_√g
;

2592 
CPU_BOOLEAN
 
nbr_√g_fmtd
;

2596 i‡(
p°r
 =(
CPU_CHAR
 *)0) {

2597  ((
CPU_CHAR
 *)0);

2600 
dig_exp
 = 1.0f;

2601 
fmt_övÆid
 = 
DEF_NO
;

2602 
Àad_ch¨_0
 = (
Àad_ch¨
 ='0'Ë? 
DEF_YES
 : 
DEF_NO
;

2603 
nbr_fmt
 = 0.0f;

2604 
nbr_√g
 = 
DEF_NO
;

2606 i‡((
nbr_dig
 < 1Ë&& (
nbr_dp
 < 1)) {

2607 
fmt_övÆid
 = 
DEF_YES
;

2610 i‡(
Àad_ch¨
 !(
CPU_CHAR
)'\0') {

2611 
¥öt_ch¨
 = 
	`ASCII_IsPröt
(
Àad_ch¨
);

2612 i‡(
¥öt_ch¨
 !
DEF_YES
) {

2613 
fmt_övÆid
 = 
DEF_YES
;

2615 } i‡(
Àad_ch¨
 != '0') {

2616 
Àad_ch¨_dig
 = 
	`ASCII_IsDig
(
Àad_ch¨
);

2617 i‡(
Àad_ch¨_dig
 =
DEF_YES
) {

2618 
fmt_övÆid
 = 
DEF_YES
;

2625 
p°r_fmt
 = 
p°r
;

2627 i‡(
fmt_övÆid
 =
DEF_NO
) {

2628 i‡(
nbr
 < 0.0f) {

2629 
nbr_fmt
 = -
nbr
;

2630 
nbr_√g_sign
 = 1u;

2631 
nbr_√g
 = 
DEF_YES
;

2633 
nbr_fmt
 = 
nbr
;

2634 
nbr_√g_sign
 = 0u;

2635 
nbr_√g
 = 
DEF_NO
;

2638 
nbr_log
 = 
nbr_fmt
;

2639 
nbr_dig_max
 = 0u;

2640 
nbr_log
 >= 1.0f) {

2641 
nbr_dig_max
++;

2642 
nbr_log
 /= 10.0f;

2645 i‡(((
nbr_dig
 >(
nbr_dig_max
 + 
nbr_√g_sign
)) ||

2646 (
nbr_dig_max
 < 1)) &&

2647 ((
nbr_dig
 > 1) ||

2648 (
nbr_dp
 > 0) ||

2649 (
nbr_√g
 =
DEF_NO
))) {

2651 
i
 = 1u; i < 
nbr_dig
; i++) {

2652 
dig_exp
 *= 10.0f;

2655 
nbr_√g_fmtd
 = 
DEF_NO
;

2656 
nbr_dig_sig
 = 0u;

2657 
Àad_ch¨_fmtd
 = 
DEF_NO
;

2659 
fmt_övÆid
 = 
DEF_YES
;

2665 
i
 = 
nbr_dig
; i > 0; i--) {

2666 i‡(
fmt_övÆid
 =
DEF_NO
) {

2667 i‡(
nbr_dig_sig
 < 
LIB_STR_CFG_FP_MAX_NBR_DIG_SIG
) {

2668 
nbr_shi·d
 = (
CPU_INT32U
)(
nbr_fmt
 / 
dig_exp
);

2669 i‡((
nbr_shi·d
 > 0) ||

2670 (
i
 == 1u)) {

2672 i‡((
nbr_√g
 =
DEF_YES
) &&

2673 (
nbr_√g_fmtd
 =
DEF_NO
 )) {

2675 i‡(
Àad_ch¨_fmtd
 =
DEF_YES
) {

2676 
p°r_fmt
--;

2678 *
p°r_fmt
++ = '-';

2679 
nbr_√g_fmtd
 = 
DEF_YES
;

2682 i‡(
nbr_shi·d
 > 0) {

2683 
dig_vÆ
 = (
CPU_INT08U
)(
nbr_shi·d
 % 10u);

2684 *
p°r_fmt
++ = (
CPU_CHAR
 )(
dig_vÆ
 + '0');

2686 
nbr_dig_sig
++;

2688 } i‡((
nbr_dig
 > 1) ||

2689 (
nbr_√g
 =
DEF_NO
)) {

2690 *
p°r_fmt
++ = '0';

2693 } i‡((
nbr_√g
 =
DEF_YES
) &&

2694 (
Àad_ch¨_0
 =
DEF_YES
) &&

2695 (
nbr_√g_fmtd
 =
DEF_NO
 )) {

2697 *
p°r_fmt
++ = '-';

2698 
nbr_√g_fmtd
 = 
DEF_YES
;

2700 } i‡(
Àad_ch¨
 !(
CPU_CHAR
)'\0') {

2701 *
p°r_fmt
++ = 
Àad_ch¨
;

2702 
Àad_ch¨_fmtd
 = 
DEF_YES
;

2705 
dig_exp
 /= 10.0f;

2708 *
p°r_fmt
++ = '0';

2712 *
p°r_fmt
++ = '?';

2717 i‡(
nbr_dp
 > 0) {

2718 i‡(
nbr_dig
 < 1) {

2719 i‡(
fmt_övÆid
 =
DEF_NO
) {

2720 i‡((
nbr_√g
 =
DEF_YES
) &&

2721 (
nbr_√g_fmtd
 =
DEF_NO
 )) {

2722 *
p°r_fmt
++ = '-';

2724 *
p°r_fmt
++ = '0';

2727 *
p°r_fmt
++ = '?';

2731 i‡(
fmt_övÆid
 =
DEF_NO
) {

2732 *
p°r_fmt
++ = '.';

2734 *
p°r_fmt
++ = '?';

2737 
dp_exp
 = 10.0f;

2738 
i
 = 0u; i < 
nbr_dp
; i++) {

2739 i‡(
fmt_övÆid
 =
DEF_NO
) {

2741 i‡(
nbr_dig_sig
 < 
LIB_STR_CFG_FP_MAX_NBR_DIG_SIG
) {

2742 
nbr_shi·d
 = (
CPU_INT32U
)(
nbr_fmt
 * 
dp_exp
);

2743 
dig_vÆ
 = (
CPU_INT32U
)(
nbr_shi·d
 % 10u);

2744 *
p°r_fmt
++ = (
CPU_CHAR
 )(
dig_vÆ
 + '0');

2745 
dp_exp
 *= 10.0f;

2747 i‡((
nbr_shi·d
 > 0) ||

2748 (
nbr_dig_sig
 > 0)) {

2749 
nbr_dig_sig
++;

2753 *
p°r_fmt
++ = '0';

2757 *
p°r_fmt
++ = '?';

2763 i‡(
nul
 !
DEF_NO
) {

2764 *
p°r_fmt
 = (
CPU_CHAR
)'\0';

2768 i‡(
fmt_övÆid
 !
DEF_NO
) {

2769  ((
CPU_CHAR
 *)0);

2773  (
p°r
);

2774 
	}
}

2972 
CPU_INT32U
 
	$Så_P¨£Nbr_I¡32U
 (c⁄° 
CPU_CHAR
 *
p°r
,

2973 
CPU_CHAR
 **
p°r_√xt
,

2974 
CPU_INT08U
 
nbr_ba£
)

2976 
CPU_INT32U
 
nbr
;

2979 
nbr
 = 
	`Så_P¨£Nbr_I¡32
–
p°r
,

2980 
p°r_√xt
,

2981 
nbr_ba£
,

2982 
DEF_NO
,

2983 (
CPU_BOOLEAN
 *)0);

2985  (
nbr
);

2986 
	}
}

3188 
CPU_INT32S
 
	$Så_P¨£Nbr_I¡32S
 (c⁄° 
CPU_CHAR
 *
p°r
,

3189 
CPU_CHAR
 **
p°r_√xt
,

3190 
CPU_INT08U
 
nbr_ba£
)

3192 
CPU_INT32S
 
nbr
;

3193 
CPU_INT32U
 
nbr_abs
;

3194 
CPU_BOOLEAN
 
nbr_√g
;

3197 
nbr_abs
 = 
	`Så_P¨£Nbr_I¡32
(
p°r
,

3198 
p°r_√xt
,

3199 
nbr_ba£
,

3200 
DEF_YES
,

3201 &
nbr_√g
);

3203 i‡(
nbr_√g
 =
DEF_NO
) {

3204 
nbr
 = (
nbr_abs
 > (
CPU_INT32U
Ë
DEF_INT_32S_MAX_VAL
Ë? (
CPU_INT32S
)DEF_INT_32S_MAX_VAL

3205 : (
CPU_INT32S
)
nbr_abs
;

3207 
nbr
 = (
nbr_abs
 > (
CPU_INT32U
)-
DEF_INT_32S_MIN_VAL_ONES_CPL
Ë? (
CPU_INT32S
)
DEF_INT_32S_MIN_VAL


3208 : -(
CPU_INT32S
)
nbr_abs
;

3211  (
nbr
);

3212 
	}
}

3443 
CPU_CHAR
 *
	$Så_FmtNbr_I¡32
 (
CPU_INT32U
 
nbr
,

3444 
CPU_INT08U
 
nbr_dig
,

3445 
CPU_INT08U
 
nbr_ba£
,

3446 
CPU_BOOLEAN
 
nbr_√g
,

3447 
CPU_CHAR
 
Àad_ch¨
,

3448 
CPU_BOOLEAN
 
lowî_ˇ£
,

3449 
CPU_BOOLEAN
 
nul
,

3450 
CPU_CHAR
 *
p°r
)

3452 
CPU_CHAR
 *
p°r_fmt
;

3453 
CPU_DATA
 
i
;

3454 
CPU_INT32U
 
nbr_fmt
;

3455 
CPU_INT32U
 
nbr_log
;

3456 
CPU_INT08U
 
nbr_dig_max
;

3457 
CPU_INT08U
 
nbr_dig_mö
;

3458 
CPU_INT08U
 
nbr_dig_fmtd
;

3459 
CPU_INT08U
 
nbr_√g_sign
;

3460 
CPU_INT08U
 
nbr_Àad_ch¨
;

3461 
CPU_INT08U
 
dig_vÆ
;

3462 
CPU_INT08U
 
Àad_ch¨_dñè_0
;

3463 
CPU_INT08U
 
Àad_ch¨_dñè_a
;

3464 
CPU_BOOLEAN
 
Àad_ch¨_dig
;

3465 
CPU_BOOLEAN
 
Àad_ch¨_0
;

3466 
CPU_BOOLEAN
 
fmt_övÆid
;

3467 
CPU_BOOLEAN
 
¥öt_ch¨
;

3468 
CPU_BOOLEAN
 
nbr_√g_fmtd
;

3472 i‡(
p°r
 =(
CPU_CHAR
 *)0) {

3473  ((
CPU_CHAR
 *)0);

3476 
fmt_övÆid
 = 
DEF_NO
;

3477 
Àad_ch¨_0
 = 
DEF_NO
;

3479 i‡(
nbr_dig
 < 1) {

3480 
fmt_övÆid
 = 
DEF_YES
;

3483 i‡((
nbr_ba£
 < 2u) ||

3484 (
nbr_ba£
 > 36u)) {

3485 
fmt_övÆid
 = 
DEF_YES
;

3488 i‡(
Àad_ch¨
 !(
CPU_CHAR
)'\0') {

3489 
¥öt_ch¨
 = 
	`ASCII_IsPröt
(
Àad_ch¨
);

3490 i‡(
¥öt_ch¨
 !
DEF_YES
) {

3491 
fmt_övÆid
 = 
DEF_YES
;

3493 } i‡(
Àad_ch¨
 != '0') {

3494 
Àad_ch¨_dñè_0
 = (
CPU_INT08U
)(
Àad_ch¨
 - '0');

3495 i‡(
lowî_ˇ£
 !
DEF_YES
) {

3496 
Àad_ch¨_dñè_a
 = (
CPU_INT08U
)(
Àad_ch¨
 - 'A');

3498 
Àad_ch¨_dñè_a
 = (
CPU_INT08U
)(
Àad_ch¨
 - 'a');

3501 
Àad_ch¨_dig
 = (((
nbr_ba£
 <10uË&& (
Àad_ch¨_dñè_0
 <Çbr_base)) ||

3502 ((
nbr_ba£
 > 10uË&& ((
Àad_ch¨_dñè_0
 < 10u) ||

3503 (
Àad_ch¨_dñè_a
 < (
nbr_ba£
 - 10u))))Ë? 
DEF_YES
 : 
DEF_NO
;

3505 i‡(
Àad_ch¨_dig
 =
DEF_YES
) {

3506 
fmt_övÆid
 = 
DEF_YES
;

3513 
p°r_fmt
 = 
p°r
;

3515 i‡(
fmt_övÆid
 =
DEF_NO
) {

3516 
nbr_fmt
 = 
nbr
;

3517 
nbr_log
 = 
nbr
;

3518 
nbr_dig_max
 = 1u;

3519 
nbr_log
 >
nbr_ba£
) {

3520 
nbr_dig_max
++;

3521 
nbr_log
 /
nbr_ba£
;

3524 
nbr_√g_sign
 = (
nbr_√g
 =
DEF_YES
) ? 1u : 0u;

3525 i‡(
nbr_dig
 >(
nbr_dig_max
 + 
nbr_√g_sign
)) {

3526 
nbr_√g_fmtd
 = 
DEF_NO
;

3527 
nbr_dig_mö
 = 
	`DEF_MIN
(
nbr_dig_max
, 
nbr_dig
);

3529 i‡(
Àad_ch¨
 !(
CPU_CHAR
)'\0') {

3530 
nbr_dig_fmtd
 = 
nbr_dig
;

3531 
nbr_Àad_ch¨
 = 
nbr_dig
 -

3532 
nbr_dig_mö
 - 
nbr_√g_sign
;

3534 
nbr_dig_fmtd
 = 
nbr_dig_mö
 + 
nbr_√g_sign
;

3535 
nbr_Àad_ch¨
 = 0u;

3538 i‡(
nbr_Àad_ch¨
 > 0) {

3539 
Àad_ch¨_0
 = (
Àad_ch¨
 == '0')

3540 ? 
DEF_YES
 : 
DEF_NO
;

3542 
Àad_ch¨_0
 = 
DEF_NO
;

3546 
fmt_övÆid
 = 
DEF_YES
;

3550 i‡(
fmt_övÆid
 !
DEF_NO
) {

3551 
nbr_dig_fmtd
 = 
nbr_dig
;

3556 
p°r_fmt
 +
nbr_dig_fmtd
;

3558 i‡(
nul
 !
DEF_NO
) {

3559 *
p°r_fmt
 = (
CPU_CHAR
)'\0';

3561 
p°r_fmt
--;

3564 
i
 = 0u; i < 
nbr_dig_fmtd
; i++) {

3565 i‡(
fmt_övÆid
 =
DEF_NO
) {

3566 i‡((
nbr_fmt
 > 0) ||

3567 (
i
 == 0u)) {

3569 
dig_vÆ
 = (
CPU_INT08U
)(
nbr_fmt
 % 
nbr_ba£
);

3570 i‡(
dig_vÆ
 < 10u) {

3571 *
p°r_fmt
-- = (
CPU_CHAR
)(
dig_vÆ
 + '0');

3573 i‡(
lowî_ˇ£
 !
DEF_YES
) {

3574 *
p°r_fmt
-- = (
CPU_CHAR
)((
dig_vÆ
 - 10u) + 'A');

3576 *
p°r_fmt
-- = (
CPU_CHAR
)((
dig_vÆ
 - 10u) + 'a');

3580 
nbr_fmt
 /
nbr_ba£
;

3582 } i‡((
nbr_√g
 =
DEF_YES
) &&

3583 (((
Àad_ch¨_0
 =
DEF_NO
 ) &&

3584 (
nbr_√g_fmtd
 =
DEF_NO
 )) ||

3585 ((
Àad_ch¨_0
 !
DEF_NO
 ) &&

3586 (
i
 =(
nbr_dig_fmtd
 - 1u))))) {

3588 *
p°r_fmt
-- = '-';

3589 
nbr_√g_fmtd
 = 
DEF_YES
;

3591 } i‡(
Àad_ch¨
 !(
CPU_CHAR
)'\0') {

3592 *
p°r_fmt
-- = 
Àad_ch¨
;

3596 *
p°r_fmt
-- = '?';

3601 i‡(
fmt_övÆid
 !
DEF_NO
) {

3602  ((
CPU_CHAR
 *)0);

3606  (
p°r
);

3607 
	}
}

3836 
CPU_INT32U
 
	$Så_P¨£Nbr_I¡32
 (c⁄° 
CPU_CHAR
 *
p°r
,

3837 
CPU_CHAR
 **
p°r_√xt
,

3838 
CPU_INT08U
 
nbr_ba£
,

3839 
CPU_BOOLEAN
 
nbr_sig√d
,

3840 
CPU_BOOLEAN
 *
≤br_√g
)

3842 c⁄° 
CPU_CHAR
 *
p°r_∑r£
;

3843 c⁄° 
CPU_CHAR
 *
p°r_∑r£_nbr
;

3844 
CPU_CHAR
 *
p°r_∑r£_unu£d
;

3845 
CPU_CHAR
 
∑r£_ch¨
;

3846 
CPU_INT08U
 
∑r£_dig
;

3847 
CPU_INT32U
 
nbr
;

3848 
CPU_BOOLEAN
 
nbr_√g_unu£d
;

3849 
CPU_BOOLEAN
 
nbr_dig
;

3850 
CPU_BOOLEAN
 
nbr_Æpha
;

3851 
CPU_BOOLEAN
 
nbr_hex
;

3852 
CPU_BOOLEAN
 
nbr_hex_lowî
;

3853 
CPU_BOOLEAN
 
whôe•a˚
;

3854 
CPU_BOOLEAN
 
√g
;

3855 
CPU_BOOLEAN
 
ovf
;

3856 
CPU_BOOLEAN
 
d⁄e
;

3859 i‡(
p°r_√xt
 =(
CPU_CHAR
 **) 0) {

3860 
p°r_√xt
 = (
CPU_CHAR
 **)&
p°r_∑r£_unu£d
;

3861 ()&
p°r_∑r£_unu£d
;

3863 *
p°r_√xt
 = (
CPU_CHAR
 *)
p°r
;

3865 i‡(
≤br_√g
 =(
CPU_BOOLEAN
 *) 0) {

3866 
≤br_√g
 = (
CPU_BOOLEAN
 *)&
nbr_√g_unu£d
;

3867 ()&
nbr_√g_unu£d
;

3869 *
≤br_√g
 = 
DEF_NO
;

3872 i‡(
p°r
 =(
CPU_CHAR
 *)0) {

3876 i‡((
nbr_ba£
 == 1u) ||

3877 (
nbr_ba£
 > 36u)) {

3883 
p°r_∑r£
 = 
p°r
;

3885 
whôe•a˚
 = 
	`ASCII_IsS∑˚
(*
p°r_∑r£
);

3886 
whôe•a˚
 =
DEF_YES
) {

3887 
p°r_∑r£
++;

3888 
whôe•a˚
 = 
	`ASCII_IsS∑˚
(*
p°r_∑r£
);

3891 *
p°r_∑r£
) {

3893 
p°r_∑r£
++;

3894 
√g
 = 
DEF_NO
;

3899 i‡(
nbr_sig√d
 =
DEF_YES
) {

3900 
p°r_∑r£
++;

3902 
√g
 = 
DEF_YES
;

3907 
√g
 = 
DEF_NO
;

3913 
p°r_∑r£_nbr
 = 
p°r_∑r£
;

3915 
nbr_ba£
) {

3917 i‡(*
p°r_∑r£
 == '0') {

3918 
p°r_∑r£
++;

3919 *
p°r_∑r£
) {

3922 
nbr_ba£
 = 16u;

3923 
∑r£_ch¨
 = (
CPU_CHAR
)(*(
p°r_∑r£
 + 1));

3924 
nbr_hex
 = 
	`ASCII_IsDigHex
(
∑r£_ch¨
);

3925 i‡(
nbr_hex
 =
DEF_YES
) {

3926 
p°r_∑r£
++;

3932 
nbr_ba£
 = 8u;

3937 
nbr_ba£
 = 10u;

3943 i‡(*
p°r_∑r£
 == '0') {

3944 
p°r_∑r£
++;

3950 i‡(*
p°r_∑r£
 == '0') {

3951 
p°r_∑r£
++;

3952 *
p°r_∑r£
) {

3955 
∑r£_ch¨
 = (
CPU_CHAR
)(*(
p°r_∑r£
 + 1));

3956 
nbr_hex
 = 
	`ASCII_IsDigHex
(
∑r£_ch¨
);

3957 i‡(
nbr_hex
 =
DEF_YES
) {

3958 
p°r_∑r£
++;

3976 
nbr
 = 0u;

3977 
ovf
 = 
DEF_NO
;

3978 
d⁄e
 = 
DEF_NO
;

3980 
d⁄e
 =
DEF_NO
) {

3981 
∑r£_ch¨
 = (
CPU_CHAR
)*
p°r_∑r£
;

3982 
nbr_Æpha
 = 
	`ASCII_IsAÕhaNum
(
∑r£_ch¨
);

3983 i‡(
nbr_Æpha
 =
DEF_YES
) {

3985 
nbr_dig
 = 
	`ASCII_IsDig
(
∑r£_ch¨
);

3986 i‡(
nbr_dig
 =
DEF_YES
) {

3987 
∑r£_dig
 = (
CPU_INT08U
)(
∑r£_ch¨
 - '0');

3989 
nbr_hex_lowî
 = 
	`ASCII_IsLowî
(
∑r£_ch¨
);

3990 i‡(
nbr_hex_lowî
 =
DEF_YES
) {

3991 
∑r£_dig
 = (
CPU_INT08U
)((
∑r£_ch¨
 - 'a') + 10u);

3993 
∑r£_dig
 = (
CPU_INT08U
)((
∑r£_ch¨
 - 'A') + 10u);

3997 i‡(
∑r£_dig
 < 
nbr_ba£
) {

3998 i‡(
ovf
 =
DEF_NO
) {

3999 i‡(
nbr
 <
Så_Mu…OvfThTbl_I¡32U
[
nbr_ba£
]) {

4001 
nbr
 *
nbr_ba£
;

4002 
nbr
 +
∑r£_dig
;

4003 i‡(
nbr
 < 
∑r£_dig
) {

4004 
ovf
 = 
DEF_YES
;

4007 
ovf
 = 
DEF_YES
;

4010 
p°r_∑r£
++;

4013 
d⁄e
 = 
DEF_YES
;

4017 
d⁄e
 = 
DEF_YES
;

4021 i‡(
ovf
 =
DEF_YES
) {

4022 
nbr
 = 
DEF_INT_32U_MAX_VAL
;

4026 i‡(
p°r_∑r£
 !
p°r_∑r£_nbr
) {

4027 *
p°r_√xt
 = (
CPU_CHAR
 *)
p°r_∑r£
;

4029 *
p°r_√xt
 = (
CPU_CHAR
 *)
p°r
;

4032 *
≤br_√g
 = 
√g
;

4035  (
nbr
);

4036 
	}
}

	@UCOSIII/uC-LIB/lib_str.h

59 #i‚de‡ 
LIB_STR_MODULE_PRESENT


60 
	#LIB_STR_MODULE_PRESENT


	)

106 
	#LIB_STR_FP_MAX_NBR_DIG_SIG_MIN
 1u

	)

107 
	#LIB_STR_FP_MAX_NBR_DIG_SIG_MAX
 9u

	)

108 
	#LIB_STR_FP_MAX_NBR_DIG_SIG_DFLT
 7u

	)

153 
	~<˝u.h
>

155 
	~<lib_def.h
>

156 
	~<lib_ascii.h
>

158 
	~<lib_cfg.h
>

161 
	~<°dio.h
>

171 #ifde‡ 
LIB_STR_MODULE


172 
	#LIB_STR_EXT


	)

174 
	#LIB_STR_EXT
 

	)

198 #i‚de‡ 
LIB_STR_CFG_FP_EN


199 
	#LIB_STR_CFG_FP_EN
 
DEF_DISABLED


	)

206 #i‚de‡ 
LIB_STR_CFG_FP_MAX_NBR_DIG_SIG


207 
	#LIB_STR_CFG_FP_MAX_NBR_DIG_SIG
 
LIB_STR_FP_MAX_NBR_DIG_SIG_DFLT


	)

217 
	#STR_CR_LF
 "\r\n"

	)

218 
	#STR_LF_CR
 "\n\r"

	)

219 
	#STR_NEW_LINE
 
STR_CR_LF


	)

220 
	#STR_PARENT_PATH
 ".."

	)

222 
	#STR_CR_LF_LEN
 ((
STR_CR_LF
Ë- 1)

	)

223 
	#STR_LF_CR_LEN
 ((
STR_LF_CR
Ë- 1)

	)

224 
	#STR_NEW_LINE_LEN
 ((
STR_NEW_LINE
Ë- 1)

	)

225 
	#STR_PARENT_PATH_LEN
 ((
STR_PARENT_PATH
Ë- 1)

	)

262 
	#Så_FmtPröt
 
¢¥ötf


	)

263 
	#Så_FmtSˇn
 
ssˇnf


	)

273 
CPU_SIZE_T
 
Så_Lí
 (c⁄° 
CPU_CHAR
 *
p°r
);

275 
CPU_SIZE_T
 
Så_Lí_N
 (c⁄° 
CPU_CHAR
 *
p°r
,

276 
CPU_SIZE_T
 
Àn_max
);

280 
CPU_CHAR
 *
Så_C›y
 ( CPU_CHAR *
p°r_de°
,

281 c⁄° 
CPU_CHAR
 *
p°r_§c
);

283 
CPU_CHAR
 *
Så_C›y_N
 ( CPU_CHAR *
p°r_de°
,

284 c⁄° 
CPU_CHAR
 *
p°r_§c
,

285 
CPU_SIZE_T
 
Àn_max
);

288 
CPU_CHAR
 *
Så_C©
 ( CPU_CHAR *
p°r_de°
,

289 c⁄° 
CPU_CHAR
 *
p°r_ˇt
);

291 
CPU_CHAR
 *
Så_C©_N
 ( CPU_CHAR *
p°r_de°
,

292 c⁄° 
CPU_CHAR
 *
p°r_ˇt
,

293 
CPU_SIZE_T
 
Àn_max
);

297 
CPU_INT16S
 
Så_Cmp
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

298 c⁄° 
CPU_CHAR
 *
p2_°r
);

300 
CPU_INT16S
 
Så_Cmp_N
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

301 c⁄° 
CPU_CHAR
 *
p2_°r
,

302 
CPU_SIZE_T
 
Àn_max
);

304 
CPU_INT16S
 
Så_CmpIgn‹eCa£
 (c⁄° 
CPU_CHAR
 *
p1_°r
,

305 c⁄° 
CPU_CHAR
 *
p2_°r
);

307 
CPU_INT16S
 
Så_CmpIgn‹eCa£_N
(c⁄° 
CPU_CHAR
 *
p1_°r
,

308 c⁄° 
CPU_CHAR
 *
p2_°r
,

309 
CPU_SIZE_T
 
Àn_max
);

313 
CPU_CHAR
 *
Så_Ch¨
 (c⁄° CPU_CHAR *
p°r
,

314 
CPU_CHAR
 
§ch_ch¨
);

316 
CPU_CHAR
 *
Så_Ch¨_N
 (c⁄° CPU_CHAR *
p°r
,

317 
CPU_SIZE_T
 
Àn_max
,

318 
CPU_CHAR
 
§ch_ch¨
);

320 
CPU_CHAR
 *
Så_Ch¨_La°
 (c⁄° CPU_CHAR *
p°r
,

321 
CPU_CHAR
 
§ch_ch¨
);

323 
CPU_CHAR
 *
Så_Ch¨_La°_N
 (c⁄° CPU_CHAR *
p°r
,

324 
CPU_SIZE_T
 
Àn_max
,

325 
CPU_CHAR
 
§ch_ch¨
);

327 
CPU_CHAR
 *
Så_Ch¨_Rïœ˚
 ( CPU_CHAR *
p°r
,

328 
CPU_CHAR
 
ch¨_§ch
,

329 
CPU_CHAR
 
ch¨_ª∂a˚
);

331 
CPU_CHAR
 *
Så_Ch¨_Rïœ˚_N
 ( CPU_CHAR *
p°r
,

332 
CPU_CHAR
 
ch¨_§ch
,

333 
CPU_CHAR
 
ch¨_ª∂a˚
,

334 
CPU_SIZE_T
 
Àn_max
);

336 
CPU_CHAR
 *
Så_Så
 (c⁄° CPU_CHAR *
p°r
,

337 c⁄° 
CPU_CHAR
 *
p°r_§ch
);

339 
CPU_CHAR
 *
Så_Så_N
 (c⁄° CPU_CHAR *
p°r
,

340 c⁄° 
CPU_CHAR
 *
p°r_§ch
,

341 
CPU_SIZE_T
 
Àn_max
);

345 
CPU_CHAR
 *
Så_FmtNbr_I¡32U
 ( 
CPU_INT32U
 
nbr
,

346 
CPU_INT08U
 
nbr_dig
,

347 
CPU_INT08U
 
nbr_ba£
,

348 
CPU_CHAR
 
Àad_ch¨
,

349 
CPU_BOOLEAN
 
lowî_ˇ£
,

350 
CPU_BOOLEAN
 
nul
,

351 
CPU_CHAR
 *
p°r
);

353 
CPU_CHAR
 *
Så_FmtNbr_I¡32S
 ( 
CPU_INT32S
 
nbr
,

354 
CPU_INT08U
 
nbr_dig
,

355 
CPU_INT08U
 
nbr_ba£
,

356 
CPU_CHAR
 
Àad_ch¨
,

357 
CPU_BOOLEAN
 
lowî_ˇ£
,

358 
CPU_BOOLEAN
 
nul
,

359 
CPU_CHAR
 *
p°r
);

361 #i‡(
LIB_STR_CFG_FP_EN
 =
DEF_ENABLED
)

362 
CPU_CHAR
 *
Så_FmtNbr_32
 ( 
CPU_FP32
 
nbr
,

363 
CPU_INT08U
 
nbr_dig
,

364 
CPU_INT08U
 
nbr_dp
,

365 
CPU_CHAR
 
Àad_ch¨
,

366 
CPU_BOOLEAN
 
nul
,

367 
CPU_CHAR
 *
p°r
);

372 
CPU_INT32U
 
Så_P¨£Nbr_I¡32U
(c⁄° 
CPU_CHAR
 *
p°r
,

373 
CPU_CHAR
 **
p°r_√xt
,

374 
CPU_INT08U
 
nbr_ba£
);

376 
CPU_INT32S
 
Så_P¨£Nbr_I¡32S
(c⁄° 
CPU_CHAR
 *
p°r
,

377 
CPU_CHAR
 **
p°r_√xt
,

378 
CPU_INT08U
 
nbr_ba£
);

387 #i‚de‡ 
LIB_STR_CFG_FP_EN


392 #ñi‡ ((
LIB_STR_CFG_FP_EN
 !
DEF_DISABLED
) && \

393 (
	gLIB_STR_CFG_FP_EN
 !
DEF_ENABLED
 ))

399 #ñi‡ (
LIB_STR_CFG_FP_EN
 =
DEF_ENABLED
)

401 #i‚de‡ 
LIB_STR_CFG_FP_MAX_NBR_DIG_SIG


406 #ñi‡ (
DEF_CHK_VAL
(
LIB_STR_CFG_FP_MAX_NBR_DIG_SIG
, \

407 
LIB_STR_FP_MAX_NBR_DIG_SIG_MIN
, \

408 
LIB_STR_FP_MAX_NBR_DIG_SIG_MAX
Ë!
DEF_OK
)

	@UCOSIII/uCOS-III/Ports/ARM-Cortex-M4/Generic/GNU/os_cpu.h

39 #i‚de‡ 
OS_CPU_H


40 
	#OS_CPU_H


	)

42 #ifde‡ 
OS_CPU_GLOBALS


43 
	#OS_CPU_EXT


	)

45 
	#OS_CPU_EXT
 

	)

48 #ifde‡
__˝lu•lus


59 #i‡(
deföed
(
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
))

60 
	#OS_CPU_ARM_FP_EN
 
DEF_ENABLED


	)

62 
	#OS_CPU_ARM_FP_EN
 
DEF_DISABLED


	)

64 
	#OS_CPU_ARM_FP_REG_NBR
 32u

	)

73 
	#OS_TASK_SW
(Ë
	`OSCtxSw
()

	)

94 #i‡ 
OS_CFG_TS_EN
 == 1u

95 
	#OS_TS_GET
(Ë(
CPU_TS
)
	`CPU_TS_TmrRd
(Ë

	)

97 
	#OS_TS_GET
(Ë(
CPU_TS
)0u

	)

100 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) && \

101 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
)

130 
	#OS_CPU_CFG_SYSTICK_PRIO
 0u

	)

139 
OS_CPU_EXT
 
CPU_STK
 *
OS_CPU_Ex˚±StkBa£
;

148 
OSCtxSw
 ();

149 
OSI¡CtxSw
 ();

150 
OSSèπHighRdy
 ();

152 
OS_CPU_PídSVH™dÀr
 ();

155 
OS_CPU_SysTickH™dÀr
();

156 
OS_CPU_SysTickInô
 (
CPU_INT32U
 
˙ts
);

158 #i‡(
OS_CPU_ARM_FP_EN
 =
DEF_ENABLED
)

159 
OS_CPU_FP_Reg_Push
 (
CPU_STK
 *
°kPå
);

160 
OS_CPU_FP_Reg_P›
 (
CPU_STK
 *
°kPå
);

164 #ifde‡
__˝lu•lus


	@UCOSIII/uCOS-III/Ports/ARM-Cortex-M4/Generic/GNU/os_cpu_c.c

40 
	#OS_CPU_GLOBALS


	)

42 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


43 c⁄° 
CPU_CHAR
 *
	gos_˝u_c__c
 = "$Id: $";

53 
	~<os.h
>

56 #ifde‡
__˝lu•lus


74 
OSIdÀTaskHook
 ()

76 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

77 i‡(
OS_AµIdÀTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

78 (*
OS_AµIdÀTaskHookPå
)();

96 
OSInôHook
 ()

99 
OS_CPU_Ex˚±StkBa£
 = (
CPU_STK
 *)(
OSCfg_ISRStkBa£På
 + 
OSCfg_ISRStkSize
);

100 
OS_CPU_Ex˚±StkBa£
 = (
CPU_STK
 *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);

117 
OSSètTaskHook
 ()

119 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

120 i‡(
OS_AµSètTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

121 (*
OS_AµSètTaskHookPå
)();

139 
OSTaskCª©eHook
 (
OS_TCB
 *
p_tcb
)

141 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

142 i‡(
OS_AµTaskCª©eHookPå
 !(
OS_APP_HOOK_TCB
)0) {

143 (*
OS_AµTaskCª©eHookPå
)(
p_tcb
);

146 ()
p_tcb
;

163 
OSTaskDñHook
 (
OS_TCB
 *
p_tcb
)

165 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

166 i‡(
OS_AµTaskDñHookPå
 !(
OS_APP_HOOK_TCB
)0) {

167 (*
OS_AµTaskDñHookPå
)(
p_tcb
);

170 ()
p_tcb
;

188 
OSTaskRëu∫Hook
 (
OS_TCB
 *
p_tcb
)

190 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

191 i‡(
OS_AµTaskRëu∫HookPå
 !(
OS_APP_HOOK_TCB
)0) {

192 (*
OS_AµTaskRëu∫HookPå
)(
p_tcb
);

195 ()
p_tcb
;

349 
CPU_STK
 *
OSTaskStkInô
 (
OS_TASK_PTR
 
p_èsk
,

350 *
p_¨g
,

351 
CPU_STK
 *
p_°k_ba£
,

352 
CPU_STK
 *
p_°k_limô
,

353 
CPU_STK_SIZE
 
°k_size
,

354 
OS_OPT
 
›t
)

356 
CPU_STK
 *
p_°k
;

359 ()
›t
;

361 
p_°k
 = &
p_°k_ba£
[
°k_size
];

363 
p_°k
 = (
CPU_STK
 *)((CPU_STK)(p_stk) & 0xFFFFFFF8);

365 *--
p_°k
 = (
CPU_STK
)0x01000000u;

366 *--
p_°k
 = (
CPU_STK
)
p_èsk
;

367 *--
p_°k
 = (
CPU_STK
)
OS_TaskRëu∫
;

368 *--
p_°k
 = (
CPU_STK
)0x12121212u;

369 *--
p_°k
 = (
CPU_STK
)0x03030303u;

370 *--
p_°k
 = (
CPU_STK
)0x02020202u;

371 *--
p_°k
 = (
CPU_STK
)
p_°k_limô
;

372 *--
p_°k
 = (
CPU_STK
)
p_¨g
;

374 *--
p_°k
 = (
CPU_STK
)0x11111111u;

375 *--
p_°k
 = (
CPU_STK
)0x10101010u;

376 *--
p_°k
 = (
CPU_STK
)0x09090909u;

377 *--
p_°k
 = (
CPU_STK
)0x08080808u;

378 *--
p_°k
 = (
CPU_STK
)0x07070707u;

379 *--
p_°k
 = (
CPU_STK
)0x06060606u;

380 *--
p_°k
 = (
CPU_STK
)0x05050505u;

381 *--
p_°k
 = (
CPU_STK
)0x04040404u;

383 #i‡(
OS_CPU_ARM_FP_EN
 =
DEF_ENABLED
)

384 i‡((
›t
 & 
OS_OPT_TASK_SAVE_FP
Ë!(
OS_OPT
)0) {

385 *--
p_°k
 = (
CPU_STK
)0x02000000u;

387 *--
p_°k
 = (
CPU_STK
)0x41F80000u;

388 *--
p_°k
 = (
CPU_STK
)0x41F00000u;

389 *--
p_°k
 = (
CPU_STK
)0x41E80000u;

390 *--
p_°k
 = (
CPU_STK
)0x41E00000u;

391 *--
p_°k
 = (
CPU_STK
)0x41D80000u;

392 *--
p_°k
 = (
CPU_STK
)0x41D00000u;

393 *--
p_°k
 = (
CPU_STK
)0x41C80000u;

394 *--
p_°k
 = (
CPU_STK
)0x41C00000u;

395 *--
p_°k
 = (
CPU_STK
)0x41B80000u;

396 *--
p_°k
 = (
CPU_STK
)0x41B00000u;

397 *--
p_°k
 = (
CPU_STK
)0x41A80000u;

398 *--
p_°k
 = (
CPU_STK
)0x41A00000u;

399 *--
p_°k
 = (
CPU_STK
)0x41980000u;

400 *--
p_°k
 = (
CPU_STK
)0x41900000u;

401 *--
p_°k
 = (
CPU_STK
)0x41880000u;

402 *--
p_°k
 = (
CPU_STK
)0x41800000u;

403 *--
p_°k
 = (
CPU_STK
)0x41700000u;

404 *--
p_°k
 = (
CPU_STK
)0x41600000u;

405 *--
p_°k
 = (
CPU_STK
)0x41500000u;

406 *--
p_°k
 = (
CPU_STK
)0x41400000u;

407 *--
p_°k
 = (
CPU_STK
)0x41300000u;

408 *--
p_°k
 = (
CPU_STK
)0x41200000u;

409 *--
p_°k
 = (
CPU_STK
)0x41100000u;

410 *--
p_°k
 = (
CPU_STK
)0x41000000u;

411 *--
p_°k
 = (
CPU_STK
)0x40E00000u;

412 *--
p_°k
 = (
CPU_STK
)0x40C00000u;

413 *--
p_°k
 = (
CPU_STK
)0x40A00000u;

414 *--
p_°k
 = (
CPU_STK
)0x40800000u;

415 *--
p_°k
 = (
CPU_STK
)0x40400000u;

416 *--
p_°k
 = (
CPU_STK
)0x40000000u;

417 *--
p_°k
 = (
CPU_STK
)0x3F800000u;

418 *--
p_°k
 = (
CPU_STK
)0x00000000u;

422  (
p_°k
);

442 
OSTaskSwHook
 ()

444 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

445 
CPU_TS
 
ts
;

447 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


448 
CPU_TS
 
öt_dis_time
;

452 #i‡(
OS_CPU_ARM_FP_EN
 =
DEF_ENABLED
)

453 i‡((
OSTCBCurPå
->
O±
 & 
OS_OPT_TASK_SAVE_FP
Ë!(
OS_OPT
)0) {

454 
OS_CPU_FP_Reg_Push
(
OSTCBCurPå
->
StkPå
);

457 i‡((
OSTCBHighRdyPå
->
O±
 & 
OS_OPT_TASK_SAVE_FP
Ë!(
OS_OPT
)0) {

458 
OS_CPU_FP_Reg_P›
(
OSTCBHighRdyPå
->
StkPå
);

462 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

463 i‡(
OS_AµTaskSwHookPå
 !(
OS_APP_HOOK_VOID
)0) {

464 (*
OS_AµTaskSwHookPå
)();

468 #i‡(
deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

469 
TRACE_OS_TASK_SWITCHED_IN
(
OSTCBHighRdyPå
);

472 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

473 
ts
 = 
OS_TS_GET
();

474 i‡(
OSTCBCurPå
 !
OSTCBHighRdyPå
) {

475 
OSTCBCurPå
->
Cy˛esDñè
 = 
ts
 - OSTCBCurPå->
Cy˛esSèπ
;

476 
OSTCBCurPå
->
Cy˛esTŸÆ
 +(
OS_CYCLES
)OSTCBCurPå->
Cy˛esDñè
;

479 
OSTCBHighRdyPå
->
Cy˛esSèπ
 = 
ts
;

482 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


483 
öt_dis_time
 = 
CPU_I¡DisMósMaxCurRe£t
();

484 i‡(
OSTCBCurPå
->
I¡DisTimeMax
 < 
öt_dis_time
) {

485 
OSTCBCurPå
->
I¡DisTimeMax
 = 
öt_dis_time
;

489 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

491 i‡(
OSTCBCurPå
->
SchedLockTimeMax
 < 
OSSchedLockTimeMaxCur
) {

492 
OSTCBCurPå
->
SchedLockTimeMax
 = 
OSSchedLockTimeMaxCur
;

494 
OSSchedLockTimeMaxCur
 = (
CPU_TS
)0;

511 
OSTimeTickHook
 ()

513 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

514 i‡(
OS_AµTimeTickHookPå
 !(
OS_APP_HOOK_VOID
)0) {

515 (*
OS_AµTimeTickHookPå
)();

534 
OS_CPU_SysTickH™dÀr
 ()

536 
CPU_SR_ALLOC
();

539 
CPU_CRITICAL_ENTER
();

540 
OSI¡Ne°ögCå
++;

541 
CPU_CRITICAL_EXIT
();

543 
OSTimeTick
();

545 
OSI¡Exô
();

561 
OS_CPU_SysTickInô
 (
CPU_INT32U
 
˙ts
)

563 
CPU_INT32U
 
¥io
;

566 
CPU_REG_NVIC_ST_RELOAD
 = 
˙ts
 - 1u;

569 
¥io
 = 
CPU_REG_NVIC_SHPRI3
;

570 
¥io
 &
DEF_BIT_FIELD
(24, 0);

571 
¥io
 |
DEF_BIT_MASK
(
OS_CPU_CFG_SYSTICK_PRIO
, 24);

573 
CPU_REG_NVIC_SHPRI3
 = 
¥io
;

576 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_CLKSOURCE
 |

577 
CPU_REG_NVIC_ST_CTRL_ENABLE
;

579 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_TICKINT
;

582 #ifde‡
__˝lu•lus


	@UCOSIII/uCOS-III/Ports/ARM-Cortex-M4/Generic/IAR/os_cpu.h

39 #i‚de‡ 
OS_CPU_H


40 
	#OS_CPU_H


	)

42 #ifde‡ 
OS_CPU_GLOBALS


43 
	#OS_CPU_EXT


	)

45 
	#OS_CPU_EXT
 

	)

48 #ifde‡
__˝lu•lus


59 #ifde‡
__ARMVFP__


60 
	#OS_CPU_ARM_FP_EN
 
DEF_ENABLED


	)

62 
	#OS_CPU_ARM_FP_EN
 
DEF_DISABLED


	)

64 
	#OS_CPU_ARM_FP_REG_NBR
 32u

	)

72 
	#OS_TASK_SW
(Ë
	`OSCtxSw
()

	)

93 #i‡ 
OS_CFG_TS_EN
 == 1u

94 
	#OS_TS_GET
(Ë(
CPU_TS
)
	`CPU_TS_TmrRd
(Ë

	)

96 
	#OS_TS_GET
(Ë(
CPU_TS
)0u

	)

99 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) && \

100 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
)

129 
	#OS_CPU_CFG_SYSTICK_PRIO
 0u

	)

138 
OS_CPU_EXT
 
CPU_STK
 *
OS_CPU_Ex˚±StkBa£
;

147 
OSCtxSw
 ();

148 
OSI¡CtxSw
 ();

149 
OSSèπHighRdy
 ();

151 
OS_CPU_PídSVH™dÀr
 ();

154 
OS_CPU_SysTickH™dÀr
();

155 
OS_CPU_SysTickInô
 (
CPU_INT32U
 
˙ts
);

157 #i‡(
OS_CPU_ARM_FP_EN
 =
DEF_ENABLED
)

158 
OS_CPU_FP_Reg_Push
 (
CPU_STK
 *
°kPå
);

159 
OS_CPU_FP_Reg_P›
 (
CPU_STK
 *
°kPå
);

163 #ifde‡
__˝lu•lus


	@UCOSIII/uCOS-III/Ports/ARM-Cortex-M4/Generic/IAR/os_cpu_c.c

40 
	#OS_CPU_GLOBALS


	)

42 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


43 c⁄° 
CPU_CHAR
 *
	gos_˝u_c__c
 = "$Id: $";

53 
	~<os.h
>

56 #ifde‡
__˝lu•lus


74 
OSIdÀTaskHook
 ()

76 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

77 i‡(
OS_AµIdÀTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

78 (*
OS_AµIdÀTaskHookPå
)();

96 
OSInôHook
 ()

99 
OS_CPU_Ex˚±StkBa£
 = (
CPU_STK
 *)(
OSCfg_ISRStkBa£På
 + 
OSCfg_ISRStkSize
);

100 
OS_CPU_Ex˚±StkBa£
 = (
CPU_STK
 *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);

117 
OSSètTaskHook
 ()

119 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

120 i‡(
OS_AµSètTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

121 (*
OS_AµSètTaskHookPå
)();

139 
OSTaskCª©eHook
 (
OS_TCB
 *
p_tcb
)

141 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

142 i‡(
OS_AµTaskCª©eHookPå
 !(
OS_APP_HOOK_TCB
)0) {

143 (*
OS_AµTaskCª©eHookPå
)(
p_tcb
);

146 ()
p_tcb
;

163 
OSTaskDñHook
 (
OS_TCB
 *
p_tcb
)

165 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

166 i‡(
OS_AµTaskDñHookPå
 !(
OS_APP_HOOK_TCB
)0) {

167 (*
OS_AµTaskDñHookPå
)(
p_tcb
);

170 ()
p_tcb
;

188 
OSTaskRëu∫Hook
 (
OS_TCB
 *
p_tcb
)

190 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

191 i‡(
OS_AµTaskRëu∫HookPå
 !(
OS_APP_HOOK_TCB
)0) {

192 (*
OS_AµTaskRëu∫HookPå
)(
p_tcb
);

195 ()
p_tcb
;

349 
CPU_STK
 *
OSTaskStkInô
 (
OS_TASK_PTR
 
p_èsk
,

350 *
p_¨g
,

351 
CPU_STK
 *
p_°k_ba£
,

352 
CPU_STK
 *
p_°k_limô
,

353 
CPU_STK_SIZE
 
°k_size
,

354 
OS_OPT
 
›t
)

356 
CPU_STK
 *
p_°k
;

359 ()
›t
;

361 
p_°k
 = &
p_°k_ba£
[
°k_size
];

363 
p_°k
 = (
CPU_STK
 *)((CPU_STK)(p_stk) & 0xFFFFFFF8);

365 *--
p_°k
 = (
CPU_STK
)0x01000000u;

366 *--
p_°k
 = (
CPU_STK
)
p_èsk
;

367 *--
p_°k
 = (
CPU_STK
)
OS_TaskRëu∫
;

368 *--
p_°k
 = (
CPU_STK
)0x12121212u;

369 *--
p_°k
 = (
CPU_STK
)0x03030303u;

370 *--
p_°k
 = (
CPU_STK
)0x02020202u;

371 *--
p_°k
 = (
CPU_STK
)
p_°k_limô
;

372 *--
p_°k
 = (
CPU_STK
)
p_¨g
;

374 *--
p_°k
 = (
CPU_STK
)0x11111111u;

375 *--
p_°k
 = (
CPU_STK
)0x10101010u;

376 *--
p_°k
 = (
CPU_STK
)0x09090909u;

377 *--
p_°k
 = (
CPU_STK
)0x08080808u;

378 *--
p_°k
 = (
CPU_STK
)0x07070707u;

379 *--
p_°k
 = (
CPU_STK
)0x06060606u;

380 *--
p_°k
 = (
CPU_STK
)0x05050505u;

381 *--
p_°k
 = (
CPU_STK
)0x04040404u;

383 #i‡(
OS_CPU_ARM_FP_EN
 =
DEF_ENABLED
)

384 i‡((
›t
 & 
OS_OPT_TASK_SAVE_FP
Ë!(
OS_OPT
)0) {

385 *--
p_°k
 = (
CPU_STK
)0x02000000u;

387 *--
p_°k
 = (
CPU_STK
)0x41F80000u;

388 *--
p_°k
 = (
CPU_STK
)0x41F00000u;

389 *--
p_°k
 = (
CPU_STK
)0x41E80000u;

390 *--
p_°k
 = (
CPU_STK
)0x41E00000u;

391 *--
p_°k
 = (
CPU_STK
)0x41D80000u;

392 *--
p_°k
 = (
CPU_STK
)0x41D00000u;

393 *--
p_°k
 = (
CPU_STK
)0x41C80000u;

394 *--
p_°k
 = (
CPU_STK
)0x41C00000u;

395 *--
p_°k
 = (
CPU_STK
)0x41B80000u;

396 *--
p_°k
 = (
CPU_STK
)0x41B00000u;

397 *--
p_°k
 = (
CPU_STK
)0x41A80000u;

398 *--
p_°k
 = (
CPU_STK
)0x41A00000u;

399 *--
p_°k
 = (
CPU_STK
)0x41980000u;

400 *--
p_°k
 = (
CPU_STK
)0x41900000u;

401 *--
p_°k
 = (
CPU_STK
)0x41880000u;

402 *--
p_°k
 = (
CPU_STK
)0x41800000u;

403 *--
p_°k
 = (
CPU_STK
)0x41700000u;

404 *--
p_°k
 = (
CPU_STK
)0x41600000u;

405 *--
p_°k
 = (
CPU_STK
)0x41500000u;

406 *--
p_°k
 = (
CPU_STK
)0x41400000u;

407 *--
p_°k
 = (
CPU_STK
)0x41300000u;

408 *--
p_°k
 = (
CPU_STK
)0x41200000u;

409 *--
p_°k
 = (
CPU_STK
)0x41100000u;

410 *--
p_°k
 = (
CPU_STK
)0x41000000u;

411 *--
p_°k
 = (
CPU_STK
)0x40E00000u;

412 *--
p_°k
 = (
CPU_STK
)0x40C00000u;

413 *--
p_°k
 = (
CPU_STK
)0x40A00000u;

414 *--
p_°k
 = (
CPU_STK
)0x40800000u;

415 *--
p_°k
 = (
CPU_STK
)0x40400000u;

416 *--
p_°k
 = (
CPU_STK
)0x40000000u;

417 *--
p_°k
 = (
CPU_STK
)0x3F800000u;

418 *--
p_°k
 = (
CPU_STK
)0x00000000u;

422  (
p_°k
);

442 
OSTaskSwHook
 ()

444 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

445 
CPU_TS
 
ts
;

447 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


448 
CPU_TS
 
öt_dis_time
;

452 #i‡(
OS_CPU_ARM_FP_EN
 =
DEF_ENABLED
)

453 i‡((
OSTCBCurPå
->
O±
 & 
OS_OPT_TASK_SAVE_FP
Ë!(
OS_OPT
)0) {

454 
OS_CPU_FP_Reg_Push
(
OSTCBCurPå
->
StkPå
);

457 i‡((
OSTCBHighRdyPå
->
O±
 & 
OS_OPT_TASK_SAVE_FP
Ë!(
OS_OPT
)0) {

458 
OS_CPU_FP_Reg_P›
(
OSTCBHighRdyPå
->
StkPå
);

462 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

463 i‡(
OS_AµTaskSwHookPå
 !(
OS_APP_HOOK_VOID
)0) {

464 (*
OS_AµTaskSwHookPå
)();

468 #i‡(
deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

469 
TRACE_OS_TASK_SWITCHED_IN
(
OSTCBHighRdyPå
);

472 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

473 
ts
 = 
OS_TS_GET
();

474 i‡(
OSTCBCurPå
 !
OSTCBHighRdyPå
) {

475 
OSTCBCurPå
->
Cy˛esDñè
 = 
ts
 - OSTCBCurPå->
Cy˛esSèπ
;

476 
OSTCBCurPå
->
Cy˛esTŸÆ
 +(
OS_CYCLES
)OSTCBCurPå->
Cy˛esDñè
;

479 
OSTCBHighRdyPå
->
Cy˛esSèπ
 = 
ts
;

482 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


483 
öt_dis_time
 = 
CPU_I¡DisMósMaxCurRe£t
();

484 i‡(
OSTCBCurPå
->
I¡DisTimeMax
 < 
öt_dis_time
) {

485 
OSTCBCurPå
->
I¡DisTimeMax
 = 
öt_dis_time
;

489 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

491 i‡(
OSTCBCurPå
->
SchedLockTimeMax
 < 
OSSchedLockTimeMaxCur
) {

492 
OSTCBCurPå
->
SchedLockTimeMax
 = 
OSSchedLockTimeMaxCur
;

494 
OSSchedLockTimeMaxCur
 = (
CPU_TS
)0;

511 
OSTimeTickHook
 ()

513 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

514 i‡(
OS_AµTimeTickHookPå
 !(
OS_APP_HOOK_VOID
)0) {

515 (*
OS_AµTimeTickHookPå
)();

534 
OS_CPU_SysTickH™dÀr
 ()

536 
CPU_SR_ALLOC
();

539 
CPU_CRITICAL_ENTER
();

540 
OSI¡Ne°ögCå
++;

541 
CPU_CRITICAL_EXIT
();

543 
OSTimeTick
();

545 
OSI¡Exô
();

561 
OS_CPU_SysTickInô
 (
CPU_INT32U
 
˙ts
)

563 
CPU_INT32U
 
¥io
;

566 
CPU_REG_NVIC_ST_RELOAD
 = 
˙ts
 - 1u;

569 
¥io
 = 
CPU_REG_NVIC_SHPRI3
;

570 
¥io
 &
DEF_BIT_FIELD
(24, 0);

571 
¥io
 |
DEF_BIT_MASK
(
OS_CPU_CFG_SYSTICK_PRIO
, 24);

573 
CPU_REG_NVIC_SHPRI3
 = 
¥io
;

576 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_CLKSOURCE
 |

577 
CPU_REG_NVIC_ST_CTRL_ENABLE
;

579 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_TICKINT
;

582 #ifde‡
__˝lu•lus


	@UCOSIII/uCOS-III/Ports/ARM-Cortex-M4/Generic/RealView/os_cpu.h

39 #i‚de‡ 
OS_CPU_H


40 
	#OS_CPU_H


	)

42 #ifde‡ 
OS_CPU_GLOBALS


43 
	#OS_CPU_EXT


	)

45 
	#OS_CPU_EXT
 

	)

48 #ifde‡
__˝lu•lus


59 #i‚de‡ 
__TARGET_FPU_SOFTVFP


60 
	#OS_CPU_ARM_FP_EN
 
DEF_ENABLED


	)

62 
	#OS_CPU_ARM_FP_EN
 
DEF_DISABLED


	)

65 
	#OS_CPU_ARM_FP_REG_NBR
 32u

	)

74 
	#OS_TASK_SW
(Ë
	`OSCtxSw
()

	)

95 #i‡ 
OS_CFG_TS_EN
 == 1u

96 
	#OS_TS_GET
(Ë(
CPU_TS
)
	`CPU_TS_TmrRd
(Ë

	)

98 
	#OS_TS_GET
(Ë(
CPU_TS
)0u

	)

101 #i‡(
CPU_CFG_TS_32_EN
 =
DEF_ENABLED
) && \

102 (
CPU_CFG_TS_TMR_SIZE
 < 
CPU_WORD_SIZE_32
)

131 
	#OS_CPU_CFG_SYSTICK_PRIO
 0u

	)

140 
OS_CPU_EXT
 
CPU_STK
 *
OS_CPU_Ex˚±StkBa£
;

149 
OSCtxSw
 ();

150 
OSI¡CtxSw
 ();

151 
OSSèπHighRdy
 ();

153 
OS_CPU_PídSVH™dÀr
 ();

155 
OS_CPU_SysTickH™dÀr
();

156 
OS_CPU_SysTickInô
 (
CPU_INT32U
 
˙ts
);

158 #i‡(
OS_CPU_ARM_FP_EN
 =
DEF_ENABLED
)

159 
OS_CPU_FP_Reg_Push
 (
CPU_STK
 *
°kPå
);

160 
OS_CPU_FP_Reg_P›
 (
CPU_STK
 *
°kPå
);

164 #ifde‡
__˝lu•lus


	@UCOSIII/uCOS-III/Ports/ARM-Cortex-M4/Generic/RealView/os_cpu_c.c

40 
	#OS_CPU_GLOBALS


	)

41 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


42 c⁄° 
CPU_CHAR
 *
	gos_˝u_c__c
 = "$Id: $";

52 
	~<os.h
>

53 
	~"ö˛udes.h
"

55 #ifde‡
__˝lu•lus


73 
OSIdÀTaskHook
 ()

75 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

76 i‡(
OS_AµIdÀTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

77 (*
OS_AµIdÀTaskHookPå
)();

95 
OSInôHook
 ()

98 
OS_CPU_Ex˚±StkBa£
 = (
CPU_STK
 *)(
OSCfg_ISRStkBa£På
 + 
OSCfg_ISRStkSize
);

99 
OS_CPU_Ex˚±StkBa£
 = (
CPU_STK
 *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);

116 
OSSètTaskHook
 ()

118 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

119 i‡(
OS_AµSètTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

120 (*
OS_AµSètTaskHookPå
)();

138 
OSTaskCª©eHook
 (
OS_TCB
 *
p_tcb
)

140 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

141 i‡(
OS_AµTaskCª©eHookPå
 !(
OS_APP_HOOK_TCB
)0) {

142 (*
OS_AµTaskCª©eHookPå
)(
p_tcb
);

145 ()
p_tcb
;

162 
OSTaskDñHook
 (
OS_TCB
 *
p_tcb
)

164 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

165 i‡(
OS_AµTaskDñHookPå
 !(
OS_APP_HOOK_TCB
)0) {

166 (*
OS_AµTaskDñHookPå
)(
p_tcb
);

169 ()
p_tcb
;

187 
OSTaskRëu∫Hook
 (
OS_TCB
 *
p_tcb
)

189 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

190 i‡(
OS_AµTaskRëu∫HookPå
 !(
OS_APP_HOOK_TCB
)0) {

191 (*
OS_AµTaskRëu∫HookPå
)(
p_tcb
);

194 ()
p_tcb
;

227 
CPU_STK
 *
OSTaskStkInô
 (
OS_TASK_PTR
 
p_èsk
,

228 *
p_¨g
,

229 
CPU_STK
 *
p_°k_ba£
,

230 
CPU_STK
 *
p_°k_limô
,

231 
CPU_STK_SIZE
 
°k_size
,

232 
OS_OPT
 
›t
)

234 
CPU_STK
 *
p_°k
;

237 ()
›t
;

239 
p_°k
 = &
p_°k_ba£
[
°k_size
];

241 
p_°k
 = (
CPU_STK
 *)((CPU_STK)(p_stk) & 0xFFFFFFF8);

243 #i‡(
__FPU_PRESENT
==1)&&(
__FPU_USED
==1)

244 *(--
p_°k
Ë(
CPU_STK
)0x00000000u;

245 *(--
p_°k
Ë(
CPU_STK
)0x00001000u;

246 *(--
p_°k
Ë(
CPU_STK
)0x00000015u;

247 *(--
p_°k
Ë(
CPU_STK
)0x00000014u;

248 *(--
p_°k
Ë(
CPU_STK
)0x00000013u;

249 *(--
p_°k
Ë(
CPU_STK
)0x00000012u;

250 *(--
p_°k
Ë(
CPU_STK
)0x00000011u;

251 *(--
p_°k
Ë(
CPU_STK
)0x00000010u;

252 *(--
p_°k
Ë(
CPU_STK
)0x00000009u;

253 *(--
p_°k
Ë(
CPU_STK
)0x00000008u;

254 *(--
p_°k
Ë(
CPU_STK
)0x00000007u;

255 *(--
p_°k
Ë(
CPU_STK
)0x00000006u;

256 *(--
p_°k
Ë(
CPU_STK
)0x00000005u;

257 *(--
p_°k
Ë(
CPU_STK
)0x00000004u;

258 *(--
p_°k
Ë(
CPU_STK
)0x00000003u;

259 *(--
p_°k
Ë(
CPU_STK
)0x00000002u;

260 *(--
p_°k
Ë(
CPU_STK
)0x00000001u;

261 *(--
p_°k
Ë(
CPU_STK
)0x00000000u;

264 *(--
p_°k
Ë(
CPU_STK
)0x01000000u;

265 *(--
p_°k
Ë(
CPU_STK
)
p_èsk
;

266 *(--
p_°k
Ë(
CPU_STK
)
OS_TaskRëu∫
;

267 *(--
p_°k
Ë(
CPU_STK
)0x12121212u;

268 *(--
p_°k
Ë(
CPU_STK
)0x03030303u;

269 *(--
p_°k
Ë(
CPU_STK
)0x02020202u;

270 *(--
p_°k
Ë(
CPU_STK
)
p_°k_limô
;

271 *(--
p_°k
Ë(
CPU_STK
)
p_¨g
;

273 #i‡(
__FPU_PRESENT
==1)&&(
__FPU_USED
==1)

274 *(--
p_°k
Ë(
CPU_STK
)0x00000031u;

275 *(--
p_°k
Ë(
CPU_STK
)0x00000030u;

276 *(--
p_°k
Ë(
CPU_STK
)0x00000029u;

277 *(--
p_°k
Ë(
CPU_STK
)0x00000028u;

278 *(--
p_°k
Ë(
CPU_STK
)0x00000027u;

279 *(--
p_°k
Ë(
CPU_STK
)0x00000026u;

280 *(--
p_°k
Ë(
CPU_STK
)0x00000025u;

281 *(--
p_°k
Ë(
CPU_STK
)0x00000024u;

282 *(--
p_°k
Ë(
CPU_STK
)0x00000023u;

283 *(--
p_°k
Ë(
CPU_STK
)0x00000022u;

284 *(--
p_°k
Ë(
CPU_STK
)0x00000021u;

285 *(--
p_°k
Ë(
CPU_STK
)0x00000020u;

286 *(--
p_°k
Ë(
CPU_STK
)0x00000019u;

287 *(--
p_°k
Ë(
CPU_STK
)0x00000018u;

288 *(--
p_°k
Ë(
CPU_STK
)0x00000017u;

289 *(--
p_°k
Ë(
CPU_STK
)0x00000016u;

292 *(--
p_°k
Ë(
CPU_STK
)0x11111111u;

293 *(--
p_°k
Ë(
CPU_STK
)0x10101010u;

294 *(--
p_°k
Ë(
CPU_STK
)0x09090909u;

295 *(--
p_°k
Ë(
CPU_STK
)0x08080808u;

296 *(--
p_°k
Ë(
CPU_STK
)0x07070707u;

297 *(--
p_°k
Ë(
CPU_STK
)0x06060606u;

298 *(--
p_°k
Ë(
CPU_STK
)0x05050505u;

299 *(--
p_°k
Ë(
CPU_STK
)0x04040404u;

301  (
p_°k
);

321 
OSTaskSwHook
 ()

323 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

324 
CPU_TS
 
ts
;

326 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


327 
CPU_TS
 
öt_dis_time
;

331 #i‡(
OS_CPU_ARM_FP_EN
 =
DEF_ENABLED
)

341 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

342 i‡(
OS_AµTaskSwHookPå
 !(
OS_APP_HOOK_VOID
)0) {

343 (*
OS_AµTaskSwHookPå
)();

347 #i‡(
deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

348 
TRACE_OS_TASK_SWITCHED_IN
(
OSTCBHighRdyPå
);

351 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

352 
ts
 = 
OS_TS_GET
();

353 i‡(
OSTCBCurPå
 !
OSTCBHighRdyPå
) {

354 
OSTCBCurPå
->
Cy˛esDñè
 = 
ts
 - OSTCBCurPå->
Cy˛esSèπ
;

355 
OSTCBCurPå
->
Cy˛esTŸÆ
 +(
OS_CYCLES
)OSTCBCurPå->
Cy˛esDñè
;

358 
OSTCBHighRdyPå
->
Cy˛esSèπ
 = 
ts
;

361 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


362 
öt_dis_time
 = 
CPU_I¡DisMósMaxCurRe£t
();

363 i‡(
OSTCBCurPå
->
I¡DisTimeMax
 < 
öt_dis_time
) {

364 
OSTCBCurPå
->
I¡DisTimeMax
 = 
öt_dis_time
;

368 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

370 i‡(
OSTCBCurPå
->
SchedLockTimeMax
 < 
OSSchedLockTimeMaxCur
) {

371 
OSTCBCurPå
->
SchedLockTimeMax
 = 
OSSchedLockTimeMaxCur
;

373 
OSSchedLockTimeMaxCur
 = (
CPU_TS
)0;

390 
OSTimeTickHook
 ()

392 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

393 i‡(
OS_AµTimeTickHookPå
 !(
OS_APP_HOOK_VOID
)0) {

394 (*
OS_AµTimeTickHookPå
)();

413 
OS_CPU_SysTickH™dÀr
 ()

415 
CPU_SR_ALLOC
();

418 
CPU_CRITICAL_ENTER
();

419 
OSI¡Ne°ögCå
++;

420 
CPU_CRITICAL_EXIT
();

422 
OSTimeTick
();

424 
OSI¡Exô
();

440 
OS_CPU_SysTickInô
 (
CPU_INT32U
 
˙ts
)

442 
CPU_INT32U
 
¥io
;

445 
CPU_REG_NVIC_ST_RELOAD
 = 
˙ts
 - 1u;

448 
¥io
 = 
CPU_REG_NVIC_SHPRI3
;

449 
¥io
 &
DEF_BIT_FIELD
(24, 0);

450 
¥io
 |
DEF_BIT_MASK
(
OS_CPU_CFG_SYSTICK_PRIO
, 24);

452 
CPU_REG_NVIC_SHPRI3
 = 
¥io
;

455 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_CLKSOURCE
 |

456 
CPU_REG_NVIC_ST_CTRL_ENABLE
;

458 
CPU_REG_NVIC_ST_CTRL
 |
CPU_REG_NVIC_ST_CTRL_TICKINT
;

461 #ifde‡
__˝lu•lus


	@UCOSIII/uCOS-III/Source/os.h

36 #i‚de‡ 
OS_H


37 
	#OS_H


	)

45 
	#OS_VERSION
 30300u

	)

53 #ifde‡
__˝lu•lus


59 
	~<os_cfg.h
>

60 
	~<˝u.h
>

61 
	~<˝u_c‹e.h
>

62 
	~<lib_def.h
>

63 
	~<os_ty≥.h
>

64 
	~<os_˝u.h
>

74 #i‡ 
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u && 
deföed
(
CPU_CFG_INT_DIS_MEAS_EN
)

75 
	#OS_SCHED_LOCK_TIME_MEAS_START
(Ë
	`OS_SchedLockTimeMósSèπ
()

	)

77 
	#OS_SCHED_LOCK_TIME_MEAS_START
()

	)

81 #i‡ 
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u && 
deföed
(
CPU_CFG_INT_DIS_MEAS_EN
)

82 
	#OS_SCHED_LOCK_TIME_MEAS_STOP
(Ë
	`OS_SchedLockTimeMósSt›
()

	)

84 
	#OS_SCHED_LOCK_TIME_MEAS_STOP
()

	)

87 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

89 
	#OS_CRITICAL_ENTER
() \

91 
	`CPU_CRITICAL_ENTER
(); \

92 
OSSchedLockNe°ögCå
++; \

93 i‡(
OSSchedLockNe°ögCå
 == 1u) { \

94 
	`OS_SCHED_LOCK_TIME_MEAS_START
(); \

96 
	`CPU_CRITICAL_EXIT
(); \

97 } 0)

	)

99 
	#OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
() \

101 
OSSchedLockNe°ögCå
++; \

103 i‡(
OSSchedLockNe°ögCå
 == 1u) { \

104 
	`OS_SCHED_LOCK_TIME_MEAS_START
(); \

106 
	`CPU_CRITICAL_EXIT
(); \

107 } 0)

	)

110 
	#OS_CRITICAL_EXIT
() \

112 
	`CPU_CRITICAL_ENTER
(); \

113 
OSSchedLockNe°ögCå
--; \

114 i‡(
OSSchedLockNe°ögCå
 =(
OS_NESTING_CTR
)0) { \

115 
	`OS_SCHED_LOCK_TIME_MEAS_STOP
(); \

116 i‡(
OSI¡QNbrE¡rõs
 > (
OS_OBJ_QTY
)0) { \

117 
	`CPU_CRITICAL_EXIT
(); \

118 
	`OS_Sched0
(); \

120 
	`CPU_CRITICAL_EXIT
(); \

123 
	`CPU_CRITICAL_EXIT
(); \

125 } 0)

	)

127 
	#OS_CRITICAL_EXIT_NO_SCHED
() \

129 
	`CPU_CRITICAL_ENTER
(); \

130 
OSSchedLockNe°ögCå
--; \

131 i‡(
OSSchedLockNe°ögCå
 =(
OS_NESTING_CTR
)0) { \

132 
	`OS_SCHED_LOCK_TIME_MEAS_STOP
(); \

134 
	`CPU_CRITICAL_EXIT
(); \

135 } 0)

	)

141 
	#OS_CRITICAL_ENTER
(Ë
	`CPU_CRITICAL_ENTER
()

	)

143 
	#OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
()

	)

145 
	#OS_CRITICAL_EXIT
(Ë
	`CPU_CRITICAL_EXIT
()

	)

147 
	#OS_CRITICAL_EXIT_NO_SCHED
(Ë
	`CPU_CRITICAL_EXIT
()

	)

157 #ifde‡ 
OS_GLOBALS


158 
	#OS_EXT


	)

160 
	#OS_EXT
 

	)

164 
	#OS_PRIO_TBL_SIZE
 (((
OS_CFG_PRIO_MAX
 - 1uË/ 
DEF_INT_CPU_NBR_BITS
Ë+ 1u)

	)

166 
	#OS_MSG_EN
 (((
OS_CFG_TASK_Q_EN
 > 0uË|| (
OS_CFG_Q_EN
 > 0u)Ë? 1u : 0u)

	)

183 
	#OS_STATE_OS_STOPPED
 (
OS_STATE
)(0u)

	)

184 
	#OS_STATE_OS_RUNNING
 (
OS_STATE
)(1u)

	)

186 
	#OS_STATE_NOT_RDY
 (
CPU_BOOLEAN
)(0u)

	)

187 
	#OS_STATE_RDY
 (
CPU_BOOLEAN
)(1u)

	)

191 
	#OS_TASK_STATE_BIT_DLY
 (
OS_STATE
)(0x01uË

	)

193 
	#OS_TASK_STATE_BIT_PEND
 (
OS_STATE
)(0x02uË

	)

195 
	#OS_TASK_STATE_BIT_SUSPENDED
 (
OS_STATE
)(0x04uË

	)

199 
	#OS_TASK_STATE_RDY
 (
OS_STATE
)–0uË

	)

200 
	#OS_TASK_STATE_DLY
 (
OS_STATE
)–1uË

	)

201 
	#OS_TASK_STATE_PEND
 (
OS_STATE
)–2uË

	)

202 
	#OS_TASK_STATE_PEND_TIMEOUT
 (
OS_STATE
)–3uË

	)

203 
	#OS_TASK_STATE_SUSPENDED
 (
OS_STATE
)–4uË

	)

204 
	#OS_TASK_STATE_DLY_SUSPENDED
 (
OS_STATE
)–5uË

	)

205 
	#OS_TASK_STATE_PEND_SUSPENDED
 (
OS_STATE
)–6uË

	)

206 
	#OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
 (
OS_STATE
)–7uË

	)

207 
	#OS_TASK_STATE_DEL
 (
OS_STATE
)(255u)

	)

210 
	#OS_TASK_PEND_ON_NOTHING
 (
OS_STATE
)–0uË

	)

211 
	#OS_TASK_PEND_ON_FLAG
 (
OS_STATE
)–1uË

	)

212 
	#OS_TASK_PEND_ON_TASK_Q
 (
OS_STATE
)–2uË

	)

213 
	#OS_TASK_PEND_ON_MULTI
 (
OS_STATE
)–3uË

	)

214 
	#OS_TASK_PEND_ON_MUTEX
 (
OS_STATE
)–4uË

	)

215 
	#OS_TASK_PEND_ON_Q
 (
OS_STATE
)–5uË

	)

216 
	#OS_TASK_PEND_ON_SEM
 (
OS_STATE
)–6uË

	)

217 
	#OS_TASK_PEND_ON_TASK_SEM
 (
OS_STATE
)–7uË

	)

226 
	#OS_STATUS_PEND_OK
 (
OS_STATUS
)–0uË

	)

227 
	#OS_STATUS_PEND_ABORT
 (
OS_STATUS
)–1uË

	)

228 
	#OS_STATUS_PEND_DEL
 (
OS_STATUS
)–2uË

	)

229 
	#OS_STATUS_PEND_TIMEOUT
 (
OS_STATUS
)–3uË

	)

241 
	#OS_OBJ_TYPE_NONE
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('N', 'O', 'N', 'E')

	)

242 
	#OS_OBJ_TYPE_FLAG
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('F', 'L', 'A', 'G')

	)

243 
	#OS_OBJ_TYPE_MEM
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('M', 'E', 'M', ' ')

	)

244 
	#OS_OBJ_TYPE_MUTEX
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('M', 'U', 'T', 'X')

	)

245 
	#OS_OBJ_TYPE_Q
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('Q', 'U', 'E', 'U')

	)

246 
	#OS_OBJ_TYPE_SEM
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('S', 'E', 'M', 'A')

	)

247 
	#OS_OBJ_TYPE_TASK_MSG
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'M', 'S', 'G')

	)

248 
	#OS_OBJ_TYPE_TASK_RESUME
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'R', 'E', 'S')

	)

249 
	#OS_OBJ_TYPE_TASK_SIGNAL
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'S', 'I', 'G')

	)

250 
	#OS_OBJ_TYPE_TASK_SUSPEND
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'S', 'U', 'S')

	)

251 
	#OS_OBJ_TYPE_TICK
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'I', 'C', 'K')

	)

252 
	#OS_OBJ_TYPE_TMR
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'M', 'R', ' ')

	)

260 
	#OS_OPT_NONE
 (
OS_OPT
)(0x0000u)

	)

268 
	#OS_OPT_DEL_NO_PEND
 (
OS_OPT
)(0x0000u)

	)

269 
	#OS_OPT_DEL_ALWAYS
 (
OS_OPT
)(0x0001u)

	)

277 
	#OS_OPT_PEND_FLAG_MASK
 (
OS_OPT
)(0x000Fu)

	)

278 
	#OS_OPT_PEND_FLAG_CLR_ALL
 (
OS_OPT
)(0x0001uË

	)

279 
	#OS_OPT_PEND_FLAG_CLR_AND
 (
OS_OPT
)(0x0001u)

	)

281 
	#OS_OPT_PEND_FLAG_CLR_ANY
 (
OS_OPT
)(0x0002uË

	)

282 
	#OS_OPT_PEND_FLAG_CLR_OR
 (
OS_OPT
)(0x0002u)

	)

284 
	#OS_OPT_PEND_FLAG_SET_ALL
 (
OS_OPT
)(0x0004uË

	)

285 
	#OS_OPT_PEND_FLAG_SET_AND
 (
OS_OPT
)(0x0004u)

	)

287 
	#OS_OPT_PEND_FLAG_SET_ANY
 (
OS_OPT
)(0x0008uË

	)

288 
	#OS_OPT_PEND_FLAG_SET_OR
 (
OS_OPT
)(0x0008u)

	)

290 
	#OS_OPT_PEND_FLAG_CONSUME
 (
OS_OPT
)(0x0100uË

	)

293 
	#OS_OPT_PEND_BLOCKING
 (
OS_OPT
)(0x0000u)

	)

294 
	#OS_OPT_PEND_NON_BLOCKING
 (
OS_OPT
)(0x8000u)

	)

302 
	#OS_OPT_PEND_ABORT_1
 (
OS_OPT
)(0x0000uË

	)

303 
	#OS_OPT_PEND_ABORT_ALL
 (
OS_OPT
)(0x0100uË

	)

312 
	#OS_OPT_POST_NONE
 (
OS_OPT
)(0x0000u)

	)

314 
	#OS_OPT_POST_FLAG_SET
 (
OS_OPT
)(0x0000u)

	)

315 
	#OS_OPT_POST_FLAG_CLR
 (
OS_OPT
)(0x0001u)

	)

317 
	#OS_OPT_POST_FIFO
 (
OS_OPT
)(0x0000uË

	)

318 
	#OS_OPT_POST_LIFO
 (
OS_OPT
)(0x0010uË

	)

319 
	#OS_OPT_POST_1
 (
OS_OPT
)(0x0000uË

	)

320 
	#OS_OPT_POST_ALL
 (
OS_OPT
)(0x0200uË

	)

322 
	#OS_OPT_POST_NO_SCHED
 (
OS_OPT
)(0x8000uË

	)

330 
	#OS_OPT_TASK_NONE
 (
OS_OPT
)(0x0000uË

	)

331 
	#OS_OPT_TASK_STK_CHK
 (
OS_OPT
)(0x0001uË

	)

332 
	#OS_OPT_TASK_STK_CLR
 (
OS_OPT
)(0x0002uË

	)

333 
	#OS_OPT_TASK_SAVE_FP
 (
OS_OPT
)(0x0004uË

	)

334 
	#OS_OPT_TASK_NO_TLS
 (
OS_OPT
)(0x0008uË

	)

342 
	#OS_OPT_TIME_DLY
 
DEF_BIT_NONE


	)

343 
	#OS_OPT_TIME_TIMEOUT
 ((
OS_OPT
)
DEF_BIT_01
)

	)

344 
	#OS_OPT_TIME_MATCH
 ((
OS_OPT
)
DEF_BIT_02
)

	)

345 
	#OS_OPT_TIME_PERIODIC
 ((
OS_OPT
)
DEF_BIT_03
)

	)

347 
	#OS_OPT_TIME_HMSM_STRICT
 ((
OS_OPT
)
DEF_BIT_NONE
)

	)

348 
	#OS_OPT_TIME_HMSM_NON_STRICT
 ((
OS_OPT
)
DEF_BIT_04
)

	)

350 
	#OS_OPT_TIME_MASK
 ((
OS_OPT
)(
OS_OPT_TIME_DLY
 | \

351 
OS_OPT_TIME_TIMEOUT
 | \

352 
OS_OPT_TIME_PERIODIC
 | \

353 
OS_OPT_TIME_MATCH
))

	)

355 
	#OS_OPT_TIME_OPTS_MASK
 (
OS_OPT_TIME_DLY
 | \

356 
OS_OPT_TIME_TIMEOUT
 | \

357 
OS_OPT_TIME_PERIODIC
 | \

358 
OS_OPT_TIME_MATCH
 | \

359 
OS_OPT_TIME_HMSM_NON_STRICT
)

	)

367 
	#OS_OPT_TMR_NONE
 (
OS_OPT
)(0uË

	)

369 
	#OS_OPT_TMR_ONE_SHOT
 (
OS_OPT
)(1uË

	)

370 
	#OS_OPT_TMR_PERIODIC
 (
OS_OPT
)(2uË

	)

372 
	#OS_OPT_TMR_CALLBACK
 (
OS_OPT
)(3uË

	)

373 
	#OS_OPT_TMR_CALLBACK_ARG
 (
OS_OPT
)(4uË

	)

381 
	#OS_TMR_STATE_UNUSED
 (
OS_STATE
)(0u)

	)

382 
	#OS_TMR_STATE_STOPPED
 (
OS_STATE
)(1u)

	)

383 
	#OS_TMR_STATE_RUNNING
 (
OS_STATE
)(2u)

	)

384 
	#OS_TMR_STATE_COMPLETED
 (
OS_STATE
)(3u)

	)

392 
	#OS_PRIO_INIT
 (
OS_PRIO
)(
OS_CFG_PRIO_MAX
)

	)

400 
	#OS_TICK_TH_INIT
 (
OS_TICK
)(
	`DEF_BIT
 (((OS_TICKË* 
DEF_OCTET_NBR_BITS
Ë- 1u))

	)

403 
	#OS_TICK_TH_RDY
 (
OS_TICK
)(
	`DEF_BIT_FIELD
((((OS_TICKË* 
DEF_OCTET_NBR_BITS
) / 2u), \

404 (((
OS_TICK
Ë* 
DEF_OCTET_NBR_BITS
Ë/ 2u)))

	)

421 
	eos_îr
 {

422 
OS_ERR_NONE
 = 0u,

424 
OS_ERR_A
 = 10000u,

425 
OS_ERR_ACCEPT_ISR
 = 10001u,

427 
OS_ERR_B
 = 11000u,

429 
OS_ERR_C
 = 12000u,

430 
OS_ERR_CREATE_ISR
 = 12001u,

432 
OS_ERR_D
 = 13000u,

433 
OS_ERR_DEL_ISR
 = 13001u,

435 
OS_ERR_E
 = 14000u,

437 
OS_ERR_F
 = 15000u,

438 
OS_ERR_FATAL_RETURN
 = 15001u,

440 
OS_ERR_FLAG_GRP_DEPLETED
 = 15101u,

441 
OS_ERR_FLAG_NOT_RDY
 = 15102u,

442 
OS_ERR_FLAG_PEND_OPT
 = 15103u,

443 
OS_ERR_FLUSH_ISR
 = 15104u,

445 
OS_ERR_G
 = 16000u,

447 
OS_ERR_H
 = 17000u,

449 
OS_ERR_I
 = 18000u,

450 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
 = 18001u,

451 
OS_ERR_INT_Q
 = 18002u,

452 
OS_ERR_INT_Q_FULL
 = 18003u,

453 
OS_ERR_INT_Q_SIZE
 = 18004u,

454 
OS_ERR_INT_Q_STK_INVALID
 = 18005u,

455 
OS_ERR_INT_Q_STK_SIZE_INVALID
 = 18006u,

457 
OS_ERR_J
 = 19000u,

459 
OS_ERR_K
 = 20000u,

461 
OS_ERR_L
 = 21000u,

462 
OS_ERR_LOCK_NESTING_OVF
 = 21001u,

464 
OS_ERR_M
 = 22000u,

466 
OS_ERR_MEM_CREATE_ISR
 = 22201u,

467 
OS_ERR_MEM_FULL
 = 22202u,

468 
OS_ERR_MEM_INVALID_P_ADDR
 = 22203u,

469 
OS_ERR_MEM_INVALID_BLKS
 = 22204u,

470 
OS_ERR_MEM_INVALID_PART
 = 22205u,

471 
OS_ERR_MEM_INVALID_P_BLK
 = 22206u,

472 
OS_ERR_MEM_INVALID_P_MEM
 = 22207u,

473 
OS_ERR_MEM_INVALID_P_DATA
 = 22208u,

474 
OS_ERR_MEM_INVALID_SIZE
 = 22209u,

475 
OS_ERR_MEM_NO_FREE_BLKS
 = 22210u,

477 
OS_ERR_MSG_POOL_EMPTY
 = 22301u,

478 
OS_ERR_MSG_POOL_NULL_PTR
 = 22302u,

480 
OS_ERR_MUTEX_NOT_OWNER
 = 22401u,

481 
OS_ERR_MUTEX_OWNER
 = 22402u,

482 
OS_ERR_MUTEX_NESTING
 = 22403u,

484 
OS_ERR_N
 = 23000u,

485 
OS_ERR_NAME
 = 23001u,

486 
OS_ERR_NO_MORE_ID_AVAIL
 = 23002u,

488 
OS_ERR_O
 = 24000u,

489 
OS_ERR_OBJ_CREATED
 = 24001u,

490 
OS_ERR_OBJ_DEL
 = 24002u,

491 
OS_ERR_OBJ_PTR_NULL
 = 24003u,

492 
OS_ERR_OBJ_TYPE
 = 24004u,

494 
OS_ERR_OPT_INVALID
 = 24101u,

496 
OS_ERR_OS_NOT_RUNNING
 = 24201u,

497 
OS_ERR_OS_RUNNING
 = 24202u,

499 
OS_ERR_P
 = 25000u,

500 
OS_ERR_PEND_ABORT
 = 25001u,

501 
OS_ERR_PEND_ABORT_ISR
 = 25002u,

502 
OS_ERR_PEND_ABORT_NONE
 = 25003u,

503 
OS_ERR_PEND_ABORT_SELF
 = 25004u,

504 
OS_ERR_PEND_DEL
 = 25005u,

505 
OS_ERR_PEND_ISR
 = 25006u,

506 
OS_ERR_PEND_LOCKED
 = 25007u,

507 
OS_ERR_PEND_WOULD_BLOCK
 = 25008u,

509 
OS_ERR_POST_NULL_PTR
 = 25101u,

510 
OS_ERR_POST_ISR
 = 25102u,

512 
OS_ERR_PRIO_EXIST
 = 25201u,

513 
OS_ERR_PRIO
 = 25202u,

514 
OS_ERR_PRIO_INVALID
 = 25203u,

516 
OS_ERR_PTR_INVALID
 = 25301u,

518 
OS_ERR_Q
 = 26000u,

519 
OS_ERR_Q_FULL
 = 26001u,

520 
OS_ERR_Q_EMPTY
 = 26002u,

521 
OS_ERR_Q_MAX
 = 26003u,

522 
OS_ERR_Q_SIZE
 = 26004u,

524 
OS_ERR_R
 = 27000u,

525 
OS_ERR_REG_ID_INVALID
 = 27001u,

526 
OS_ERR_ROUND_ROBIN_1
 = 27002u,

527 
OS_ERR_ROUND_ROBIN_DISABLED
 = 27003u,

529 
OS_ERR_S
 = 28000u,

530 
OS_ERR_SCHED_INVALID_TIME_SLICE
 = 28001u,

531 
OS_ERR_SCHED_LOCK_ISR
 = 28002u,

532 
OS_ERR_SCHED_LOCKED
 = 28003u,

533 
OS_ERR_SCHED_NOT_LOCKED
 = 28004u,

534 
OS_ERR_SCHED_UNLOCK_ISR
 = 28005u,

536 
OS_ERR_SEM_OVF
 = 28101u,

537 
OS_ERR_SET_ISR
 = 28102u,

539 
OS_ERR_STAT_RESET_ISR
 = 28201u,

540 
OS_ERR_STAT_PRIO_INVALID
 = 28202u,

541 
OS_ERR_STAT_STK_INVALID
 = 28203u,

542 
OS_ERR_STAT_STK_SIZE_INVALID
 = 28204u,

543 
OS_ERR_STATE_INVALID
 = 28205u,

544 
OS_ERR_STATUS_INVALID
 = 28206u,

545 
OS_ERR_STK_INVALID
 = 28207u,

546 
OS_ERR_STK_SIZE_INVALID
 = 28208u,

547 
OS_ERR_STK_LIMIT_INVALID
 = 28209u,

549 
OS_ERR_T
 = 29000u,

550 
OS_ERR_TASK_CHANGE_PRIO_ISR
 = 29001u,

551 
OS_ERR_TASK_CREATE_ISR
 = 29002u,

552 
OS_ERR_TASK_DEL
 = 29003u,

553 
OS_ERR_TASK_DEL_IDLE
 = 29004u,

554 
OS_ERR_TASK_DEL_INVALID
 = 29005u,

555 
OS_ERR_TASK_DEL_ISR
 = 29006u,

556 
OS_ERR_TASK_INVALID
 = 29007u,

557 
OS_ERR_TASK_NO_MORE_TCB
 = 29008u,

558 
OS_ERR_TASK_NOT_DLY
 = 29009u,

559 
OS_ERR_TASK_NOT_EXIST
 = 29010u,

560 
OS_ERR_TASK_NOT_SUSPENDED
 = 29011u,

561 
OS_ERR_TASK_OPT
 = 29012u,

562 
OS_ERR_TASK_RESUME_ISR
 = 29013u,

563 
OS_ERR_TASK_RESUME_PRIO
 = 29014u,

564 
OS_ERR_TASK_RESUME_SELF
 = 29015u,

565 
OS_ERR_TASK_RUNNING
 = 29016u,

566 
OS_ERR_TASK_STK_CHK_ISR
 = 29017u,

567 
OS_ERR_TASK_SUSPENDED
 = 29018u,

568 
OS_ERR_TASK_SUSPEND_IDLE
 = 29019u,

569 
OS_ERR_TASK_SUSPEND_INT_HANDLER
 = 29020u,

570 
OS_ERR_TASK_SUSPEND_ISR
 = 29021u,

571 
OS_ERR_TASK_SUSPEND_PRIO
 = 29022u,

572 
OS_ERR_TASK_WAITING
 = 29023u,

574 
OS_ERR_TCB_INVALID
 = 29101u,

576 
OS_ERR_TLS_ID_INVALID
 = 29120u,

577 
OS_ERR_TLS_ISR
 = 29121u,

578 
OS_ERR_TLS_NO_MORE_AVAIL
 = 29122u,

579 
OS_ERR_TLS_NOT_EN
 = 29123u,

580 
OS_ERR_TLS_DESTRUCT_ASSIGNED
 = 29124u,

582 
OS_ERR_TICK_PRIO_INVALID
 = 29201u,

583 
OS_ERR_TICK_STK_INVALID
 = 29202u,

584 
OS_ERR_TICK_STK_SIZE_INVALID
 = 29203u,

585 
OS_ERR_TICK_WHEEL_SIZE
 = 29204u,

587 
OS_ERR_TIME_DLY_ISR
 = 29301u,

588 
OS_ERR_TIME_DLY_RESUME_ISR
 = 29302u,

589 
OS_ERR_TIME_GET_ISR
 = 29303u,

590 
OS_ERR_TIME_INVALID_HOURS
 = 29304u,

591 
OS_ERR_TIME_INVALID_MINUTES
 = 29305u,

592 
OS_ERR_TIME_INVALID_SECONDS
 = 29306u,

593 
OS_ERR_TIME_INVALID_MILLISECONDS
 = 29307u,

594 
OS_ERR_TIME_NOT_DLY
 = 29308u,

595 
OS_ERR_TIME_SET_ISR
 = 29309u,

596 
OS_ERR_TIME_ZERO_DLY
 = 29310u,

598 
OS_ERR_TIMEOUT
 = 29401u,

600 
OS_ERR_TMR_INACTIVE
 = 29501u,

601 
OS_ERR_TMR_INVALID_DEST
 = 29502u,

602 
OS_ERR_TMR_INVALID_DLY
 = 29503u,

603 
OS_ERR_TMR_INVALID_PERIOD
 = 29504u,

604 
OS_ERR_TMR_INVALID_STATE
 = 29505u,

605 
OS_ERR_TMR_INVALID
 = 29506u,

606 
OS_ERR_TMR_ISR
 = 29507u,

607 
OS_ERR_TMR_NO_CALLBACK
 = 29508u,

608 
OS_ERR_TMR_NON_AVAIL
 = 29509u,

609 
OS_ERR_TMR_PRIO_INVALID
 = 29510u,

610 
OS_ERR_TMR_STK_INVALID
 = 29511u,

611 
OS_ERR_TMR_STK_SIZE_INVALID
 = 29512u,

612 
OS_ERR_TMR_STOPPED
 = 29513u,

614 
OS_ERR_U
 = 30000u,

616 
OS_ERR_V
 = 31000u,

618 
OS_ERR_W
 = 32000u,

620 
OS_ERR_X
 = 33000u,

622 
OS_ERR_Y
 = 34000u,

623 
OS_ERR_YIELD_ISR
 = 34001u,

625 
OS_ERR_Z
 = 35000u

626 } 
	tOS_ERR
;

638 
os_Êag_gΩ
 
	tOS_FLAG_GRP
;

640 
os_mem
 
	tOS_MEM
;

642 
os_msg
 
	tOS_MSG
;

643 
os_msg_poﬁ
 
	tOS_MSG_POOL
;

644 
os_msg_q
 
	tOS_MSG_Q
;

646 
os_muãx
 
	tOS_MUTEX
;

648 
os_öt_q
 
	tOS_INT_Q
;

650 
os_q
 
	tOS_Q
;

652 
os_£m
 
	tOS_SEM
;

654 (*
	gOS_TASK_PTR
)(*
	tp_¨g
);

656 
os_tcb
 
	tOS_TCB
;

658 #i‡
deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

659 *
	tOS_TLS
;

661 
CPU_DATA
 
	tOS_TLS_ID
;

663 (*
	gOS_TLS_DESTRUCT_PTR
)(
	tOS_TCB
 *
	tp_tcb
,

664 
	tOS_TLS_ID
 
	tid
,

665 
	tOS_TLS
 
	tvÆue
);

668 
os_rdy_li°
 
	tOS_RDY_LIST
;

670 
os_tick_•oke
 
	tOS_TICK_SPOKE
;

672 (*
	gOS_TMR_CALLBACK_PTR
)(*
	tp_tmr
, *
	tp_¨g
);

673 
os_tmr
 
	tOS_TMR
;

674 
os_tmr_•oke
 
	tOS_TMR_SPOKE
;

677 
os_≥nd_d©a
 
	tOS_PEND_DATA
;

678 
os_≥nd_li°
 
	tOS_PEND_LIST
;

679 
os_≥nd_obj
 
	tOS_PEND_OBJ
;

681 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

682 (*
	gOS_APP_HOOK_VOID
)();

683 (*
	gOS_APP_HOOK_TCB
)(
	tOS_TCB
 *
	tp_tcb
);

701 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

702 
	sos_öt_q
 {

703 
OS_OBJ_TYPE
 
	gTy≥
;

704 
OS_INT_Q
 *
	gNextPå
;

705 *
	gObjPå
;

706 *
	gMsgPå
;

707 
OS_MSG_SIZE
 
	gMsgSize
;

708 
OS_FLAGS
 
	gFœgs
;

709 
OS_OPT
 
	gO±
;

710 
CPU_TS
 
	gTS
;

720 
	sos_rdy_li°
 {

721 
OS_TCB
 *
	gHódPå
;

722 
OS_TCB
 *
	gTaûPå
;

723 
OS_OBJ_QTY
 
	gNbrE¡rõs
;

733 
	sos_≥nd_d©a
 {

734 
OS_PEND_DATA
 *
	gPªvPå
;

735 
OS_PEND_DATA
 *
	gNextPå
;

736 
OS_TCB
 *
	gTCBPå
;

737 
OS_PEND_OBJ
 *
	gPídObjPå
;

738 
OS_PEND_OBJ
 *
	gRdyObjPå
;

739 *
	gRdyMsgPå
;

740 
OS_MSG_SIZE
 
	gRdyMsgSize
;

741 
CPU_TS
 
	gRdyTS
;

745 
	sos_≥nd_li°
 {

746 
OS_PEND_DATA
 *
	gHódPå
;

747 
OS_PEND_DATA
 *
	gTaûPå
;

748 
OS_OBJ_QTY
 
	gNbrE¡rõs
;

767 
	sos_≥nd_obj
 {

768 
OS_OBJ_TYPE
 
	gTy≥
;

769 
CPU_CHAR
 *
	gNamePå
;

770 
OS_PEND_LIST
 
	gPídLi°
;

771 #i‡
OS_CFG_DBG_EN
 > 0u

772 *
	gDbgPªvPå
;

773 *
	gDbgNextPå
;

774 
CPU_CHAR
 *
	gDbgNamePå
;

788 
	sos_Êag_gΩ
 {

790 
OS_OBJ_TYPE
 
	gTy≥
;

791 
CPU_CHAR
 *
	gNamePå
;

792 
OS_PEND_LIST
 
	gPídLi°
;

793 #i‡
OS_CFG_DBG_EN
 > 0u

794 
OS_FLAG_GRP
 *
	gDbgPªvPå
;

795 
OS_FLAG_GRP
 *
	gDbgNextPå
;

796 
CPU_CHAR
 *
	gDbgNamePå
;

799 
OS_FLAGS
 
	gFœgs
;

800 
CPU_TS
 
	gTS
;

811 
	sos_mem
 {

812 
OS_OBJ_TYPE
 
	gTy≥
;

813 *
	gAddrPå
;

814 
CPU_CHAR
 *
	gNamePå
;

815 *
	gFªeLi°På
;

816 
OS_MEM_SIZE
 
	gBlkSize
;

817 
OS_MEM_QTY
 
	gNbrMax
;

818 
OS_MEM_QTY
 
	gNbrFªe
;

819 #i‡
OS_CFG_DBG_EN
 > 0u

820 
OS_MEM
 *
	gDbgPªvPå
;

821 
OS_MEM
 *
	gDbgNextPå
;

832 
	sos_msg
 {

833 
OS_MSG
 *
	gNextPå
;

834 *
	gMsgPå
;

835 
OS_MSG_SIZE
 
	gMsgSize
;

836 
CPU_TS
 
	gMsgTS
;

842 
	sos_msg_poﬁ
 {

843 
OS_MSG
 *
	gNextPå
;

844 
OS_MSG_QTY
 
	gNbrFªe
;

845 
OS_MSG_QTY
 
	gNbrU£d
;

846 
OS_MSG_QTY
 
	gNbrU£dMax
;

851 
	sos_msg_q
 {

852 
OS_MSG
 *
	gInPå
;

853 
OS_MSG
 *
	gOutPå
;

854 
OS_MSG_QTY
 
	gNbrE¡rõsSize
;

855 
OS_MSG_QTY
 
	gNbrE¡rõs
;

856 
OS_MSG_QTY
 
	gNbrE¡rõsMax
;

868 
	sos_muãx
 {

870 
OS_OBJ_TYPE
 
	gTy≥
;

871 
CPU_CHAR
 *
	gNamePå
;

872 
OS_PEND_LIST
 
	gPídLi°
;

873 #i‡
OS_CFG_DBG_EN
 > 0u

874 
OS_MUTEX
 *
	gDbgPªvPå
;

875 
OS_MUTEX
 *
	gDbgNextPå
;

876 
CPU_CHAR
 *
	gDbgNamePå
;

879 
OS_TCB
 *
	gOw√rTCBPå
;

880 
OS_PRIO
 
	gOw√rOrigöÆPrio
;

881 
OS_NESTING_CTR
 
	gOw√rNe°ögCå
;

882 
CPU_TS
 
	gTS
;

894 
	sos_q
 {

896 
OS_OBJ_TYPE
 
	gTy≥
;

897 
CPU_CHAR
 *
	gNamePå
;

898 
OS_PEND_LIST
 
	gPídLi°
;

899 #i‡
OS_CFG_DBG_EN
 > 0u

900 
OS_Q
 *
	gDbgPªvPå
;

901 
OS_Q
 *
	gDbgNextPå
;

902 
CPU_CHAR
 *
	gDbgNamePå
;

905 
OS_MSG_Q
 
	gMsgQ
;

917 
	sos_£m
 {

919 
OS_OBJ_TYPE
 
	gTy≥
;

920 
CPU_CHAR
 *
	gNamePå
;

921 
OS_PEND_LIST
 
	gPídLi°
;

922 #i‡
OS_CFG_DBG_EN
 > 0u

923 
OS_SEM
 *
	gDbgPªvPå
;

924 
OS_SEM
 *
	gDbgNextPå
;

925 
CPU_CHAR
 *
	gDbgNamePå
;

928 
OS_SEM_CTR
 
	gCå
;

929 
CPU_TS
 
	gTS
;

939 
	sos_tcb
 {

940 
CPU_STK
 *
	gStkPå
;

942 *
	gExtPå
;

944 
CPU_STK
 *
	gStkLimôPå
;

946 
OS_TCB
 *
	gNextPå
;

947 
OS_TCB
 *
	gPªvPå
;

949 
OS_TCB
 *
	gTickNextPå
;

950 
OS_TCB
 *
	gTickPªvPå
;

952 
OS_TICK_SPOKE
 *
	gTickSpokePå
;

954 
CPU_CHAR
 *
	gNamePå
;

956 
CPU_STK
 *
	gStkBa£På
;

958 #i‡
deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

959 
OS_TLS
 
	gTLS_Tbl
[
OS_CFG_TLS_TBL_SIZE
];

962 
OS_TASK_PTR
 
	gTaskE¡ryAddr
;

963 *
	gTaskE¡ryArg
;

965 
OS_PEND_DATA
 *
	gPídD©aTblPå
;

966 
OS_STATE
 
	gPídOn
;

967 
OS_STATUS
 
	gPídSètus
;

969 
OS_STATE
 
	gTaskSèã
;

970 
OS_PRIO
 
	gPrio
;

971 
CPU_STK_SIZE
 
	gStkSize
;

972 
OS_OPT
 
	gO±
;

974 
OS_OBJ_QTY
 
	gPídD©aTblE¡rõs
;

976 
CPU_TS
 
	gTS
;

978 
OS_SEM_CTR
 
	gSemCå
;

981 
OS_TICK
 
	gTickCåPªv
;

982 
OS_TICK
 
	gTickCåM©ch
;

983 
OS_TICK
 
	gTickRemaö
;

985 
OS_TICK
 
	gTimeQu™è
;

986 
OS_TICK
 
	gTimeQu™èCå
;

988 #i‡
OS_MSG_EN
 > 0u

989 *
	gMsgPå
;

990 
OS_MSG_SIZE
 
	gMsgSize
;

993 #i‡
OS_CFG_TASK_Q_EN
 > 0u

994 
OS_MSG_Q
 
	gMsgQ
;

995 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

996 
CPU_TS
 
	gMsgQPídTime
;

997 
CPU_TS
 
	gMsgQPídTimeMax
;

1001 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1002 
OS_REG
 
	gRegTbl
[
OS_CFG_TASK_REG_TBL_SIZE
];

1005 #i‡
OS_CFG_FLAG_EN
 > 0u

1006 
OS_FLAGS
 
	gFœgsPíd
;

1007 
OS_FLAGS
 
	gFœgsRdy
;

1008 
OS_OPT
 
	gFœgsO±
;

1011 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1012 
OS_NESTING_CTR
 
	gSu•ídCå
;

1015 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

1016 
OS_CPU_USAGE
 
	gCPUUßge
;

1017 
OS_CPU_USAGE
 
	gCPUUßgeMax
;

1018 
OS_CTX_SW_CTR
 
	gCtxSwCå
;

1019 
CPU_TS
 
	gCy˛esDñè
;

1020 
CPU_TS
 
	gCy˛esSèπ
;

1021 
OS_CYCLES
 
	gCy˛esTŸÆ
;

1022 
OS_CYCLES
 
	gCy˛esTŸÆPªv
;

1024 
CPU_TS
 
	gSemPídTime
;

1025 
CPU_TS
 
	gSemPídTimeMax
;

1028 #i‡
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u

1029 
CPU_STK_SIZE
 
	gStkU£d
;

1030 
CPU_STK_SIZE
 
	gStkFªe
;

1033 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


1034 
CPU_TS
 
	gI¡DisTimeMax
;

1036 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

1037 
CPU_TS
 
	gSchedLockTimeMax
;

1040 #i‡
OS_CFG_DBG_EN
 > 0u

1041 
OS_TCB
 *
	gDbgPªvPå
;

1042 
OS_TCB
 *
	gDbgNextPå
;

1043 
CPU_CHAR
 *
	gDbgNamePå
;

1054 
	sos_tick_•oke
 {

1055 
OS_TCB
 *
	gFú°På
;

1056 
OS_OBJ_QTY
 
	gNbrE¡rõs
;

1057 
OS_OBJ_QTY
 
	gNbrE¡rõsMax
;

1067 
	sos_tmr
 {

1068 
OS_OBJ_TYPE
 
	gTy≥
;

1069 
CPU_CHAR
 *
	gNamePå
;

1070 
OS_TMR_CALLBACK_PTR
 
	gCÆlbackPå
;

1071 *
	gCÆlbackPåArg
;

1072 
OS_TMR
 *
	gNextPå
;

1073 
OS_TMR
 *
	gPªvPå
;

1074 
OS_TICK
 
	gM©ch
;

1075 
OS_TICK
 
	gRemaö
;

1076 
OS_TICK
 
	gDly
;

1077 
OS_TICK
 
	gPîiod
;

1078 
OS_OPT
 
	gO±
;

1079 
OS_STATE
 
	gSèã
;

1080 #i‡
OS_CFG_DBG_EN
 > 0u

1081 
OS_TMR
 *
	gDbgPªvPå
;

1082 
OS_TMR
 *
	gDbgNextPå
;

1088 
	sos_tmr_•oke
 {

1089 
OS_TMR
 *
	gFú°På
;

1090 
OS_OBJ_QTY
 
	gNbrE¡rõs
;

1091 
OS_OBJ_QTY
 
	gNbrE¡rõsMax
;

1103 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

1104 
OS_EXT
 
OS_APP_HOOK_TCB
 
	gOS_AµTaskCª©eHookPå
;

1105 
OS_EXT
 
OS_APP_HOOK_TCB
 
	gOS_AµTaskDñHookPå
;

1106 
OS_EXT
 
OS_APP_HOOK_TCB
 
	gOS_AµTaskRëu∫HookPå
;

1108 
OS_EXT
 
OS_APP_HOOK_VOID
 
	gOS_AµIdÀTaskHookPå
;

1109 
OS_EXT
 
OS_APP_HOOK_VOID
 
	gOS_AµSètTaskHookPå
;

1110 
OS_EXT
 
OS_APP_HOOK_VOID
 
	gOS_AµTaskSwHookPå
;

1111 
OS_EXT
 
OS_APP_HOOK_VOID
 
	gOS_AµTimeTickHookPå
;

1115 
OS_EXT
 
OS_IDLE_CTR
 
	gOSIdÀTaskCå
;

1116 
OS_EXT
 
OS_TCB
 
	gOSIdÀTaskTCB
;

1119 
OS_EXT
 
OS_NESTING_CTR
 
	gOSI¡Ne°ögCå
;

1120 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


1121 
OS_EXT
 
CPU_TS
 
	gOSI¡DisTimeMax
;

1124 
OS_EXT
 
OS_STATE
 
	gOSRu¬ög
;

1128 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

1129 
OS_EXT
 
OS_INT_Q
 *
	gOSI¡QInPå
;

1130 
OS_EXT
 
OS_INT_Q
 *
	gOSI¡QOutPå
;

1131 
OS_EXT
 
OS_OBJ_QTY
 
	gOSI¡QNbrE¡rõs
;

1132 
OS_EXT
 
OS_OBJ_QTY
 
	gOSI¡QNbrE¡rõsMax
;

1133 
OS_EXT
 
OS_OBJ_QTY
 
	gOSI¡QOvfCå
;

1134 
OS_EXT
 
OS_TCB
 
	gOSI¡QTaskTCB
;

1135 
OS_EXT
 
CPU_TS
 
	gOSI¡QTaskTimeMax
;

1139 #i‡
OS_CFG_FLAG_EN
 > 0u

1140 #i‡
OS_CFG_DBG_EN
 > 0u

1141 
OS_EXT
 
OS_FLAG_GRP
 *
	gOSFœgDbgLi°På
;

1143 
OS_EXT
 
OS_OBJ_QTY
 
	gOSFœgQty
;

1147 #i‡
OS_CFG_MEM_EN
 > 0u

1148 #i‡
OS_CFG_DBG_EN
 > 0u

1149 
OS_EXT
 
OS_MEM
 *
	gOSMemDbgLi°På
;

1151 
OS_EXT
 
OS_OBJ_QTY
 
	gOSMemQty
;

1155 #i‡
OS_MSG_EN
 > 0u

1156 
OS_EXT
 
OS_MSG_POOL
 
	gOSMsgPoﬁ
;

1160 #i‡
OS_CFG_MUTEX_EN
 > 0u

1161 #i‡
OS_CFG_DBG_EN
 > 0u

1162 
OS_EXT
 
OS_MUTEX
 *
	gOSMuãxDbgLi°På
;

1164 
OS_EXT
 
OS_OBJ_QTY
 
	gOSMuãxQty
;

1168 
OS_EXT
 
OS_PRIO
 
	gOSPrioCur
;

1169 
OS_EXT
 
OS_PRIO
 
	gOSPrioHighRdy
;

1170 
OS_EXT
 
OS_PRIO
 
	gOSPrioSaved
;

1171 
CPU_DATA
 
OSPrioTbl
[
OS_PRIO_TBL_SIZE
];

1174 #i‡
OS_CFG_Q_EN
 > 0u

1175 #i‡
OS_CFG_DBG_EN
 > 0u

1176 
OS_EXT
 
OS_Q
 *
	gOSQDbgLi°På
;

1178 
OS_EXT
 
OS_OBJ_QTY
 
	gOSQQty
;

1184 
OS_EXT
 
OS_RDY_LIST
 
	gOSRdyLi°
[
OS_CFG_PRIO_MAX
];

1187 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


1188 
OS_EXT
 
CPU_BOOLEAN
 
	gOSSa„tyCrôiˇlSèπFœg
;

1191 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

1192 
OS_EXT
 
CPU_TS_TMR
 
	gOSSchedLockTimeBegö
;

1193 
OS_EXT
 
CPU_TS_TMR
 
	gOSSchedLockTimeMax
;

1194 
OS_EXT
 
CPU_TS_TMR
 
	gOSSchedLockTimeMaxCur
;

1197 
OS_EXT
 
OS_NESTING_CTR
 
	gOSSchedLockNe°ögCå
;

1198 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

1199 
OS_EXT
 
OS_TICK
 
	gOSSchedRoundRoböDÊtTimeQu™è
;

1200 
OS_EXT
 
CPU_BOOLEAN
 
	gOSSchedRoundRoböEn
;

1203 #i‡
OS_CFG_SEM_EN
 > 0u

1204 #i‡
OS_CFG_DBG_EN
 > 0u

1205 
OS_EXT
 
OS_SEM
 *
	gOSSemDbgLi°På
;

1207 
OS_EXT
 
OS_OBJ_QTY
 
	gOSSemQty
;

1211 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

1212 
OS_EXT
 
CPU_BOOLEAN
 
	gOSSètRe£tFœg
;

1213 
OS_EXT
 
OS_CPU_USAGE
 
	gOSSètTaskCPUUßge
;

1214 
OS_EXT
 
OS_CPU_USAGE
 
	gOSSètTaskCPUUßgeMax
;

1215 
OS_EXT
 
OS_TICK
 
	gOSSètTaskCå
;

1216 
OS_EXT
 
OS_TICK
 
	gOSSètTaskCåMax
;

1217 
OS_EXT
 
OS_TICK
 
	gOSSètTaskCåRun
;

1218 
OS_EXT
 
CPU_BOOLEAN
 
	gOSSètTaskRdy
;

1219 
OS_EXT
 
OS_TCB
 
	gOSSètTaskTCB
;

1220 
OS_EXT
 
CPU_TS
 
	gOSSètTaskTimeMax
;

1224 
OS_EXT
 
OS_CTX_SW_CTR
 
	gOSTaskCtxSwCå
;

1225 #i‡
OS_CFG_DBG_EN
 > 0u

1226 
OS_EXT
 
OS_TCB
 *
	gOSTaskDbgLi°På
;

1228 
OS_EXT
 
OS_OBJ_QTY
 
	gOSTaskQty
;

1230 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1231 
OS_EXT
 
OS_REG_ID
 
	gOSTaskRegNextAvaûID
;

1235 
OS_EXT
 
OS_TICK
 
	gOSTickCå
;

1236 
OS_EXT
 
OS_TCB
 
	gOSTickTaskTCB
;

1237 
OS_EXT
 
CPU_TS
 
	gOSTickTaskTimeMax
;

1240 #i‡
OS_CFG_TMR_EN
 > 0u

1241 #i‡
OS_CFG_DBG_EN
 > 0u

1242 
OS_EXT
 
OS_TMR
 *
	gOSTmrDbgLi°På
;

1244 
OS_EXT
 
OS_OBJ_QTY
 
	gOSTmrQty
;

1245 
OS_EXT
 
OS_TCB
 
	gOSTmrTaskTCB
;

1246 
OS_EXT
 
CPU_TS
 
	gOSTmrTaskTimeMax
;

1247 
OS_EXT
 
OS_TICK
 
	gOSTmrTickCå
;

1248 
OS_EXT
 
OS_CTR
 
	gOSTmrUpd©eC¡
;

1249 
OS_EXT
 
OS_CTR
 
	gOSTmrUpd©eCå
;

1253 
OS_EXT
 
OS_TCB
 *
	gOSTCBCurPå
;

1254 
OS_EXT
 
OS_TCB
 *
	gOSTCBHighRdyPå
;

1265 
CPU_STK
 * c⁄° 
OSCfg_IdÀTaskStkBa£På
;

1266 
CPU_STK_SIZE
 c⁄° 
OSCfg_IdÀTaskStkLimô
;

1267 
CPU_STK_SIZE
 c⁄° 
OSCfg_IdÀTaskStkSize
;

1268 
CPU_INT32U
 c⁄° 
OSCfg_IdÀTaskStkSizeRAM
;

1270 
OS_INT_Q
 * c⁄° 
OSCfg_I¡QBa£På
;

1271 
OS_OBJ_QTY
 c⁄° 
OSCfg_I¡QSize
;

1272 
CPU_INT32U
 c⁄° 
OSCfg_I¡QSizeRAM
;

1273 
CPU_STK
 * c⁄° 
OSCfg_I¡QTaskStkBa£På
;

1274 
CPU_STK_SIZE
 c⁄° 
OSCfg_I¡QTaskStkLimô
;

1275 
CPU_STK_SIZE
 c⁄° 
OSCfg_I¡QTaskStkSize
;

1276 
CPU_INT32U
 c⁄° 
OSCfg_I¡QTaskStkSizeRAM
;

1278 
CPU_STK
 * c⁄° 
OSCfg_ISRStkBa£På
;

1279 
CPU_STK_SIZE
 c⁄° 
OSCfg_ISRStkSize
;

1280 
CPU_INT32U
 c⁄° 
OSCfg_ISRStkSizeRAM
;

1282 
OS_MSG_SIZE
 c⁄° 
OSCfg_MsgPoﬁSize
;

1283 
CPU_INT32U
 c⁄° 
OSCfg_MsgPoﬁSizeRAM
;

1284 
OS_MSG
 * c⁄° 
OSCfg_MsgPoﬁBa£På
;

1286 
OS_PRIO
 c⁄° 
OSCfg_SètTaskPrio
;

1287 
OS_RATE_HZ
 c⁄° 
OSCfg_SètTaskR©e_Hz
;

1288 
CPU_STK
 * c⁄° 
OSCfg_SètTaskStkBa£På
;

1289 
CPU_STK_SIZE
 c⁄° 
OSCfg_SètTaskStkLimô
;

1290 
CPU_STK_SIZE
 c⁄° 
OSCfg_SètTaskStkSize
;

1291 
CPU_INT32U
 c⁄° 
OSCfg_SètTaskStkSizeRAM
;

1293 
CPU_STK_SIZE
 c⁄° 
OSCfg_StkSizeMö
;

1295 
OS_RATE_HZ
 c⁄° 
OSCfg_TickR©e_Hz
;

1296 
OS_PRIO
 c⁄° 
OSCfg_TickTaskPrio
;

1297 
CPU_STK
 * c⁄° 
OSCfg_TickTaskStkBa£På
;

1298 
CPU_STK_SIZE
 c⁄° 
OSCfg_TickTaskStkLimô
;

1299 
CPU_STK_SIZE
 c⁄° 
OSCfg_TickTaskStkSize
;

1300 
CPU_INT32U
 c⁄° 
OSCfg_TickTaskStkSizeRAM
;

1301 
OS_OBJ_QTY
 c⁄° 
OSCfg_TickWhìlSize
;

1302 
CPU_INT32U
 c⁄° 
OSCfg_TickWhìlSizeRAM
;

1304 
OS_PRIO
 c⁄° 
OSCfg_TmrTaskPrio
;

1305 
OS_RATE_HZ
 c⁄° 
OSCfg_TmrTaskR©e_Hz
;

1306 
CPU_STK
 * c⁄° 
OSCfg_TmrTaskStkBa£På
;

1307 
CPU_STK_SIZE
 c⁄° 
OSCfg_TmrTaskStkLimô
;

1308 
CPU_STK_SIZE
 c⁄° 
OSCfg_TmrTaskStkSize
;

1309 
CPU_INT32U
 c⁄° 
OSCfg_TmrTaskStkSizeRAM
;

1310 
OS_OBJ_QTY
 c⁄° 
OSCfg_TmrWhìlSize
;

1311 
CPU_INT32U
 c⁄° 
OSCfg_TmrSizeRAM
;

1314 
CPU_STK
 
OSCfg_IdÀTaskStk
[];

1316 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u)

1317 
CPU_STK
 
OSCfg_I¡QTaskStk
[];

1318 
OS_INT_Q
 
OSCfg_I¡Q
[];

1321 
CPU_STK
 
OSCfg_ISRStk
[];

1323 #i‡(
OS_MSG_EN
 > 0u)

1324 
OS_MSG
 
OSCfg_MsgPoﬁ
[];

1327 #i‡(
OS_CFG_STAT_TASK_EN
 > 0u)

1328 
CPU_STK
 
OSCfg_SètTaskStk
[];

1331 
CPU_STK
 
OSCfg_TickTaskStk
[];

1332 
OS_TICK_SPOKE
 
OSCfg_TickWhìl
[];

1334 #i‡(
OS_CFG_TMR_EN
 > 0u)

1335 
CPU_STK
 
OSCfg_TmrTaskStk
[];

1336 
OS_TMR_SPOKE
 
OSCfg_TmrWhìl
[];

1351 #i‡
OS_CFG_FLAG_EN
 > 0u

1353 
OSFœgCª©e
 (
OS_FLAG_GRP
 *
p_gΩ
,

1354 
CPU_CHAR
 *
p_«me
,

1355 
OS_FLAGS
 
Êags
,

1356 
OS_ERR
 *
p_îr
);

1358 #i‡
OS_CFG_FLAG_DEL_EN
 > 0u

1359 
OS_OBJ_QTY
 
OSFœgDñ
 (
OS_FLAG_GRP
 *
p_gΩ
,

1360 
OS_OPT
 
›t
,

1361 
OS_ERR
 *
p_îr
);

1364 
OS_FLAGS
 
OSFœgPíd
 (
OS_FLAG_GRP
 *
p_gΩ
,

1365 
OS_FLAGS
 
Êags
,

1366 
OS_TICK
 
timeout
,

1367 
OS_OPT
 
›t
,

1368 
CPU_TS
 *
p_ts
,

1369 
OS_ERR
 *
p_îr
);

1371 #i‡
OS_CFG_FLAG_PEND_ABORT_EN
 > 0u

1372 
OS_OBJ_QTY
 
OSFœgPídAb‹t
 (
OS_FLAG_GRP
 *
p_gΩ
,

1373 
OS_OPT
 
›t
,

1374 
OS_ERR
 *
p_îr
);

1377 
OS_FLAGS
 
OSFœgPídGëFœgsRdy
 (
OS_ERR
 *
p_îr
);

1379 
OS_FLAGS
 
OSFœgPo°
 (
OS_FLAG_GRP
 *
p_gΩ
,

1380 
OS_FLAGS
 
Êags
,

1381 
OS_OPT
 
›t
,

1382 
OS_ERR
 *
p_îr
);

1386 
OS_FœgCÃ
 (
OS_FLAG_GRP
 *
p_gΩ
);

1388 
OS_FœgBlock
 (
OS_PEND_DATA
 *
p_≥nd_d©a
,

1389 
OS_FLAG_GRP
 *
p_gΩ
,

1390 
OS_FLAGS
 
Êags
,

1391 
OS_OPT
 
›t
,

1392 
OS_TICK
 
timeout
);

1394 #i‡
OS_CFG_DBG_EN
 > 0u

1395 
OS_FœgDbgLi°Add
 (
OS_FLAG_GRP
 *
p_gΩ
);

1397 
OS_FœgDbgLi°Remove
 (
OS_FLAG_GRP
 *
p_gΩ
);

1400 
OS_FœgInô
 (
OS_ERR
 *
p_îr
);

1402 
OS_FLAGS
 
OS_FœgPo°
 (
OS_FLAG_GRP
 *
p_gΩ
,

1403 
OS_FLAGS
 
Êags
,

1404 
OS_OPT
 
›t
,

1405 
CPU_TS
 
ts
,

1406 
OS_ERR
 *
p_îr
);

1408 
OS_FœgTaskRdy
 (
OS_TCB
 *
p_tcb
,

1409 
OS_FLAGS
 
Êags_rdy
,

1410 
CPU_TS
 
ts
);

1418 #i‡
OS_CFG_MEM_EN
 > 0u

1420 
OSMemCª©e
 (
OS_MEM
 *
p_mem
,

1421 
CPU_CHAR
 *
p_«me
,

1422 *
p_addr
,

1423 
OS_MEM_QTY
 
n_blks
,

1424 
OS_MEM_SIZE
 
blk_size
,

1425 
OS_ERR
 *
p_îr
);

1427 *
OSMemGë
 (
OS_MEM
 *
p_mem
,

1428 
OS_ERR
 *
p_îr
);

1430 
OSMemPut
 (
OS_MEM
 *
p_mem
,

1431 *
p_blk
,

1432 
OS_ERR
 *
p_îr
);

1436 #i‡
OS_CFG_DBG_EN
 > 0u

1437 
OS_MemDbgLi°Add
 (
OS_MEM
 *
p_mem
);

1440 
OS_MemInô
 (
OS_ERR
 *
p_îr
);

1449 #i‡
OS_CFG_MUTEX_EN
 > 0u

1451 
OSMuãxCª©e
 (
OS_MUTEX
 *
p_muãx
,

1452 
CPU_CHAR
 *
p_«me
,

1453 
OS_ERR
 *
p_îr
);

1455 #i‡
OS_CFG_MUTEX_DEL_EN
 > 0u

1456 
OS_OBJ_QTY
 
OSMuãxDñ
 (
OS_MUTEX
 *
p_muãx
,

1457 
OS_OPT
 
›t
,

1458 
OS_ERR
 *
p_îr
);

1461 
OSMuãxPíd
 (
OS_MUTEX
 *
p_muãx
,

1462 
OS_TICK
 
timeout
,

1463 
OS_OPT
 
›t
,

1464 
CPU_TS
 *
p_ts
,

1465 
OS_ERR
 *
p_îr
);

1467 #i‡
OS_CFG_MUTEX_PEND_ABORT_EN
 > 0u

1468 
OS_OBJ_QTY
 
OSMuãxPídAb‹t
 (
OS_MUTEX
 *
p_muãx
,

1469 
OS_OPT
 
›t
,

1470 
OS_ERR
 *
p_îr
);

1473 
OSMuãxPo°
 (
OS_MUTEX
 *
p_muãx
,

1474 
OS_OPT
 
›t
,

1475 
OS_ERR
 *
p_îr
);

1480 
OS_MuãxCÃ
 (
OS_MUTEX
 *
p_muãx
);

1482 #i‡
OS_CFG_DBG_EN
 > 0u

1483 
OS_MuãxDbgLi°Add
 (
OS_MUTEX
 *
p_muãx
);

1485 
OS_MuãxDbgLi°Remove
 (
OS_MUTEX
 *
p_muãx
);

1488 
OS_MuãxInô
 (
OS_ERR
 *
p_îr
);

1496 #i‡
OS_CFG_PEND_MULTI_EN
 > 0u

1498 
OS_OBJ_QTY
 
OSPídMu…i
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

1499 
OS_OBJ_QTY
 
tbl_size
,

1500 
OS_TICK
 
timeout
,

1501 
OS_OPT
 
›t
,

1502 
OS_ERR
 *
p_îr
);

1506 
OS_OBJ_QTY
 
OS_PídMu…iGëRdy
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

1507 
OS_OBJ_QTY
 
tbl_size
);

1509 
CPU_BOOLEAN
 
OS_PídMu…iVÆid©e
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

1510 
OS_OBJ_QTY
 
tbl_size
);

1512 
OS_PídMu…iWaô
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

1513 
OS_OBJ_QTY
 
tbl_size
,

1514 
OS_TICK
 
timeout
);

1521 #i‡
OS_CFG_Q_EN
 > 0u

1523 
OSQCª©e
 (
OS_Q
 *
p_q
,

1524 
CPU_CHAR
 *
p_«me
,

1525 
OS_MSG_QTY
 
max_qty
,

1526 
OS_ERR
 *
p_îr
);

1528 #i‡
OS_CFG_Q_DEL_EN
 > 0u

1529 
OS_OBJ_QTY
 
OSQDñ
 (
OS_Q
 *
p_q
,

1530 
OS_OPT
 
›t
,

1531 
OS_ERR
 *
p_îr
);

1534 #i‡
OS_CFG_Q_FLUSH_EN
 > 0u

1535 
OS_MSG_QTY
 
OSQFlush
 (
OS_Q
 *
p_q
,

1536 
OS_ERR
 *
p_îr
);

1539 *
OSQPíd
 (
OS_Q
 *
p_q
,

1540 
OS_TICK
 
timeout
,

1541 
OS_OPT
 
›t
,

1542 
OS_MSG_SIZE
 *
p_msg_size
,

1543 
CPU_TS
 *
p_ts
,

1544 
OS_ERR
 *
p_îr
);

1546 #i‡
OS_CFG_Q_PEND_ABORT_EN
 > 0u

1547 
OS_OBJ_QTY
 
OSQPídAb‹t
 (
OS_Q
 *
p_q
,

1548 
OS_OPT
 
›t
,

1549 
OS_ERR
 *
p_îr
);

1552 
OSQPo°
 (
OS_Q
 *
p_q
,

1553 *
p_void
,

1554 
OS_MSG_SIZE
 
msg_size
,

1555 
OS_OPT
 
›t
,

1556 
OS_ERR
 *
p_îr
);

1560 
OS_QCÃ
 (
OS_Q
 *
p_q
);

1562 #i‡
OS_CFG_DBG_EN
 > 0u

1563 
OS_QDbgLi°Add
 (
OS_Q
 *
p_q
);

1565 
OS_QDbgLi°Remove
 (
OS_Q
 *
p_q
);

1568 
OS_QInô
 (
OS_ERR
 *
p_îr
);

1570 
OS_QPo°
 (
OS_Q
 *
p_q
,

1571 *
p_void
,

1572 
OS_MSG_SIZE
 
msg_size
,

1573 
OS_OPT
 
›t
,

1574 
CPU_TS
 
ts
,

1575 
OS_ERR
 *
p_îr
);

1583 #i‡
OS_CFG_SEM_EN
 > 0u

1585 
OSSemCª©e
 (
OS_SEM
 *
p_£m
,

1586 
CPU_CHAR
 *
p_«me
,

1587 
OS_SEM_CTR
 
˙t
,

1588 
OS_ERR
 *
p_îr
);

1590 
OS_OBJ_QTY
 
OSSemDñ
 (
OS_SEM
 *
p_£m
,

1591 
OS_OPT
 
›t
,

1592 
OS_ERR
 *
p_îr
);

1594 
OS_SEM_CTR
 
OSSemPíd
 (
OS_SEM
 *
p_£m
,

1595 
OS_TICK
 
timeout
,

1596 
OS_OPT
 
›t
,

1597 
CPU_TS
 *
p_ts
,

1598 
OS_ERR
 *
p_îr
);

1600 #i‡
OS_CFG_SEM_PEND_ABORT_EN
 > 0u

1601 
OS_OBJ_QTY
 
OSSemPídAb‹t
 (
OS_SEM
 *
p_£m
,

1602 
OS_OPT
 
›t
,

1603 
OS_ERR
 *
p_îr
);

1606 
OS_SEM_CTR
 
OSSemPo°
 (
OS_SEM
 *
p_£m
,

1607 
OS_OPT
 
›t
,

1608 
OS_ERR
 *
p_îr
);

1610 #i‡
OS_CFG_SEM_SET_EN
 > 0u

1611 
OSSemSë
 (
OS_SEM
 *
p_£m
,

1612 
OS_SEM_CTR
 
˙t
,

1613 
OS_ERR
 *
p_îr
);

1618 
OS_SemCÃ
 (
OS_SEM
 *
p_£m
);

1620 #i‡
OS_CFG_DBG_EN
 > 0u

1621 
OS_SemDbgLi°Add
 (
OS_SEM
 *
p_£m
);

1623 
OS_SemDbgLi°Remove
 (
OS_SEM
 *
p_£m
);

1626 
OS_SemInô
 (
OS_ERR
 *
p_îr
);

1628 
OS_SEM_CTR
 
OS_SemPo°
 (
OS_SEM
 *
p_£m
,

1629 
OS_OPT
 
›t
,

1630 
CPU_TS
 
ts
,

1631 
OS_ERR
 *
p_îr
);

1639 #i‡
OS_CFG_TASK_CHANGE_PRIO_EN
 > 0u

1640 
OSTaskCh™gePrio
 (
OS_TCB
 *
p_tcb
,

1641 
OS_PRIO
 
¥io_√w
,

1642 
OS_ERR
 *
p_îr
);

1645 
OSTaskCª©e
 (
OS_TCB
 *
p_tcb
,

1646 
CPU_CHAR
 *
p_«me
,

1647 
OS_TASK_PTR
 
p_èsk
,

1648 *
p_¨g
,

1649 
OS_PRIO
 
¥io
,

1650 
CPU_STK
 *
p_°k_ba£
,

1651 
CPU_STK_SIZE
 
°k_limô
,

1652 
CPU_STK_SIZE
 
°k_size
,

1653 
OS_MSG_QTY
 
q_size
,

1654 
OS_TICK
 
time_qu™è
,

1655 *
p_ext
,

1656 
OS_OPT
 
›t
,

1657 
OS_ERR
 *
p_îr
);

1659 #i‡
OS_CFG_TASK_DEL_EN
 > 0u

1660 
OSTaskDñ
 (
OS_TCB
 *
p_tcb
,

1661 
OS_ERR
 *
p_îr
);

1664 #i‡
OS_CFG_TASK_Q_EN
 > 0u

1665 
OS_MSG_QTY
 
OSTaskQFlush
 (
OS_TCB
 *
p_tcb
,

1666 
OS_ERR
 *
p_îr
);

1668 *
OSTaskQPíd
 (
OS_TICK
 
timeout
,

1669 
OS_OPT
 
›t
,

1670 
OS_MSG_SIZE
 *
p_msg_size
,

1671 
CPU_TS
 *
p_ts
,

1672 
OS_ERR
 *
p_îr
);

1674 
CPU_BOOLEAN
 
OSTaskQPídAb‹t
 (
OS_TCB
 *
p_tcb
,

1675 
OS_OPT
 
›t
,

1676 
OS_ERR
 *
p_îr
);

1678 
OSTaskQPo°
 (
OS_TCB
 *
p_tcb
,

1679 *
p_void
,

1680 
OS_MSG_SIZE
 
msg_size
,

1681 
OS_OPT
 
›t
,

1682 
OS_ERR
 *
p_îr
);

1686 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1687 
OS_REG
 
OSTaskRegGë
 (
OS_TCB
 *
p_tcb
,

1688 
OS_REG_ID
 
id
,

1689 
OS_ERR
 *
p_îr
);

1691 
OS_REG_ID
 
OSTaskRegGëID
 (
OS_ERR
 *
p_îr
);

1693 
OSTaskRegSë
 (
OS_TCB
 *
p_tcb
,

1694 
OS_REG_ID
 
id
,

1695 
OS_REG
 
vÆue
,

1696 
OS_ERR
 *
p_îr
);

1699 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1700 
OSTaskResume
 (
OS_TCB
 *
p_tcb
,

1701 
OS_ERR
 *
p_îr
);

1703 
OSTaskSu•íd
 (
OS_TCB
 *
p_tcb
,

1704 
OS_ERR
 *
p_îr
);

1707 
OS_SEM_CTR
 
OSTaskSemPíd
 (
OS_TICK
 
timeout
,

1708 
OS_OPT
 
›t
,

1709 
CPU_TS
 *
p_ts
,

1710 
OS_ERR
 *
p_îr
);

1712 #i‡(
OS_CFG_TASK_SEM_PEND_ABORT_EN
 > 0u)

1713 
CPU_BOOLEAN
 
OSTaskSemPídAb‹t
 (
OS_TCB
 *
p_tcb
,

1714 
OS_OPT
 
›t
,

1715 
OS_ERR
 *
p_îr
);

1718 
OS_SEM_CTR
 
OSTaskSemPo°
 (
OS_TCB
 *
p_tcb
,

1719 
OS_OPT
 
›t
,

1720 
OS_ERR
 *
p_îr
);

1722 
OS_SEM_CTR
 
OSTaskSemSë
 (
OS_TCB
 *
p_tcb
,

1723 
OS_SEM_CTR
 
˙t
,

1724 
OS_ERR
 *
p_îr
);

1726 #i‡
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u

1727 
OSTaskStkChk
 (
OS_TCB
 *
p_tcb
,

1728 
CPU_STK_SIZE
 *
p_‰ì
,

1729 
CPU_STK_SIZE
 *
p_u£d
,

1730 
OS_ERR
 *
p_îr
);

1733 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

1734 
OSTaskTimeQu™èSë
 (
OS_TCB
 *
p_tcb
,

1735 
OS_TICK
 
time_qu™è
,

1736 
OS_ERR
 *
p_îr
);

1741 
OS_TaskBlock
 (
OS_TCB
 *
p_tcb
,

1742 
OS_TICK
 
timeout
);

1744 #i‡
OS_CFG_DBG_EN
 > 0u

1745 
OS_TaskDbgLi°Add
 (
OS_TCB
 *
p_tcb
);

1747 
OS_TaskDbgLi°Remove
 (
OS_TCB
 *
p_tcb
);

1750 
OS_TaskInô
 (
OS_ERR
 *
p_îr
);

1752 
OS_TaskInôTCB
 (
OS_TCB
 *
p_tcb
);

1754 
OS_TaskQPo°
 (
OS_TCB
 *
p_tcb
,

1755 *
p_void
,

1756 
OS_MSG_SIZE
 
msg_size
,

1757 
OS_OPT
 
›t
,

1758 
CPU_TS
 
ts
,

1759 
OS_ERR
 *
p_îr
);

1761 
OS_TaskRdy
 (
OS_TCB
 *
p_tcb
);

1763 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1764 
OS_TaskResume
 (
OS_TCB
 *
p_tcb
,

1765 
OS_ERR
 *
p_îr
);

1768 
OS_TaskRëu∫
 ();

1770 
OS_SEM_CTR
 
OS_TaskSemPo°
 (
OS_TCB
 *
p_tcb
,

1771 
OS_OPT
 
›t
,

1772 
CPU_TS
 
ts
,

1773 
OS_ERR
 *
p_îr
);

1775 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1776 
OS_TaskSu•íd
 (
OS_TCB
 *
p_tcb
,

1777 
OS_ERR
 *
p_îr
);

1785 #i‡
deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

1786 
OS_TLS_ID
 
OS_TLS_GëID
 (
OS_ERR
 *
p_îr
);

1788 
OS_TLS
 
OS_TLS_GëVÆue
 (
OS_TCB
 *
p_tcb
,

1789 
OS_TLS_ID
 
id
,

1790 
OS_ERR
 *
p_îr
);

1792 
OS_TLS_Inô
 (
OS_ERR
 *
p_îr
);

1794 
OS_TLS_SëVÆue
 (
OS_TCB
 *
p_tcb
,

1795 
OS_TLS_ID
 
id
,

1796 
OS_TLS
 
vÆue
,

1797 
OS_ERR
 *
p_îr
);

1799 
OS_TLS_SëDe°ru˘
 (
OS_TLS_ID
 
id
,

1800 
OS_TLS_DESTRUCT_PTR
 
p_de°ru˘
,

1801 
OS_ERR
 *
p_îr
);

1803 
OS_TLS_TaskCª©e
 (
OS_TCB
 *
p_tcb
);

1805 
OS_TLS_TaskDñ
 (
OS_TCB
 *
p_tcb
);

1807 
OS_TLS_TaskSw
 ();

1815 
OSTimeDly
 (
OS_TICK
 
dly
,

1816 
OS_OPT
 
›t
,

1817 
OS_ERR
 *
p_îr
);

1819 #i‡
OS_CFG_TIME_DLY_HMSM_EN
 > 0u

1820 
OSTimeDlyHMSM
 (
CPU_INT16U
 
hours
,

1821 
CPU_INT16U
 
möuãs
,

1822 
CPU_INT16U
 
£c⁄ds
,

1823 
CPU_INT32U
 
mûli
,

1824 
OS_OPT
 
›t
,

1825 
OS_ERR
 *
p_îr
);

1828 #i‡
OS_CFG_TIME_DLY_RESUME_EN
 > 0u

1829 
OSTimeDlyResume
 (
OS_TCB
 *
p_tcb
,

1830 
OS_ERR
 *
p_îr
);

1833 
OS_TICK
 
OSTimeGë
 (
OS_ERR
 *
p_îr
);

1835 
OSTimeSë
 (
OS_TICK
 
ticks
,

1836 
OS_ERR
 *
p_îr
);

1838 
OSTimeTick
 ();

1845 #i‡
OS_CFG_TMR_EN
 > 0u

1846 
OSTmrCª©e
 (
OS_TMR
 *
p_tmr
,

1847 
CPU_CHAR
 *
p_«me
,

1848 
OS_TICK
 
dly
,

1849 
OS_TICK
 
≥riod
,

1850 
OS_OPT
 
›t
,

1851 
OS_TMR_CALLBACK_PTR
 
p_ˇŒback
,

1852 *
p_ˇŒback_¨g
,

1853 
OS_ERR
 *
p_îr
);

1855 
CPU_BOOLEAN
 
OSTmrDñ
 (
OS_TMR
 *
p_tmr
,

1856 
OS_ERR
 *
p_îr
);

1858 
OS_TICK
 
OSTmrRemaöGë
 (
OS_TMR
 *
p_tmr
,

1859 
OS_ERR
 *
p_îr
);

1861 
CPU_BOOLEAN
 
OSTmrSèπ
 (
OS_TMR
 *
p_tmr
,

1862 
OS_ERR
 *
p_îr
);

1864 
OS_STATE
 
OSTmrSèãGë
 (
OS_TMR
 *
p_tmr
,

1865 
OS_ERR
 *
p_îr
);

1867 
CPU_BOOLEAN
 
OSTmrSt›
 (
OS_TMR
 *
p_tmr
,

1868 
OS_OPT
 
›t
,

1869 *
p_ˇŒback_¨g
,

1870 
OS_ERR
 *
p_îr
);

1874 
OS_TmrCÃ
 (
OS_TMR
 *
p_tmr
);

1876 #i‡
OS_CFG_DBG_EN
 > 0u

1877 
OS_TmrDbgLi°Add
 (
OS_TMR
 *
p_tmr
);

1879 
OS_TmrDbgLi°Remove
 (
OS_TMR
 *
p_tmr
);

1882 
OS_TmrInô
 (
OS_ERR
 *
p_îr
);

1884 
OS_TmrLök
 (
OS_TMR
 *
p_tmr
,

1885 
OS_OPT
 
›t
);

1887 
OS_TmrRe£tPók
 ();

1889 
OS_TmrU∆ök
 (
OS_TMR
 *
p_tmr
);

1891 
OS_TmrTask
 (*
p_¨g
);

1900 
OSInô
 (
OS_ERR
 *
p_îr
);

1902 
OSI¡E¡î
 ();

1903 
OSI¡Exô
 ();

1905 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


1906 
OSSa„tyCrôiˇlSèπ
 ();

1909 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

1910 
OSSchedRoundRoböCfg
 (
CPU_BOOLEAN
 
í
,

1911 
OS_TICK
 
dÊt_time_qu™è
,

1912 
OS_ERR
 *
p_îr
);

1914 
OSSchedRoundRoböYõld
 (
OS_ERR
 *
p_îr
);

1918 
OSSched
 ();

1920 
OSSchedLock
 (
OS_ERR
 *
p_îr
);

1921 
OSSchedU∆ock
 (
OS_ERR
 *
p_îr
);

1923 
OSSèπ
 (
OS_ERR
 *
p_îr
);

1925 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

1926 
OSSètRe£t
 (
OS_ERR
 *
p_îr
);

1928 
OSSètTaskCPUUßgeInô
 (
OS_ERR
 *
p_îr
);

1931 
CPU_INT16U
 
OSVîsi⁄
 (
OS_ERR
 *
p_îr
);

1935 
OS_IdÀTask
 (*
p_¨g
);

1937 
OS_IdÀTaskInô
 (
OS_ERR
 *
p_îr
);

1939 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

1940 
OS_SètTask
 (*
p_¨g
);

1943 
OS_SètTaskInô
 (
OS_ERR
 *
p_îr
);

1945 
OS_TickTask
 (*
p_¨g
);

1946 
OS_TickTaskInô
 (
OS_ERR
 *
p_îr
);

1957 
OSInôHook
 ();

1959 
OSTaskCª©eHook
 (
OS_TCB
 *
p_tcb
);

1960 
OSTaskDñHook
 (
OS_TCB
 *
p_tcb
);

1962 
OSIdÀTaskHook
 ();

1964 
OSTaskRëu∫Hook
 (
OS_TCB
 *
p_tcb
);

1966 
OSSètTaskHook
 ();

1968 
CPU_STK
 *
OSTaskStkInô
 (
OS_TASK_PTR
 
p_èsk
,

1969 *
p_¨g
,

1970 
CPU_STK
 *
p_°k_ba£
,

1971 
CPU_STK
 *
p_°k_limô
,

1972 
CPU_STK_SIZE
 
°k_size
,

1973 
OS_OPT
 
›t
);

1975 
OSTaskSwHook
 ();

1977 
OSTimeTickHook
 ();

1988 
OSCfg_Inô
 ();

1990 #i‡
OS_CFG_DBG_EN
 > 0u

1991 
OS_Dbg_Inô
 ();

1995 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

1996 
OS_I¡QTaskInô
 (
OS_ERR
 *
p_îr
);

1998 
OS_I¡QPo°
 (
OS_OBJ_TYPE
 
ty≥
,

1999 *
p_obj
,

2000 *
p_void
,

2001 
OS_MSG_SIZE
 
msg_size
,

2002 
OS_FLAGS
 
Êags
,

2003 
OS_OPT
 
›t
,

2004 
CPU_TS
 
ts
,

2005 
OS_ERR
 *
p_îr
);

2007 
OS_I¡QRePo°
 ();

2009 
OS_I¡QTask
 (*
p_¨g
);

2014 
OS_MsgPoﬁCª©e
 (
OS_MSG
 *
p_msg
,

2015 
OS_MSG_QTY
 
size
);

2017 
OS_MsgPoﬁInô
 (
OS_ERR
 *
p_îr
);

2019 
OS_MSG_QTY
 
OS_MsgQFªeAŒ
 (
OS_MSG_Q
 *
p_msg_q
);

2021 *
OS_MsgQGë
 (
OS_MSG_Q
 *
p_msg_q
,

2022 
OS_MSG_SIZE
 *
p_msg_size
,

2023 
CPU_TS
 *
p_ts
,

2024 
OS_ERR
 *
p_îr
);

2026 
OS_MsgQInô
 (
OS_MSG_Q
 *
p_msg_q
,

2027 
OS_MSG_QTY
 
size
);

2029 
OS_MsgQPut
 (
OS_MSG_Q
 *
p_msg_q
,

2030 *
p_void
,

2031 
OS_MSG_SIZE
 
msg_size
,

2032 
OS_OPT
 
›t
,

2033 
CPU_TS
 
ts
,

2034 
OS_ERR
 *
p_îr
);

2038 
OS_Píd
 (
OS_PEND_DATA
 *
p_≥nd_d©a
,

2039 
OS_PEND_OBJ
 *
p_obj
,

2040 
OS_STATE
 
≥ndög_⁄
,

2041 
OS_TICK
 
timeout
);

2043 
OS_PídAb‹t
 (
OS_PEND_OBJ
 *
p_obj
,

2044 
OS_TCB
 *
p_tcb
,

2045 
CPU_TS
 
ts
);

2047 
OS_PídAb‹t1
 (
OS_PEND_OBJ
 *
p_obj
,

2048 
OS_TCB
 *
p_tcb
,

2049 
CPU_TS
 
ts
);

2051 
OS_PídObjDñ
 (
OS_PEND_OBJ
 *
p_obj
,

2052 
OS_TCB
 *
p_tcb
,

2053 
CPU_TS
 
ts
);

2055 
OS_PídObjDñ1
 (
OS_PEND_OBJ
 *
p_obj
,

2056 
OS_TCB
 *
p_tcb
,

2057 
CPU_TS
 
ts
);

2059 
OS_Po°
 (
OS_PEND_OBJ
 *
p_obj
,

2060 
OS_TCB
 *
p_tcb
,

2061 *
p_void
,

2062 
OS_MSG_SIZE
 
msg_size
,

2063 
CPU_TS
 
ts
);

2065 
OS_Po°1
 (
OS_PEND_OBJ
 *
p_obj
,

2066 
OS_TCB
 *
p_tcb
,

2067 *
p_void
,

2068 
OS_MSG_SIZE
 
msg_size
,

2069 
CPU_TS
 
ts
);

2073 
OS_PrioInô
 ();

2075 
OS_PrioIn£π
 (
OS_PRIO
 
¥io
);

2077 
OS_PrioRemove
 (
OS_PRIO
 
¥io
);

2079 
OS_PRIO
 
OS_PrioGëHighe°
 ();

2083 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

2084 
OS_Sched0
 ();

2087 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

2088 
OS_SchedLockTimeMósSèπ
 ();

2089 
OS_SchedLockTimeMósSt›
 ();

2092 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

2093 
OS_SchedRoundRobö
 (
OS_RDY_LIST
 *
p_rdy_li°
);

2098 
OS_RdyLi°Inô
 ();

2100 
OS_RdyLi°In£π
 (
OS_TCB
 *
p_tcb
);

2102 
OS_RdyLi°In£πHód
 (
OS_TCB
 *
p_tcb
);

2104 
OS_RdyLi°In£πTaû
 (
OS_TCB
 *
p_tcb
);

2106 
OS_RdyLi°MoveHódToTaû
 (
OS_RDY_LIST
 *
p_rdy_li°
);

2108 
OS_RdyLi°Remove
 (
OS_TCB
 *
p_tcb
);

2112 
OS_PídD©aInô
 (
OS_TCB
 *
p_tcb
,

2113 
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

2114 
OS_OBJ_QTY
 
tbl_size
);

2116 #i‡
OS_CFG_DBG_EN
 > 0u

2117 
OS_PídDbgNameAdd
 (
OS_PEND_OBJ
 *
p_obj
,

2118 
OS_TCB
 *
p_tcb
);

2120 
OS_PídDbgNameRemove
 (
OS_PEND_OBJ
 *
p_obj
,

2121 
OS_TCB
 *
p_tcb
);

2124 
OS_PEND_LIST
 *
OS_PídLi°GëPå
 (
OS_PEND_OBJ
 *
p_obj
);

2126 
OS_PídLi°Inô
 (
OS_PEND_LIST
 *
p_≥nd_li°
);

2128 
OS_PídLi°In£πHód
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

2129 
OS_PEND_DATA
 *
p_≥nd_d©a
);

2131 
OS_PídLi°In£πPrio
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

2132 
OS_PEND_DATA
 *
p_≥nd_d©a
);

2134 
OS_PídLi°Ch™gePrio
 (
OS_TCB
 *
p_tcb
,

2135 
OS_PRIO
 
¥io_√w
);

2137 
OS_PídLi°Remove
 (
OS_TCB
 *
p_tcb
);

2139 
OS_PídLi°Remove1
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

2140 
OS_PEND_DATA
 *
p_≥nd_d©a
);

2144 
OS_TickLi°Inô
 ();

2146 
OS_TickLi°In£π
 (
OS_TCB
 *
p_tcb
,

2147 
OS_TICK
 
time
,

2148 
OS_OPT
 
›t
,

2149 
OS_ERR
 *
p_îr
);

2151 
OS_TickLi°Remove
 (
OS_TCB
 *
p_tcb
);

2153 
OS_TickLi°Re£tPók
 ();

2155 
OS_TickLi°Upd©e
 ();

2176 #i‚de‡
OS_CFG_APP_HOOKS_EN


2181 #i‚de‡
OS_CFG_ARG_CHK_EN


2186 #i‚de‡
OS_CFG_DBG_EN


2191 #i‚de‡
OS_CFG_CALLED_FROM_ISR_CHK_EN


2196 #i‚de‡
OS_CFG_OBJ_TYPE_CHK_EN


2201 #i‚de‡
OS_CFG_PEND_MULTI_EN


2206 #i‡ 
OS_CFG_PRIO_MAX
 < 8u

2211 #i‚de‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN


2214 #i‡ (
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u) && \

2215 (
	gOS_CFG_TS_EN
 < 1u)

2221 #i‚de‡
OS_CFG_SCHED_ROUND_ROBIN_EN


2226 #i‚de‡
OS_CFG_STK_SIZE_MIN


2230 #i‚de‡
OS_CFG_TS_EN


2233 #i‡ (
OS_CFG_TS_EN
 > 0u) && \

2234 (
	gCPU_CFG_TS_EN
 =
DEF_DISABLED
)

2245 #i‚de‡
OS_CFG_FLAG_EN


2248 #i‚de‡
OS_CFG_FLAG_DEL_EN


2252 #i‚de‡
OS_CFG_FLAG_MODE_CLR_EN


2256 #i‚de‡
OS_CFG_FLAG_PEND_ABORT_EN


2267 #i‚de‡
OS_CFG_MEM_EN


2277 #i‚de‡
OS_CFG_MUTEX_EN


2280 #i‚de‡
OS_CFG_MUTEX_DEL_EN


2284 #i‚de‡
OS_CFG_MUTEX_PEND_ABORT_EN


2295 #i‚de‡
OS_CFG_Q_EN


2298 #i‚de‡
OS_CFG_Q_DEL_EN


2302 #i‚de‡
OS_CFG_Q_FLUSH_EN


2306 #i‚de‡
OS_CFG_Q_PEND_ABORT_EN


2317 #i‚de‡
OS_CFG_SEM_EN


2320 #i‚de‡
OS_CFG_SEM_DEL_EN


2324 #i‚de‡
OS_CFG_SEM_PEND_ABORT_EN


2328 #i‚de‡
OS_CFG_SEM_SET_EN


2339 #i‚de‡
OS_CFG_STAT_TASK_EN


2343 #i‚de‡
OS_CFG_STAT_TASK_STK_CHK_EN


2347 #i‚de‡
OS_CFG_TASK_CHANGE_PRIO_EN


2351 #i‚de‡
OS_CFG_TASK_DEL_EN


2355 #i‚de‡
OS_CFG_TASK_Q_EN


2359 #i‚de‡
OS_CFG_TASK_Q_PEND_ABORT_EN


2363 #i‚de‡
OS_CFG_TASK_PROFILE_EN


2367 #i‚de‡
OS_CFG_TASK_REG_TBL_SIZE


2371 #i‚de‡
OS_CFG_TASK_SEM_PEND_ABORT_EN


2375 #i‚de‡
OS_CFG_TASK_SUSPEND_EN


2385 #i‚de‡
OS_CFG_TIME_DLY_HMSM_EN


2389 #i‚de‡
OS_CFG_TIME_DLY_RESUME_EN


2399 #i‚de‡
OS_CFG_TMR_EN


2402 #i‚de‡
OS_CFG_TMR_DEL_EN


2414 #i‡
LIB_VERSION
 < 126u

2420 #i‡
CPU_CORE_VERSION
 < 125u

2431 #ifde‡
__˝lu•lus


	@UCOSIII/uCOS-III/Source/os_cfg_app.c

35 
	#MICRIUM_SOURCE


	)

36 
	~<os_cfg_≠p.h
>

37 
	~<os.h
>

39 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


40 c⁄° 
CPU_CHAR
 *
	gos_cfg_≠p__c
 = "$Id: $";

43 
	#OS_CFG_IDLE_TASK_STK_LIMIT
 ((
OS_CFG_IDLE_TASK_STK_SIZE
 * 
OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
Ë/ 100u)

	)

44 
	#OS_CFG_INT_Q_TASK_STK_LIMIT
 ((
OS_CFG_INT_Q_TASK_STK_SIZE
 * 
OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
Ë/ 100u)

	)

45 
	#OS_CFG_STAT_TASK_STK_LIMIT
 ((
OS_CFG_STAT_TASK_STK_SIZE
 * 
OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
Ë/ 100u)

	)

46 
	#OS_CFG_TICK_TASK_STK_LIMIT
 ((
OS_CFG_TICK_TASK_STK_SIZE
 * 
OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
Ë/ 100u)

	)

47 
	#OS_CFG_TMR_TASK_STK_LIMIT
 ((
OS_CFG_TMR_TASK_STK_SIZE
 * 
OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
Ë/ 100u)

	)

55 
CPU_STK
 
	gOSCfg_IdÀTaskStk
 [
OS_CFG_IDLE_TASK_STK_SIZE
];

57 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u)

58 
OS_INT_Q
 
	gOSCfg_I¡Q
 [
OS_CFG_INT_Q_SIZE
];

59 
CPU_STK
 
	gOSCfg_I¡QTaskStk
 [
OS_CFG_INT_Q_TASK_STK_SIZE
];

62 #i‡(
OS_CFG_ISR_STK_SIZE
 > 0u)

63 
CPU_STK
 
	gOSCfg_ISRStk
 [
OS_CFG_ISR_STK_SIZE
];

66 #i‡(
OS_MSG_EN
 > 0u)

67 
OS_MSG
 
	gOSCfg_MsgPoﬁ
 [
OS_CFG_MSG_POOL_SIZE
];

70 #i‡(
OS_CFG_STAT_TASK_EN
 > 0u)

71 
CPU_STK
 
	gOSCfg_SètTaskStk
 [
OS_CFG_STAT_TASK_STK_SIZE
];

74 
CPU_STK
 
	gOSCfg_TickTaskStk
 [
OS_CFG_TICK_TASK_STK_SIZE
];

75 
OS_TICK_SPOKE
 
	gOSCfg_TickWhìl
 [
OS_CFG_TICK_WHEEL_SIZE
];

77 #i‡(
OS_CFG_TMR_EN
 > 0u)

78 
CPU_STK
 
	gOSCfg_TmrTaskStk
 [
OS_CFG_TMR_TASK_STK_SIZE
];

79 
OS_TMR_SPOKE
 
	gOSCfg_TmrWhìl
 [
OS_CFG_TMR_WHEEL_SIZE
];

89 
CPU_STK
 * c⁄° 
	gOSCfg_IdÀTaskStkBa£På
 = (CPU_STK *)&
OSCfg_IdÀTaskStk
[0];

90 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_IdÀTaskStkLimô
 = (CPU_STK_SIZE)
OS_CFG_IDLE_TASK_STK_LIMIT
;

91 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_IdÀTaskStkSize
 = (CPU_STK_SIZE)
OS_CFG_IDLE_TASK_STK_SIZE
;

92 
CPU_INT32U
 c⁄° 
	gOSCfg_IdÀTaskStkSizeRAM
 = (CPU_INT32U )(
OSCfg_IdÀTaskStk
);

95 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u)

96 
OS_INT_Q
 * c⁄° 
	gOSCfg_I¡QBa£På
 = (OS_INT_Q *)&
OSCfg_I¡Q
[0];

97 
OS_OBJ_QTY
 c⁄° 
	gOSCfg_I¡QSize
 = (OS_OBJ_QTY )
OS_CFG_INT_Q_SIZE
;

98 
CPU_INT32U
 c⁄° 
	gOSCfg_I¡QSizeRAM
 = (CPU_INT32U )(
OSCfg_I¡Q
);

99 
CPU_STK
 * c⁄° 
	gOSCfg_I¡QTaskStkBa£På
 = (CPU_STK *)&
OSCfg_I¡QTaskStk
[0];

100 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_I¡QTaskStkLimô
 = (CPU_STK_SIZE)
OS_CFG_INT_Q_TASK_STK_LIMIT
;

101 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_I¡QTaskStkSize
 = (CPU_STK_SIZE)
OS_CFG_INT_Q_TASK_STK_SIZE
;

102 
CPU_INT32U
 c⁄° 
	gOSCfg_I¡QTaskStkSizeRAM
 = (CPU_INT32U )(
OSCfg_I¡QTaskStk
);

104 
OS_INT_Q
 * c⁄° 
	gOSCfg_I¡QBa£På
 = (OS_INT_Q *)0;

105 
OS_OBJ_QTY
 c⁄° 
	gOSCfg_I¡QSize
 = (OS_OBJ_QTY )0;

106 
CPU_INT32U
 c⁄° 
	gOSCfg_I¡QSizeRAM
 = (CPU_INT32U )0;

107 
CPU_STK
 * c⁄° 
	gOSCfg_I¡QTaskStkBa£På
 = (CPU_STK *)0;

108 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_I¡QTaskStkLimô
 = (CPU_STK_SIZE)0;

109 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_I¡QTaskStkSize
 = (CPU_STK_SIZE)0;

110 
CPU_INT32U
 c⁄° 
	gOSCfg_I¡QTaskStkSizeRAM
 = (CPU_INT32U )0;

114 #i‡(
OS_CFG_ISR_STK_SIZE
 > 0u)

115 
CPU_STK
 * c⁄° 
	gOSCfg_ISRStkBa£På
 = (CPU_STK *)&
OSCfg_ISRStk
[0];

116 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_ISRStkSize
 = (CPU_STK_SIZE)
OS_CFG_ISR_STK_SIZE
;

117 
CPU_INT32U
 c⁄° 
	gOSCfg_ISRStkSizeRAM
 = (CPU_INT32U )(
OSCfg_ISRStk
);

119 
CPU_STK
 * c⁄° 
	gOSCfg_ISRStkBa£På
 = (CPU_STK *)0;

120 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_ISRStkSize
 = (CPU_STK_SIZE)0;

121 
CPU_INT32U
 c⁄° 
	gOSCfg_ISRStkSizeRAM
 = (CPU_INT32U )0;

125 #i‡(
OS_MSG_EN
 > 0u)

126 
OS_MSG_SIZE
 c⁄° 
	gOSCfg_MsgPoﬁSize
 = (OS_MSG_SIZE)
OS_CFG_MSG_POOL_SIZE
;

127 
CPU_INT32U
 c⁄° 
	gOSCfg_MsgPoﬁSizeRAM
 = (CPU_INT32U )(
OSCfg_MsgPoﬁ
);

128 
OS_MSG
 * c⁄° 
	gOSCfg_MsgPoﬁBa£På
 = (OS_MSG *)&
OSCfg_MsgPoﬁ
[0];

130 
OS_MSG_SIZE
 c⁄° 
	gOSCfg_MsgPoﬁSize
 = (OS_MSG_SIZE)0;

131 
CPU_INT32U
 c⁄° 
	gOSCfg_MsgPoﬁSizeRAM
 = (CPU_INT32U )0;

132 
OS_MSG
 * c⁄° 
	gOSCfg_MsgPoﬁBa£På
 = (OS_MSG *)0;

136 #i‡(
OS_CFG_STAT_TASK_EN
 > 0u)

137 
OS_PRIO
 c⁄° 
	gOSCfg_SètTaskPrio
 = (OS_PRIO )
OS_CFG_STAT_TASK_PRIO
;

138 
OS_RATE_HZ
 c⁄° 
	gOSCfg_SètTaskR©e_Hz
 = (OS_RATE_HZ )
OS_CFG_STAT_TASK_RATE_HZ
;

139 
CPU_STK
 * c⁄° 
	gOSCfg_SètTaskStkBa£På
 = (CPU_STK *)&
OSCfg_SètTaskStk
[0];

140 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_SètTaskStkLimô
 = (CPU_STK_SIZE)
OS_CFG_STAT_TASK_STK_LIMIT
;

141 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_SètTaskStkSize
 = (CPU_STK_SIZE)
OS_CFG_STAT_TASK_STK_SIZE
;

142 
CPU_INT32U
 c⁄° 
	gOSCfg_SètTaskStkSizeRAM
 = (CPU_INT32U )(
OSCfg_SètTaskStk
);

144 
OS_PRIO
 c⁄° 
	gOSCfg_SètTaskPrio
 = (OS_PRIO )0;

145 
OS_RATE_HZ
 c⁄° 
	gOSCfg_SètTaskR©e_Hz
 = (OS_RATE_HZ )0;

146 
CPU_STK
 * c⁄° 
	gOSCfg_SètTaskStkBa£På
 = (CPU_STK *)0;

147 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_SètTaskStkLimô
 = (CPU_STK_SIZE)0;

148 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_SètTaskStkSize
 = (CPU_STK_SIZE)0;

149 
CPU_INT32U
 c⁄° 
	gOSCfg_SètTaskStkSizeRAM
 = (CPU_INT32U )0;

153 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_StkSizeMö
 = (CPU_STK_SIZE)
OS_CFG_STK_SIZE_MIN
;

156 
OS_RATE_HZ
 c⁄° 
	gOSCfg_TickR©e_Hz
 = (OS_RATE_HZ )
OS_CFG_TICK_RATE_HZ
;

157 
OS_PRIO
 c⁄° 
	gOSCfg_TickTaskPrio
 = (OS_PRIO )
OS_CFG_TICK_TASK_PRIO
;

158 
CPU_STK
 * c⁄° 
	gOSCfg_TickTaskStkBa£På
 = (CPU_STK *)&
OSCfg_TickTaskStk
[0];

159 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_TickTaskStkLimô
 = (CPU_STK_SIZE)
OS_CFG_TICK_TASK_STK_LIMIT
;

160 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_TickTaskStkSize
 = (CPU_STK_SIZE)
OS_CFG_TICK_TASK_STK_SIZE
;

161 
CPU_INT32U
 c⁄° 
	gOSCfg_TickTaskStkSizeRAM
 = (CPU_INT32U )(
OSCfg_TickTaskStk
);

162 
OS_OBJ_QTY
 c⁄° 
	gOSCfg_TickWhìlSize
 = (OS_OBJ_QTY )
OS_CFG_TICK_WHEEL_SIZE
;

163 
CPU_INT32U
 c⁄° 
	gOSCfg_TickWhìlSizeRAM
 = (CPU_INT32U )(
OSCfg_TickWhìl
);

166 #i‡(
OS_CFG_TMR_EN
 > 0u)

167 
OS_PRIO
 c⁄° 
	gOSCfg_TmrTaskPrio
 = (OS_PRIO )
OS_CFG_TMR_TASK_PRIO
;

168 
OS_RATE_HZ
 c⁄° 
	gOSCfg_TmrTaskR©e_Hz
 = (OS_RATE_HZ )
OS_CFG_TMR_TASK_RATE_HZ
;

169 
CPU_STK
 * c⁄° 
	gOSCfg_TmrTaskStkBa£På
 = (CPU_STK *)&
OSCfg_TmrTaskStk
[0];

170 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_TmrTaskStkLimô
 = (CPU_STK_SIZE)
OS_CFG_TMR_TASK_STK_LIMIT
;

171 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_TmrTaskStkSize
 = (CPU_STK_SIZE)
OS_CFG_TMR_TASK_STK_SIZE
;

172 
CPU_INT32U
 c⁄° 
	gOSCfg_TmrTaskStkSizeRAM
 = (CPU_INT32U )(
OSCfg_TmrTaskStk
);

173 
OS_OBJ_QTY
 c⁄° 
	gOSCfg_TmrWhìlSize
 = (OS_OBJ_QTY )
OS_CFG_TMR_WHEEL_SIZE
;

174 
CPU_INT32U
 c⁄° 
	gOSCfg_TmrWhìlSizeRAM
 = (CPU_INT32U )(
OSCfg_TmrWhìl
);

176 
OS_PRIO
 c⁄° 
	gOSCfg_TmrTaskPrio
 = (OS_PRIO )0;

177 
OS_RATE_HZ
 c⁄° 
	gOSCfg_TmrTaskR©e_Hz
 = (OS_RATE_HZ )0;

178 
CPU_STK
 * c⁄° 
	gOSCfg_TmrTaskStkBa£På
 = (CPU_STK *)0;

179 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_TmrTaskStkLimô
 = (CPU_STK_SIZE)0;

180 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_TmrTaskStkSize
 = (CPU_STK_SIZE)0;

181 
CPU_INT32U
 c⁄° 
	gOSCfg_TmrTaskStkSizeRAM
 = (CPU_INT32U )0;

182 
OS_OBJ_QTY
 c⁄° 
	gOSCfg_TmrWhìlSize
 = (OS_OBJ_QTY )0;

183 
CPU_INT32U
 c⁄° 
	gOSCfg_TmrWhìlSizeRAM
 = (CPU_INT32U )0;

194 
CPU_INT32U
 c⁄° 
	gOSCfg_D©aSizeRAM
 = (
OSCfg_IdÀTaskStk
)

196 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u)

197 + (
OSCfg_I¡Q
)

198 + (
OSCfg_I¡QTaskStk
)

201 #i‡(
OS_MSG_EN
 > 0u)

202 + (
OSCfg_MsgPoﬁ
)

205 #i‡(
OS_CFG_STAT_TASK_EN
 > 0u)

206 + (
OSCfg_SètTaskStk
)

209 #i‡(
OS_CFG_TMR_EN
 > 0u)

210 + (
OSCfg_TmrTaskStk
)

211 + (
OSCfg_TmrWhìl
)

214 #i‡(
OS_CFG_ISR_STK_SIZE
 > 0u)

215 + (
OSCfg_ISRStk
)

217 + (
OSCfg_TickTaskStk
)

218 + (
OSCfg_TickWhìl
);

240 
	$OSCfg_Inô
 ()

242 c⁄° *
p_ãmp
;

245 
p_ãmp
 = (c⁄° *)&
OSCfg_D©aSizeRAM
;

247 
p_ãmp
 = (c⁄° *)&
OSCfg_IdÀTaskStkBa£På
;

248 
p_ãmp
 = (c⁄° *)&
OSCfg_IdÀTaskStkLimô
;

249 
p_ãmp
 = (c⁄° *)&
OSCfg_IdÀTaskStkSize
;

250 
p_ãmp
 = (c⁄° *)&
OSCfg_IdÀTaskStkSizeRAM
;

252 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u)

253 
p_ãmp
 = (c⁄° *)&
OSCfg_I¡QBa£På
;

254 
p_ãmp
 = (c⁄° *)&
OSCfg_I¡QSize
;

255 
p_ãmp
 = (c⁄° *)&
OSCfg_I¡QSizeRAM
;

256 
p_ãmp
 = (c⁄° *)&
OSCfg_I¡QTaskStkBa£På
;

257 
p_ãmp
 = (c⁄° *)&
OSCfg_I¡QTaskStkLimô
;

258 
p_ãmp
 = (c⁄° *)&
OSCfg_I¡QTaskStkSize
;

259 
p_ãmp
 = (c⁄° *)&
OSCfg_I¡QTaskStkSizeRAM
;

262 
p_ãmp
 = (c⁄° *)&
OSCfg_ISRStkBa£På
;

263 
p_ãmp
 = (c⁄° *)&
OSCfg_ISRStkSize
;

264 
p_ãmp
 = (c⁄° *)&
OSCfg_ISRStkSizeRAM
;

266 #i‡(
OS_MSG_EN
 > 0u)

267 
p_ãmp
 = (c⁄° *)&
OSCfg_MsgPoﬁSize
;

268 
p_ãmp
 = (c⁄° *)&
OSCfg_MsgPoﬁSizeRAM
;

269 
p_ãmp
 = (c⁄° *)&
OSCfg_MsgPoﬁBa£På
;

272 #i‡(
OS_CFG_STAT_TASK_EN
 > 0u)

273 
p_ãmp
 = (c⁄° *)&
OSCfg_SètTaskPrio
;

274 
p_ãmp
 = (c⁄° *)&
OSCfg_SètTaskR©e_Hz
;

275 
p_ãmp
 = (c⁄° *)&
OSCfg_SètTaskStkBa£På
;

276 
p_ãmp
 = (c⁄° *)&
OSCfg_SètTaskStkLimô
;

277 
p_ãmp
 = (c⁄° *)&
OSCfg_SètTaskStkSize
;

278 
p_ãmp
 = (c⁄° *)&
OSCfg_SètTaskStkSizeRAM
;

281 
p_ãmp
 = (c⁄° *)&
OSCfg_StkSizeMö
;

283 
p_ãmp
 = (c⁄° *)&
OSCfg_TickR©e_Hz
;

284 
p_ãmp
 = (c⁄° *)&
OSCfg_TickTaskPrio
;

285 
p_ãmp
 = (c⁄° *)&
OSCfg_TickTaskStkBa£På
;

286 
p_ãmp
 = (c⁄° *)&
OSCfg_TickTaskStkLimô
;

287 
p_ãmp
 = (c⁄° *)&
OSCfg_TickTaskStkSize
;

288 
p_ãmp
 = (c⁄° *)&
OSCfg_TickTaskStkSizeRAM
;

289 
p_ãmp
 = (c⁄° *)&
OSCfg_TickWhìlSize
;

290 
p_ãmp
 = (c⁄° *)&
OSCfg_TickWhìlSizeRAM
;

292 #i‡(
OS_CFG_TMR_EN
 > 0u)

293 
p_ãmp
 = (c⁄° *)&
OSCfg_TmrTaskPrio
;

294 
p_ãmp
 = (c⁄° *)&
OSCfg_TmrTaskR©e_Hz
;

295 
p_ãmp
 = (c⁄° *)&
OSCfg_TmrTaskStkBa£På
;

296 
p_ãmp
 = (c⁄° *)&
OSCfg_TmrTaskStkLimô
;

297 
p_ãmp
 = (c⁄° *)&
OSCfg_TmrTaskStkSize
;

298 
p_ãmp
 = (c⁄° *)&
OSCfg_TmrTaskStkSizeRAM
;

299 
p_ãmp
 = (c⁄° *)&
OSCfg_TmrWhìlSize
;

300 
p_ãmp
 = (c⁄° *)&
OSCfg_TmrWhìlSizeRAM
;

302 
p_ãmp
 =Ö_temp;

303 
	}
}

	@UCOSIII/uCOS-III/Source/os_core.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_c‹e__c
 = "$Id: $";

55 
	$OSInô
 (
OS_ERR
 *
p_îr
)

57 
CPU_STK
 *
p_°k
;

58 
CPU_STK_SIZE
 
size
;

62 #ifde‡
OS_SAFETY_CRITICAL


63 i‡(
p_îr
 =(
OS_ERR
 *)0) {

64 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

69 
	`OSInôHook
();

71 
OSI¡Ne°ögCå
 = (
OS_NESTING_CTR
)0;

73 
OSRu¬ög
 = 
OS_STATE_OS_STOPPED
;

75 
OSSchedLockNe°ögCå
 = (
OS_NESTING_CTR
)0;

77 
OSTCBCurPå
 = (
OS_TCB
 *)0;

78 
OSTCBHighRdyPå
 = (
OS_TCB
 *)0;

80 
OSPrioCur
 = (
OS_PRIO
)0;

81 
OSPrioHighRdy
 = (
OS_PRIO
)0;

82 
OSPrioSaved
 = (
OS_PRIO
)0;

84 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

85 
OSSchedLockTimeBegö
 = (
CPU_TS
)0;

86 
OSSchedLockTimeMax
 = (
CPU_TS
)0;

87 
OSSchedLockTimeMaxCur
 = (
CPU_TS
)0;

90 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


91 
OSSa„tyCrôiˇlSèπFœg
 = 
DEF_FALSE
;

94 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

95 
OSSchedRoundRoböEn
 = 
DEF_FALSE
;

96 
OSSchedRoundRoböDÊtTimeQu™è
 = 
OSCfg_TickR©e_Hz
 / 10u;

99 i‡(
OSCfg_ISRStkSize
 > (
CPU_STK_SIZE
)0) {

100 
p_°k
 = 
OSCfg_ISRStkBa£På
;

101 i‡(
p_°k
 !(
CPU_STK
 *)0) {

102 
size
 = 
OSCfg_ISRStkSize
;

103 
size
 > (
CPU_STK_SIZE
)0) {

104 
size
--;

105 *
p_°k
 = (
CPU_STK
)0;

106 
p_°k
++;

111 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

112 
OS_AµTaskCª©eHookPå
 = (
OS_APP_HOOK_TCB
 )0;

113 
OS_AµTaskDñHookPå
 = (
OS_APP_HOOK_TCB
 )0;

114 
OS_AµTaskRëu∫HookPå
 = (
OS_APP_HOOK_TCB
 )0;

116 
OS_AµIdÀTaskHookPå
 = (
OS_APP_HOOK_VOID
)0;

117 
OS_AµSètTaskHookPå
 = (
OS_APP_HOOK_VOID
)0;

118 
OS_AµTaskSwHookPå
 = (
OS_APP_HOOK_VOID
)0;

119 
OS_AµTimeTickHookPå
 = (
OS_APP_HOOK_VOID
)0;

122 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

123 
OSTaskRegNextAvaûID
 = (
OS_REG_ID
)0;

126 
	`OS_PrioInô
();

128 
	`OS_RdyLi°Inô
();

131 #i‡
OS_CFG_FLAG_EN
 > 0u

132 
	`OS_FœgInô
(
p_îr
);

133 i‡(*
p_îr
 !
OS_ERR_NONE
) {

139 #i‡
OS_CFG_MEM_EN
 > 0u

140 
	`OS_MemInô
(
p_îr
);

141 i‡(*
p_îr
 !
OS_ERR_NONE
) {

147 #i‡(
OS_MSG_EN
) > 0u

148 
	`OS_MsgPoﬁInô
(
p_îr
);

149 i‡(*
p_îr
 !
OS_ERR_NONE
) {

155 #i‡
OS_CFG_MUTEX_EN
 > 0u

156 
	`OS_MuãxInô
(
p_îr
);

157 i‡(*
p_îr
 !
OS_ERR_NONE
) {

163 #i‡
OS_CFG_Q_EN
 > 0u

164 
	`OS_QInô
(
p_îr
);

165 i‡(*
p_îr
 !
OS_ERR_NONE
) {

171 #i‡
OS_CFG_SEM_EN
 > 0u

172 
	`OS_SemInô
(
p_îr
);

173 i‡(*
p_îr
 !
OS_ERR_NONE
) {

179 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

180 
	`OS_TLS_Inô
(
p_îr
);

181 i‡(*
p_îr
 !
OS_ERR_NONE
) {

187 
	`OS_TaskInô
(
p_îr
);

188 i‡(*
p_îr
 !
OS_ERR_NONE
) {

193 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

194 
	`OS_I¡QTaskInô
(
p_îr
);

195 i‡(*
p_îr
 !
OS_ERR_NONE
) {

201 
	`OS_IdÀTaskInô
(
p_îr
);

202 i‡(*
p_îr
 !
OS_ERR_NONE
) {

207 
	`OS_TickTaskInô
(
p_îr
);

208 i‡(*
p_îr
 !
OS_ERR_NONE
) {

213 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

214 
	`OS_SètTaskInô
(
p_îr
);

215 i‡(*
p_îr
 !
OS_ERR_NONE
) {

221 #i‡
OS_CFG_TMR_EN
 > 0u

222 
	`OS_TmrInô
(
p_îr
);

223 i‡(*
p_îr
 !
OS_ERR_NONE
) {

229 #i‡
OS_CFG_DBG_EN
 > 0u

230 
	`OS_Dbg_Inô
();

234 
	`OSCfg_Inô
();

235 
	}
}

266 
	$OSI¡E¡î
 ()

268 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

272 i‡(
OSI¡Ne°ögCå
 >(
OS_NESTING_CTR
)250u) {

276 
OSI¡Ne°ögCå
++;

277 
	}
}

300 
	$OSI¡Exô
 ()

302 
	`CPU_SR_ALLOC
();

306 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

310 
	`CPU_INT_DIS
();

311 i‡(
OSI¡Ne°ögCå
 =(
OS_NESTING_CTR
)0) {

312 
	`CPU_INT_EN
();

315 
OSI¡Ne°ögCå
--;

316 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

317 
	`CPU_INT_EN
();

321 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

322 
	`CPU_INT_EN
();

326 
OSPrioHighRdy
 = 
	`OS_PrioGëHighe°
();

327 
OSTCBHighRdyPå
 = 
OSRdyLi°
[
OSPrioHighRdy
].
HódPå
;

328 i‡(
OSTCBHighRdyPå
 =
OSTCBCurPå
) {

329 
	`CPU_INT_EN
();

333 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

334 
OSTCBHighRdyPå
->
CtxSwCå
++;

336 
OSTaskCtxSwCå
++;

338 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

339 
	`OS_TLS_TaskSw
();

342 
	`OSI¡CtxSw
();

343 
	`CPU_INT_EN
();

344 
	}
}

362 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


363 
	$OSSa„tyCrôiˇlSèπ
 ()

365 
OSSa„tyCrôiˇlSèπFœg
 = 
DEF_TRUE
;

366 
	}
}

387 
	$OSSched
 ()

389 
	`CPU_SR_ALLOC
();

393 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

397 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

401 
	`CPU_INT_DIS
();

402 
OSPrioHighRdy
 = 
	`OS_PrioGëHighe°
();

403 
OSTCBHighRdyPå
 = 
OSRdyLi°
[
OSPrioHighRdy
].
HódPå
;

404 i‡(
OSTCBHighRdyPå
 =
OSTCBCurPå
) {

405 
	`CPU_INT_EN
();

409 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

410 
OSTCBHighRdyPå
->
CtxSwCå
++;

412 
OSTaskCtxSwCå
++;

414 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

415 
	`OS_TLS_TaskSw
();

418 
	`OS_TASK_SW
();

419 
	`CPU_INT_EN
();

420 
	}
}

444 
	$OSSchedLock
 (
OS_ERR
 *
p_îr
)

446 
	`CPU_SR_ALLOC
();

450 #ifde‡
OS_SAFETY_CRITICAL


451 i‡(
p_îr
 =(
OS_ERR
 *)0) {

452 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

457 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

458 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

459 *
p_îr
 = 
OS_ERR_SCHED_LOCK_ISR
;

464 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

465 *
p_îr
 = 
OS_ERR_OS_NOT_RUNNING
;

469 i‡(
OSSchedLockNe°ögCå
 >(
OS_NESTING_CTR
)250u) {

470 *
p_îr
 = 
OS_ERR_LOCK_NESTING_OVF
;

474 
	`CPU_CRITICAL_ENTER
();

475 
OSSchedLockNe°ögCå
++;

476 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

477 
	`OS_SchedLockTimeMósSèπ
();

479 
	`CPU_CRITICAL_EXIT
();

480 *
p_îr
 = 
OS_ERR_NONE
;

481 
	}
}

505 
	$OSSchedU∆ock
 (
OS_ERR
 *
p_îr
)

507 
	`CPU_SR_ALLOC
();

511 #ifde‡
OS_SAFETY_CRITICAL


512 i‡(
p_îr
 =(
OS_ERR
 *)0) {

513 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

518 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

519 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

520 *
p_îr
 = 
OS_ERR_SCHED_UNLOCK_ISR
;

525 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

526 *
p_îr
 = 
OS_ERR_OS_NOT_RUNNING
;

530 i‡(
OSSchedLockNe°ögCå
 =(
OS_NESTING_CTR
)0) {

531 *
p_îr
 = 
OS_ERR_SCHED_NOT_LOCKED
;

535 
	`CPU_CRITICAL_ENTER
();

536 
OSSchedLockNe°ögCå
--;

537 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

538 
	`CPU_CRITICAL_EXIT
();

539 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

543 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

544 
	`OS_SchedLockTimeMósSt›
();

547 
	`CPU_CRITICAL_EXIT
();

548 
	`OSSched
();

549 *
p_îr
 = 
OS_ERR_NONE
;

550 
	}
}

571 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

572 
	$OSSchedRoundRoböCfg
 (
CPU_BOOLEAN
 
í
,

573 
OS_TICK
 
dÊt_time_qu™è
,

574 
OS_ERR
 *
p_îr
)

576 
	`CPU_SR_ALLOC
();

580 #ifde‡
OS_SAFETY_CRITICAL


581 i‡(
p_îr
 =(
OS_ERR
 *)0) {

582 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

587 
	`CPU_CRITICAL_ENTER
();

588 i‡(
í
 !
DEF_ENABLED
) {

589 
OSSchedRoundRoböEn
 = 
DEF_DISABLED
;

591 
OSSchedRoundRoböEn
 = 
DEF_ENABLED
;

594 i‡(
dÊt_time_qu™è
 > (
OS_TICK
)0) {

595 
OSSchedRoundRoböDÊtTimeQu™è
 = 
dÊt_time_qu™è
;

597 
OSSchedRoundRoböDÊtTimeQu™è
 = (
OS_TICK
)(
OSCfg_TickR©e_Hz
 / (
OS_RATE_HZ
)10);

599 
	`CPU_CRITICAL_EXIT
();

600 *
p_îr
 = 
OS_ERR_NONE
;

601 
	}
}

625 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

626 
	$OSSchedRoundRoböYõld
 (
OS_ERR
 *
p_îr
)

628 
OS_RDY_LIST
 *
p_rdy_li°
;

629 
OS_TCB
 *
p_tcb
;

630 
	`CPU_SR_ALLOC
();

634 #ifde‡
OS_SAFETY_CRITICAL


635 i‡(
p_îr
 =(
OS_ERR
 *)0) {

636 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

641 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

642 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

643 *
p_îr
 = 
OS_ERR_YIELD_ISR
;

648 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

649 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

653 i‡(
OSSchedRoundRoböEn
 !
DEF_TRUE
) {

654 *
p_îr
 = 
OS_ERR_ROUND_ROBIN_DISABLED
;

658 
	`CPU_CRITICAL_ENTER
();

659 
p_rdy_li°
 = &
OSRdyLi°
[
OSPrioCur
];

660 i‡(
p_rdy_li°
->
NbrE¡rõs
 < (
OS_OBJ_QTY
)2) {

661 
	`CPU_CRITICAL_EXIT
();

662 *
p_îr
 = 
OS_ERR_ROUND_ROBIN_1
;

666 
	`OS_RdyLi°MoveHódToTaû
(
p_rdy_li°
);

667 
p_tcb
 = 
p_rdy_li°
->
HódPå
;

668 i‡(
p_tcb
->
TimeQu™è
 =(
OS_TICK
)0) {

669 
p_tcb
->
TimeQu™èCå
 = 
OSSchedRoundRoböDÊtTimeQu™è
;

671 
p_tcb
->
TimeQu™èCå
 =Ö_tcb->
TimeQu™è
;

674 
	`CPU_CRITICAL_EXIT
();

676 
	`OSSched
();

677 *
p_îr
 = 
OS_ERR_NONE
;

678 
	}
}

706 
	$OSSèπ
 (
OS_ERR
 *
p_îr
)

708 #ifde‡
OS_SAFETY_CRITICAL


709 i‡(
p_îr
 =(
OS_ERR
 *)0) {

710 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

715 i‡(
OSRu¬ög
 =
OS_STATE_OS_STOPPED
) {

716 
OSPrioHighRdy
 = 
	`OS_PrioGëHighe°
();

717 
OSPrioCur
 = 
OSPrioHighRdy
;

718 
OSTCBHighRdyPå
 = 
OSRdyLi°
[
OSPrioHighRdy
].
HódPå
;

719 
OSTCBCurPå
 = 
OSTCBHighRdyPå
;

720 
OSRu¬ög
 = 
OS_STATE_OS_RUNNING
;

721 
	`OSSèπHighRdy
();

722 *
p_îr
 = 
OS_ERR_FATAL_RETURN
;

724 *
p_îr
 = 
OS_ERR_OS_RUNNING
;

726 
	}
}

745 
CPU_INT16U
 
	$OSVîsi⁄
 (
OS_ERR
 *
p_îr
)

747 #ifde‡
OS_SAFETY_CRITICAL


748 i‡(
p_îr
 =(
OS_ERR
 *)0) {

749 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

750  ((
CPU_INT16U
)0u);

754 *
p_îr
 = 
OS_ERR_NONE
;

755  (
OS_VERSION
);

756 
	}
}

781 
	$OS_IdÀTask
 (*
p_¨g
)

783 
	`CPU_SR_ALLOC
();

785 
p_¨g
 =Ö_arg;

787 
DEF_ON
) {

788 
	`CPU_CRITICAL_ENTER
();

789 
OSIdÀTaskCå
++;

790 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

791 
OSSètTaskCå
++;

793 
	`CPU_CRITICAL_EXIT
();

795 
	`OSIdÀTaskHook
();

797 
	}
}

814 
	$OS_IdÀTaskInô
 (
OS_ERR
 *
p_îr
)

816 #ifde‡
OS_SAFETY_CRITICAL


817 i‡(
p_îr
 =(
OS_ERR
 *)0) {

818 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

823 
OSIdÀTaskCå
 = (
OS_IDLE_CTR
)0;

825 
	`OSTaskCª©e
((
OS_TCB
 *)&
OSIdÀTaskTCB
,

826 (
CPU_CHAR
 *)((*)"uC/OS-III Idle Task"),

827 (
OS_TASK_PTR
)
OS_IdÀTask
,

829 (
OS_PRIO
 )(
OS_CFG_PRIO_MAX
 - 1u),

830 (
CPU_STK
 *)
OSCfg_IdÀTaskStkBa£På
,

831 (
CPU_STK_SIZE
)
OSCfg_IdÀTaskStkLimô
,

832 (
CPU_STK_SIZE
)
OSCfg_IdÀTaskStkSize
,

833 (
OS_MSG_QTY
 )0u,

834 (
OS_TICK
 )0u,

836 (
OS_OPT
 )(
OS_OPT_TASK_STK_CHK
 | 
OS_OPT_TASK_STK_CLR
 | 
OS_OPT_TASK_NO_TLS
),

837 (
OS_ERR
 *)
p_îr
);

838 
	}
}

871 
	$OS_Píd
 (
OS_PEND_DATA
 *
p_≥nd_d©a
,

872 
OS_PEND_OBJ
 *
p_obj
,

873 
OS_STATE
 
≥ndög_⁄
,

874 
OS_TICK
 
timeout
)

876 
OS_PEND_LIST
 *
p_≥nd_li°
;

880 
OSTCBCurPå
->
PídOn
 = 
≥ndög_⁄
;

881 
OSTCBCurPå
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

883 
	`OS_TaskBlock
(
OSTCBCurPå
,

884 
timeout
);

886 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

887 
p_≥nd_li°
 = &
p_obj
->
PídLi°
;

888 
p_≥nd_d©a
->
PídObjPå
 = 
p_obj
;

889 
	`OS_PídD©aInô
((
OS_TCB
 *)
OSTCBCurPå
,

890 (
OS_PEND_DATA
 *)
p_≥nd_d©a
,

891 (
OS_OBJ_QTY
 )1);

892 
	`OS_PídLi°In£πPrio
(
p_≥nd_li°
,

893 
p_≥nd_d©a
);

895 
OSTCBCurPå
->
PídD©aTblE¡rõs
 = (
OS_OBJ_QTY
 )0;

896 
OSTCBCurPå
->
PídD©aTblPå
 = (
OS_PEND_DATA
 *)0;

898 #i‡
OS_CFG_DBG_EN
 > 0u

899 
	`OS_PídDbgNameAdd
(
p_obj
,

900 
OSTCBCurPå
);

902 
	}
}

925 
	$OS_PídAb‹t
 (
OS_PEND_OBJ
 *
p_obj
,

926 
OS_TCB
 *
p_tcb
,

927 
CPU_TS
 
ts
)

929 
p_tcb
->
TaskSèã
) {

930 
OS_TASK_STATE_RDY
:

931 
OS_TASK_STATE_DLY
:

932 
OS_TASK_STATE_SUSPENDED
:

933 
OS_TASK_STATE_DLY_SUSPENDED
:

936 
OS_TASK_STATE_PEND
:

937 
OS_TASK_STATE_PEND_TIMEOUT
:

938 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

939 
	`OS_PídAb‹t1
(
p_obj
,

940 
p_tcb
,

941 
ts
);

943 #i‡(
OS_MSG_EN
 > 0u)

944 
p_tcb
->
MsgPå
 = (*)0;

945 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

947 
p_tcb
->
TS
 = 
ts
;

948 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

949 
	`OS_PídLi°Remove
(
p_tcb
);

951 
	`OS_TaskRdy
(
p_tcb
);

952 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

953 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_ABORT
;

954 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

957 
OS_TASK_STATE_PEND_SUSPENDED
:

958 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

959 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

960 
	`OS_PídAb‹t1
(
p_obj
,

961 
p_tcb
,

962 
ts
);

964 #i‡(
OS_MSG_EN
 > 0u)

965 
p_tcb
->
MsgPå
 = (*)0;

966 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

968 
p_tcb
->
TS
 = 
ts
;

969 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

970 
	`OS_PídLi°Remove
(
p_tcb
);

972 
	`OS_TickLi°Remove
(
p_tcb
);

973 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

974 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_ABORT
;

975 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

981 
	}
}

1031 
	$OS_PídAb‹t1
 (
OS_PEND_OBJ
 *
p_obj
,

1032 
OS_TCB
 *
p_tcb
,

1033 
CPU_TS
 
ts
)

1035 
OS_OBJ_QTY
 
n_≥nd_li°
;

1036 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1040 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

1041 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

1043 
n_≥nd_li°
 > (
OS_OBJ_QTY
)0) {

1044 i‡(
p_obj
 =
p_≥nd_d©a
->
PídObjPå
) {

1045 
p_≥nd_d©a
->
RdyObjPå
 = 
p_obj
;

1046 
p_≥nd_d©a
->
RdyTS
 = 
ts
;

1049 
p_≥nd_d©a
++;

1050 
n_≥nd_li°
--;

1052 
	}
}

1096 
	$OS_PídD©aInô
 (
OS_TCB
 *
p_tcb
,

1097 
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

1098 
OS_OBJ_QTY
 
tbl_size
)

1100 
OS_OBJ_QTY
 
i
;

1104 
p_tcb
->
PídD©aTblE¡rõs
 = 
tbl_size
;

1105 
p_tcb
->
PídD©aTblPå
 = 
p_≥nd_d©a_tbl
;

1107 
i
 = 0u; i < 
tbl_size
; i++) {

1108 
p_≥nd_d©a_tbl
->
NextPå
 = (
OS_PEND_DATA
 *)0;

1109 
p_≥nd_d©a_tbl
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1110 
p_≥nd_d©a_tbl
->
RdyObjPå
 = (
OS_PEND_OBJ
 *)0;

1111 
p_≥nd_d©a_tbl
->
RdyMsgPå
 = (*)0;

1112 
p_≥nd_d©a_tbl
->
RdyMsgSize
 = (
OS_MSG_SIZE
 )0;

1113 
p_≥nd_d©a_tbl
->
RdyTS
 = (
CPU_TS
 )0;

1114 
p_≥nd_d©a_tbl
->
TCBPå
 = 
p_tcb
;

1115 
p_≥nd_d©a_tbl
++;

1117 
	}
}

1138 #i‡
OS_CFG_DBG_EN
 > 0u

1139 
	$OS_PídDbgNameAdd
 (
OS_PEND_OBJ
 *
p_obj
,

1140 
OS_TCB
 *
p_tcb
)

1142 
OS_PEND_LIST
 *
p_≥nd_li°
;

1143 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1144 
OS_TCB
 *
p_tcb1
;

1147 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

1148 
p_tcb
->
DbgNamePå
 = 
p_obj
->
NamePå
;

1149 
p_≥nd_li°
 = &
p_obj
->
PídLi°
;

1150 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

1151 
p_tcb1
 = 
p_≥nd_d©a
->
TCBPå
;

1152 
p_obj
->
DbgNamePå
 = 
p_tcb1
->
NamePå
;

1154 
p_tcb
->
PídOn
) {

1155 
OS_TASK_PEND_ON_TASK_Q
:

1156 
p_tcb
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)"Task Q");

1159 
OS_TASK_PEND_ON_TASK_SEM
:

1160 
p_tcb
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)"Task Sem");

1164 
p_tcb
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

1168 
	}
}

1172 
	$OS_PídDbgNameRemove
 (
OS_PEND_OBJ
 *
p_obj
,

1173 
OS_TCB
 *
p_tcb
)

1175 
OS_PEND_LIST
 *
p_≥nd_li°
;

1176 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1177 
OS_TCB
 *
p_tcb1
;

1180 
p_tcb
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

1181 
p_≥nd_li°
 = &
p_obj
->
PídLi°
;

1182 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

1183 i‡(
p_≥nd_d©a
 !(
OS_PEND_DATA
 *)0) {

1184 
p_tcb1
 = 
p_≥nd_d©a
->
TCBPå
;

1185 
p_obj
->
DbgNamePå
 = 
p_tcb1
->
NamePå
;

1187 
p_obj
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

1189 
	}
}

1274 
	$OS_PídLi°Ch™gePrio
 (
OS_TCB
 *
p_tcb
,

1275 
OS_PRIO
 
¥io_√w
)

1277 
OS_OBJ_QTY
 
n_≥nd_li°
;

1278 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1279 
OS_PEND_LIST
 *
p_≥nd_li°
;

1280 
OS_PEND_OBJ
 *
p_obj
;

1283 
p_tcb
->
Prio
 = 
¥io_√w
;

1284 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

1285 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

1287 
n_≥nd_li°
 > 0u) {

1288 
p_obj
 = 
p_≥nd_d©a
->
PídObjPå
;

1289 
p_≥nd_li°
 = &
p_obj
->
PídLi°
;

1290 i‡(
p_≥nd_li°
->
NbrE¡rõs
 > 1u) {

1291 
	`OS_PídLi°Remove1
(
p_≥nd_li°
,

1292 
p_≥nd_d©a
);

1293 
	`OS_PídLi°In£πPrio
(
p_≥nd_li°
,

1294 
p_≥nd_d©a
);

1296 
p_≥nd_d©a
++;

1297 
n_≥nd_li°
--;

1299 
	}
}

1317 
	$OS_PídLi°Inô
 (
OS_PEND_LIST
 *
p_≥nd_li°
)

1319 
p_≥nd_li°
->
HódPå
 = (
OS_PEND_DATA
 *)0;

1320 
p_≥nd_li°
->
TaûPå
 = (
OS_PEND_DATA
 *)0;

1321 
p_≥nd_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
 )0;

1322 
	}
}

1371 
	$OS_PídLi°In£πHód
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

1372 
OS_PEND_DATA
 *
p_≥nd_d©a
)

1374 
OS_PEND_DATA
 *
p_≥nd_d©a_√xt
;

1378 
p_≥nd_li°
->
NbrE¡rõs
++;

1379 
p_≥nd_d©a
->
NextPå
 = 
p_≥nd_li°
->
HódPå
;

1380 
p_≥nd_d©a
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1381 
p_≥nd_d©a_√xt
 = 
p_≥nd_li°
->
HódPå
;

1382 i‡(
p_≥nd_d©a_√xt
 !(
OS_PEND_DATA
 *)0) {

1383 
p_≥nd_d©a_√xt
->
PªvPå
 = 
p_≥nd_d©a
;

1385 
p_≥nd_li°
->
HódPå
 = 
p_≥nd_d©a
;

1386 i‡(
p_≥nd_li°
->
NbrE¡rõs
 == 1u) {

1387 
p_≥nd_li°
->
TaûPå
 = 
p_≥nd_d©a
;

1389 
	}
}

1459 
	$OS_PídLi°In£πPrio
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

1460 
OS_PEND_DATA
 *
p_≥nd_d©a
)

1462 
OS_PRIO
 
¥io
;

1463 
OS_TCB
 *
p_tcb
;

1464 
OS_TCB
 *
p_tcb_√xt
;

1465 
OS_PEND_DATA
 *
p_≥nd_d©a_¥ev
;

1466 
OS_PEND_DATA
 *
p_≥nd_d©a_√xt
;

1470 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

1471 
¥io
 = 
p_tcb
->
Prio
;

1472 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

1473 
p_≥nd_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)1;

1474 
p_≥nd_d©a
->
NextPå
 = (
OS_PEND_DATA
 *)0;

1475 
p_≥nd_d©a
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1476 
p_≥nd_li°
->
HódPå
 = 
p_≥nd_d©a
;

1477 
p_≥nd_li°
->
TaûPå
 = 
p_≥nd_d©a
;

1479 
p_≥nd_li°
->
NbrE¡rõs
++;

1480 
p_≥nd_d©a_√xt
 = 
p_≥nd_li°
->
HódPå
;

1481 
p_≥nd_d©a_√xt
 !(
OS_PEND_DATA
 *)0) {

1482 
p_tcb_√xt
 = 
p_≥nd_d©a_√xt
->
TCBPå
;

1483 i‡(
¥io
 < 
p_tcb_√xt
->
Prio
) {

1486 
p_≥nd_d©a_√xt
 =Ö_≥nd_d©a_√xt->
NextPå
;

1489 i‡(
p_≥nd_d©a_√xt
 =(
OS_PEND_DATA
 *)0) {

1490 
p_≥nd_d©a
->
NextPå
 = (
OS_PEND_DATA
 *)0;

1491 
p_≥nd_d©a_¥ev
 = 
p_≥nd_li°
->
TaûPå
;

1492 
p_≥nd_d©a
->
PªvPå
 = 
p_≥nd_d©a_¥ev
;

1493 
p_≥nd_d©a_¥ev
->
NextPå
 = 
p_≥nd_d©a
;

1494 
p_≥nd_li°
->
TaûPå
 = 
p_≥nd_d©a
;

1496 i‡(
p_≥nd_d©a_√xt
->
PªvPå
 =(
OS_PEND_DATA
 *)0) {

1497 
p_≥nd_d©a_√xt
->
PªvPå
 = 
p_≥nd_d©a
;

1498 
p_≥nd_d©a
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1499 
p_≥nd_d©a
->
NextPå
 = 
p_≥nd_d©a_√xt
;

1500 
p_≥nd_li°
->
HódPå
 = 
p_≥nd_d©a
;

1502 
p_≥nd_d©a_¥ev
 = 
p_≥nd_d©a_√xt
->
PªvPå
;

1503 
p_≥nd_d©a
->
PªvPå
 = 
p_≥nd_d©a_¥ev
;

1504 
p_≥nd_d©a
->
NextPå
 = 
p_≥nd_d©a_√xt
;

1505 
p_≥nd_d©a_¥ev
->
NextPå
 = 
p_≥nd_d©a
;

1506 
p_≥nd_d©a_√xt
->
PªvPå
 = 
p_≥nd_d©a
;

1510 
	}
}

1562 
	$OS_PídLi°Remove
 (
OS_TCB
 *
p_tcb
)

1564 
OS_OBJ_QTY
 
n_≥nd_li°
;

1565 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1566 
OS_PEND_LIST
 *
p_≥nd_li°
;

1567 
OS_PEND_OBJ
 *
p_obj
;

1571 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

1572 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

1574 
n_≥nd_li°
 > (
OS_OBJ_QTY
)0) {

1575 
p_obj
 = 
p_≥nd_d©a
->
PídObjPå
;

1576 
p_≥nd_li°
 = &
p_obj
->
PídLi°
;

1577 
	`OS_PídLi°Remove1
(
p_≥nd_li°
,

1578 
p_≥nd_d©a
);

1579 
p_≥nd_d©a
++;

1580 
n_≥nd_li°
--;

1582 
p_tcb
->
PídD©aTblE¡rõs
 = (
OS_OBJ_QTY
 )0;

1583 
p_tcb
->
PídD©aTblPå
 = (
OS_PEND_DATA
 *)0;

1584 
	}
}

1637 
	$OS_PídLi°Remove1
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

1638 
OS_PEND_DATA
 *
p_≥nd_d©a
)

1640 
OS_PEND_DATA
 *
p_¥ev
;

1641 
OS_PEND_DATA
 *
p_√xt
;

1645 i‡(
p_≥nd_li°
->
NbrE¡rõs
 == 1u) {

1646 
p_≥nd_li°
->
HódPå
 = (
OS_PEND_DATA
 *)0;

1647 
p_≥nd_li°
->
TaûPå
 = (
OS_PEND_DATA
 *)0;

1649 } i‡(
p_≥nd_d©a
->
PªvPå
 =(
OS_PEND_DATA
 *)0) {

1650 
p_√xt
 = 
p_≥nd_d©a
->
NextPå
;

1651 
p_√xt
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1652 
p_≥nd_li°
->
HódPå
 = 
p_√xt
;

1654 } i‡(
p_≥nd_d©a
->
NextPå
 =(
OS_PEND_DATA
 *)0) {

1655 
p_¥ev
 = 
p_≥nd_d©a
->
PªvPå
;

1656 
p_¥ev
->
NextPå
 = (
OS_PEND_DATA
 *)0;

1657 
p_≥nd_li°
->
TaûPå
 = 
p_¥ev
;

1660 
p_¥ev
 = 
p_≥nd_d©a
->
PªvPå
;

1661 
p_√xt
 = 
p_≥nd_d©a
->
NextPå
;

1662 
p_¥ev
->
NextPå
 = 
p_√xt
;

1663 
p_√xt
->
PªvPå
 = 
p_¥ev
;

1665 
p_≥nd_li°
->
NbrE¡rõs
--;

1666 
p_≥nd_d©a
->
NextPå
 = (
OS_PEND_DATA
 *)0;

1667 
p_≥nd_d©a
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1668 
	}
}

1691 
	$OS_PídObjDñ
 (
OS_PEND_OBJ
 *
p_obj
,

1692 
OS_TCB
 *
p_tcb
,

1693 
CPU_TS
 
ts
)

1695 
p_tcb
->
TaskSèã
) {

1696 
OS_TASK_STATE_RDY
:

1697 
OS_TASK_STATE_DLY
:

1698 
OS_TASK_STATE_SUSPENDED
:

1699 
OS_TASK_STATE_DLY_SUSPENDED
:

1702 
OS_TASK_STATE_PEND
:

1703 
OS_TASK_STATE_PEND_TIMEOUT
:

1704 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

1705 
	`OS_PídObjDñ1
(
p_obj
,

1706 
p_tcb
,

1707 
ts
);

1709 #i‡(
OS_MSG_EN
 > 0u)

1710 
p_tcb
->
MsgPå
 = (*)0;

1711 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

1713 
p_tcb
->
TS
 = 
ts
;

1714 
	`OS_PídLi°Remove
(
p_tcb
);

1715 
	`OS_TaskRdy
(
p_tcb
);

1716 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

1717 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_DEL
;

1718 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

1721 
OS_TASK_STATE_PEND_SUSPENDED
:

1722 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

1723 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

1724 
	`OS_PídObjDñ1
(
p_obj
,

1725 
p_tcb
,

1726 
ts
);

1728 #i‡(
OS_MSG_EN
 > 0u)

1729 
p_tcb
->
MsgPå
 = (*)0;

1730 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

1732 
p_tcb
->
TS
 = 
ts
;

1733 
	`OS_TickLi°Remove
(
p_tcb
);

1734 
	`OS_PídLi°Remove
(
p_tcb
);

1735 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

1736 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_DEL
;

1737 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

1743 
	}
}

1793 
	$OS_PídObjDñ1
 (
OS_PEND_OBJ
 *
p_obj
,

1794 
OS_TCB
 *
p_tcb
,

1795 
CPU_TS
 
ts
)

1797 
OS_OBJ_QTY
 
n_≥nd_li°
;

1798 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1802 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

1803 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

1805 
n_≥nd_li°
 > (
OS_OBJ_QTY
)0) {

1806 i‡(
p_obj
 =
p_≥nd_d©a
->
PídObjPå
) {

1807 
p_≥nd_d©a
->
RdyObjPå
 = 
p_obj
;

1808 
p_≥nd_d©a
->
RdyTS
 = 
ts
;

1811 
p_≥nd_d©a
++;

1812 
n_≥nd_li°
--;

1814 
	}
}

1842 
	$OS_Po°
 (
OS_PEND_OBJ
 *
p_obj
,

1843 
OS_TCB
 *
p_tcb
,

1844 *
p_void
,

1845 
OS_MSG_SIZE
 
msg_size
,

1846 
CPU_TS
 
ts
)

1848 
p_tcb
->
TaskSèã
) {

1849 
OS_TASK_STATE_RDY
:

1850 
OS_TASK_STATE_DLY
:

1851 
OS_TASK_STATE_SUSPENDED
:

1852 
OS_TASK_STATE_DLY_SUSPENDED
:

1855 
OS_TASK_STATE_PEND
:

1856 
OS_TASK_STATE_PEND_TIMEOUT
:

1857 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

1858 
	`OS_Po°1
(
p_obj
,

1859 
p_tcb
,

1860 
p_void
,

1861 
msg_size
,

1862 
ts
);

1864 #i‡(
OS_MSG_EN
 > 0u)

1865 
p_tcb
->
MsgPå
 = 
p_void
;

1866 
p_tcb
->
MsgSize
 = 
msg_size
;

1868 
p_tcb
->
TS
 = 
ts
;

1870 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

1871 
	`OS_PídLi°Remove
(
p_tcb
);

1872 #i‡
OS_CFG_DBG_EN
 > 0u

1873 
	`OS_PídDbgNameRemove
(
p_obj
,

1874 
p_tcb
);

1877 
	`OS_TaskRdy
(
p_tcb
);

1878 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

1879 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

1880 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

1883 
OS_TASK_STATE_PEND_SUSPENDED
:

1884 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

1885 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

1886 
	`OS_Po°1
(
p_obj
,

1887 
p_tcb
,

1888 
p_void
,

1889 
msg_size
,

1890 
ts
);

1892 #i‡(
OS_MSG_EN
 > 0u)

1893 
p_tcb
->
MsgPå
 = 
p_void
;

1894 
p_tcb
->
MsgSize
 = 
msg_size
;

1896 
p_tcb
->
TS
 = 
ts
;

1898 
	`OS_TickLi°Remove
(
p_tcb
);

1899 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

1900 
	`OS_PídLi°Remove
(
p_tcb
);

1901 #i‡
OS_CFG_DBG_EN
 > 0u

1902 
	`OS_PídDbgNameRemove
(
p_obj
,

1903 
p_tcb
);

1906 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

1907 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

1908 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

1914 
	}
}

1968 
	$OS_Po°1
 (
OS_PEND_OBJ
 *
p_obj
,

1969 
OS_TCB
 *
p_tcb
,

1970 *
p_void
,

1971 
OS_MSG_SIZE
 
msg_size
,

1972 
CPU_TS
 
ts
)

1974 
OS_OBJ_QTY
 
n_≥nd_li°
;

1975 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1979 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

1980 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

1982 
n_≥nd_li°
 > (
OS_OBJ_QTY
)0) {

1983 i‡(
p_obj
 =
p_≥nd_d©a
->
PídObjPå
) {

1984 
p_≥nd_d©a
->
RdyObjPå
 = 
p_obj
;

1985 
p_≥nd_d©a
->
RdyMsgPå
 = 
p_void
;

1986 
p_≥nd_d©a
->
RdyMsgSize
 = 
msg_size
;

1987 
p_≥nd_d©a
->
RdyTS
 = 
ts
;

1990 
p_≥nd_d©a
++;

1991 
n_≥nd_li°
--;

1993 
	}
}

2038 
	$OS_RdyLi°Inô
 ()

2040 
OS_PRIO
 
i
;

2041 
OS_RDY_LIST
 *
p_rdy_li°
;

2045 
i
 = 0u; i < 
OS_CFG_PRIO_MAX
; i++) {

2046 
p_rdy_li°
 = &
OSRdyLi°
[
i
];

2047 
p_rdy_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)0;

2048 
p_rdy_li°
->
HódPå
 = (
OS_TCB
 *)0;

2049 
p_rdy_li°
->
TaûPå
 = (
OS_TCB
 *)0;

2051 
	}
}

2072 
	$OS_RdyLi°In£π
 (
OS_TCB
 *
p_tcb
)

2074 
	`OS_PrioIn£π
(
p_tcb
->
Prio
);

2075 i‡(
p_tcb
->
Prio
 =
OSPrioCur
) {

2076 
	`OS_RdyLi°In£πTaû
(
p_tcb
);

2078 
	`OS_RdyLi°In£πHód
(
p_tcb
);

2080 
	}
}

2139 
	$OS_RdyLi°In£πHód
 (
OS_TCB
 *
p_tcb
)

2141 
OS_RDY_LIST
 *
p_rdy_li°
;

2142 
OS_TCB
 *
p_tcb2
;

2146 
p_rdy_li°
 = &
OSRdyLi°
[
p_tcb
->
Prio
];

2147 i‡(
p_rdy_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

2148 
p_rdy_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)1;

2149 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

2150 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

2151 
p_rdy_li°
->
HódPå
 = 
p_tcb
;

2152 
p_rdy_li°
->
TaûPå
 = 
p_tcb
;

2154 
p_rdy_li°
->
NbrE¡rõs
++;

2155 
p_tcb
->
NextPå
 = 
p_rdy_li°
->
HódPå
;

2156 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

2157 
p_tcb2
 = 
p_rdy_li°
->
HódPå
;

2158 
p_tcb2
->
PªvPå
 = 
p_tcb
;

2159 
p_rdy_li°
->
HódPå
 = 
p_tcb
;

2161 
	}
}

2220 
	$OS_RdyLi°In£πTaû
 (
OS_TCB
 *
p_tcb
)

2222 
OS_RDY_LIST
 *
p_rdy_li°
;

2223 
OS_TCB
 *
p_tcb2
;

2227 
p_rdy_li°
 = &
OSRdyLi°
[
p_tcb
->
Prio
];

2228 i‡(
p_rdy_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

2229 
p_rdy_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)1;

2230 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

2231 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

2232 
p_rdy_li°
->
HódPå
 = 
p_tcb
;

2233 
p_rdy_li°
->
TaûPå
 = 
p_tcb
;

2235 
p_rdy_li°
->
NbrE¡rõs
++;

2236 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

2237 
p_tcb2
 = 
p_rdy_li°
->
TaûPå
;

2238 
p_tcb
->
PªvPå
 = 
p_tcb2
;

2239 
p_tcb2
->
NextPå
 = 
p_tcb
;

2240 
p_rdy_li°
->
TaûPå
 = 
p_tcb
;

2242 
	}
}

2297 
	$OS_RdyLi°MoveHódToTaû
 (
OS_RDY_LIST
 *
p_rdy_li°
)

2299 
OS_TCB
 *
p_tcb1
;

2300 
OS_TCB
 *
p_tcb2
;

2301 
OS_TCB
 *
p_tcb3
;

2305 
p_rdy_li°
->
NbrE¡rõs
) {

2311 
p_tcb1
 = 
p_rdy_li°
->
HódPå
;

2312 
p_tcb2
 = 
p_rdy_li°
->
TaûPå
;

2313 
p_tcb1
->
PªvPå
 = 
p_tcb2
;

2314 
p_tcb1
->
NextPå
 = (
OS_TCB
 *)0;

2315 
p_tcb2
->
PªvPå
 = (
OS_TCB
 *)0;

2316 
p_tcb2
->
NextPå
 = 
p_tcb1
;

2317 
p_rdy_li°
->
HódPå
 = 
p_tcb2
;

2318 
p_rdy_li°
->
TaûPå
 = 
p_tcb1
;

2322 
p_tcb1
 = 
p_rdy_li°
->
HódPå
;

2323 
p_tcb2
 = 
p_rdy_li°
->
TaûPå
;

2324 
p_tcb3
 = 
p_tcb1
->
NextPå
;

2325 
p_tcb3
->
PªvPå
 = (
OS_TCB
 *)0;

2326 
p_tcb1
->
NextPå
 = (
OS_TCB
 *)0;

2327 
p_tcb1
->
PªvPå
 = 
p_tcb2
;

2328 
p_tcb2
->
NextPå
 = 
p_tcb1
;

2329 
p_rdy_li°
->
HódPå
 = 
p_tcb3
;

2330 
p_rdy_li°
->
TaûPå
 = 
p_tcb1
;

2333 
	}
}

2384 
	$OS_RdyLi°Remove
 (
OS_TCB
 *
p_tcb
)

2386 
OS_RDY_LIST
 *
p_rdy_li°
;

2387 
OS_TCB
 *
p_tcb1
;

2388 
OS_TCB
 *
p_tcb2
;

2392 
p_rdy_li°
 = &
OSRdyLi°
[
p_tcb
->
Prio
];

2393 
p_tcb1
 = 
p_tcb
->
PªvPå
;

2394 
p_tcb2
 = 
p_tcb
->
NextPå
;

2395 i‡(
p_tcb1
 =(
OS_TCB
 *)0) {

2396 i‡(
p_tcb2
 =(
OS_TCB
 *)0) {

2397 
p_rdy_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)0;

2398 
p_rdy_li°
->
HódPå
 = (
OS_TCB
 *)0;

2399 
p_rdy_li°
->
TaûPå
 = (
OS_TCB
 *)0;

2400 
	`OS_PrioRemove
(
p_tcb
->
Prio
);

2402 
p_rdy_li°
->
NbrE¡rõs
--;

2403 
p_tcb2
->
PªvPå
 = (
OS_TCB
 *)0;

2404 
p_rdy_li°
->
HódPå
 = 
p_tcb2
;

2407 
p_rdy_li°
->
NbrE¡rõs
--;

2408 
p_tcb1
->
NextPå
 = 
p_tcb2
;

2409 i‡(
p_tcb2
 =(
OS_TCB
 *)0) {

2410 
p_rdy_li°
->
TaûPå
 = 
p_tcb1
;

2412 
p_tcb2
->
PªvPå
 = 
p_tcb1
;

2415 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

2416 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

2417 
	}
}

2435 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

2436 
	$OS_Sched0
 ()

2438 
	`CPU_SR_ALLOC
();

2442 
	`CPU_INT_DIS
();

2443 
OSPrioHighRdy
 = (
OS_PRIO
)0;

2444 
OSTCBHighRdyPå
 = &
OSI¡QTaskTCB
;

2445 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

2446 
OSTCBHighRdyPå
->
CtxSwCå
++;

2448 
OSTaskCtxSwCå
++;

2449 
	`OS_TASK_SW
();

2450 
	`CPU_INT_EN
();

2451 
	}
}

2476 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

2477 
	$OS_SchedLockTimeMósSèπ
 ()

2479 i‡(
OSSchedLockNe°ögCå
 == 1u) {

2480 
OSSchedLockTimeBegö
 = 
	`CPU_TS_TmrRd
();

2482 
	}
}

2487 
	$OS_SchedLockTimeMósSt›
 ()

2489 
CPU_TS_TMR
 
dñè
;

2492 i‡(
OSSchedLockNe°ögCå
 =(
OS_NESTING_CTR
)0) {

2493 
dñè
 = 
	`CPU_TS_TmrRd
()

2494 - 
OSSchedLockTimeBegö
;

2495 i‡(
OSSchedLockTimeMax
 < 
dñè
) {

2496 
OSSchedLockTimeMax
 = 
dñè
;

2498 i‡(
OSSchedLockTimeMaxCur
 < 
dñè
) {

2499 
OSSchedLockTimeMaxCur
 = 
dñè
;

2502 
	}
}

2522 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

2523 
	$OS_SchedRoundRobö
 (
OS_RDY_LIST
 *
p_rdy_li°
)

2525 
OS_TCB
 *
p_tcb
;

2526 
	`CPU_SR_ALLOC
();

2530 i‡(
OSSchedRoundRoböEn
 !
DEF_TRUE
) {

2534 
	`CPU_CRITICAL_ENTER
();

2535 
p_tcb
 = 
p_rdy_li°
->
HódPå
;

2537 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

2538 
	`CPU_CRITICAL_EXIT
();

2542 i‡(
p_tcb
 =&
OSIdÀTaskTCB
) {

2543 
	`CPU_CRITICAL_EXIT
();

2547 i‡(
p_tcb
->
TimeQu™èCå
 > (
OS_TICK
)0) {

2548 
p_tcb
->
TimeQu™èCå
--;

2551 i‡(
p_tcb
->
TimeQu™èCå
 > (
OS_TICK
)0) {

2552 
	`CPU_CRITICAL_EXIT
();

2556 i‡(
p_rdy_li°
->
NbrE¡rõs
 < (
OS_OBJ_QTY
)2) {

2557 
	`CPU_CRITICAL_EXIT
();

2561 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

2562 
	`CPU_CRITICAL_EXIT
();

2566 
	`OS_RdyLi°MoveHódToTaû
(
p_rdy_li°
);

2567 
p_tcb
 = 
p_rdy_li°
->
HódPå
;

2568 i‡(
p_tcb
->
TimeQu™è
 =(
OS_TICK
)0) {

2569 
p_tcb
->
TimeQu™èCå
 = 
OSSchedRoundRoböDÊtTimeQu™è
;

2571 
p_tcb
->
TimeQu™èCå
 =Ö_tcb->
TimeQu™è
;

2573 
	`CPU_CRITICAL_EXIT
();

2574 
	}
}

2596 
	$OS_TaskBlock
 (
OS_TCB
 *
p_tcb
,

2597 
OS_TICK
 
timeout
)

2599 
OS_ERR
 
îr
;

2602 i‡(
timeout
 > (
OS_TICK
)0) {

2603 
	`OS_TickLi°In£π
(
p_tcb
,

2604 
timeout
,

2605 
OS_OPT_TIME_TIMEOUT
,

2606 &
îr
);

2607 i‡(
îr
 =
OS_ERR_NONE
) {

2608 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND_TIMEOUT
;

2610 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND
;

2613 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND
;

2615 
	`OS_RdyLi°Remove
(
p_tcb
);

2616 
	}
}

2634 
	$OS_TaskRdy
 (
OS_TCB
 *
p_tcb
)

2636 
	`OS_TickLi°Remove
(
p_tcb
);

2637 i‡((
p_tcb
->
TaskSèã
 & 
OS_TASK_STATE_BIT_SUSPENDED
Ë=(
OS_STATE
)0) {

2638 
	`OS_RdyLi°In£π
(
p_tcb
);

2640 
	}
}

	@UCOSIII/uCOS-III/Source/os_dbg.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_dbg__c
 = "$Id: $";

40 
CPU_INT16U
 c⁄° 
	gOSDbg_DbgEn
 = 
OS_CFG_DBG_EN
;

42 #i‡
OS_CFG_DBG_EN
 > 0u

50 
CPU_INT08U
 c⁄° 
	gOSDbg_ArgChkEn
 = 
OS_CFG_ARG_CHK_EN
;

51 
CPU_INT08U
 c⁄° 
	gOSDbg_AµHooksEn
 = 
OS_CFG_APP_HOOKS_EN
;

53 
CPU_INT32U
 c⁄° 
	gOSDbg_Endü¬essTe°
 = 0x12345678LU;

55 
CPU_INT08U
 c⁄° 
	gOSDbg_CÆÀdFromISRChkEn
 = 
OS_CFG_CALLED_FROM_ISR_CHK_EN
;

57 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgEn
 = 
OS_CFG_FLAG_EN
;

58 
OS_FLAG_GRP
 c⁄° 
	gOSDbg_FœgGΩ
 = { 0u };

59 #i‡
OS_CFG_FLAG_EN
 > 0u

60 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgDñEn
 = 
OS_CFG_FLAG_DEL_EN
;

61 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgModeCÃEn
 = 
OS_CFG_FLAG_MODE_CLR_EN
;

62 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgPídAb‹tEn
 = 
OS_CFG_FLAG_PEND_ABORT_EN
;

63 
CPU_INT16U
 c⁄° 
	gOSDbg_FœgGΩSize
 = (
OS_FLAG_GRP
);

64 
CPU_INT16U
 c⁄° 
	gOSDbg_FœgWidth
 = (
OS_FLAGS
);

66 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgDñEn
 = 0u;

67 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgModeCÃEn
 = 0u;

68 
CPU_INT08U
 c⁄° 
	gOSDbg_FœgPídAb‹tEn
 = 0u;

69 
CPU_INT16U
 c⁄° 
	gOSDbg_FœgGΩSize
 = 0u;

70 
CPU_INT16U
 c⁄° 
	gOSDbg_FœgWidth
 = 0u;

73 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

74 
CPU_INT16U
 c⁄° 
	gOSDbg_I¡Q
 = (
OS_INT_Q
);

76 
CPU_INT16U
 c⁄° 
	gOSDbg_I¡Q
 = 0u;

79 
CPU_INT08U
 c⁄° 
	gOSDbg_ISRPo°De„ºedEn
 = 
OS_CFG_ISR_POST_DEFERRED_EN
;

81 
OS_MEM
 c⁄° 
	gOSDbg_Mem
 = { 0u };

82 
CPU_INT08U
 c⁄° 
	gOSDbg_MemEn
 = 
OS_CFG_MEM_EN
;

83 #i‡
OS_CFG_MEM_EN
 > 0u

84 
CPU_INT16U
 c⁄° 
	gOSDbg_MemSize
 = (
OS_MEM
);

86 
CPU_INT16U
 c⁄° 
	gOSDbg_MemSize
 = 0u;

90 
CPU_INT08U
 c⁄° 
	gOSDbg_MsgEn
 = 
OS_MSG_EN
;

91 #i‡(
OS_MSG_EN
) > 0u

92 
CPU_INT16U
 c⁄° 
	gOSDbg_MsgSize
 = (
OS_MSG
);

93 
CPU_INT16U
 c⁄° 
	gOSDbg_MsgPoﬁSize
 = (
OS_MSG_POOL
);

94 
CPU_INT16U
 c⁄° 
	gOSDbg_MsgQSize
 = (
OS_MSG_Q
);

96 
CPU_INT16U
 c⁄° 
	gOSDbg_MsgSize
 = 0u;

97 
CPU_INT16U
 c⁄° 
	gOSDbg_MsgPoﬁSize
 = 0u;

98 
CPU_INT16U
 c⁄° 
	gOSDbg_MsgQSize
 = 0u;

102 
OS_MUTEX
 c⁄° 
	gOSDbg_Muãx
 = { 0u };

103 
CPU_INT08U
 c⁄° 
	gOSDbg_MuãxEn
 = 
OS_CFG_MUTEX_EN
;

104 #i‡
OS_CFG_MUTEX_EN
 > 0u

105 
CPU_INT08U
 c⁄° 
	gOSDbg_MuãxDñEn
 = 
OS_CFG_MUTEX_DEL_EN
;

106 
CPU_INT08U
 c⁄° 
	gOSDbg_MuãxPídAb‹tEn
 = 
OS_CFG_MUTEX_PEND_ABORT_EN
;

107 
CPU_INT16U
 c⁄° 
	gOSDbg_MuãxSize
 = (
OS_MUTEX
);

109 
CPU_INT08U
 c⁄° 
	gOSDbg_MuãxDñEn
 = 0u;

110 
CPU_INT08U
 c⁄° 
	gOSDbg_MuãxPídAb‹tEn
 = 0u;

111 
CPU_INT16U
 c⁄° 
	gOSDbg_MuãxSize
 = 0u;

114 
CPU_INT08U
 c⁄° 
	gOSDbg_ObjTy≥ChkEn
 = 
OS_CFG_OBJ_TYPE_CHK_EN
;

117 
CPU_INT08U
 c⁄° 
	gOSDbg_PídMu…iEn
 = 
OS_CFG_PEND_MULTI_EN
;

118 
CPU_INT16U
 c⁄° 
	gOSDbg_PídD©aSize
 = (
OS_PEND_DATA
);

119 
CPU_INT16U
 c⁄° 
	gOSDbg_PídLi°Size
 = (
OS_PEND_LIST
);

120 
CPU_INT16U
 c⁄° 
	gOSDbg_PídObjSize
 = (
OS_PEND_OBJ
);

123 
CPU_INT16U
 c⁄° 
	gOSDbg_PrioMax
 = 
OS_CFG_PRIO_MAX
;

124 
CPU_INT16U
 c⁄° 
	gOSDbg_PrioTblSize
 = (
OSPrioTbl
);

126 
CPU_INT16U
 c⁄° 
	gOSDbg_PåSize
 = (*);

129 
OS_Q
 c⁄° 
	gOSDbg_Q
 = { 0u };

130 
CPU_INT08U
 c⁄° 
	gOSDbg_QEn
 = 
OS_CFG_Q_EN
;

131 #i‡
OS_CFG_Q_EN
 > 0u

132 
CPU_INT08U
 c⁄° 
	gOSDbg_QDñEn
 = 
OS_CFG_Q_DEL_EN
;

133 
CPU_INT08U
 c⁄° 
	gOSDbg_QFlushEn
 = 
OS_CFG_Q_FLUSH_EN
;

134 
CPU_INT08U
 c⁄° 
	gOSDbg_QPídAb‹tEn
 = 
OS_CFG_Q_PEND_ABORT_EN
;

135 
CPU_INT16U
 c⁄° 
	gOSDbg_QSize
 = (
OS_Q
);

137 
CPU_INT08U
 c⁄° 
	gOSDbg_QDñEn
 = 0u;

138 
CPU_INT08U
 c⁄° 
	gOSDbg_QFlushEn
 = 0u;

139 
CPU_INT08U
 c⁄° 
	gOSDbg_QPídAb‹tEn
 = 0u;

140 
CPU_INT16U
 c⁄° 
	gOSDbg_QSize
 = 0u;

144 
CPU_INT08U
 c⁄° 
	gOSDbg_SchedRoundRoböEn
 = 
OS_CFG_SCHED_ROUND_ROBIN_EN
;

147 
OS_SEM
 c⁄° 
	gOSDbg_Sem
 = { 0u };

148 
CPU_INT08U
 c⁄° 
	gOSDbg_SemEn
 = 
OS_CFG_SEM_EN
;

149 #i‡
OS_CFG_SEM_EN
 > 0u

150 
CPU_INT08U
 c⁄° 
	gOSDbg_SemDñEn
 = 
OS_CFG_SEM_DEL_EN
;

151 
CPU_INT08U
 c⁄° 
	gOSDbg_SemPídAb‹tEn
 = 
OS_CFG_SEM_PEND_ABORT_EN
;

152 
CPU_INT08U
 c⁄° 
	gOSDbg_SemSëEn
 = 
OS_CFG_SEM_SET_EN
;

153 
CPU_INT16U
 c⁄° 
	gOSDbg_SemSize
 = (
OS_SEM
);

155 
CPU_INT08U
 c⁄° 
	gOSDbg_SemDñEn
 = 0u;

156 
CPU_INT08U
 c⁄° 
	gOSDbg_SemPídAb‹tEn
 = 0u;

157 
CPU_INT08U
 c⁄° 
	gOSDbg_SemSëEn
 = 0u;

158 
CPU_INT16U
 c⁄° 
	gOSDbg_SemSize
 = 0u;

162 
CPU_INT16U
 c⁄° 
	gOSDbg_RdyLi°
 = (
OS_RDY_LIST
);

163 
CPU_INT32U
 c⁄° 
	gOSDbg_RdyLi°Size
 = (
OSRdyLi°
);

165 
CPU_INT08U
 c⁄° 
	gOSDbg_StkWidth
 = (
CPU_STK
);

167 
CPU_INT08U
 c⁄° 
	gOSDbg_SètTaskEn
 = 
OS_CFG_STAT_TASK_EN
;

168 
CPU_INT08U
 c⁄° 
	gOSDbg_SètTaskStkChkEn
 = 
OS_CFG_STAT_TASK_STK_CHK_EN
;

170 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskCh™gePrioEn
 = 
OS_CFG_TASK_CHANGE_PRIO_EN
;

171 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskDñEn
 = 
OS_CFG_TASK_DEL_EN
;

172 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskQEn
 = 
OS_CFG_TASK_Q_EN
;

173 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskQPídAb‹tEn
 = 
OS_CFG_TASK_Q_PEND_ABORT_EN
;

174 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskProfûeEn
 = 
OS_CFG_TASK_PROFILE_EN
;

175 
CPU_INT16U
 c⁄° 
	gOSDbg_TaskRegTblSize
 = 
OS_CFG_TASK_REG_TBL_SIZE
;

176 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskSemPídAb‹tEn
 = 
OS_CFG_TASK_SEM_PEND_ABORT_EN
;

177 
CPU_INT08U
 c⁄° 
	gOSDbg_TaskSu•ídEn
 = 
OS_CFG_TASK_SUSPEND_EN
;

180 
CPU_INT16U
 c⁄° 
	gOSDbg_TCBSize
 = (
OS_TCB
);

182 
CPU_INT16U
 c⁄° 
	gOSDbg_TickSpokeSize
 = (
OS_TICK_SPOKE
);

184 
CPU_INT08U
 c⁄° 
	gOSDbg_TimeDlyHMSMEn
 = 
OS_CFG_TIME_DLY_HMSM_EN
;

185 
CPU_INT08U
 c⁄° 
	gOSDbg_TimeDlyResumeEn
 = 
OS_CFG_TIME_DLY_RESUME_EN
;

187 #i‡
deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

188 
CPU_INT16U
 c⁄° 
	gOSDbg_TLS_TblSize
 = 
OS_CFG_TLS_TBL_SIZE
 * (
OS_TLS
);

190 
CPU_INT16U
 c⁄° 
	gOSDbg_TLS_TblSize
 = 0u;

194 
OS_TMR
 c⁄° 
	gOSDbg_Tmr
 = { 0u };

195 
CPU_INT08U
 c⁄° 
	gOSDbg_TmrEn
 = 
OS_CFG_TMR_EN
;

196 #i‡
OS_CFG_TMR_EN
 > 0u

197 
CPU_INT08U
 c⁄° 
	gOSDbg_TmrDñEn
 = 
OS_CFG_TMR_DEL_EN
;

198 
CPU_INT16U
 c⁄° 
	gOSDbg_TmrSize
 = (
OS_TMR
);

199 
CPU_INT16U
 c⁄° 
	gOSDbg_TmrSpokeSize
 = (
OS_TMR_SPOKE
);

201 
CPU_INT08U
 c⁄° 
	gOSDbg_TmrDñEn
 = 0u;

202 
CPU_INT16U
 c⁄° 
	gOSDbg_TmrSize
 = 0u;

203 
CPU_INT16U
 c⁄° 
	gOSDbg_TmrSpokeSize
 = 0u;

206 
CPU_INT16U
 c⁄° 
	gOSDbg_Vîsi⁄Nbr
 = 
OS_VERSION
;

216 
CPU_INT32U
 c⁄° 
	gOSDbg_D©aSize
 = (
OSI¡Ne°ögCå
)

218 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

219 + (
OS_AµTaskCª©eHookPå
)

220 + (
OS_AµTaskDñHookPå
)

221 + (
OS_AµTaskRëu∫HookPå
)

223 + (
OS_AµIdÀTaskHookPå
)

224 + (
OS_AµSètTaskHookPå
)

225 + (
OS_AµTaskSwHookPå
)

226 + (
OS_AµTimeTickHookPå
)

229 + (
OSIdÀTaskCå
)

230 + (
OSIdÀTaskTCB
)

232 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


233 + (
OSI¡DisTimeMax
)

236 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

237 + (
OSI¡QInPå
)

238 + (
OSI¡QOutPå
)

239 + (
OSI¡QNbrE¡rõs
)

240 + (
OSI¡QNbrE¡rõsMax
)

241 + (
OSI¡QOvfCå
)

242 + (
OSI¡QTaskTCB
)

243 + (
OSI¡QTaskTimeMax
)

246 + (
OSRu¬ög
)

248 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


249 + (
OSSa„tyCrôiˇlSèπFœg
)

252 #i‡
OS_CFG_FLAG_EN
 > 0u

253 + (
OSFœgDbgLi°På
)

254 + (
OSFœgQty
)

257 #i‡
OS_CFG_MEM_EN
 > 0u

258 #i‡
OS_CFG_DBG_EN
 > 0u

259 + (
OSMemDbgLi°På
)

261 + (
OSMemQty
)

264 #i‡
OS_MSG_EN
 > 0u

265 + (
OSMsgPoﬁ
)

268 #i‡
OS_CFG_MUTEX_EN
 > 0u

269 #i‡
OS_CFG_DBG_EN
 > 0u

270 + (
OSMuãxDbgLi°På
)

272 + (
OSMuãxQty
)

275 + (
OSPrioCur
)

276 + (
OSPrioHighRdy
)

277 + (
OSPrioSaved
)

278 + (
OSPrioTbl
)

280 #i‡
OS_CFG_Q_EN
 > 0u

281 #i‡
OS_CFG_DBG_EN
 > 0u

282 + (
OSQDbgLi°På
)

284 + (
OSQQty
)

287 + (
OSRdyLi°
)

289 + (
OSSchedLockNe°ögCå
)

291 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

292 + (
OSSchedLockTimeBegö
)

293 + (
OSSchedLockTimeMax
)

294 + (
OSSchedLockTimeMaxCur
)

297 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN


298 + (
OSSchedRoundRoböDÊtTimeQu™è
)

299 + (
OSSchedRoundRoböEn
)

302 #i‡
OS_CFG_SEM_EN
 > 0u

303 #i‡
OS_CFG_DBG_EN
 > 0u

304 + (
OSSemDbgLi°På
)

306 + (
OSSemQty
)

308 + (
OSTaskCtxSwCå
)

309 #i‡
OS_CFG_DBG_EN
 > 0u

310 + (
OSTaskDbgLi°På
)

312 + (
OSTaskQty
)

314 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

315 + (
OSSètRe£tFœg
)

316 + (
OSSètTaskCPUUßge
)

317 + (
OSSètTaskCPUUßgeMax
)

318 + (
OSSètTaskCå
)

319 + (
OSSètTaskCåMax
)

320 + (
OSSètTaskCåRun
)

321 + (
OSSètTaskRdy
)

322 + (
OSSètTaskTCB
)

323 + (
OSSètTaskTimeMax
)

326 + (
OSTickCå
)

327 + (
OSTickTaskTCB
)

328 + (
OSTickTaskTimeMax
)

330 #i‡
OS_CFG_TMR_EN
 > 0u

331 #i‡
OS_CFG_DBG_EN
 > 0u

332 + (
OSTmrDbgLi°På
)

334 + (
OSTmrQty
)

335 + (
OSTmrTaskTCB
)

336 + (
OSTmrTaskTimeMax
)

337 + (
OSTmrTickCå
)

338 + (
OSTmrUpd©eC¡
)

339 + (
OSTmrUpd©eCå
)

342 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

343 + (
OSTaskRegNextAvaûID
)

346 + (
OSTCBCurPå
)

347 + (
OSTCBHighRdyPå
);

369 
	$OS_Dbg_Inô
 ()

371 c⁄° *
p_ãmp
;

374 
p_ãmp
 = (c⁄° *)&
OSDbg_DbgEn
;

376 
p_ãmp
 = (c⁄° *)&
OSDbg_D©aSize
;

378 
p_ãmp
 = (c⁄° *)&
OSDbg_ArgChkEn
;

379 
p_ãmp
 = (c⁄° *)&
OSDbg_AµHooksEn
;

381 
p_ãmp
 = (c⁄° *)&
OSDbg_Endü¬essTe°
;

383 
p_ãmp
 = (c⁄° *)&
OSDbg_CÆÀdFromISRChkEn
;

385 
p_ãmp
 = (c⁄° *)&
OSDbg_FœgGΩ
;

386 
p_ãmp
 = (c⁄° *)&
OSDbg_FœgEn
;

387 #i‡
OS_CFG_FLAG_EN
 > 0u

388 
p_ãmp
 = (c⁄° *)&
OSDbg_FœgDñEn
;

389 
p_ãmp
 = (c⁄° *)&
OSDbg_FœgModeCÃEn
;

390 
p_ãmp
 = (c⁄° *)&
OSDbg_FœgPídAb‹tEn
;

391 
p_ãmp
 = (c⁄° *)&
OSDbg_FœgGΩSize
;

392 
p_ãmp
 = (c⁄° *)&
OSDbg_FœgWidth
;

395 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

396 
p_ãmp
 = (c⁄° *)&
OSDbg_I¡Q
;

399 
p_ãmp
 = (c⁄° *)&
OSDbg_ISRPo°De„ºedEn
;

401 
p_ãmp
 = (c⁄° *)&
OSDbg_Mem
;

402 
p_ãmp
 = (c⁄° *)&
OSDbg_MemEn
;

403 #i‡
OS_CFG_MEM_EN
 > 0u

404 
p_ãmp
 = (c⁄° *)&
OSDbg_MemSize
;

407 
p_ãmp
 = (c⁄° *)&
OSDbg_MsgEn
;

408 #i‡(
OS_MSG_EN
) > 0u

409 
p_ãmp
 = (c⁄° *)&
OSDbg_MsgSize
;

410 
p_ãmp
 = (c⁄° *)&
OSDbg_MsgPoﬁSize
;

411 
p_ãmp
 = (c⁄° *)&
OSDbg_MsgQSize
;

414 
p_ãmp
 = (c⁄° *)&
OSDbg_Muãx
;

415 
p_ãmp
 = (c⁄° *)&
OSDbg_MuãxEn
;

416 #i‡(
OS_CFG_MUTEX_EN
) > 0u

417 
p_ãmp
 = (c⁄° *)&
OSDbg_MuãxDñEn
;

418 
p_ãmp
 = (c⁄° *)&
OSDbg_MuãxPídAb‹tEn
;

419 
p_ãmp
 = (c⁄° *)&
OSDbg_MuãxSize
;

422 
p_ãmp
 = (c⁄° *)&
OSDbg_ObjTy≥ChkEn
;

424 
p_ãmp
 = (c⁄° *)&
OSDbg_PídMu…iEn
;

425 
p_ãmp
 = (c⁄° *)&
OSDbg_PídD©aSize
;

426 
p_ãmp
 = (c⁄° *)&
OSDbg_PídLi°Size
;

427 
p_ãmp
 = (c⁄° *)&
OSDbg_PídObjSize
;

429 
p_ãmp
 = (c⁄° *)&
OSDbg_PrioMax
;

430 
p_ãmp
 = (c⁄° *)&
OSDbg_PrioTblSize
;

432 
p_ãmp
 = (c⁄° *)&
OSDbg_PåSize
;

434 
p_ãmp
 = (c⁄° *)&
OSDbg_Q
;

435 
p_ãmp
 = (c⁄° *)&
OSDbg_QEn
;

436 #i‡(
OS_CFG_Q_EN
) > 0u

437 
p_ãmp
 = (c⁄° *)&
OSDbg_QDñEn
;

438 
p_ãmp
 = (c⁄° *)&
OSDbg_QFlushEn
;

439 
p_ãmp
 = (c⁄° *)&
OSDbg_QPídAb‹tEn
;

440 
p_ãmp
 = (c⁄° *)&
OSDbg_QSize
;

443 
p_ãmp
 = (c⁄° *)&
OSDbg_SchedRoundRoböEn
;

445 
p_ãmp
 = (c⁄° *)&
OSDbg_Sem
;

446 
p_ãmp
 = (c⁄° *)&
OSDbg_SemEn
;

447 #i‡(
OS_CFG_SEM_EN
) > 0u

448 
p_ãmp
 = (c⁄° *)&
OSDbg_SemDñEn
;

449 
p_ãmp
 = (c⁄° *)&
OSDbg_SemPídAb‹tEn
;

450 
p_ãmp
 = (c⁄° *)&
OSDbg_SemSëEn
;

451 
p_ãmp
 = (c⁄° *)&
OSDbg_SemSize
;

454 
p_ãmp
 = (c⁄° *)&
OSDbg_RdyLi°
;

455 
p_ãmp
 = (c⁄° *)&
OSDbg_RdyLi°Size
;

457 
p_ãmp
 = (c⁄° *)&
OSDbg_StkWidth
;

459 
p_ãmp
 = (c⁄° *)&
OSDbg_SètTaskEn
;

460 
p_ãmp
 = (c⁄° *)&
OSDbg_SètTaskStkChkEn
;

462 
p_ãmp
 = (c⁄° *)&
OSDbg_TaskCh™gePrioEn
;

463 
p_ãmp
 = (c⁄° *)&
OSDbg_TaskDñEn
;

464 
p_ãmp
 = (c⁄° *)&
OSDbg_TaskQEn
;

465 
p_ãmp
 = (c⁄° *)&
OSDbg_TaskQPídAb‹tEn
;

466 
p_ãmp
 = (c⁄° *)&
OSDbg_TaskProfûeEn
;

467 
p_ãmp
 = (c⁄° *)&
OSDbg_TaskRegTblSize
;

468 
p_ãmp
 = (c⁄° *)&
OSDbg_TaskSemPídAb‹tEn
;

469 
p_ãmp
 = (c⁄° *)&
OSDbg_TaskSu•ídEn
;

471 
p_ãmp
 = (c⁄° *)&
OSDbg_TCBSize
;

473 
p_ãmp
 = (c⁄° *)&
OSDbg_TickSpokeSize
;

475 
p_ãmp
 = (c⁄° *)&
OSDbg_TimeDlyHMSMEn
;

476 
p_ãmp
 = (c⁄° *)&
OSDbg_TimeDlyResumeEn
;

479 
p_ãmp
 = (c⁄° *)&
OSDbg_Tmr
;

480 
p_ãmp
 = (c⁄° *)&
OSDbg_TmrEn
;

481 #i‡(
OS_CFG_TMR_EN
) > 0u

482 
p_ãmp
 = (c⁄° *)&
OSDbg_TmrDñEn
;

483 
p_ãmp
 = (c⁄° *)&
OSDbg_TmrSize
;

484 
p_ãmp
 = (c⁄° *)&
OSDbg_TmrSpokeSize
;

487 
p_ãmp
 = (c⁄° *)&
OSDbg_Vîsi⁄Nbr
;

489 
p_ãmp
 =Ö_temp;

490 
	}
}

	@UCOSIII/uCOS-III/Source/os_flag.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_Êag__c
 = "$Id: $";

41 #i‡
OS_CFG_FLAG_EN
 > 0u

70 
	$OSFœgCª©e
 (
OS_FLAG_GRP
 *
p_gΩ
,

71 
CPU_CHAR
 *
p_«me
,

72 
OS_FLAGS
 
Êags
,

73 
OS_ERR
 *
p_îr
)

75 
	`CPU_SR_ALLOC
();

79 #ifde‡
OS_SAFETY_CRITICAL


80 i‡(
p_îr
 =(
OS_ERR
 *)0) {

81 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

86 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


87 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

88 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

93 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

94 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

95 *
p_îr
 = 
OS_ERR_CREATE_ISR
;

100 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

101 i‡(
p_gΩ
 =(
OS_FLAG_GRP
 *)0) {

102 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

107 
	`OS_CRITICAL_ENTER
();

108 
p_gΩ
->
Ty≥
 = 
OS_OBJ_TYPE_FLAG
;

109 
p_gΩ
->
NamePå
 = 
p_«me
;

110 
p_gΩ
->
Fœgs
 = 
Êags
;

111 
p_gΩ
->
TS
 = (
CPU_TS
)0;

112 
	`OS_PídLi°Inô
(&
p_gΩ
->
PídLi°
);

114 #i‡
OS_CFG_DBG_EN
 > 0u

115 
	`OS_FœgDbgLi°Add
(
p_gΩ
);

117 
OSFœgQty
++;

119 
	`OS_CRITICAL_EXIT_NO_SCHED
();

120 *
p_îr
 = 
OS_ERR_NONE
;

121 
	}
}

155 #i‡
OS_CFG_FLAG_DEL_EN
 > 0u

156 
OS_OBJ_QTY
 
	$OSFœgDñ
 (
OS_FLAG_GRP
 *
p_gΩ
,

157 
OS_OPT
 
›t
,

158 
OS_ERR
 *
p_îr
)

160 
OS_OBJ_QTY
 
˙t
;

161 
OS_OBJ_QTY
 
nbr_èsks
;

162 
OS_PEND_DATA
 *
p_≥nd_d©a
;

163 
OS_PEND_LIST
 *
p_≥nd_li°
;

164 
OS_TCB
 *
p_tcb
;

165 
CPU_TS
 
ts
;

166 
	`CPU_SR_ALLOC
();

170 #ifde‡
OS_SAFETY_CRITICAL


171 i‡(
p_îr
 =(
OS_ERR
 *)0) {

172 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

173  ((
OS_OBJ_QTY
)0);

177 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

178 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

179 *
p_îr
 = 
OS_ERR_DEL_ISR
;

180  ((
OS_OBJ_QTY
)0);

184 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

185 i‡(
p_gΩ
 =(
OS_FLAG_GRP
 *)0) {

186 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

187  ((
OS_OBJ_QTY
)0);

189 
›t
) {

190 
OS_OPT_DEL_NO_PEND
:

191 
OS_OPT_DEL_ALWAYS
:

195 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

196  ((
OS_OBJ_QTY
)0);

200 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

201 i‡(
p_gΩ
->
Ty≥
 !
OS_OBJ_TYPE_FLAG
) {

202 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

203  ((
OS_OBJ_QTY
)0);

206 
	`OS_CRITICAL_ENTER
();

207 
p_≥nd_li°
 = &
p_gΩ
->
PídLi°
;

208 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

209 
nbr_èsks
 = 
˙t
;

210 
›t
) {

211 
OS_OPT_DEL_NO_PEND
:

212 i‡(
nbr_èsks
 =(
OS_OBJ_QTY
)0) {

213 #i‡
OS_CFG_DBG_EN
 > 0u

214 
	`OS_FœgDbgLi°Remove
(
p_gΩ
);

216 
OSFœgQty
--;

217 
	`OS_FœgCÃ
(
p_gΩ
);

219 
	`OS_CRITICAL_EXIT
();

220 *
p_îr
 = 
OS_ERR_NONE
;

222 
	`OS_CRITICAL_EXIT
();

223 *
p_îr
 = 
OS_ERR_TASK_WAITING
;

227 
OS_OPT_DEL_ALWAYS
:

228 
ts
 = 
	`OS_TS_GET
();

229 
˙t
 > 0u) {

230 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

231 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

232 
	`OS_PídObjDñ
((
OS_PEND_OBJ
 *)((*)
p_gΩ
),

233 
p_tcb
,

234 
ts
);

235 
˙t
--;

237 #i‡
OS_CFG_DBG_EN
 > 0u

238 
	`OS_FœgDbgLi°Remove
(
p_gΩ
);

240 
OSFœgQty
--;

241 
	`OS_FœgCÃ
(
p_gΩ
);

242 
	`OS_CRITICAL_EXIT_NO_SCHED
();

243 
	`OSSched
();

244 *
p_îr
 = 
OS_ERR_NONE
;

248 
	`OS_CRITICAL_EXIT
();

249 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

252  (
nbr_èsks
);

253 
	}
}

315 
OS_FLAGS
 
	$OSFœgPíd
 (
OS_FLAG_GRP
 *
p_gΩ
,

316 
OS_FLAGS
 
Êags
,

317 
OS_TICK
 
timeout
,

318 
OS_OPT
 
›t
,

319 
CPU_TS
 *
p_ts
,

320 
OS_ERR
 *
p_îr
)

322 
CPU_BOOLEAN
 
c⁄sume
;

323 
OS_FLAGS
 
Êags_rdy
;

324 
OS_OPT
 
mode
;

325 
OS_PEND_DATA
 
≥nd_d©a
;

326 
	`CPU_SR_ALLOC
();

330 #ifde‡
OS_SAFETY_CRITICAL


331 i‡(
p_îr
 =(
OS_ERR
 *)0) {

332 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

333  ((
OS_FLAGS
)0);

337 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

338 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

339 *
p_îr
 = 
OS_ERR_PEND_ISR
;

340  ((
OS_FLAGS
)0);

344 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

345 i‡(
p_gΩ
 =(
OS_FLAG_GRP
 *)0) {

346 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

347  ((
OS_FLAGS
)0);

349 
›t
) {

350 
OS_OPT_PEND_FLAG_CLR_ALL
:

351 
OS_OPT_PEND_FLAG_CLR_ANY
:

352 
OS_OPT_PEND_FLAG_SET_ALL
:

353 
OS_OPT_PEND_FLAG_SET_ANY
:

354 
OS_OPT_PEND_FLAG_CLR_ALL
 | 
OS_OPT_PEND_FLAG_CONSUME
:

355 
OS_OPT_PEND_FLAG_CLR_ANY
 | 
OS_OPT_PEND_FLAG_CONSUME
:

356 
OS_OPT_PEND_FLAG_SET_ALL
 | 
OS_OPT_PEND_FLAG_CONSUME
:

357 
OS_OPT_PEND_FLAG_SET_ANY
 | 
OS_OPT_PEND_FLAG_CONSUME
:

358 
OS_OPT_PEND_FLAG_CLR_ALL
 | 
OS_OPT_PEND_NON_BLOCKING
:

359 
OS_OPT_PEND_FLAG_CLR_ANY
 | 
OS_OPT_PEND_NON_BLOCKING
:

360 
OS_OPT_PEND_FLAG_SET_ALL
 | 
OS_OPT_PEND_NON_BLOCKING
:

361 
OS_OPT_PEND_FLAG_SET_ANY
 | 
OS_OPT_PEND_NON_BLOCKING
:

362 
OS_OPT_PEND_FLAG_CLR_ALL
 | 
OS_OPT_PEND_FLAG_CONSUME
 | 
OS_OPT_PEND_NON_BLOCKING
:

363 
OS_OPT_PEND_FLAG_CLR_ANY
 | 
OS_OPT_PEND_FLAG_CONSUME
 | 
OS_OPT_PEND_NON_BLOCKING
:

364 
OS_OPT_PEND_FLAG_SET_ALL
 | 
OS_OPT_PEND_FLAG_CONSUME
 | 
OS_OPT_PEND_NON_BLOCKING
:

365 
OS_OPT_PEND_FLAG_SET_ANY
 | 
OS_OPT_PEND_FLAG_CONSUME
 | 
OS_OPT_PEND_NON_BLOCKING
:

369 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

370  ((
OS_OBJ_QTY
)0);

374 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

375 i‡(
p_gΩ
->
Ty≥
 !
OS_OBJ_TYPE_FLAG
) {

376 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

377  ((
OS_FLAGS
)0);

381 i‡((
›t
 & 
OS_OPT_PEND_FLAG_CONSUME
Ë!(
OS_OPT
)0) {

382 
c⁄sume
 = 
DEF_TRUE
;

384 
c⁄sume
 = 
DEF_FALSE
;

387 i‡(
p_ts
 !(
CPU_TS
 *)0) {

388 *
p_ts
 = (
CPU_TS
)0;

391 
mode
 = 
›t
 & 
OS_OPT_PEND_FLAG_MASK
;

392 
	`CPU_CRITICAL_ENTER
();

393 
mode
) {

394 
OS_OPT_PEND_FLAG_SET_ALL
:

395 
Êags_rdy
 = (
OS_FLAGS
)(
p_gΩ
->
Fœgs
 & 
Êags
);

396 i‡(
Êags_rdy
 =
Êags
) {

397 i‡(
c⁄sume
 =
DEF_TRUE
) {

398 
p_gΩ
->
Fœgs
 &~
Êags_rdy
;

400 
OSTCBCurPå
->
FœgsRdy
 = 
Êags_rdy
;

401 i‡(
p_ts
 !(
CPU_TS
 *)0) {

402 *
p_ts
 = 
p_gΩ
->
TS
;

404 
	`CPU_CRITICAL_EXIT
();

405 *
p_îr
 = 
OS_ERR_NONE
;

406  (
Êags_rdy
);

408 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

409 
	`CPU_CRITICAL_EXIT
();

410 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

411  ((
OS_FLAGS
)0);

413 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

414 
	`CPU_CRITICAL_EXIT
();

415 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

416  ((
OS_FLAGS
)0);

420 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

421 
	`OS_FœgBlock
(&
≥nd_d©a
,

422 
p_gΩ
,

423 
Êags
,

424 
›t
,

425 
timeout
);

426 
	`OS_CRITICAL_EXIT_NO_SCHED
();

430 
OS_OPT_PEND_FLAG_SET_ANY
:

431 
Êags_rdy
 = (
OS_FLAGS
)(
p_gΩ
->
Fœgs
 & 
Êags
);

432 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

433 i‡(
c⁄sume
 =
DEF_TRUE
) {

434 
p_gΩ
->
Fœgs
 &~
Êags_rdy
;

436 
OSTCBCurPå
->
FœgsRdy
 = 
Êags_rdy
;

437 i‡(
p_ts
 !(
CPU_TS
 *)0) {

438 *
p_ts
 = 
p_gΩ
->
TS
;

440 
	`CPU_CRITICAL_EXIT
();

441 *
p_îr
 = 
OS_ERR_NONE
;

442  (
Êags_rdy
);

444 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

445 
	`CPU_CRITICAL_EXIT
();

446 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

447  ((
OS_FLAGS
)0);

449 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

450 
	`CPU_CRITICAL_EXIT
();

451 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

452  ((
OS_FLAGS
)0);

456 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

457 
	`OS_FœgBlock
(&
≥nd_d©a
,

458 
p_gΩ
,

459 
Êags
,

460 
›t
,

461 
timeout
);

462 
	`OS_CRITICAL_EXIT_NO_SCHED
();

466 #i‡
OS_CFG_FLAG_MODE_CLR_EN
 > 0u

467 
OS_OPT_PEND_FLAG_CLR_ALL
:

468 
Êags_rdy
 = (
OS_FLAGS
)(~
p_gΩ
->
Fœgs
 & 
Êags
);

469 i‡(
Êags_rdy
 =
Êags
) {

470 i‡(
c⁄sume
 =
DEF_TRUE
) {

471 
p_gΩ
->
Fœgs
 |
Êags_rdy
;

473 
OSTCBCurPå
->
FœgsRdy
 = 
Êags_rdy
;

474 i‡(
p_ts
 !(
CPU_TS
 *)0) {

475 *
p_ts
 = 
p_gΩ
->
TS
;

477 
	`CPU_CRITICAL_EXIT
();

478 *
p_îr
 = 
OS_ERR_NONE
;

479  (
Êags_rdy
);

481 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

482 
	`CPU_CRITICAL_EXIT
();

483 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

484  ((
OS_FLAGS
)0);

486 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

487 
	`CPU_CRITICAL_EXIT
();

488 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

489  ((
OS_FLAGS
)0);

493 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

494 
	`OS_FœgBlock
(&
≥nd_d©a
,

495 
p_gΩ
,

496 
Êags
,

497 
›t
,

498 
timeout
);

499 
	`OS_CRITICAL_EXIT_NO_SCHED
();

503 
OS_OPT_PEND_FLAG_CLR_ANY
:

504 
Êags_rdy
 = (
OS_FLAGS
)(~
p_gΩ
->
Fœgs
 & 
Êags
);

505 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

506 i‡(
c⁄sume
 =
DEF_TRUE
) {

507 
p_gΩ
->
Fœgs
 |
Êags_rdy
;

509 
OSTCBCurPå
->
FœgsRdy
 = 
Êags_rdy
;

510 i‡(
p_ts
 !(
CPU_TS
 *)0) {

511 *
p_ts
 = 
p_gΩ
->
TS
;

513 
	`CPU_CRITICAL_EXIT
();

514 *
p_îr
 = 
OS_ERR_NONE
;

515  (
Êags_rdy
);

517 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

518 
	`CPU_CRITICAL_EXIT
();

519 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

520  ((
OS_FLAGS
)0);

522 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

523 
	`CPU_CRITICAL_EXIT
();

524 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

525  ((
OS_FLAGS
)0);

529 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

530 
	`OS_FœgBlock
(&
≥nd_d©a
,

531 
p_gΩ
,

532 
Êags
,

533 
›t
,

534 
timeout
);

535 
	`OS_CRITICAL_EXIT_NO_SCHED
();

541 
	`CPU_CRITICAL_EXIT
();

542 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

543  ((
OS_FLAGS
)0);

546 
	`OSSched
();

548 
	`CPU_CRITICAL_ENTER
();

549 
OSTCBCurPå
->
PídSètus
) {

550 
OS_STATUS_PEND_OK
:

551 i‡(
p_ts
 !(
CPU_TS
 *)0) {

552 *
p_ts
 = 
OSTCBCurPå
->
TS
;

554 *
p_îr
 = 
OS_ERR_NONE
;

557 
OS_STATUS_PEND_ABORT
:

558 i‡(
p_ts
 !(
CPU_TS
 *)0) {

559 *
p_ts
 = 
OSTCBCurPå
->
TS
;

561 
	`CPU_CRITICAL_EXIT
();

562 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

563  ((
OS_FLAGS
)0);

565 
OS_STATUS_PEND_TIMEOUT
:

566 i‡(
p_ts
 !(
CPU_TS
 *)0) {

567 *
p_ts
 = (
CPU_TS
 )0;

569 
	`CPU_CRITICAL_EXIT
();

570 *
p_îr
 = 
OS_ERR_TIMEOUT
;

571  ((
OS_FLAGS
)0);

573 
OS_STATUS_PEND_DEL
:

574 i‡(
p_ts
 !(
CPU_TS
 *)0) {

575 *
p_ts
 = 
OSTCBCurPå
->
TS
;

577 
	`CPU_CRITICAL_EXIT
();

578 *
p_îr
 = 
OS_ERR_OBJ_DEL
;

579  ((
OS_FLAGS
)0);

582 
	`CPU_CRITICAL_EXIT
();

583 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

584  ((
OS_FLAGS
)0);

587 
Êags_rdy
 = 
OSTCBCurPå
->
FœgsRdy
;

588 i‡(
c⁄sume
 =
DEF_TRUE
) {

589 
mode
) {

590 
OS_OPT_PEND_FLAG_SET_ALL
:

591 
OS_OPT_PEND_FLAG_SET_ANY
:

592 
p_gΩ
->
Fœgs
 &~
Êags_rdy
;

595 #i‡
OS_CFG_FLAG_MODE_CLR_EN
 > 0u

596 
OS_OPT_PEND_FLAG_CLR_ALL
:

597 
OS_OPT_PEND_FLAG_CLR_ANY
:

598 
p_gΩ
->
Fœgs
 |
Êags_rdy
;

602 
	`CPU_CRITICAL_EXIT
();

603 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

604  ((
OS_FLAGS
)0);

607 
	`CPU_CRITICAL_EXIT
();

608 *
p_îr
 = 
OS_ERR_NONE
;

609  (
Êags_rdy
);

610 
	}
}

646 #i‡
OS_CFG_FLAG_PEND_ABORT_EN
 > 0u

647 
OS_OBJ_QTY
 
	$OSFœgPídAb‹t
 (
OS_FLAG_GRP
 *
p_gΩ
,

648 
OS_OPT
 
›t
,

649 
OS_ERR
 *
p_îr
)

651 
OS_PEND_LIST
 *
p_≥nd_li°
;

652 
OS_TCB
 *
p_tcb
;

653 
CPU_TS
 
ts
;

654 
OS_OBJ_QTY
 
nbr_èsks
;

655 
	`CPU_SR_ALLOC
();

659 #ifde‡
OS_SAFETY_CRITICAL


660 i‡(
p_îr
 =(
OS_ERR
 *)0) {

661 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

662  ((
OS_OBJ_QTY
)0u);

666 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

667 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

668 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

669  ((
OS_OBJ_QTY
)0u);

673 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

674 i‡(
p_gΩ
 =(
OS_FLAG_GRP
 *)0) {

675 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

676  ((
OS_OBJ_QTY
)0u);

678 
›t
) {

679 
OS_OPT_PEND_ABORT_1
:

680 
OS_OPT_PEND_ABORT_ALL
:

681 
OS_OPT_PEND_ABORT_1
 | 
OS_OPT_POST_NO_SCHED
:

682 
OS_OPT_PEND_ABORT_ALL
 | 
OS_OPT_POST_NO_SCHED
:

686 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

687  ((
OS_OBJ_QTY
)0u);

691 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

692 i‡(
p_gΩ
->
Ty≥
 !
OS_OBJ_TYPE_FLAG
) {

693 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

694  ((
OS_OBJ_QTY
)0u);

698 
	`CPU_CRITICAL_ENTER
();

699 
p_≥nd_li°
 = &
p_gΩ
->
PídLi°
;

700 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

701 
	`CPU_CRITICAL_EXIT
();

702 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

703  ((
OS_OBJ_QTY
)0u);

706 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

707 
nbr_èsks
 = 0u;

708 
ts
 = 
	`OS_TS_GET
();

709 
p_≥nd_li°
->
NbrE¡rõs
 > (
OS_OBJ_QTY
)0u) {

710 
p_tcb
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

711 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)((*)
p_gΩ
),

712 
p_tcb
,

713 
ts
);

714 
nbr_èsks
++;

715 i‡(
›t
 !
OS_OPT_PEND_ABORT_ALL
) {

719 
	`OS_CRITICAL_EXIT_NO_SCHED
();

721 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0u) {

722 
	`OSSched
();

725 *
p_îr
 = 
OS_ERR_NONE
;

726  (
nbr_èsks
);

727 
	}
}

747 
OS_FLAGS
 
	$OSFœgPídGëFœgsRdy
 (
OS_ERR
 *
p_îr
)

749 
OS_FLAGS
 
Êags
;

750 
	`CPU_SR_ALLOC
();

754 #ifde‡
OS_SAFETY_CRITICAL


755 i‡(
p_îr
 =(
OS_ERR
 *)0) {

756 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

757  ((
OS_FLAGS
)0);

761 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

762 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

763 *
p_îr
 = 
OS_ERR_PEND_ISR
;

764  ((
OS_FLAGS
)0);

768 
	`CPU_CRITICAL_ENTER
();

769 
Êags
 = 
OSTCBCurPå
->
FœgsRdy
;

770 
	`CPU_CRITICAL_EXIT
();

771 *
p_îr
 = 
OS_ERR_NONE
;

772  (
Êags
);

773 
	}
}

817 
OS_FLAGS
 
	$OSFœgPo°
 (
OS_FLAG_GRP
 *
p_gΩ
,

818 
OS_FLAGS
 
Êags
,

819 
OS_OPT
 
›t
,

820 
OS_ERR
 *
p_îr
)

822 
OS_FLAGS
 
Êags_cur
;

823 
CPU_TS
 
ts
;

827 #ifde‡
OS_SAFETY_CRITICAL


828 i‡(
p_îr
 =(
OS_ERR
 *)0) {

829 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

830  ((
OS_FLAGS
)0);

834 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

835 i‡(
p_gΩ
 =(
OS_FLAG_GRP
 *)0) {

836 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

837  ((
OS_FLAGS
)0);

839 
›t
) {

840 
OS_OPT_POST_FLAG_SET
:

841 
OS_OPT_POST_FLAG_CLR
:

842 
OS_OPT_POST_FLAG_SET
 | 
OS_OPT_POST_NO_SCHED
:

843 
OS_OPT_POST_FLAG_CLR
 | 
OS_OPT_POST_NO_SCHED
:

847 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

848  ((
OS_FLAGS
)0);

852 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

853 i‡(
p_gΩ
->
Ty≥
 !
OS_OBJ_TYPE_FLAG
) {

854 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

855  ((
OS_FLAGS
)0);

859 
ts
 = 
	`OS_TS_GET
();

860 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

861 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

862 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_FLAG
,

863 (*)
p_gΩ
,

865 (
OS_MSG_SIZE
)0,

866 (
OS_FLAGS
 )
Êags
,

867 (
OS_OPT
 )
›t
,

868 (
CPU_TS
 )
ts
,

869 (
OS_ERR
 *)
p_îr
);

870  ((
OS_FLAGS
)0);

874 
Êags_cur
 = 
	`OS_FœgPo°
(
p_gΩ
,

875 
Êags
,

876 
›t
,

877 
ts
,

878 
p_îr
);

880  (
Êags_cur
);

881 
	}
}

920 
	$OS_FœgBlock
 (
OS_PEND_DATA
 *
p_≥nd_d©a
,

921 
OS_FLAG_GRP
 *
p_gΩ
,

922 
OS_FLAGS
 
Êags
,

923 
OS_OPT
 
›t
,

924 
OS_TICK
 
timeout
)

926 
OSTCBCurPå
->
FœgsPíd
 = 
Êags
;

927 
OSTCBCurPå
->
FœgsO±
 = 
›t
;

928 
OSTCBCurPå
->
FœgsRdy
 = (
OS_FLAGS
)0;

930 
	`OS_Píd
(
p_≥nd_d©a
,

931 (
OS_PEND_OBJ
 *)((*)
p_gΩ
),

932 
OS_TASK_PEND_ON_FLAG
,

933 
timeout
);

934 
	}
}

953 
	$OS_FœgCÃ
 (
OS_FLAG_GRP
 *
p_gΩ
)

955 
OS_PEND_LIST
 *
p_≥nd_li°
;

959 
p_gΩ
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

960 
p_gΩ
->
NamePå
 = (
CPU_CHAR
 *)((*)"?FLAG");

961 
p_gΩ
->
Fœgs
 = (
OS_FLAGS
 )0;

962 
p_≥nd_li°
 = &
p_gΩ
->
PídLi°
;

963 
	`OS_PídLi°Inô
(
p_≥nd_li°
);

964 
	}
}

984 
	$OS_FœgInô
 (
OS_ERR
 *
p_îr
)

986 #ifde‡
OS_SAFETY_CRITICAL


987 i‡(
p_îr
 =(
OS_ERR
 *)0) {

988 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

993 #i‡
OS_CFG_DBG_EN
 > 0u

994 
OSFœgDbgLi°På
 = (
OS_FLAG_GRP
 *)0;

997 
OSFœgQty
 = (
OS_OBJ_QTY
 )0;

998 *
p_îr
 = 
OS_ERR_NONE
;

999 
	}
}

1017 #i‡
OS_CFG_DBG_EN
 > 0u

1018 
	$OS_FœgDbgLi°Add
 (
OS_FLAG_GRP
 *
p_gΩ
)

1020 
p_gΩ
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

1021 
p_gΩ
->
DbgPªvPå
 = (
OS_FLAG_GRP
 *)0;

1022 i‡(
OSFœgDbgLi°På
 =(
OS_FLAG_GRP
 *)0) {

1023 
p_gΩ
->
DbgNextPå
 = (
OS_FLAG_GRP
 *)0;

1025 
p_gΩ
->
DbgNextPå
 = 
OSFœgDbgLi°På
;

1026 
OSFœgDbgLi°På
->
DbgPªvPå
 = 
p_gΩ
;

1028 
OSFœgDbgLi°På
 = 
p_gΩ
;

1029 
	}
}

1033 
	$OS_FœgDbgLi°Remove
 (
OS_FLAG_GRP
 *
p_gΩ
)

1035 
OS_FLAG_GRP
 *
p_gΩ_√xt
;

1036 
OS_FLAG_GRP
 *
p_gΩ_¥ev
;

1039 
p_gΩ_¥ev
 = 
p_gΩ
->
DbgPªvPå
;

1040 
p_gΩ_√xt
 = 
p_gΩ
->
DbgNextPå
;

1042 i‡(
p_gΩ_¥ev
 =(
OS_FLAG_GRP
 *)0) {

1043 
OSFœgDbgLi°På
 = 
p_gΩ_√xt
;

1044 i‡(
p_gΩ_√xt
 !(
OS_FLAG_GRP
 *)0) {

1045 
p_gΩ_√xt
->
DbgPªvPå
 = (
OS_FLAG_GRP
 *)0;

1047 
p_gΩ
->
DbgNextPå
 = (
OS_FLAG_GRP
 *)0;

1049 } i‡(
p_gΩ_√xt
 =(
OS_FLAG_GRP
 *)0) {

1050 
p_gΩ_¥ev
->
DbgNextPå
 = (
OS_FLAG_GRP
 *)0;

1051 
p_gΩ
->
DbgPªvPå
 = (
OS_FLAG_GRP
 *)0;

1054 
p_gΩ_¥ev
->
DbgNextPå
 = 
p_gΩ_√xt
;

1055 
p_gΩ_√xt
->
DbgPªvPå
 = 
p_gΩ_¥ev
;

1056 
p_gΩ
->
DbgNextPå
 = (
OS_FLAG_GRP
 *)0;

1057 
p_gΩ
->
DbgPªvPå
 = (
OS_FLAG_GRP
 *)0;

1059 
	}
}

1106 
OS_FLAGS
 
	$OS_FœgPo°
 (
OS_FLAG_GRP
 *
p_gΩ
,

1107 
OS_FLAGS
 
Êags
,

1108 
OS_OPT
 
›t
,

1109 
CPU_TS
 
ts
,

1110 
OS_ERR
 *
p_îr
)

1112 
OS_FLAGS
 
Êags_cur
;

1113 
OS_FLAGS
 
Êags_rdy
;

1114 
OS_OPT
 
mode
;

1115 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1116 
OS_PEND_DATA
 *
p_≥nd_d©a_√xt
;

1117 
OS_PEND_LIST
 *
p_≥nd_li°
;

1118 
OS_TCB
 *
p_tcb
;

1119 
	`CPU_SR_ALLOC
();

1123 
	`CPU_CRITICAL_ENTER
();

1124 
›t
) {

1125 
OS_OPT_POST_FLAG_SET
:

1126 
OS_OPT_POST_FLAG_SET
 | 
OS_OPT_POST_NO_SCHED
:

1127 
p_gΩ
->
Fœgs
 |
Êags
;

1130 
OS_OPT_POST_FLAG_CLR
:

1131 
OS_OPT_POST_FLAG_CLR
 | 
OS_OPT_POST_NO_SCHED
:

1132 
p_gΩ
->
Fœgs
 &~
Êags
;

1136 
	`CPU_CRITICAL_EXIT
();

1137 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

1138  ((
OS_FLAGS
)0);

1140 
p_gΩ
->
TS
 = 
ts
;

1141 
p_≥nd_li°
 = &
p_gΩ
->
PídLi°
;

1142 i‡(
p_≥nd_li°
->
NbrE¡rõs
 == 0u) {

1143 
	`CPU_CRITICAL_EXIT
();

1144 *
p_îr
 = 
OS_ERR_NONE
;

1145  (
p_gΩ
->
Fœgs
);

1148 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

1149 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

1150 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

1151 
p_tcb
 !(
OS_TCB
 *)0) {

1152 
p_≥nd_d©a_√xt
 = 
p_≥nd_d©a
->
NextPå
;

1153 
mode
 = 
p_tcb
->
FœgsO±
 & 
OS_OPT_PEND_FLAG_MASK
;

1154 
mode
) {

1155 
OS_OPT_PEND_FLAG_SET_ALL
:

1156 
Êags_rdy
 = (
OS_FLAGS
)(
p_gΩ
->
Fœgs
 & 
p_tcb
->
FœgsPíd
);

1157 i‡(
Êags_rdy
 =
p_tcb
->
FœgsPíd
) {

1158 
	`OS_FœgTaskRdy
(
p_tcb
,

1159 
Êags_rdy
,

1160 
ts
);

1164 
OS_OPT_PEND_FLAG_SET_ANY
:

1165 
Êags_rdy
 = (
OS_FLAGS
)(
p_gΩ
->
Fœgs
 & 
p_tcb
->
FœgsPíd
);

1166 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

1167 
	`OS_FœgTaskRdy
(
p_tcb
,

1168 
Êags_rdy
,

1169 
ts
);

1173 #i‡
OS_CFG_FLAG_MODE_CLR_EN
 > 0u

1174 
OS_OPT_PEND_FLAG_CLR_ALL
:

1175 
Êags_rdy
 = (
OS_FLAGS
)(~
p_gΩ
->
Fœgs
 & 
p_tcb
->
FœgsPíd
);

1176 i‡(
Êags_rdy
 =
p_tcb
->
FœgsPíd
) {

1177 
	`OS_FœgTaskRdy
(
p_tcb
,

1178 
Êags_rdy
,

1179 
ts
);

1183 
OS_OPT_PEND_FLAG_CLR_ANY
:

1184 
Êags_rdy
 = (
OS_FLAGS
)(~
p_gΩ
->
Fœgs
 & 
p_tcb
->
FœgsPíd
);

1185 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

1186 
	`OS_FœgTaskRdy
(
p_tcb
,

1187 
Êags_rdy
,

1188 
ts
);

1193 
	`OS_CRITICAL_EXIT
();

1194 *
p_îr
 = 
OS_ERR_FLAG_PEND_OPT
;

1195  ((
OS_FLAGS
)0);

1197 
p_≥nd_d©a
 = 
p_≥nd_d©a_√xt
;

1198 i‡(
p_≥nd_d©a
 !(
OS_PEND_DATA
 *)0) {

1199 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

1201 
p_tcb
 = (
OS_TCB
 *)0;

1204 
	`OS_CRITICAL_EXIT_NO_SCHED
();

1206 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

1207 
	`OSSched
();

1210 
	`CPU_CRITICAL_ENTER
();

1211 
Êags_cur
 = 
p_gΩ
->
Fœgs
;

1212 
	`CPU_CRITICAL_EXIT
();

1213 *
p_îr
 = 
OS_ERR_NONE
;

1214  (
Êags_cur
);

1215 
	}
}

1238 
	$OS_FœgTaskRdy
 (
OS_TCB
 *
p_tcb
,

1239 
OS_FLAGS
 
Êags_rdy
,

1240 
CPU_TS
 
ts
)

1242 
p_tcb
->
FœgsRdy
 = 
Êags_rdy
;

1243 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

1244 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

1245 
p_tcb
->
TS
 = 
ts
;

1246 
p_tcb
->
TaskSèã
) {

1247 
OS_TASK_STATE_RDY
:

1248 
OS_TASK_STATE_DLY
:

1249 
OS_TASK_STATE_DLY_SUSPENDED
:

1250 
OS_TASK_STATE_SUSPENDED
:

1253 
OS_TASK_STATE_PEND
:

1254 
OS_TASK_STATE_PEND_TIMEOUT
:

1255 
	`OS_TaskRdy
(
p_tcb
);

1256 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

1259 
OS_TASK_STATE_PEND_SUSPENDED
:

1260 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

1261 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

1267 
	`OS_PídLi°Remove
(
p_tcb
);

1268 
	}
}

	@UCOSIII/uCOS-III/Source/os_int.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_öt__c
 = "$Id: $";

41 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

91 
	$OS_I¡QPo°
 (
OS_OBJ_TYPE
 
ty≥
,

92 *
p_obj
,

93 *
p_void
,

94 
OS_MSG_SIZE
 
msg_size
,

95 
OS_FLAGS
 
Êags
,

96 
OS_OPT
 
›t
,

97 
CPU_TS
 
ts
,

98 
OS_ERR
 *
p_îr
)

100 
	`CPU_SR_ALLOC
();

104 #ifde‡
OS_SAFETY_CRITICAL


105 i‡(
p_îr
 =(
OS_ERR
 *)0) {

106 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

111 
	`CPU_CRITICAL_ENTER
();

112 i‡(
OSI¡QNbrE¡rõs
 < 
OSCfg_I¡QSize
) {

113 
OSI¡QNbrE¡rõs
++;

115 i‡(
OSI¡QNbrE¡rõsMax
 < 
OSI¡QNbrE¡rõs
) {

116 
OSI¡QNbrE¡rõsMax
 = 
OSI¡QNbrE¡rõs
;

119 
OSI¡QInPå
->
Ty≥
 = 
ty≥
;

120 
OSI¡QInPå
->
ObjPå
 = 
p_obj
;

121 
OSI¡QInPå
->
MsgPå
 = 
p_void
;

122 
OSI¡QInPå
->
MsgSize
 = 
msg_size
;

123 
OSI¡QInPå
->
Fœgs
 = 
Êags
;

124 
OSI¡QInPå
->
O±
 = 
›t
;

125 
OSI¡QInPå
->
TS
 = 
ts
;

127 
OSI¡QInPå
 = OSI¡QInPå->
NextPå
;

129 
OSRdyLi°
[0].
NbrE¡rõs
 = (
OS_OBJ_QTY
)1;

130 
OSRdyLi°
[0].
HódPå
 = &
OSI¡QTaskTCB
;

131 
OSRdyLi°
[0].
TaûPå
 = &
OSI¡QTaskTCB
;

132 
	`OS_PrioIn£π
(0u);

133 i‡(
OSPrioCur
 != 0) {

134 
OSPrioSaved
 = 
OSPrioCur
;

137 *
p_îr
 = 
OS_ERR_NONE
;

139 
OSI¡QOvfCå
++;

140 *
p_îr
 = 
OS_ERR_INT_Q_FULL
;

142 
	`CPU_CRITICAL_EXIT
();

143 
	}
}

159 
	$OS_I¡QRePo°
 ()

161 
CPU_TS
 
ts
;

162 
OS_ERR
 
îr
;

165 
OSI¡QOutPå
->
Ty≥
) {

166 
OS_OBJ_TYPE_FLAG
:

167 #i‡
OS_CFG_FLAG_EN
 > 0u

168 ()
	`OS_FœgPo°
((
OS_FLAG_GRP
 *Ë
OSI¡QOutPå
->
ObjPå
,

169 (
OS_FLAGS
 ) 
OSI¡QOutPå
->
Fœgs
,

170 (
OS_OPT
 ) 
OSI¡QOutPå
->
O±
,

171 (
CPU_TS
 ) 
OSI¡QOutPå
->
TS
,

172 (
OS_ERR
 *)&
îr
);

176 
OS_OBJ_TYPE_Q
:

177 #i‡
OS_CFG_Q_EN
 > 0u

178 
	`OS_QPo°
((
OS_Q
 *Ë
OSI¡QOutPå
->
ObjPå
,

179 (*Ë
OSI¡QOutPå
->
MsgPå
,

180 (
OS_MSG_SIZE
Ë
OSI¡QOutPå
->
MsgSize
,

181 (
OS_OPT
 ) 
OSI¡QOutPå
->
O±
,

182 (
CPU_TS
 ) 
OSI¡QOutPå
->
TS
,

183 (
OS_ERR
 *)&
îr
);

187 
OS_OBJ_TYPE_SEM
:

188 #i‡
OS_CFG_SEM_EN
 > 0u

189 ()
	`OS_SemPo°
((
OS_SEM
 *Ë
OSI¡QOutPå
->
ObjPå
,

190 (
OS_OPT
 ) 
OSI¡QOutPå
->
O±
,

191 (
CPU_TS
 ) 
OSI¡QOutPå
->
TS
,

192 (
OS_ERR
 *)&
îr
);

196 
OS_OBJ_TYPE_TASK_MSG
:

197 #i‡
OS_CFG_TASK_Q_EN
 > 0u

198 
	`OS_TaskQPo°
((
OS_TCB
 *Ë
OSI¡QOutPå
->
ObjPå
,

199 (*Ë
OSI¡QOutPå
->
MsgPå
,

200 (
OS_MSG_SIZE
Ë
OSI¡QOutPå
->
MsgSize
,

201 (
OS_OPT
 ) 
OSI¡QOutPå
->
O±
,

202 (
CPU_TS
 ) 
OSI¡QOutPå
->
TS
,

203 (
OS_ERR
 *)&
îr
);

207 
OS_OBJ_TYPE_TASK_RESUME
:

208 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

209 ()
	`OS_TaskResume
((
OS_TCB
 *Ë
OSI¡QOutPå
->
ObjPå
,

210 (
OS_ERR
 *)&
îr
);

214 
OS_OBJ_TYPE_TASK_SIGNAL
:

215 ()
	`OS_TaskSemPo°
((
OS_TCB
 *Ë
OSI¡QOutPå
->
ObjPå
,

216 (
OS_OPT
 ) 
OSI¡QOutPå
->
O±
,

217 (
CPU_TS
 ) 
OSI¡QOutPå
->
TS
,

218 (
OS_ERR
 *)&
îr
);

221 
OS_OBJ_TYPE_TASK_SUSPEND
:

222 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

223 ()
	`OS_TaskSu•íd
((
OS_TCB
 *Ë
OSI¡QOutPå
->
ObjPå
,

224 (
OS_ERR
 *)&
îr
);

228 
OS_OBJ_TYPE_TICK
:

229 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

230 
	`OS_SchedRoundRobö
(&
OSRdyLi°
[
OSPrioSaved
]);

233 ()
	`OS_TaskSemPo°
((
OS_TCB
 *)&
OSTickTaskTCB
,

234 (
OS_OPT
 ) 
OS_OPT_POST_NONE
,

235 (
CPU_TS
 ) 
OSI¡QOutPå
->
TS
,

236 (
OS_ERR
 *)&
îr
);

237 #i‡
OS_CFG_TMR_EN
 > 0u

238 
OSTmrUpd©eCå
--;

239 i‡(
OSTmrUpd©eCå
 =(
OS_CTR
)0u) {

240 
OSTmrUpd©eCå
 = 
OSTmrUpd©eC¡
;

241 
ts
 = 
	`OS_TS_GET
();

242 ()
	`OS_TaskSemPo°
((
OS_TCB
 *)&
OSTmrTaskTCB
,

243 (
OS_OPT
 ) 
OS_OPT_POST_NONE
,

244 (
CPU_TS
 ) 
ts
,

245 (
OS_ERR
 *)&
îr
);

253 
	}
}

269 
	$OS_I¡QTask
 (*
p_¨g
)

271 
CPU_BOOLEAN
 
d⁄e
;

272 
CPU_TS
 
ts_°¨t
;

273 
CPU_TS
 
ts_íd
;

274 
	`CPU_SR_ALLOC
();

278 
p_¨g
 =Ö_arg;

279 
DEF_ON
) {

280 
d⁄e
 = 
DEF_FALSE
;

281 
d⁄e
 =
DEF_FALSE
) {

282 
	`CPU_CRITICAL_ENTER
();

283 i‡(
OSI¡QNbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

284 
OSRdyLi°
[0].
NbrE¡rõs
 = (
OS_OBJ_QTY
)0u;

285 
OSRdyLi°
[0].
HódPå
 = (
OS_TCB
 *)0;

286 
OSRdyLi°
[0].
TaûPå
 = (
OS_TCB
 *)0;

287 
	`OS_PrioRemove
(0u);

288 
	`CPU_CRITICAL_EXIT
();

289 
	`OSSched
();

290 
d⁄e
 = 
DEF_TRUE
;

292 
	`CPU_CRITICAL_EXIT
();

293 
ts_°¨t
 = 
	`OS_TS_GET
();

294 
	`OS_I¡QRePo°
();

295 
ts_íd
 = 
	`OS_TS_GET
(Ë- 
ts_°¨t
;

296 i‡(
OSI¡QTaskTimeMax
 < 
ts_íd
) {

297 
OSI¡QTaskTimeMax
 = 
ts_íd
;

299 
	`CPU_CRITICAL_ENTER
();

300 
OSI¡QOutPå
 = OSI¡QOutPå->
NextPå
;

301 
OSI¡QNbrE¡rõs
--;

302 
	`CPU_CRITICAL_EXIT
();

306 
	}
}

331 
	$OS_I¡QTaskInô
 (
OS_ERR
 *
p_îr
)

333 
OS_INT_Q
 *
p_öt_q
;

334 
OS_INT_Q
 *
p_öt_q_√xt
;

335 
OS_OBJ_QTY
 
i
;

339 #ifde‡
OS_SAFETY_CRITICAL


340 i‡(
p_îr
 =(
OS_ERR
 *)0) {

341 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

346 
OSI¡QOvfCå
 = (
OS_QTY
)0u;

348 i‡(
OSCfg_I¡QBa£På
 =(
OS_INT_Q
 *)0) {

349 *
p_îr
 = 
OS_ERR_INT_Q
;

353 i‡(
OSCfg_I¡QSize
 < (
OS_OBJ_QTY
)2u) {

354 *
p_îr
 = 
OS_ERR_INT_Q_SIZE
;

358 
OSI¡QTaskTimeMax
 = (
CPU_TS
)0;

360 
p_öt_q
 = 
OSCfg_I¡QBa£På
;

361 
p_öt_q_√xt
 = 
p_öt_q
;

362 
p_öt_q_√xt
++;

363 
i
 = 0u; i < 
OSCfg_I¡QSize
; i++) {

364 
p_öt_q
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

365 
p_öt_q
->
ObjPå
 = (*)0;

366 
p_öt_q
->
MsgPå
 = (*)0;

367 
p_öt_q
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

368 
p_öt_q
->
Fœgs
 = (
OS_FLAGS
 )0u;

369 
p_öt_q
->
O±
 = (
OS_OPT
 )0u;

370 
p_öt_q
->
NextPå
 = 
p_öt_q_√xt
;

371 
p_öt_q
++;

372 
p_öt_q_√xt
++;

374 
p_öt_q
--;

375 
p_öt_q_√xt
 = 
OSCfg_I¡QBa£På
;

376 
p_öt_q
->
NextPå
 = 
p_öt_q_√xt
;

377 
OSI¡QInPå
 = 
p_öt_q_√xt
;

378 
OSI¡QOutPå
 = 
p_öt_q_√xt
;

379 
OSI¡QNbrE¡rõs
 = (
OS_OBJ_QTY
)0u;

380 
OSI¡QNbrE¡rõsMax
 = (
OS_OBJ_QTY
)0u;

383 i‡(
OSCfg_I¡QTaskStkBa£På
 =(
CPU_STK
 *)0) {

384 *
p_îr
 = 
OS_ERR_INT_Q_STK_INVALID
;

388 i‡(
OSCfg_I¡QTaskStkSize
 < 
OSCfg_StkSizeMö
) {

389 *
p_îr
 = 
OS_ERR_INT_Q_STK_SIZE_INVALID
;

393 
	`OSTaskCª©e
((
OS_TCB
 *)&
OSI¡QTaskTCB
,

394 (
CPU_CHAR
 *)((*)"uC/OS-III ISR Queue Task"),

395 (
OS_TASK_PTR
 )
OS_I¡QTask
,

397 (
OS_PRIO
 )0u,

398 (
CPU_STK
 *)
OSCfg_I¡QTaskStkBa£På
,

399 (
CPU_STK_SIZE
)
OSCfg_I¡QTaskStkLimô
,

400 (
CPU_STK_SIZE
)
OSCfg_I¡QTaskStkSize
,

401 (
OS_MSG_QTY
 )0u,

402 (
OS_TICK
 )0u,

404 (
OS_OPT
 )(
OS_OPT_TASK_STK_CHK
 | 
OS_OPT_TASK_STK_CLR
),

405 (
OS_ERR
 *)
p_îr
);

406 
	}
}

	@UCOSIII/uCOS-III/Source/os_mem.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_mem__c
 = "$Id: $";

41 #i‡
OS_CFG_MEM_EN
 > 0u

75 
	$OSMemCª©e
 (
OS_MEM
 *
p_mem
,

76 
CPU_CHAR
 *
p_«me
,

77 *
p_addr
,

78 
OS_MEM_QTY
 
n_blks
,

79 
OS_MEM_SIZE
 
blk_size
,

80 
OS_ERR
 *
p_îr
)

82 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

83 
CPU_DATA
 
Æign_msk
;

85 
OS_MEM_QTY
 
i
;

86 
OS_MEM_QTY
 
lo›s
;

87 
CPU_INT08U
 *
p_blk
;

88 **
p_lök
;

89 
	`CPU_SR_ALLOC
();

93 #ifde‡
OS_SAFETY_CRITICAL


94 i‡(
p_îr
 =(
OS_ERR
 *)0) {

95 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

100 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


101 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

102 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

107 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

108 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

109 *
p_îr
 = 
OS_ERR_MEM_CREATE_ISR
;

114 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

115 i‡(
p_addr
 == (*)0) {

116 *
p_îr
 = 
OS_ERR_MEM_INVALID_P_ADDR
;

119 i‡(
n_blks
 < (
OS_MEM_QTY
)2) {

120 *
p_îr
 = 
OS_ERR_MEM_INVALID_BLKS
;

123 i‡(
blk_size
 < (*)) {

124 *
p_îr
 = 
OS_ERR_MEM_INVALID_SIZE
;

127 
Æign_msk
 = (*) - 1u;

128 i‡(
Æign_msk
 > 0) {

129 i‡(((
CPU_ADDR
)
p_addr
 & 
Æign_msk
) != 0u){

130 *
p_îr
 = 
OS_ERR_MEM_INVALID_P_ADDR
;

133 i‡((
blk_size
 & 
Æign_msk
) != 0u) {

134 *
p_îr
 = 
OS_ERR_MEM_INVALID_SIZE
;

140 
p_lök
 = (**)
p_addr
;

141 
p_blk
 = (
CPU_INT08U
 *)
p_addr
;

142 
lo›s
 = 
n_blks
 - 1u;

143 
i
 = 0u; i < 
lo›s
; i++) {

144 
p_blk
 +
blk_size
;

145 *
p_lök
 = (*)
p_blk
;

146 
p_lök
 = (**)(*)
p_blk
;

148 *
p_lök
 = (*)0;

150 
	`OS_CRITICAL_ENTER
();

151 
p_mem
->
Ty≥
 = 
OS_OBJ_TYPE_MEM
;

152 
p_mem
->
NamePå
 = 
p_«me
;

153 
p_mem
->
AddrPå
 = 
p_addr
;

154 
p_mem
->
FªeLi°På
 = 
p_addr
;

155 
p_mem
->
NbrFªe
 = 
n_blks
;

156 
p_mem
->
NbrMax
 = 
n_blks
;

157 
p_mem
->
BlkSize
 = 
blk_size
;

159 #i‡
OS_CFG_DBG_EN
 > 0u

160 
	`OS_MemDbgLi°Add
(
p_mem
);

163 
OSMemQty
++;

165 
	`OS_CRITICAL_EXIT_NO_SCHED
();

166 *
p_îr
 = 
OS_ERR_NONE
;

167 
	}
}

190 *
	$OSMemGë
 (
OS_MEM
 *
p_mem
,

191 
OS_ERR
 *
p_îr
)

193 *
p_blk
;

194 
	`CPU_SR_ALLOC
();

198 #ifde‡
OS_SAFETY_CRITICAL


199 i‡(
p_îr
 =(
OS_ERR
 *)0) {

200 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

205 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

206 i‡(
p_mem
 =(
OS_MEM
 *)0) {

207 *
p_îr
 = 
OS_ERR_MEM_INVALID_P_MEM
;

212 
	`CPU_CRITICAL_ENTER
();

213 i‡(
p_mem
->
NbrFªe
 =(
OS_MEM_QTY
)0) {

214 
	`CPU_CRITICAL_EXIT
();

215 *
p_îr
 = 
OS_ERR_MEM_NO_FREE_BLKS
;

218 
p_blk
 = 
p_mem
->
FªeLi°På
;

219 
p_mem
->
FªeLi°På
 = *(**)
p_blk
;

220 
p_mem
->
NbrFªe
--;

221 
	`CPU_CRITICAL_EXIT
();

222 *
p_îr
 = 
OS_ERR_NONE
;

223  (
p_blk
);

224 
	}
}

247 
	$OSMemPut
 (
OS_MEM
 *
p_mem
,

248 *
p_blk
,

249 
OS_ERR
 *
p_îr
)

251 
	`CPU_SR_ALLOC
();

255 #ifde‡
OS_SAFETY_CRITICAL


256 i‡(
p_îr
 =(
OS_ERR
 *)0) {

257 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

262 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

263 i‡(
p_mem
 =(
OS_MEM
 *)0) {

264 *
p_îr
 = 
OS_ERR_MEM_INVALID_P_MEM
;

267 i‡(
p_blk
 == (*)0) {

268 *
p_îr
 = 
OS_ERR_MEM_INVALID_P_BLK
;

273 
	`CPU_CRITICAL_ENTER
();

274 i‡(
p_mem
->
NbrFªe
 >p_mem->
NbrMax
) {

275 
	`CPU_CRITICAL_EXIT
();

276 *
p_îr
 = 
OS_ERR_MEM_FULL
;

279 *(**)
p_blk
 = 
p_mem
->
FªeLi°På
;

280 
p_mem
->
FªeLi°På
 = 
p_blk
;

281 
p_mem
->
NbrFªe
++;

282 
	`CPU_CRITICAL_EXIT
();

283 *
p_îr
 = 
OS_ERR_NONE
;

284 
	}
}

301 #i‡
OS_CFG_DBG_EN
 > 0u

302 
	$OS_MemDbgLi°Add
 (
OS_MEM
 *
p_mem
)

304 
p_mem
->
DbgPªvPå
 = (
OS_MEM
 *)0;

305 i‡(
OSMemDbgLi°På
 =(
OS_MEM
 *)0) {

306 
p_mem
->
DbgNextPå
 = (
OS_MEM
 *)0;

308 
p_mem
->
DbgNextPå
 = 
OSMemDbgLi°På
;

309 
OSMemDbgLi°På
->
DbgPªvPå
 = 
p_mem
;

311 
OSMemDbgLi°På
 = 
p_mem
;

312 
	}
}

331 
	$OS_MemInô
 (
OS_ERR
 *
p_îr
)

333 #ifde‡
OS_SAFETY_CRITICAL


334 i‡(
p_îr
 =(
OS_ERR
 *)0) {

335 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

340 #i‡
OS_CFG_DBG_EN
 > 0u

341 
OSMemDbgLi°På
 = (
OS_MEM
 *)0;

344 
OSMemQty
 = (
OS_OBJ_QTY
)0;

345 *
p_îr
 = 
OS_ERR_NONE
;

346 
	}
}

	@UCOSIII/uCOS-III/Source/os_msg.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_msg__c
 = "$Id: $";

41 #i‡
OS_MSG_EN
 > 0u

62 
	$OS_MsgPoﬁCª©e
 (
OS_MSG
 *
p_msg
,

63 
OS_MSG_QTY
 
size
)

65 
OS_MSG
 *
p_msg1
;

66 
OS_MSG
 *
p_msg2
;

67 
OS_MSG_QTY
 
i
;

68 
OS_MSG_QTY
 
lo›s
;

72 
p_msg1
 = 
p_msg
;

73 
p_msg2
 = 
p_msg
;

74 
p_msg2
++;

75 
lo›s
 = 
size
 - 1u;

76 
i
 = 0u; i < 
lo›s
; i++) {

77 
p_msg1
->
NextPå
 = 
p_msg2
;

78 
p_msg1
->
MsgPå
 = (*)0;

79 
p_msg1
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

80 
p_msg1
->
MsgTS
 = (
CPU_TS
 )0u;

81 
p_msg1
++;

82 
p_msg2
++;

84 
p_msg1
->
NextPå
 = (
OS_MSG
 *)0;

85 
p_msg1
->
MsgPå
 = (*)0;

86 
p_msg1
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

87 
p_msg1
->
MsgTS
 = (
CPU_TS
 )0u;

88 
	}
}

109 
	$OS_MsgPoﬁInô
 (
OS_ERR
 *
p_îr
)

111 #ifde‡
OS_SAFETY_CRITICAL


112 i‡(
p_îr
 =(
OS_ERR
 *)0) {

113 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

118 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

119 i‡(
OSCfg_MsgPoﬁBa£På
 =(
OS_MSG
 *)0) {

120 *
p_îr
 = 
OS_ERR_MSG_POOL_NULL_PTR
;

123 i‡(
OSCfg_MsgPoﬁSize
 =(
OS_MSG_QTY
)0) {

124 *
p_îr
 = 
OS_ERR_MSG_POOL_EMPTY
;

129 
	`OS_MsgPoﬁCª©e
(
OSCfg_MsgPoﬁBa£På
,

130 
OSCfg_MsgPoﬁSize
);

131 
OSMsgPoﬁ
.
NextPå
 = 
OSCfg_MsgPoﬁBa£På
;

132 
OSMsgPoﬁ
.
NbrFªe
 = 
OSCfg_MsgPoﬁSize
;

133 
OSMsgPoﬁ
.
NbrU£d
 = (
OS_MSG_QTY
)0;

134 
OSMsgPoﬁ
.
NbrU£dMax
 = (
OS_MSG_QTY
)0;

135 *
p_îr
 = 
OS_ERR_NONE
;

136 
	}
}

154 
OS_MSG_QTY
 
	$OS_MsgQFªeAŒ
 (
OS_MSG_Q
 *
p_msg_q
)

156 
OS_MSG
 *
p_msg
;

157 
OS_MSG_QTY
 
qty
;

161 
qty
 = 
p_msg_q
->
NbrE¡rõs
;

162 i‡(
p_msg_q
->
NbrE¡rõs
 > (
OS_MSG_QTY
)0) {

163 
p_msg
 = 
p_msg_q
->
InPå
;

164 
p_msg
->
NextPå
 = 
OSMsgPoﬁ
.NextPtr;

165 
OSMsgPoﬁ
.
NextPå
 = 
p_msg_q
->
OutPå
;

166 
OSMsgPoﬁ
.
NbrU£d
 -
p_msg_q
->
NbrE¡rõs
;

167 
OSMsgPoﬁ
.
NbrFªe
 +
p_msg_q
->
NbrE¡rõs
;

168 
p_msg_q
->
NbrE¡rõs
 = (
OS_MSG_QTY
)0;

169 
p_msg_q
->
NbrE¡rõsMax
 = (
OS_MSG_QTY
)0;

170 
p_msg_q
->
InPå
 = (
OS_MSG
 *)0;

171 
p_msg_q
->
OutPå
 = (
OS_MSG
 *)0;

173  (
qty
);

174 
	}
}

194 
	$OS_MsgQInô
 (
OS_MSG_Q
 *
p_msg_q
,

195 
OS_MSG_QTY
 
size
)

197 
p_msg_q
->
NbrE¡rõsSize
 = (
OS_MSG_QTY
)
size
;

198 
p_msg_q
->
NbrE¡rõs
 = (
OS_MSG_QTY
)0;

199 
p_msg_q
->
NbrE¡rõsMax
 = (
OS_MSG_QTY
)0;

200 
p_msg_q
->
InPå
 = (
OS_MSG
 *)0;

201 
p_msg_q
->
OutPå
 = (
OS_MSG
 *)0;

202 
	}
}

229 *
	$OS_MsgQGë
 (
OS_MSG_Q
 *
p_msg_q
,

230 
OS_MSG_SIZE
 *
p_msg_size
,

231 
CPU_TS
 *
p_ts
,

232 
OS_ERR
 *
p_îr
)

234 
OS_MSG
 *
p_msg
;

235 *
p_void
;

239 #ifde‡
OS_SAFETY_CRITICAL


240 i‡(
p_îr
 =(
OS_ERR
 *)0) {

241 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

246 i‡(
p_msg_q
->
NbrE¡rõs
 =(
OS_MSG_QTY
)0) {

247 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

248 i‡(
p_ts
 !(
CPU_TS
 *)0) {

249 *
p_ts
 = (
CPU_TS
 )0;

251 *
p_îr
 = 
OS_ERR_Q_EMPTY
;

255 
p_msg
 = 
p_msg_q
->
OutPå
;

256 
p_void
 = 
p_msg
->
MsgPå
;

257 *
p_msg_size
 = 
p_msg
->
MsgSize
;

258 i‡(
p_ts
 !(
CPU_TS
 *)0) {

259 *
p_ts
 = 
p_msg
->
MsgTS
;

261 
p_msg_q
->
OutPå
 = 
p_msg
->
NextPå
;

262 i‡(
p_msg_q
->
OutPå
 =(
OS_MSG
 *)0) {

263 
p_msg_q
->
InPå
 = (
OS_MSG
 *)0;

264 
p_msg_q
->
NbrE¡rõs
 = (
OS_MSG_QTY
)0;

266 
p_msg_q
->
NbrE¡rõs
--;

268 
p_msg
->
NextPå
 = 
OSMsgPoﬁ
.NextPtr;

269 
OSMsgPoﬁ
.
NextPå
 = 
p_msg
;

270 
OSMsgPoﬁ
.
NbrFªe
++;

271 
OSMsgPoﬁ
.
NbrU£d
--;

272 *
p_îr
 = 
OS_ERR_NONE
;

273  (
p_void
);

274 
	}
}

309 
	$OS_MsgQPut
 (
OS_MSG_Q
 *
p_msg_q
,

310 *
p_void
,

311 
OS_MSG_SIZE
 
msg_size
,

312 
OS_OPT
 
›t
,

313 
CPU_TS
 
ts
,

314 
OS_ERR
 *
p_îr
)

316 
OS_MSG
 *
p_msg
;

317 
OS_MSG
 *
p_msg_ö
;

321 #ifde‡
OS_SAFETY_CRITICAL


322 i‡(
p_îr
 =(
OS_ERR
 *)0) {

323 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

328 i‡(
p_msg_q
->
NbrE¡rõs
 >p_msg_q->
NbrE¡rõsSize
) {

329 *
p_îr
 = 
OS_ERR_Q_MAX
;

333 i‡(
OSMsgPoﬁ
.
NbrFªe
 =(
OS_MSG_QTY
)0) {

334 *
p_îr
 = 
OS_ERR_MSG_POOL_EMPTY
;

338 
p_msg
 = 
OSMsgPoﬁ
.
NextPå
;

339 
OSMsgPoﬁ
.
NextPå
 = 
p_msg
->NextPtr;

340 
OSMsgPoﬁ
.
NbrFªe
--;

341 
OSMsgPoﬁ
.
NbrU£d
++;

342 i‡(
OSMsgPoﬁ
.
NbrU£dMax
 < OSMsgPoﬁ.
NbrU£d
) {

343 
OSMsgPoﬁ
.
NbrU£dMax
 = OSMsgPoﬁ.
NbrU£d
;

345 i‡(
p_msg_q
->
NbrE¡rõs
 =(
OS_MSG_QTY
)0) {

346 
p_msg_q
->
InPå
 = 
p_msg
;

347 
p_msg_q
->
OutPå
 = 
p_msg
;

348 
p_msg_q
->
NbrE¡rõs
 = (
OS_MSG_QTY
)1;

350 i‡((
›t
 & 
OS_OPT_POST_LIFO
Ë=
OS_OPT_POST_FIFO
) {

351 
p_msg_ö
 = 
p_msg_q
->
InPå
;

352 
p_msg_ö
->
NextPå
 = 
p_msg
;

353 
p_msg
->
NextPå
 = (
OS_MSG
 *)0;

354 
p_msg_q
->
InPå
 = 
p_msg
;

356 
p_msg
->
NextPå
 = 
p_msg_q
->
OutPå
;

357 
p_msg_q
->
OutPå
 = 
p_msg
;

359 
p_msg_q
->
NbrE¡rõs
++;

361 i‡(
p_msg_q
->
NbrE¡rõsMax
 <Ö_msg_q->
NbrE¡rõs
) {

362 
p_msg_q
->
NbrE¡rõsMax
 =Ö_msg_q->
NbrE¡rõs
;

364 
p_msg
->
MsgPå
 = 
p_void
;

365 
p_msg
->
MsgSize
 = 
msg_size
;

366 
p_msg
->
MsgTS
 = 
ts
;

367 *
p_îr
 = 
OS_ERR_NONE
;

368 
	}
}

	@UCOSIII/uCOS-III/Source/os_mutex.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_muãx__c
 = "$Id: $";

41 #i‡
OS_CFG_MUTEX_EN
 > 0u

67 
	$OSMuãxCª©e
 (
OS_MUTEX
 *
p_muãx
,

68 
CPU_CHAR
 *
p_«me
,

69 
OS_ERR
 *
p_îr
)

71 
	`CPU_SR_ALLOC
();

75 #ifde‡
OS_SAFETY_CRITICAL


76 i‡(
p_îr
 =(
OS_ERR
 *)0) {

77 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

82 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


83 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

84 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

89 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

90 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

91 *
p_îr
 = 
OS_ERR_CREATE_ISR
;

96 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

97 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

98 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

103 
	`OS_CRITICAL_ENTER
();

104 
p_muãx
->
Ty≥
 = 
OS_OBJ_TYPE_MUTEX
;

105 
p_muãx
->
NamePå
 = 
p_«me
;

106 
p_muãx
->
Ow√rTCBPå
 = (
OS_TCB
 *)0;

107 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)0;

108 
p_muãx
->
TS
 = (
CPU_TS
 )0;

109 
p_muãx
->
Ow√rOrigöÆPrio
 = 
OS_CFG_PRIO_MAX
;

110 
	`OS_PídLi°Inô
(&
p_muãx
->
PídLi°
);

112 #i‡
OS_CFG_DBG_EN
 > 0u

113 
	`OS_MuãxDbgLi°Add
(
p_muãx
);

115 
OSMuãxQty
++;

117 
	`OS_CRITICAL_EXIT_NO_SCHED
();

118 *
p_îr
 = 
OS_ERR_NONE
;

119 
	}
}

159 #i‡
OS_CFG_MUTEX_DEL_EN
 > 0u

160 
OS_OBJ_QTY
 
	$OSMuãxDñ
 (
OS_MUTEX
 *
p_muãx
,

161 
OS_OPT
 
›t
,

162 
OS_ERR
 *
p_îr
)

164 
OS_OBJ_QTY
 
˙t
;

165 
OS_OBJ_QTY
 
nbr_èsks
;

166 
OS_PEND_DATA
 *
p_≥nd_d©a
;

167 
OS_PEND_LIST
 *
p_≥nd_li°
;

168 
OS_TCB
 *
p_tcb
;

169 
OS_TCB
 *
p_tcb_ow√r
;

170 
CPU_TS
 
ts
;

171 
	`CPU_SR_ALLOC
();

175 #ifde‡
OS_SAFETY_CRITICAL


176 i‡(
p_îr
 =(
OS_ERR
 *)0) {

177 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

178  ((
OS_OBJ_QTY
)0);

182 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

183 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

184 *
p_îr
 = 
OS_ERR_DEL_ISR
;

185  ((
OS_OBJ_QTY
)0);

189 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

190 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

191 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

192  ((
OS_OBJ_QTY
)0);

194 
›t
) {

195 
OS_OPT_DEL_NO_PEND
:

196 
OS_OPT_DEL_ALWAYS
:

200 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

201  ((
OS_OBJ_QTY
)0);

205 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

206 i‡(
p_muãx
->
Ty≥
 !
OS_OBJ_TYPE_MUTEX
) {

207 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

208  ((
OS_OBJ_QTY
)0);

212 
	`OS_CRITICAL_ENTER
();

213 
p_≥nd_li°
 = &
p_muãx
->
PídLi°
;

214 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

215 
nbr_èsks
 = 
˙t
;

216 
›t
) {

217 
OS_OPT_DEL_NO_PEND
:

218 i‡(
nbr_èsks
 =(
OS_OBJ_QTY
)0) {

219 #i‡
OS_CFG_DBG_EN
 > 0u

220 
	`OS_MuãxDbgLi°Remove
(
p_muãx
);

222 
OSMuãxQty
--;

223 
	`OS_MuãxCÃ
(
p_muãx
);

224 
	`OS_CRITICAL_EXIT
();

225 *
p_îr
 = 
OS_ERR_NONE
;

227 
	`OS_CRITICAL_EXIT
();

228 *
p_îr
 = 
OS_ERR_TASK_WAITING
;

232 
OS_OPT_DEL_ALWAYS
:

233 
p_tcb_ow√r
 = 
p_muãx
->
Ow√rTCBPå
;

234 i‡((
p_tcb_ow√r
 !(
OS_TCB
 *)0) &&

235 (
p_tcb_ow√r
->
Prio
 !
p_muãx
->
Ow√rOrigöÆPrio
)) {

236 
p_tcb_ow√r
->
TaskSèã
) {

237 
OS_TASK_STATE_RDY
:

238 
	`OS_RdyLi°Remove
(
p_tcb_ow√r
);

239 
p_tcb_ow√r
->
Prio
 = 
p_muãx
->
Ow√rOrigöÆPrio
;

240 
	`OS_PrioIn£π
(
p_tcb_ow√r
->
Prio
);

241 
	`OS_RdyLi°In£πTaû
(
p_tcb_ow√r
);

244 
OS_TASK_STATE_DLY
:

245 
OS_TASK_STATE_SUSPENDED
:

246 
OS_TASK_STATE_DLY_SUSPENDED
:

247 
p_tcb_ow√r
->
Prio
 = 
p_muãx
->
Ow√rOrigöÆPrio
;

250 
OS_TASK_STATE_PEND
:

251 
OS_TASK_STATE_PEND_TIMEOUT
:

252 
OS_TASK_STATE_PEND_SUSPENDED
:

253 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

254 
	`OS_PídLi°Ch™gePrio
(
p_tcb_ow√r
,

255 
p_muãx
->
Ow√rOrigöÆPrio
);

259 
	`OS_CRITICAL_EXIT
();

260 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

261  ((
OS_OBJ_QTY
)0);

265 
ts
 = 
	`OS_TS_GET
();

266 
˙t
 > 0u) {

267 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

268 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

269 
	`OS_PídObjDñ
((
OS_PEND_OBJ
 *)((*)
p_muãx
),

270 
p_tcb
,

271 
ts
);

272 
˙t
--;

274 #i‡
OS_CFG_DBG_EN
 > 0u

275 
	`OS_MuãxDbgLi°Remove
(
p_muãx
);

277 
OSMuãxQty
--;

278 
	`OS_MuãxCÃ
(
p_muãx
);

279 
	`OS_CRITICAL_EXIT_NO_SCHED
();

280 
	`OSSched
();

281 *
p_îr
 = 
OS_ERR_NONE
;

285 
	`OS_CRITICAL_EXIT
();

286 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

289  (
nbr_èsks
);

290 
	}
}

339 
	$OSMuãxPíd
 (
OS_MUTEX
 *
p_muãx
,

340 
OS_TICK
 
timeout
,

341 
OS_OPT
 
›t
,

342 
CPU_TS
 *
p_ts
,

343 
OS_ERR
 *
p_îr
)

345 
OS_PEND_DATA
 
≥nd_d©a
;

346 
OS_TCB
 *
p_tcb
;

347 
	`CPU_SR_ALLOC
();

351 #ifde‡
OS_SAFETY_CRITICAL


352 i‡(
p_îr
 =(
OS_ERR
 *)0) {

353 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

358 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

359 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

360 *
p_îr
 = 
OS_ERR_PEND_ISR
;

365 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

366 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

367 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

370 
›t
) {

371 
OS_OPT_PEND_BLOCKING
:

372 
OS_OPT_PEND_NON_BLOCKING
:

376 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

381 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

382 i‡(
p_muãx
->
Ty≥
 !
OS_OBJ_TYPE_MUTEX
) {

383 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

388 i‡(
p_ts
 !(
CPU_TS
 *)0) {

389 *
p_ts
 = (
CPU_TS
 )0;

392 
	`CPU_CRITICAL_ENTER
();

393 i‡(
p_muãx
->
Ow√rNe°ögCå
 =(
OS_NESTING_CTR
)0) {

394 
p_muãx
->
Ow√rTCBPå
 = 
OSTCBCurPå
;

395 
p_muãx
->
Ow√rOrigöÆPrio
 = 
OSTCBCurPå
->
Prio
;

396 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)1;

397 i‡(
p_ts
 !(
CPU_TS
 *)0) {

398 *
p_ts
 = 
p_muãx
->
TS
;

400 
	`CPU_CRITICAL_EXIT
();

401 *
p_îr
 = 
OS_ERR_NONE
;

405 i‡(
OSTCBCurPå
 =
p_muãx
->
Ow√rTCBPå
) {

406 
p_muãx
->
Ow√rNe°ögCå
++;

407 i‡(
p_ts
 !(
CPU_TS
 *)0) {

408 *
p_ts
 = 
p_muãx
->
TS
;

410 
	`CPU_CRITICAL_EXIT
();

411 *
p_îr
 = 
OS_ERR_MUTEX_OWNER
;

415 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

416 
	`CPU_CRITICAL_EXIT
();

417 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

420 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

421 
	`CPU_CRITICAL_EXIT
();

422 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

427 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

428 
p_tcb
 = 
p_muãx
->
Ow√rTCBPå
;

429 i‡(
p_tcb
->
Prio
 > 
OSTCBCurPå
->Prio) {

430 
p_tcb
->
TaskSèã
) {

431 
OS_TASK_STATE_RDY
:

432 
	`OS_RdyLi°Remove
(
p_tcb
);

433 
p_tcb
->
Prio
 = 
OSTCBCurPå
->Prio;

434 
	`OS_PrioIn£π
(
p_tcb
->
Prio
);

435 
	`OS_RdyLi°In£πHód
(
p_tcb
);

438 
OS_TASK_STATE_DLY
:

439 
OS_TASK_STATE_DLY_SUSPENDED
:

440 
OS_TASK_STATE_SUSPENDED
:

441 
p_tcb
->
Prio
 = 
OSTCBCurPå
->Prio;

444 
OS_TASK_STATE_PEND
:

445 
OS_TASK_STATE_PEND_TIMEOUT
:

446 
OS_TASK_STATE_PEND_SUSPENDED
:

447 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

448 
	`OS_PídLi°Ch™gePrio
(
p_tcb
,

449 
OSTCBCurPå
->
Prio
);

453 
	`OS_CRITICAL_EXIT
();

454 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

459 
	`OS_Píd
(&
≥nd_d©a
,

460 (
OS_PEND_OBJ
 *)((*)
p_muãx
),

461 
OS_TASK_PEND_ON_MUTEX
,

462 
timeout
);

464 
	`OS_CRITICAL_EXIT_NO_SCHED
();

466 
	`OSSched
();

468 
	`CPU_CRITICAL_ENTER
();

469 
OSTCBCurPå
->
PídSètus
) {

470 
OS_STATUS_PEND_OK
:

471 i‡(
p_ts
 !(
CPU_TS
 *)0) {

472 *
p_ts
 = 
OSTCBCurPå
->
TS
;

474 *
p_îr
 = 
OS_ERR_NONE
;

477 
OS_STATUS_PEND_ABORT
:

478 i‡(
p_ts
 !(
CPU_TS
 *)0) {

479 *
p_ts
 = 
OSTCBCurPå
->
TS
;

481 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

484 
OS_STATUS_PEND_TIMEOUT
:

485 i‡(
p_ts
 !(
CPU_TS
 *)0) {

486 *
p_ts
 = (
CPU_TS
 )0;

488 *
p_îr
 = 
OS_ERR_TIMEOUT
;

491 
OS_STATUS_PEND_DEL
:

492 i‡(
p_ts
 !(
CPU_TS
 *)0) {

493 *
p_ts
 = 
OSTCBCurPå
->
TS
;

495 *
p_îr
 = 
OS_ERR_OBJ_DEL
;

499 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

502 
	`CPU_CRITICAL_EXIT
();

503 
	}
}

537 #i‡
OS_CFG_MUTEX_PEND_ABORT_EN
 > 0u

538 
OS_OBJ_QTY
 
	$OSMuãxPídAb‹t
 (
OS_MUTEX
 *
p_muãx
,

539 
OS_OPT
 
›t
,

540 
OS_ERR
 *
p_îr
)

542 
OS_PEND_LIST
 *
p_≥nd_li°
;

543 
OS_TCB
 *
p_tcb
;

544 
CPU_TS
 
ts
;

545 
OS_OBJ_QTY
 
nbr_èsks
;

546 
	`CPU_SR_ALLOC
();

550 #ifde‡
OS_SAFETY_CRITICAL


551 i‡(
p_îr
 =(
OS_ERR
 *)0) {

552 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

553  ((
OS_OBJ_QTY
)0u);

557 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

558 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

559 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

560  ((
OS_OBJ_QTY
)0u);

564 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

565 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

566 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

567  ((
OS_OBJ_QTY
)0u);

569 
›t
) {

570 
OS_OPT_PEND_ABORT_1
:

571 
OS_OPT_PEND_ABORT_ALL
:

572 
OS_OPT_PEND_ABORT_1
 | 
OS_OPT_POST_NO_SCHED
:

573 
OS_OPT_PEND_ABORT_ALL
 | 
OS_OPT_POST_NO_SCHED
:

577 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

578  ((
OS_OBJ_QTY
)0u);

582 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

583 i‡(
p_muãx
->
Ty≥
 !
OS_OBJ_TYPE_MUTEX
) {

584 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

585  ((
OS_OBJ_QTY
)0u);

589 
	`CPU_CRITICAL_ENTER
();

590 
p_≥nd_li°
 = &
p_muãx
->
PídLi°
;

591 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

592 
	`CPU_CRITICAL_EXIT
();

593 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

594  ((
OS_OBJ_QTY
)0u);

597 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

598 
nbr_èsks
 = 0u;

599 
ts
 = 
	`OS_TS_GET
();

600 
p_≥nd_li°
->
NbrE¡rõs
 > (
OS_OBJ_QTY
)0u) {

601 
p_tcb
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

602 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)((*)
p_muãx
),

603 
p_tcb
,

604 
ts
);

605 
nbr_èsks
++;

606 i‡(
›t
 !
OS_OPT_PEND_ABORT_ALL
) {

610 
	`OS_CRITICAL_EXIT_NO_SCHED
();

612 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0u) {

613 
	`OSSched
();

616 *
p_îr
 = 
OS_ERR_NONE
;

617  (
nbr_èsks
);

618 
	}
}

648 
	$OSMuãxPo°
 (
OS_MUTEX
 *
p_muãx
,

649 
OS_OPT
 
›t
,

650 
OS_ERR
 *
p_îr
)

652 
OS_PEND_LIST
 *
p_≥nd_li°
;

653 
OS_TCB
 *
p_tcb
;

654 
CPU_TS
 
ts
;

655 
	`CPU_SR_ALLOC
();

659 #ifde‡
OS_SAFETY_CRITICAL


660 i‡(
p_îr
 =(
OS_ERR
 *)0) {

661 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

666 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

667 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

668 *
p_îr
 = 
OS_ERR_POST_ISR
;

673 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

674 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

675 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

678 
›t
) {

679 
OS_OPT_POST_NONE
:

680 
OS_OPT_POST_NO_SCHED
:

684 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

689 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

690 i‡(
p_muãx
->
Ty≥
 !
OS_OBJ_TYPE_MUTEX
) {

691 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

696 
	`CPU_CRITICAL_ENTER
();

697 i‡(
OSTCBCurPå
 !
p_muãx
->
Ow√rTCBPå
) {

698 
	`CPU_CRITICAL_EXIT
();

699 *
p_îr
 = 
OS_ERR_MUTEX_NOT_OWNER
;

703 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

704 
ts
 = 
	`OS_TS_GET
();

705 
p_muãx
->
TS
 = 
ts
;

706 
p_muãx
->
Ow√rNe°ögCå
--;

707 i‡(
p_muãx
->
Ow√rNe°ögCå
 > (
OS_NESTING_CTR
)0) {

708 
	`OS_CRITICAL_EXIT
();

709 *
p_îr
 = 
OS_ERR_MUTEX_NESTING
;

713 
p_≥nd_li°
 = &
p_muãx
->
PídLi°
;

714 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

715 
p_muãx
->
Ow√rTCBPå
 = (
OS_TCB
 *)0;

716 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)0;

717 
	`OS_CRITICAL_EXIT
();

718 *
p_îr
 = 
OS_ERR_NONE
;

722 i‡(
OSTCBCurPå
->
Prio
 !
p_muãx
->
Ow√rOrigöÆPrio
) {

723 
	`OS_RdyLi°Remove
(
OSTCBCurPå
);

724 
OSTCBCurPå
->
Prio
 = 
p_muãx
->
Ow√rOrigöÆPrio
;

725 
	`OS_PrioIn£π
(
OSTCBCurPå
->
Prio
);

726 
	`OS_RdyLi°In£πTaû
(
OSTCBCurPå
);

727 
OSPrioCur
 = 
OSTCBCurPå
->
Prio
;

730 
p_tcb
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

731 
p_muãx
->
Ow√rTCBPå
 = 
p_tcb
;

732 
p_muãx
->
Ow√rOrigöÆPrio
 = 
p_tcb
->
Prio
;

733 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)1;

735 
	`OS_Po°
((
OS_PEND_OBJ
 *)((*)
p_muãx
),

736 (
OS_TCB
 *)
p_tcb
,

738 (
OS_MSG_SIZE
 )0,

739 (
CPU_TS
 )
ts
);

741 
	`OS_CRITICAL_EXIT_NO_SCHED
();

743 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

744 
	`OSSched
();

747 *
p_îr
 = 
OS_ERR_NONE
;

748 
	}
}

767 
	$OS_MuãxCÃ
 (
OS_MUTEX
 *
p_muãx
)

769 
p_muãx
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

770 
p_muãx
->
NamePå
 = (
CPU_CHAR
 *)((*)"?MUTEX");

771 
p_muãx
->
Ow√rTCBPå
 = (
OS_TCB
 *)0;

772 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)0;

773 
p_muãx
->
TS
 = (
CPU_TS
 )0;

774 
p_muãx
->
Ow√rOrigöÆPrio
 = 
OS_CFG_PRIO_MAX
;

775 
	`OS_PídLi°Inô
(&
p_muãx
->
PídLi°
);

776 
	}
}

794 #i‡
OS_CFG_DBG_EN
 > 0u

795 
	$OS_MuãxDbgLi°Add
 (
OS_MUTEX
 *
p_muãx
)

797 
p_muãx
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

798 
p_muãx
->
DbgPªvPå
 = (
OS_MUTEX
 *)0;

799 i‡(
OSMuãxDbgLi°På
 =(
OS_MUTEX
 *)0) {

800 
p_muãx
->
DbgNextPå
 = (
OS_MUTEX
 *)0;

802 
p_muãx
->
DbgNextPå
 = 
OSMuãxDbgLi°På
;

803 
OSMuãxDbgLi°På
->
DbgPªvPå
 = 
p_muãx
;

805 
OSMuãxDbgLi°På
 = 
p_muãx
;

806 
	}
}

810 
	$OS_MuãxDbgLi°Remove
 (
OS_MUTEX
 *
p_muãx
)

812 
OS_MUTEX
 *
p_muãx_√xt
;

813 
OS_MUTEX
 *
p_muãx_¥ev
;

816 
p_muãx_¥ev
 = 
p_muãx
->
DbgPªvPå
;

817 
p_muãx_√xt
 = 
p_muãx
->
DbgNextPå
;

819 i‡(
p_muãx_¥ev
 =(
OS_MUTEX
 *)0) {

820 
OSMuãxDbgLi°På
 = 
p_muãx_√xt
;

821 i‡(
p_muãx_√xt
 !(
OS_MUTEX
 *)0) {

822 
p_muãx_√xt
->
DbgPªvPå
 = (
OS_MUTEX
 *)0;

824 
p_muãx
->
DbgNextPå
 = (
OS_MUTEX
 *)0;

826 } i‡(
p_muãx_√xt
 =(
OS_MUTEX
 *)0) {

827 
p_muãx_¥ev
->
DbgNextPå
 = (
OS_MUTEX
 *)0;

828 
p_muãx
->
DbgPªvPå
 = (
OS_MUTEX
 *)0;

831 
p_muãx_¥ev
->
DbgNextPå
 = 
p_muãx_√xt
;

832 
p_muãx_√xt
->
DbgPªvPå
 = 
p_muãx_¥ev
;

833 
p_muãx
->
DbgNextPå
 = (
OS_MUTEX
 *)0;

834 
p_muãx
->
DbgPªvPå
 = (
OS_MUTEX
 *)0;

836 
	}
}

857 
	$OS_MuãxInô
 (
OS_ERR
 *
p_îr
)

859 #ifde‡
OS_SAFETY_CRITICAL


860 i‡(
p_îr
 =(
OS_ERR
 *)0) {

861 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

866 #i‡
OS_CFG_DBG_EN
 > 0u

867 
OSMuãxDbgLi°På
 = (
OS_MUTEX
 *)0;

870 
OSMuãxQty
 = (
OS_OBJ_QTY
)0;

871 *
p_îr
 = 
OS_ERR_NONE
;

872 
	}
}

	@UCOSIII/uCOS-III/Source/os_pend_multi.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_≥nd_mu…i__c
 = "$Id: $";

41 #i‡(((
OS_CFG_Q_EN
 > 0uË|| (
OS_CFG_SEM_EN
 > 0u)Ë&& (
OS_CFG_PEND_MULTI_EN
 > 0u))

121 
OS_OBJ_QTY
 
	$OSPídMu…i
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

122 
OS_OBJ_QTY
 
tbl_size
,

123 
OS_TICK
 
timeout
,

124 
OS_OPT
 
›t
,

125 
OS_ERR
 *
p_îr
)

127 
CPU_BOOLEAN
 
vÆid
;

128 
OS_OBJ_QTY
 
nbr_obj_rdy
;

129 
	`CPU_SR_ALLOC
();

133 #ifde‡
OS_SAFETY_CRITICAL


134 i‡(
p_îr
 =(
OS_ERR
 *)0) {

135 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

136  ((
OS_OBJ_QTY
)0);

140 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

141 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

142 *
p_îr
 = 
OS_ERR_PEND_ISR
;

143  ((
OS_OBJ_QTY
)0);

147 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

148 i‡(
p_≥nd_d©a_tbl
 =(
OS_PEND_DATA
 *)0) {

149 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

150  ((
OS_OBJ_QTY
)0);

152 i‡(
tbl_size
 =(
OS_OBJ_QTY
)0) {

153 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

154  ((
OS_OBJ_QTY
)0);

156 
›t
) {

157 
OS_OPT_PEND_BLOCKING
:

158 
OS_OPT_PEND_NON_BLOCKING
:

162 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

163  ((
OS_OBJ_QTY
)0);

167 
vÆid
 = 
	`OS_PídMu…iVÆid©e
(
p_≥nd_d©a_tbl
,

168 
tbl_size
);

169 i‡(
vÆid
 =
DEF_FALSE
) {

170 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

171  ((
OS_OBJ_QTY
)0);

175 
	`CPU_CRITICAL_ENTER
();

176 
nbr_obj_rdy
 = 
	`OS_PídMu…iGëRdy
(
p_≥nd_d©a_tbl
,

177 
tbl_size
);

178 i‡(
nbr_obj_rdy
 > (
OS_OBJ_QTY
)0) {

179 
	`CPU_CRITICAL_EXIT
();

180 *
p_îr
 = 
OS_ERR_NONE
;

181  ((
OS_OBJ_QTY
)
nbr_obj_rdy
);

184 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

185 
	`CPU_CRITICAL_EXIT
();

186 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

187  ((
OS_OBJ_QTY
)0);

189 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

190 
	`CPU_CRITICAL_EXIT
();

191 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

192  ((
OS_OBJ_QTY
)0);

195 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

197 
	`OS_PídMu…iWaô
(
p_≥nd_d©a_tbl
,

198 
tbl_size
,

199 
timeout
);

201 
	`OS_CRITICAL_EXIT_NO_SCHED
();

203 
	`OSSched
();

205 
	`CPU_CRITICAL_ENTER
();

206 
OSTCBCurPå
->
PídSètus
) {

207 
OS_STATUS_PEND_OK
:

208 *
p_îr
 = 
OS_ERR_NONE
;

211 
OS_STATUS_PEND_ABORT
:

212 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

215 
OS_STATUS_PEND_TIMEOUT
:

216 *
p_îr
 = 
OS_ERR_TIMEOUT
;

219 
OS_STATUS_PEND_DEL
:

220 *
p_îr
 = 
OS_ERR_OBJ_DEL
;

224 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

228 
OSTCBCurPå
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

229 
	`CPU_CRITICAL_EXIT
();

231  ((
OS_OBJ_QTY
)1);

232 
	}
}

253 
OS_OBJ_QTY
 
	$OS_PídMu…iGëRdy
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

254 
OS_OBJ_QTY
 
tbl_size
)

256 
OS_OBJ_QTY
 
i
;

257 
OS_OBJ_QTY
 
nbr_obj_rdy
;

258 #i‡
OS_CFG_Q_EN
 > 0u

259 
OS_ERR
 
îr
;

260 
OS_MSG_SIZE
 
msg_size
;

261 
OS_Q
 *
p_q
;

262 *
p_void
;

263 
CPU_TS
 
ts
;

265 #i‡
OS_CFG_SEM_EN
 > 0u

266 
OS_SEM
 *
p_£m
;

271 
nbr_obj_rdy
 = (
OS_OBJ_QTY
)0;

272 
i
 = 0u; i < 
tbl_size
; i++) {

273 
p_≥nd_d©a_tbl
->
RdyObjPå
 = (
OS_PEND_OBJ
 *)0;

274 
p_≥nd_d©a_tbl
->
RdyMsgPå
 = (*)0;

275 
p_≥nd_d©a_tbl
->
RdyMsgSize
 = (
OS_MSG_SIZE
 )0;

276 
p_≥nd_d©a_tbl
->
RdyTS
 = (
CPU_TS
 )0;

277 
p_≥nd_d©a_tbl
->
NextPå
 = (
OS_PEND_DATA
 *)0;

278 
p_≥nd_d©a_tbl
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

279 
p_≥nd_d©a_tbl
->
TCBPå
 = (
OS_TCB
 *)0;

280 #i‡
OS_CFG_Q_EN
 > 0u

281 
p_q
 = (
OS_Q
 *)((*)
p_≥nd_d©a_tbl
->
PídObjPå
);

282 i‡(
p_q
->
Ty≥
 =
OS_OBJ_TYPE_Q
) {

283 
p_void
 = 
	`OS_MsgQGë
(&
p_q
->
MsgQ
,

284 &
msg_size
,

285 &
ts
,

286 &
îr
);

287 i‡(
îr
 =
OS_ERR_NONE
) {

288 
p_≥nd_d©a_tbl
->
RdyObjPå
 =Ö_≥nd_d©a_tbl->
PídObjPå
;

289 
p_≥nd_d©a_tbl
->
RdyMsgPå
 = 
p_void
;

290 
p_≥nd_d©a_tbl
->
RdyMsgSize
 = 
msg_size
;

291 
p_≥nd_d©a_tbl
->
RdyTS
 = 
ts
;

292 
nbr_obj_rdy
++;

297 #i‡
OS_CFG_SEM_EN
 > 0u

298 
p_£m
 = (
OS_SEM
 *)((*)
p_≥nd_d©a_tbl
->
PídObjPå
);

299 i‡(
p_£m
->
Ty≥
 =
OS_OBJ_TYPE_SEM
) {

300 i‡(
p_£m
->
Cå
 > 0u) {

301 
p_£m
->
Cå
--;

302 
p_≥nd_d©a_tbl
->
RdyObjPå
 =Ö_≥nd_d©a_tbl->
PídObjPå
;

303 
p_≥nd_d©a_tbl
->
RdyTS
 = 
p_£m
->
TS
;

304 
nbr_obj_rdy
++;

309 
p_≥nd_d©a_tbl
++;

311  (
nbr_obj_rdy
);

312 
	}
}

334 
CPU_BOOLEAN
 
	$OS_PídMu…iVÆid©e
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

335 
OS_OBJ_QTY
 
tbl_size
)

337 
OS_OBJ_QTY
 
i
;

338 
OS_OBJ_QTY
 
˘r
;

339 #i‡
OS_CFG_SEM_EN
 > 0u

340 
OS_SEM
 *
p_£m
;

342 #i‡
OS_CFG_Q_EN
 > 0u

343 
OS_Q
 *
p_q
;

347 
i
 = 0u; i < 
tbl_size
; i++) {

348 i‡(
p_≥nd_d©a_tbl
->
PídObjPå
 =(
OS_PEND_OBJ
 *)0) {

349  (
DEF_FALSE
);

352 
˘r
 = 0u;

353 #i‡
OS_CFG_SEM_EN
 > 0u

354 
p_£m
 = (
OS_SEM
 *)((*)
p_≥nd_d©a_tbl
->
PídObjPå
);

355 i‡(
p_£m
->
Ty≥
 =
OS_OBJ_TYPE_SEM
) {

356 
˘r
++;

360 #i‡
OS_CFG_Q_EN
 > 0u

361 
p_q
 = (
OS_Q
 *)((*)
p_≥nd_d©a_tbl
->
PídObjPå
);

362 i‡(
p_q
->
Ty≥
 =
OS_OBJ_TYPE_Q
) {

363 
˘r
++;

367 i‡(
˘r
 =(
OS_OBJ_QTY
)0) {

368  (
DEF_FALSE
);

370 
p_≥nd_d©a_tbl
++;

372  (
DEF_TRUE
);

373 
	}
}

396 
	$OS_PídMu…iWaô
 (
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

397 
OS_OBJ_QTY
 
tbl_size
,

398 
OS_TICK
 
timeout
)

400 
OS_OBJ_QTY
 
i
;

401 
OS_PEND_LIST
 *
p_≥nd_li°
;

403 #i‡
OS_CFG_Q_EN
 > 0u

404 
OS_Q
 *
p_q
;

407 #i‡
OS_CFG_SEM_EN
 > 0u

408 
OS_SEM
 *
p_£m
;

413 
OSTCBCurPå
->
PídOn
 = 
OS_TASK_PEND_ON_MULTI
;

414 
OSTCBCurPå
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

415 
OSTCBCurPå
->
PídD©aTblE¡rõs
 = 
tbl_size
;

416 
OSTCBCurPå
->
PídD©aTblPå
 = 
p_≥nd_d©a_tbl
;

418 
	`OS_TaskBlock
(
OSTCBCurPå
,

419 
timeout
);

421 
i
 = 0u; i < 
tbl_size
; i++) {

422 
p_≥nd_d©a_tbl
->
TCBPå
 = 
OSTCBCurPå
;

424 #i‡
OS_CFG_SEM_EN
 > 0u

425 
p_£m
 = (
OS_SEM
 *)((*)
p_≥nd_d©a_tbl
->
PídObjPå
);

426 i‡(
p_£m
->
Ty≥
 =
OS_OBJ_TYPE_SEM
) {

427 
p_≥nd_li°
 = &
p_£m
->
PídLi°
;

428 
	`OS_PídLi°In£πPrio
(
p_≥nd_li°
,

429 
p_≥nd_d©a_tbl
);

433 #i‡
OS_CFG_Q_EN
 > 0u

434 
p_q
 = (
OS_Q
 *)((*)
p_≥nd_d©a_tbl
->
PídObjPå
);

435 i‡(
p_q
->
Ty≥
 =
OS_OBJ_TYPE_Q
) {

436 
p_≥nd_li°
 = &
p_q
->
PídLi°
;

437 
	`OS_PídLi°In£πPrio
(
p_≥nd_li°
,

438 
p_≥nd_d©a_tbl
);

442 
p_≥nd_d©a_tbl
++;

444 
	}
}

	@UCOSIII/uCOS-III/Source/os_prio.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_¥io__c
 = "$Id: $";

41 
CPU_DATA
 
	gOSPrioTbl
[
OS_PRIO_TBL_SIZE
];

59 
	$OS_PrioInô
 ()

61 
CPU_DATA
 
i
;

65 
i
 = 0u; i < 
OS_PRIO_TBL_SIZE
; i++) {

66 
OSPrioTbl
[
i
] = (
CPU_DATA
)0;

68 
	}
}

85 
OS_PRIO
 
	$OS_PrioGëHighe°
 ()

87 
CPU_DATA
 *
p_tbl
;

88 
OS_PRIO
 
¥io
;

91 
¥io
 = (
OS_PRIO
)0;

92 
p_tbl
 = &
OSPrioTbl
[0];

93 *
p_tbl
 =(
CPU_DATA
)0) {

94 
¥io
 +
DEF_INT_CPU_NBR_BITS
;

95 
p_tbl
++;

97 
¥io
 +(
OS_PRIO
)
	`CPU_C¡LódZîos
(*
p_tbl
);

98  (
¥io
);

99 
	}
}

115 
	$OS_PrioIn£π
 (
OS_PRIO
 
¥io
)

117 
CPU_DATA
 
bô
;

118 
CPU_DATA
 
bô_nbr
;

119 
OS_PRIO
 
ix
;

122 
ix
 = 
¥io
 / 
DEF_INT_CPU_NBR_BITS
;

123 
bô_nbr
 = (
CPU_DATA
)
¥io
 & (
DEF_INT_CPU_NBR_BITS
 - 1u);

124 
bô
 = 1u;

125 
bô
 <<(
DEF_INT_CPU_NBR_BITS
 - 1uË- 
bô_nbr
;

126 
OSPrioTbl
[
ix
] |
bô
;

127 
	}
}

143 
	$OS_PrioRemove
 (
OS_PRIO
 
¥io
)

145 
CPU_DATA
 
bô
;

146 
CPU_DATA
 
bô_nbr
;

147 
OS_PRIO
 
ix
;

150 
ix
 = 
¥io
 / 
DEF_INT_CPU_NBR_BITS
;

151 
bô_nbr
 = (
CPU_DATA
)
¥io
 & (
DEF_INT_CPU_NBR_BITS
 - 1u);

152 
bô
 = 1u;

153 
bô
 <<(
DEF_INT_CPU_NBR_BITS
 - 1uË- 
bô_nbr
;

154 
OSPrioTbl
[
ix
] &~
bô
;

155 
	}
}

	@UCOSIII/uCOS-III/Source/os_q.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_q__c
 = "$Id: $";

41 #i‡
OS_CFG_Q_EN
 > 0u

71 
	$OSQCª©e
 (
OS_Q
 *
p_q
,

72 
CPU_CHAR
 *
p_«me
,

73 
OS_MSG_QTY
 
max_qty
,

74 
OS_ERR
 *
p_îr
)

77 
	`CPU_SR_ALLOC
();

81 #ifde‡
OS_SAFETY_CRITICAL


82 i‡(
p_îr
 =(
OS_ERR
 *)0) {

83 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

88 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


89 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

90 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

95 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

96 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

97 *
p_îr
 = 
OS_ERR_CREATE_ISR
;

102 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

103 i‡(
p_q
 =(
OS_Q
 *)0) {

104 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

107 i‡(
max_qty
 =(
OS_MSG_QTY
)0) {

108 *
p_îr
 = 
OS_ERR_Q_SIZE
;

113 
	`OS_CRITICAL_ENTER
();

114 
p_q
->
Ty≥
 = 
OS_OBJ_TYPE_Q
;

115 
p_q
->
NamePå
 = 
p_«me
;

116 
	`OS_MsgQInô
(&
p_q
->
MsgQ
,

117 
max_qty
);

118 
	`OS_PídLi°Inô
(&
p_q
->
PídLi°
);

120 #i‡
OS_CFG_DBG_EN
 > 0u

121 
	`OS_QDbgLi°Add
(
p_q
);

123 
OSQQty
++;

125 
	`OS_CRITICAL_EXIT_NO_SCHED
();

126 *
p_îr
 = 
OS_ERR_NONE
;

127 
	}
}

166 #i‡
OS_CFG_Q_DEL_EN
 > 0u

167 
OS_OBJ_QTY
 
	$OSQDñ
 (
OS_Q
 *
p_q
,

168 
OS_OPT
 
›t
,

169 
OS_ERR
 *
p_îr
)

171 
OS_OBJ_QTY
 
˙t
;

172 
OS_OBJ_QTY
 
nbr_èsks
;

173 
OS_PEND_DATA
 *
p_≥nd_d©a
;

174 
OS_PEND_LIST
 *
p_≥nd_li°
;

175 
OS_TCB
 *
p_tcb
;

176 
CPU_TS
 
ts
;

177 
	`CPU_SR_ALLOC
();

181 #ifde‡
OS_SAFETY_CRITICAL


182 i‡(
p_îr
 =(
OS_ERR
 *)0) {

183 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

184  ((
OS_OBJ_QTY
)0);

188 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

189 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

190 *
p_îr
 = 
OS_ERR_DEL_ISR
;

191  ((
OS_OBJ_QTY
)0);

195 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

196 i‡(
p_q
 =(
OS_Q
 *)0) {

197 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

198  ((
OS_OBJ_QTY
)0u);

200 
›t
) {

201 
OS_OPT_DEL_NO_PEND
:

202 
OS_OPT_DEL_ALWAYS
:

206 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

207  ((
OS_OBJ_QTY
)0u);

211 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

212 i‡(
p_q
->
Ty≥
 !
OS_OBJ_TYPE_Q
) {

213 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

214  ((
OS_OBJ_QTY
)0);

218 
	`CPU_CRITICAL_ENTER
();

219 
p_≥nd_li°
 = &
p_q
->
PídLi°
;

220 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

221 
nbr_èsks
 = 
˙t
;

222 
›t
) {

223 
OS_OPT_DEL_NO_PEND
:

224 i‡(
nbr_èsks
 =(
OS_OBJ_QTY
)0) {

225 #i‡
OS_CFG_DBG_EN
 > 0u

226 
	`OS_QDbgLi°Remove
(
p_q
);

228 
OSQQty
--;

229 
	`OS_QCÃ
(
p_q
);

230 
	`CPU_CRITICAL_EXIT
();

231 *
p_îr
 = 
OS_ERR_NONE
;

233 
	`CPU_CRITICAL_EXIT
();

234 *
p_îr
 = 
OS_ERR_TASK_WAITING
;

238 
OS_OPT_DEL_ALWAYS
:

239 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

240 
ts
 = 
	`OS_TS_GET
();

241 
˙t
 > 0u) {

242 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

243 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

244 
	`OS_PídObjDñ
((
OS_PEND_OBJ
 *)((*)
p_q
),

245 
p_tcb
,

246 
ts
);

247 
˙t
--;

249 #i‡
OS_CFG_DBG_EN
 > 0u

250 
	`OS_QDbgLi°Remove
(
p_q
);

252 
OSQQty
--;

253 
	`OS_QCÃ
(
p_q
);

254 
	`OS_CRITICAL_EXIT_NO_SCHED
();

255 
	`OSSched
();

256 *
p_îr
 = 
OS_ERR_NONE
;

260 
	`CPU_CRITICAL_EXIT
();

261 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

264  (
nbr_èsks
);

265 
	}
}

293 #i‡
OS_CFG_Q_FLUSH_EN
 > 0u

294 
OS_MSG_QTY
 
	$OSQFlush
 (
OS_Q
 *
p_q
,

295 
OS_ERR
 *
p_îr
)

297 
OS_MSG_QTY
 
íåõs
;

298 
	`CPU_SR_ALLOC
();

302 #ifde‡
OS_SAFETY_CRITICAL


303 i‡(
p_îr
 =(
OS_ERR
 *)0) {

304 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

305  ((
OS_MSG_QTY
)0);

309 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

310 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

311 *
p_îr
 = 
OS_ERR_FLUSH_ISR
;

312  ((
OS_MSG_QTY
)0);

316 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

317 i‡(
p_q
 =(
OS_Q
 *)0) {

318 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

319  ((
OS_MSG_QTY
)0);

323 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

324 i‡(
p_q
->
Ty≥
 !
OS_OBJ_TYPE_Q
) {

325 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

326  ((
OS_MSG_QTY
)0);

330 
	`OS_CRITICAL_ENTER
();

331 
íåõs
 = 
	`OS_MsgQFªeAŒ
(&
p_q
->
MsgQ
);

332 
	`OS_CRITICAL_EXIT
();

333 *
p_îr
 = 
OS_ERR_NONE
;

334  ((
OS_MSG_QTY
)
íåõs
);

335 
	}
}

384 *
	$OSQPíd
 (
OS_Q
 *
p_q
,

385 
OS_TICK
 
timeout
,

386 
OS_OPT
 
›t
,

387 
OS_MSG_SIZE
 *
p_msg_size
,

388 
CPU_TS
 *
p_ts
,

389 
OS_ERR
 *
p_îr
)

391 
OS_PEND_DATA
 
≥nd_d©a
;

392 *
p_void
;

393 
	`CPU_SR_ALLOC
();

397 #ifde‡
OS_SAFETY_CRITICAL


398 i‡(
p_îr
 =(
OS_ERR
 *)0) {

399 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

404 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

405 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

406 *
p_îr
 = 
OS_ERR_PEND_ISR
;

411 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

412 i‡(
p_q
 =(
OS_Q
 *)0) {

413 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

416 i‡(
p_msg_size
 =(
OS_MSG_SIZE
 *)0) {

417 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

420 
›t
) {

421 
OS_OPT_PEND_BLOCKING
:

422 
OS_OPT_PEND_NON_BLOCKING
:

426 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

431 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

432 i‡(
p_q
->
Ty≥
 !
OS_OBJ_TYPE_Q
) {

433 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

438 i‡(
p_ts
 !(
CPU_TS
 *)0) {

439 *
p_ts
 = (
CPU_TS
 )0;

442 
	`CPU_CRITICAL_ENTER
();

443 
p_void
 = 
	`OS_MsgQGë
(&
p_q
->
MsgQ
,

444 
p_msg_size
,

445 
p_ts
,

446 
p_îr
);

447 i‡(*
p_îr
 =
OS_ERR_NONE
) {

448 
	`CPU_CRITICAL_EXIT
();

449  (
p_void
);

452 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

453 
	`CPU_CRITICAL_EXIT
();

454 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

457 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

458 
	`CPU_CRITICAL_EXIT
();

459 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

464 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

465 
	`OS_Píd
(&
≥nd_d©a
,

466 (
OS_PEND_OBJ
 *)((*)
p_q
),

467 
OS_TASK_PEND_ON_Q
,

468 
timeout
);

469 
	`OS_CRITICAL_EXIT_NO_SCHED
();

471 
	`OSSched
();

473 
	`CPU_CRITICAL_ENTER
();

474 
OSTCBCurPå
->
PídSètus
) {

475 
OS_STATUS_PEND_OK
:

476 
p_void
 = 
OSTCBCurPå
->
MsgPå
;

477 *
p_msg_size
 = 
OSTCBCurPå
->
MsgSize
;

478 i‡(
p_ts
 !(
CPU_TS
 *)0) {

479 *
p_ts
 = 
OSTCBCurPå
->
TS
;

481 *
p_îr
 = 
OS_ERR_NONE
;

484 
OS_STATUS_PEND_ABORT
:

485 
p_void
 = (*)0;

486 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

487 i‡(
p_ts
 !(
CPU_TS
 *)0) {

488 *
p_ts
 = 
OSTCBCurPå
->
TS
;

490 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

493 
OS_STATUS_PEND_TIMEOUT
:

494 
p_void
 = (*)0;

495 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

496 i‡(
p_ts
 !(
CPU_TS
 *)0) {

497 *
p_ts
 = (
CPU_TS
 )0;

499 *
p_îr
 = 
OS_ERR_TIMEOUT
;

502 
OS_STATUS_PEND_DEL
:

503 
p_void
 = (*)0;

504 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

505 i‡(
p_ts
 !(
CPU_TS
 *)0) {

506 *
p_ts
 = 
OSTCBCurPå
->
TS
;

508 *
p_îr
 = 
OS_ERR_OBJ_DEL
;

512 
p_void
 = (*)0;

513 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

514 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

517 
	`CPU_CRITICAL_EXIT
();

518  (
p_void
);

519 
	}
}

554 #i‡
OS_CFG_Q_PEND_ABORT_EN
 > 0u

555 
OS_OBJ_QTY
 
	$OSQPídAb‹t
 (
OS_Q
 *
p_q
,

556 
OS_OPT
 
›t
,

557 
OS_ERR
 *
p_îr
)

559 
OS_PEND_LIST
 *
p_≥nd_li°
;

560 
OS_TCB
 *
p_tcb
;

561 
CPU_TS
 
ts
;

562 
OS_OBJ_QTY
 
nbr_èsks
;

563 
	`CPU_SR_ALLOC
();

567 #ifde‡
OS_SAFETY_CRITICAL


568 i‡(
p_îr
 =(
OS_ERR
 *)0) {

569 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

570  ((
OS_OBJ_QTY
)0u);

574 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

575 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

576 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

577  ((
OS_OBJ_QTY
)0u);

581 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

582 i‡(
p_q
 =(
OS_Q
 *)0) {

583 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

584  ((
OS_OBJ_QTY
)0u);

586 
›t
) {

587 
OS_OPT_PEND_ABORT_1
:

588 
OS_OPT_PEND_ABORT_ALL
:

589 
OS_OPT_PEND_ABORT_1
 | 
OS_OPT_POST_NO_SCHED
:

590 
OS_OPT_PEND_ABORT_ALL
 | 
OS_OPT_POST_NO_SCHED
:

594 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

595  ((
OS_OBJ_QTY
)0u);

599 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

600 i‡(
p_q
->
Ty≥
 !
OS_OBJ_TYPE_Q
) {

601 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

602  ((
OS_OBJ_QTY
)0u);

606 
	`CPU_CRITICAL_ENTER
();

607 
p_≥nd_li°
 = &
p_q
->
PídLi°
;

608 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

609 
	`CPU_CRITICAL_EXIT
();

610 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

611  ((
OS_OBJ_QTY
)0u);

614 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

615 
nbr_èsks
 = 0u;

616 
ts
 = 
	`OS_TS_GET
();

617 
p_≥nd_li°
->
NbrE¡rõs
 > (
OS_OBJ_QTY
)0u) {

618 
p_tcb
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

619 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)((*)
p_q
),

620 
p_tcb
,

621 
ts
);

622 
nbr_èsks
++;

623 i‡(
›t
 !
OS_OPT_PEND_ABORT_ALL
) {

627 
	`OS_CRITICAL_EXIT_NO_SCHED
();

629 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0u) {

630 
	`OSSched
();

633 *
p_îr
 = 
OS_ERR_NONE
;

634  (
nbr_èsks
);

635 
	}
}

688 
	$OSQPo°
 (
OS_Q
 *
p_q
,

689 *
p_void
,

690 
OS_MSG_SIZE
 
msg_size
,

691 
OS_OPT
 
›t
,

692 
OS_ERR
 *
p_îr
)

694 
CPU_TS
 
ts
;

698 #ifde‡
OS_SAFETY_CRITICAL


699 i‡(
p_îr
 =(
OS_ERR
 *)0) {

700 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

705 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

706 i‡(
p_q
 =(
OS_Q
 *)0) {

707 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

710 
›t
) {

711 
OS_OPT_POST_FIFO
:

712 
OS_OPT_POST_LIFO
:

713 
OS_OPT_POST_FIFO
 | 
OS_OPT_POST_ALL
:

714 
OS_OPT_POST_LIFO
 | 
OS_OPT_POST_ALL
:

715 
OS_OPT_POST_FIFO
 | 
OS_OPT_POST_NO_SCHED
:

716 
OS_OPT_POST_LIFO
 | 
OS_OPT_POST_NO_SCHED
:

717 
OS_OPT_POST_FIFO
 | 
OS_OPT_POST_ALL
 | 
OS_OPT_POST_NO_SCHED
:

718 
OS_OPT_POST_LIFO
 | 
OS_OPT_POST_ALL
 | 
OS_OPT_POST_NO_SCHED
:

722 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

727 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

728 i‡(
p_q
->
Ty≥
 !
OS_OBJ_TYPE_Q
) {

729 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

734 
ts
 = 
	`OS_TS_GET
();

736 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

737 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

738 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_Q
,

739 (*)
p_q
,

740 (*)
p_void
,

741 (
OS_MSG_SIZE
)
msg_size
,

742 (
OS_FLAGS
 )0,

743 (
OS_OPT
 )
›t
,

744 (
CPU_TS
 )
ts
,

745 (
OS_ERR
 *)
p_îr
);

750 
	`OS_QPo°
(
p_q
,

751 
p_void
,

752 
msg_size
,

753 
›t
,

754 
ts
,

755 
p_îr
);

756 
	}
}

775 
	$OS_QCÃ
 (
OS_Q
 *
p_q
)

777 ()
	`OS_MsgQFªeAŒ
(&
p_q
->
MsgQ
);

778 
p_q
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

779 
p_q
->
NamePå
 = (
CPU_CHAR
 *)((*)"?Q");

780 
	`OS_MsgQInô
(&
p_q
->
MsgQ
,

782 
	`OS_PídLi°Inô
(&
p_q
->
PídLi°
);

783 
	}
}

802 #i‡
OS_CFG_DBG_EN
 > 0u

803 
	$OS_QDbgLi°Add
 (
OS_Q
 *
p_q
)

805 
p_q
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

806 
p_q
->
DbgPªvPå
 = (
OS_Q
 *)0;

807 i‡(
OSQDbgLi°På
 =(
OS_Q
 *)0) {

808 
p_q
->
DbgNextPå
 = (
OS_Q
 *)0;

810 
p_q
->
DbgNextPå
 = 
OSQDbgLi°På
;

811 
OSQDbgLi°På
->
DbgPªvPå
 = 
p_q
;

813 
OSQDbgLi°På
 = 
p_q
;

814 
	}
}

818 
	$OS_QDbgLi°Remove
 (
OS_Q
 *
p_q
)

820 
OS_Q
 *
p_q_√xt
;

821 
OS_Q
 *
p_q_¥ev
;

824 
p_q_¥ev
 = 
p_q
->
DbgPªvPå
;

825 
p_q_√xt
 = 
p_q
->
DbgNextPå
;

827 i‡(
p_q_¥ev
 =(
OS_Q
 *)0) {

828 
OSQDbgLi°På
 = 
p_q_√xt
;

829 i‡(
p_q_√xt
 !(
OS_Q
 *)0) {

830 
p_q_√xt
->
DbgPªvPå
 = (
OS_Q
 *)0;

832 
p_q
->
DbgNextPå
 = (
OS_Q
 *)0;

834 } i‡(
p_q_√xt
 =(
OS_Q
 *)0) {

835 
p_q_¥ev
->
DbgNextPå
 = (
OS_Q
 *)0;

836 
p_q
->
DbgPªvPå
 = (
OS_Q
 *)0;

839 
p_q_¥ev
->
DbgNextPå
 = 
p_q_√xt
;

840 
p_q_√xt
->
DbgPªvPå
 = 
p_q_¥ev
;

841 
p_q
->
DbgNextPå
 = (
OS_Q
 *)0;

842 
p_q
->
DbgPªvPå
 = (
OS_Q
 *)0;

844 
	}
}

865 
	$OS_QInô
 (
OS_ERR
 *
p_îr
)

867 #ifde‡
OS_SAFETY_CRITICAL


868 i‡(
p_îr
 =(
OS_ERR
 *)0) {

869 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

874 #i‡
OS_CFG_DBG_EN
 > 0u

875 
OSQDbgLi°På
 = (
OS_Q
 *)0;

878 
OSQQty
 = (
OS_OBJ_QTY
)0;

879 *
p_îr
 = 
OS_ERR_NONE
;

880 
	}
}

922 
	$OS_QPo°
 (
OS_Q
 *
p_q
,

923 *
p_void
,

924 
OS_MSG_SIZE
 
msg_size
,

925 
OS_OPT
 
›t
,

926 
CPU_TS
 
ts
,

927 
OS_ERR
 *
p_îr
)

929 
OS_OBJ_QTY
 
˙t
;

930 
OS_OPT
 
po°_ty≥
;

931 
OS_PEND_LIST
 *
p_≥nd_li°
;

932 
OS_PEND_DATA
 *
p_≥nd_d©a
;

933 
OS_PEND_DATA
 *
p_≥nd_d©a_√xt
;

934 
OS_TCB
 *
p_tcb
;

935 
	`CPU_SR_ALLOC
();

939 
	`OS_CRITICAL_ENTER
();

940 
p_≥nd_li°
 = &
p_q
->
PídLi°
;

941 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

942 i‡((
›t
 & 
OS_OPT_POST_LIFO
Ë=(
OS_OPT
)0) {

943 
po°_ty≥
 = 
OS_OPT_POST_FIFO
;

945 
po°_ty≥
 = 
OS_OPT_POST_LIFO
;

947 
	`OS_MsgQPut
(&
p_q
->
MsgQ
,

948 
p_void
,

949 
msg_size
,

950 
po°_ty≥
,

951 
ts
,

952 
p_îr
);

953 
	`OS_CRITICAL_EXIT
();

957 i‡((
›t
 & 
OS_OPT_POST_ALL
Ë!(
OS_OPT
)0) {

958 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

960 
˙t
 = (
OS_OBJ_QTY
)1;

962 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

963 
˙t
 > 0u) {

964 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

965 
p_≥nd_d©a_√xt
 = 
p_≥nd_d©a
->
NextPå
;

966 
	`OS_Po°
((
OS_PEND_OBJ
 *)((*)
p_q
),

967 
p_tcb
,

968 
p_void
,

969 
msg_size
,

970 
ts
);

971 
p_≥nd_d©a
 = 
p_≥nd_d©a_√xt
;

972 
˙t
--;

974 
	`OS_CRITICAL_EXIT_NO_SCHED
();

975 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

976 
	`OSSched
();

978 *
p_îr
 = 
OS_ERR_NONE
;

979 
	}
}

	@UCOSIII/uCOS-III/Source/os_sem.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_£m__c
 = "$Id: $";

41 #i‡
OS_CFG_SEM_EN
 > 0u

73 
	$OSSemCª©e
 (
OS_SEM
 *
p_£m
,

74 
CPU_CHAR
 *
p_«me
,

75 
OS_SEM_CTR
 
˙t
,

76 
OS_ERR
 *
p_îr
)

78 
	`CPU_SR_ALLOC
();

82 #ifde‡
OS_SAFETY_CRITICAL


83 i‡(
p_îr
 =(
OS_ERR
 *)0) {

84 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

89 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


90 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

91 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

96 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

97 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

98 *
p_îr
 = 
OS_ERR_CREATE_ISR
;

103 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

104 i‡(
p_£m
 =(
OS_SEM
 *)0) {

105 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

110 
	`OS_CRITICAL_ENTER
();

111 
p_£m
->
Ty≥
 = 
OS_OBJ_TYPE_SEM
;

112 
p_£m
->
Cå
 = 
˙t
;

113 
p_£m
->
TS
 = (
CPU_TS
)0;

114 
p_£m
->
NamePå
 = 
p_«me
;

115 
	`OS_PídLi°Inô
(&
p_£m
->
PídLi°
);

117 #i‡
OS_CFG_DBG_EN
 > 0u

118 
	`OS_SemDbgLi°Add
(
p_£m
);

120 
OSSemQty
++;

122 
	`OS_CRITICAL_EXIT_NO_SCHED
();

123 *
p_îr
 = 
OS_ERR_NONE
;

124 
	}
}

162 #i‡
OS_CFG_SEM_DEL_EN
 > 0u

163 
OS_OBJ_QTY
 
	$OSSemDñ
 (
OS_SEM
 *
p_£m
,

164 
OS_OPT
 
›t
,

165 
OS_ERR
 *
p_îr
)

167 
OS_OBJ_QTY
 
˙t
;

168 
OS_OBJ_QTY
 
nbr_èsks
;

169 
OS_PEND_DATA
 *
p_≥nd_d©a
;

170 
OS_PEND_LIST
 *
p_≥nd_li°
;

171 
OS_TCB
 *
p_tcb
;

172 
CPU_TS
 
ts
;

173 
	`CPU_SR_ALLOC
();

177 #ifde‡
OS_SAFETY_CRITICAL


178 i‡(
p_îr
 =(
OS_ERR
 *)0) {

179 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

180  ((
OS_OBJ_QTY
)0);

184 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

185 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

186 *
p_îr
 = 
OS_ERR_DEL_ISR
;

187  ((
OS_OBJ_QTY
)0);

191 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

192 i‡(
p_£m
 =(
OS_SEM
 *)0) {

193 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

194  ((
OS_OBJ_QTY
)0);

196 
›t
) {

197 
OS_OPT_DEL_NO_PEND
:

198 
OS_OPT_DEL_ALWAYS
:

202 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

203  ((
OS_OBJ_QTY
)0);

207 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

208 i‡(
p_£m
->
Ty≥
 !
OS_OBJ_TYPE_SEM
) {

209 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

210  ((
OS_OBJ_QTY
)0);

214 
	`CPU_CRITICAL_ENTER
();

215 
p_≥nd_li°
 = &
p_£m
->
PídLi°
;

216 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

217 
nbr_èsks
 = 
˙t
;

218 
›t
) {

219 
OS_OPT_DEL_NO_PEND
:

220 i‡(
nbr_èsks
 =(
OS_OBJ_QTY
)0) {

221 #i‡
OS_CFG_DBG_EN
 > 0u

222 
	`OS_SemDbgLi°Remove
(
p_£m
);

224 
OSSemQty
--;

225 
	`OS_SemCÃ
(
p_£m
);

226 
	`CPU_CRITICAL_EXIT
();

227 *
p_îr
 = 
OS_ERR_NONE
;

229 
	`CPU_CRITICAL_EXIT
();

230 *
p_îr
 = 
OS_ERR_TASK_WAITING
;

234 
OS_OPT_DEL_ALWAYS
:

235 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

236 
ts
 = 
	`OS_TS_GET
();

237 
˙t
 > 0u) {

238 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

239 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

240 
	`OS_PídObjDñ
((
OS_PEND_OBJ
 *)((*)
p_£m
),

241 
p_tcb
,

242 
ts
);

243 
˙t
--;

245 #i‡
OS_CFG_DBG_EN
 > 0u

246 
	`OS_SemDbgLi°Remove
(
p_£m
);

248 
OSSemQty
--;

249 
	`OS_SemCÃ
(
p_£m
);

250 
	`OS_CRITICAL_EXIT_NO_SCHED
();

251 
	`OSSched
();

252 *
p_îr
 = 
OS_ERR_NONE
;

256 
	`CPU_CRITICAL_EXIT
();

257 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

260  ((
OS_OBJ_QTY
)
nbr_èsks
);

261 
	}
}

311 
OS_SEM_CTR
 
	$OSSemPíd
 (
OS_SEM
 *
p_£m
,

312 
OS_TICK
 
timeout
,

313 
OS_OPT
 
›t
,

314 
CPU_TS
 *
p_ts
,

315 
OS_ERR
 *
p_îr
)

317 
OS_SEM_CTR
 
˘r
;

318 
OS_PEND_DATA
 
≥nd_d©a
;

319 
	`CPU_SR_ALLOC
();

323 #ifde‡
OS_SAFETY_CRITICAL


324 i‡(
p_îr
 =(
OS_ERR
 *)0) {

325 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

326  ((
OS_SEM_CTR
)0);

330 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

331 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

332 *
p_îr
 = 
OS_ERR_PEND_ISR
;

333  ((
OS_SEM_CTR
)0);

337 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

338 i‡(
p_£m
 =(
OS_SEM
 *)0) {

339 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

340  ((
OS_SEM_CTR
)0);

342 
›t
) {

343 
OS_OPT_PEND_BLOCKING
:

344 
OS_OPT_PEND_NON_BLOCKING
:

348 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

349  ((
OS_SEM_CTR
)0);

353 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

354 i‡(
p_£m
->
Ty≥
 !
OS_OBJ_TYPE_SEM
) {

355 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

356  ((
OS_SEM_CTR
)0);

360 i‡(
p_ts
 !(
CPU_TS
 *)0) {

361 *
p_ts
 = (
CPU_TS
)0;

363 
	`CPU_CRITICAL_ENTER
();

364 i‡(
p_£m
->
Cå
 > (
OS_SEM_CTR
)0) {

365 
p_£m
->
Cå
--;

366 i‡(
p_ts
 !(
CPU_TS
 *)0) {

367 *
p_ts
 = 
p_£m
->
TS
;

369 
˘r
 = 
p_£m
->
Cå
;

370 
	`CPU_CRITICAL_EXIT
();

371 *
p_îr
 = 
OS_ERR_NONE
;

372  (
˘r
);

375 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

376 
˘r
 = 
p_£m
->
Cå
;

377 
	`CPU_CRITICAL_EXIT
();

378 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

379  (
˘r
);

381 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

382 
	`CPU_CRITICAL_EXIT
();

383 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

384  ((
OS_SEM_CTR
)0);

388 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

389 
	`OS_Píd
(&
≥nd_d©a
,

390 (
OS_PEND_OBJ
 *)((*)
p_£m
),

391 
OS_TASK_PEND_ON_SEM
,

392 
timeout
);

394 
	`OS_CRITICAL_EXIT_NO_SCHED
();

396 
	`OSSched
();

398 
	`CPU_CRITICAL_ENTER
();

399 
OSTCBCurPå
->
PídSètus
) {

400 
OS_STATUS_PEND_OK
:

401 i‡(
p_ts
 !(
CPU_TS
 *)0) {

402 *
p_ts
 = 
OSTCBCurPå
->
TS
;

404 *
p_îr
 = 
OS_ERR_NONE
;

407 
OS_STATUS_PEND_ABORT
:

408 i‡(
p_ts
 !(
CPU_TS
 *)0) {

409 *
p_ts
 = 
OSTCBCurPå
->
TS
;

411 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

414 
OS_STATUS_PEND_TIMEOUT
:

415 i‡(
p_ts
 !(
CPU_TS
 *)0) {

416 *
p_ts
 = (
CPU_TS
 )0;

418 *
p_îr
 = 
OS_ERR_TIMEOUT
;

421 
OS_STATUS_PEND_DEL
:

422 i‡(
p_ts
 !(
CPU_TS
 *)0) {

423 *
p_ts
 = 
OSTCBCurPå
->
TS
;

425 *
p_îr
 = 
OS_ERR_OBJ_DEL
;

429 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

430 
	`CPU_CRITICAL_EXIT
();

431  ((
OS_SEM_CTR
)0);

433 
˘r
 = 
p_£m
->
Cå
;

434 
	`CPU_CRITICAL_EXIT
();

435  (
˘r
);

436 
	}
}

470 #i‡
OS_CFG_SEM_PEND_ABORT_EN
 > 0u

471 
OS_OBJ_QTY
 
	$OSSemPídAb‹t
 (
OS_SEM
 *
p_£m
,

472 
OS_OPT
 
›t
,

473 
OS_ERR
 *
p_îr
)

475 
OS_PEND_LIST
 *
p_≥nd_li°
;

476 
OS_TCB
 *
p_tcb
;

477 
CPU_TS
 
ts
;

478 
OS_OBJ_QTY
 
nbr_èsks
;

479 
	`CPU_SR_ALLOC
();

483 #ifde‡
OS_SAFETY_CRITICAL


484 i‡(
p_îr
 =(
OS_ERR
 *)0) {

485 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

486  ((
OS_OBJ_QTY
)0u);

490 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

491 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

492 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

493  ((
OS_OBJ_QTY
)0u);

497 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

498 i‡(
p_£m
 =(
OS_SEM
 *)0) {

499 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

500  ((
OS_OBJ_QTY
)0u);

502 
›t
) {

503 
OS_OPT_PEND_ABORT_1
:

504 
OS_OPT_PEND_ABORT_ALL
:

505 
OS_OPT_PEND_ABORT_1
 | 
OS_OPT_POST_NO_SCHED
:

506 
OS_OPT_PEND_ABORT_ALL
 | 
OS_OPT_POST_NO_SCHED
:

510 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

511  ((
OS_OBJ_QTY
)0u);

515 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

516 i‡(
p_£m
->
Ty≥
 !
OS_OBJ_TYPE_SEM
) {

517 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

518  ((
OS_OBJ_QTY
)0u);

522 
	`CPU_CRITICAL_ENTER
();

523 
p_≥nd_li°
 = &
p_£m
->
PídLi°
;

524 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

525 
	`CPU_CRITICAL_EXIT
();

526 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

527  ((
OS_OBJ_QTY
)0u);

530 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

531 
nbr_èsks
 = 0u;

532 
ts
 = 
	`OS_TS_GET
();

533 
p_≥nd_li°
->
NbrE¡rõs
 > (
OS_OBJ_QTY
)0u) {

534 
p_tcb
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

535 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)((*)
p_£m
),

536 
p_tcb
,

537 
ts
);

538 
nbr_èsks
++;

539 i‡(
›t
 !
OS_OPT_PEND_ABORT_ALL
) {

543 
	`OS_CRITICAL_EXIT_NO_SCHED
();

545 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0u) {

546 
	`OSSched
();

549 *
p_îr
 = 
OS_ERR_NONE
;

550  (
nbr_èsks
);

551 
	}
}

584 
OS_SEM_CTR
 
	$OSSemPo°
 (
OS_SEM
 *
p_£m
,

585 
OS_OPT
 
›t
,

586 
OS_ERR
 *
p_îr
)

588 
OS_SEM_CTR
 
˘r
;

589 
CPU_TS
 
ts
;

593 #ifde‡
OS_SAFETY_CRITICAL


594 i‡(
p_îr
 =(
OS_ERR
 *)0) {

595 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

596  ((
OS_SEM_CTR
)0);

600 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

601 i‡(
p_£m
 =(
OS_SEM
 *)0) {

602 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

603  ((
OS_SEM_CTR
)0);

605 
›t
) {

606 
OS_OPT_POST_1
:

607 
OS_OPT_POST_ALL
:

608 
OS_OPT_POST_1
 | 
OS_OPT_POST_NO_SCHED
:

609 
OS_OPT_POST_ALL
 | 
OS_OPT_POST_NO_SCHED
:

613 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

614  ((
OS_SEM_CTR
)0u);

618 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

619 i‡(
p_£m
->
Ty≥
 !
OS_OBJ_TYPE_SEM
) {

620 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

621  ((
OS_SEM_CTR
)0);

625 
ts
 = 
	`OS_TS_GET
();

627 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

628 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

629 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_SEM
,

630 (*)
p_£m
,

632 (
OS_MSG_SIZE
)0,

633 (
OS_FLAGS
 )0,

634 (
OS_OPT
 )
›t
,

635 (
CPU_TS
 )
ts
,

636 (
OS_ERR
 *)
p_îr
);

637  ((
OS_SEM_CTR
)0);

641 
˘r
 = 
	`OS_SemPo°
(
p_£m
,

642 
›t
,

643 
ts
,

644 
p_îr
);

646  (
˘r
);

647 
	}
}

675 #i‡
OS_CFG_SEM_SET_EN
 > 0u

676 
	$OSSemSë
 (
OS_SEM
 *
p_£m
,

677 
OS_SEM_CTR
 
˙t
,

678 
OS_ERR
 *
p_îr
)

680 
OS_PEND_LIST
 *
p_≥nd_li°
;

681 
	`CPU_SR_ALLOC
();

685 #ifde‡
OS_SAFETY_CRITICAL


686 i‡(
p_îr
 =(
OS_ERR
 *)0) {

687 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

692 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

693 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

694 *
p_îr
 = 
OS_ERR_SET_ISR
;

699 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

700 i‡(
p_£m
 =(
OS_SEM
 *)0) {

701 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

706 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

707 i‡(
p_£m
->
Ty≥
 !
OS_OBJ_TYPE_SEM
) {

708 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

713 *
p_îr
 = 
OS_ERR_NONE
;

714 
	`CPU_CRITICAL_ENTER
();

715 i‡(
p_£m
->
Cå
 > (
OS_SEM_CTR
)0) {

716 
p_£m
->
Cå
 = 
˙t
;

718 
p_≥nd_li°
 = &
p_£m
->
PídLi°
;

719 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

720 
p_£m
->
Cå
 = 
˙t
;

722 *
p_îr
 = 
OS_ERR_TASK_WAITING
;

725 
	`CPU_CRITICAL_EXIT
();

726 
	}
}

746 
	$OS_SemCÃ
 (
OS_SEM
 *
p_£m
)

748 
p_£m
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

749 
p_£m
->
Cå
 = (
OS_SEM_CTR
)0;

750 
p_£m
->
TS
 = (
CPU_TS
 )0;

751 
p_£m
->
NamePå
 = (
CPU_CHAR
 *)((*)"?SEM");

752 
	`OS_PídLi°Inô
(&
p_£m
->
PídLi°
);

753 
	}
}

771 #i‡
OS_CFG_DBG_EN
 > 0u

772 
	$OS_SemDbgLi°Add
 (
OS_SEM
 *
p_£m
)

774 
p_£m
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

775 
p_£m
->
DbgPªvPå
 = (
OS_SEM
 *)0;

776 i‡(
OSSemDbgLi°På
 =(
OS_SEM
 *)0) {

777 
p_£m
->
DbgNextPå
 = (
OS_SEM
 *)0;

779 
p_£m
->
DbgNextPå
 = 
OSSemDbgLi°På
;

780 
OSSemDbgLi°På
->
DbgPªvPå
 = 
p_£m
;

782 
OSSemDbgLi°På
 = 
p_£m
;

783 
	}
}

787 
	$OS_SemDbgLi°Remove
 (
OS_SEM
 *
p_£m
)

789 
OS_SEM
 *
p_£m_√xt
;

790 
OS_SEM
 *
p_£m_¥ev
;

793 
p_£m_¥ev
 = 
p_£m
->
DbgPªvPå
;

794 
p_£m_√xt
 = 
p_£m
->
DbgNextPå
;

796 i‡(
p_£m_¥ev
 =(
OS_SEM
 *)0) {

797 
OSSemDbgLi°På
 = 
p_£m_√xt
;

798 i‡(
p_£m_√xt
 !(
OS_SEM
 *)0) {

799 
p_£m_√xt
->
DbgPªvPå
 = (
OS_SEM
 *)0;

801 
p_£m
->
DbgNextPå
 = (
OS_SEM
 *)0;

803 } i‡(
p_£m_√xt
 =(
OS_SEM
 *)0) {

804 
p_£m_¥ev
->
DbgNextPå
 = (
OS_SEM
 *)0;

805 
p_£m
->
DbgPªvPå
 = (
OS_SEM
 *)0;

808 
p_£m_¥ev
->
DbgNextPå
 = 
p_£m_√xt
;

809 
p_£m_√xt
->
DbgPªvPå
 = 
p_£m_¥ev
;

810 
p_£m
->
DbgNextPå
 = (
OS_SEM
 *)0;

811 
p_£m
->
DbgPªvPå
 = (
OS_SEM
 *)0;

813 
	}
}

834 
	$OS_SemInô
 (
OS_ERR
 *
p_îr
)

836 #ifde‡
OS_SAFETY_CRITICAL


837 i‡(
p_îr
 =(
OS_ERR
 *)0) {

838 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

843 #i‡
OS_CFG_DBG_EN
 > 0u

844 
OSSemDbgLi°På
 = (
OS_SEM
 *)0;

847 
OSSemQty
 = (
OS_OBJ_QTY
)0;

848 *
p_îr
 = 
OS_ERR_NONE
;

849 
	}
}

884 
OS_SEM_CTR
 
	$OS_SemPo°
 (
OS_SEM
 *
p_£m
,

885 
OS_OPT
 
›t
,

886 
CPU_TS
 
ts
,

887 
OS_ERR
 *
p_îr
)

889 
OS_OBJ_QTY
 
˙t
;

890 
OS_SEM_CTR
 
˘r
;

891 
OS_PEND_LIST
 *
p_≥nd_li°
;

892 
OS_PEND_DATA
 *
p_≥nd_d©a
;

893 
OS_PEND_DATA
 *
p_≥nd_d©a_√xt
;

894 
OS_TCB
 *
p_tcb
;

895 
	`CPU_SR_ALLOC
();

899 
	`CPU_CRITICAL_ENTER
();

900 
p_≥nd_li°
 = &
p_£m
->
PídLi°
;

901 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

902 (
OS_SEM_CTR
)) {

904 i‡(
p_£m
->
Cå
 =
DEF_INT_08U_MAX_VAL
) {

905 
	`CPU_CRITICAL_EXIT
();

906 *
p_îr
 = 
OS_ERR_SEM_OVF
;

907  ((
OS_SEM_CTR
)0);

912 i‡(
p_£m
->
Cå
 =
DEF_INT_16U_MAX_VAL
) {

913 
	`CPU_CRITICAL_EXIT
();

914 *
p_îr
 = 
OS_ERR_SEM_OVF
;

915  ((
OS_SEM_CTR
)0);

920 i‡(
p_£m
->
Cå
 =
DEF_INT_32U_MAX_VAL
) {

921 
	`CPU_CRITICAL_EXIT
();

922 *
p_îr
 = 
OS_ERR_SEM_OVF
;

923  ((
OS_SEM_CTR
)0);

930 
p_£m
->
Cå
++;

931 
˘r
 = 
p_£m
->
Cå
;

932 
p_£m
->
TS
 = 
ts
;

933 
	`CPU_CRITICAL_EXIT
();

934 *
p_îr
 = 
OS_ERR_NONE
;

935  (
˘r
);

938 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

939 i‡((
›t
 & 
OS_OPT_POST_ALL
Ë!(
OS_OPT
)0) {

940 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

942 
˙t
 = (
OS_OBJ_QTY
)1;

944 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

945 
˙t
 > 0u) {

946 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

947 
p_≥nd_d©a_√xt
 = 
p_≥nd_d©a
->
NextPå
;

948 
	`OS_Po°
((
OS_PEND_OBJ
 *)((*)
p_£m
),

949 
p_tcb
,

951 (
OS_MSG_SIZE
)0,

952 
ts
);

953 
p_≥nd_d©a
 = 
p_≥nd_d©a_√xt
;

954 
˙t
--;

956 
˘r
 = 
p_£m
->
Cå
;

957 
	`OS_CRITICAL_EXIT_NO_SCHED
();

958 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

959 
	`OSSched
();

961 *
p_îr
 = 
OS_ERR_NONE
;

962  (
˘r
);

963 
	}
}

	@UCOSIII/uCOS-III/Source/os_stat.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_°©__c
 = "$Id: $";

41 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

57 
	$OSSètRe£t
 (
OS_ERR
 *
p_îr
)

59 #i‡(
OS_CFG_DBG_EN
 > 0u)

60 
OS_TCB
 *
p_tcb
;

61 #i‡(
OS_MSG_EN
 > 0u)

62 
OS_MSG_Q
 *
p_msg_q
;

64 #i‡(
OS_CFG_Q_EN
 > 0u)

65 
OS_Q
 *
p_q
;

67 
	`CPU_SR_ALLOC
();

72 #ifde‡
OS_SAFETY_CRITICAL


73 i‡(
p_îr
 =(
OS_ERR
 *)0) {

74 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

79 
	`CPU_CRITICAL_ENTER
();

80 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

81 
OSI¡QTaskTimeMax
 = (
CPU_TS
 )0;

82 
OSI¡QNbrE¡rõsMax
 = (
OS_OBJ_QTY
)0;

85 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

86 
OSSètTaskCPUUßgeMax
 = 0u;

87 
OSSètTaskTimeMax
 = (
CPU_TS
)0;

90 
OSTickTaskTimeMax
 = (
CPU_TS
)0;

92 #i‡
OS_CFG_TMR_EN
 > 0u

93 
OSTmrTaskTimeMax
 = (
CPU_TS
)0;

96 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


97 
OSI¡DisTimeMax
 = (
CPU_TS
)0;

100 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

101 
OSSchedLockTimeMax
 = (
CPU_TS
)0;

104 #i‡
OS_MSG_EN
 > 0u

105 
OSMsgPoﬁ
.
NbrU£dMax
 = 0;

107 
	`CPU_CRITICAL_EXIT
();

109 #i‡
OS_CFG_DBG_EN
 > 0u

110 
	`CPU_CRITICAL_ENTER
();

111 
p_tcb
 = 
OSTaskDbgLi°På
;

112 
	`CPU_CRITICAL_EXIT
();

113 
p_tcb
 !(
OS_TCB
 *)0) {

114 
	`CPU_CRITICAL_ENTER
();

116 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


117 
p_tcb
->
I¡DisTimeMax
 = (
CPU_TS
 )0;

120 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

121 
p_tcb
->
SchedLockTimeMax
 = (
CPU_TS
 )0;

124 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

125 #i‡
OS_CFG_TASK_Q_EN
 > 0u

126 
p_tcb
->
MsgQPídTimeMax
 = (
CPU_TS
 )0;

128 
p_tcb
->
SemPídTimeMax
 = (
CPU_TS
 )0;

129 
p_tcb
->
CtxSwCå
 = (
OS_CTR
 )0;

130 
p_tcb
->
CPUUßge
 = (
OS_CPU_USAGE
)0;

131 
p_tcb
->
CPUUßgeMax
 = (
OS_CPU_USAGE
)0;

132 
p_tcb
->
Cy˛esTŸÆ
 = (
OS_CYCLES
 )0;

133 
p_tcb
->
Cy˛esTŸÆPªv
 = (
OS_CYCLES
 )0;

134 
p_tcb
->
Cy˛esSèπ
 = 
	`OS_TS_GET
();

137 #i‡
OS_CFG_TASK_Q_EN
 > 0u

138 
p_msg_q
 = &
p_tcb
->
MsgQ
;

139 
p_msg_q
->
NbrE¡rõsMax
 = (
OS_MSG_QTY
 )0;

141 
p_tcb
 =Ö_tcb->
DbgNextPå
;

142 
	`CPU_CRITICAL_EXIT
();

146 #i‡(
OS_CFG_Q_EN
 > 0uË&& (
OS_CFG_DBG_EN
 > 0u)

147 
	`CPU_CRITICAL_ENTER
();

148 
p_q
 = 
OSQDbgLi°På
;

149 
	`CPU_CRITICAL_EXIT
();

150 
p_q
 !(
OS_Q
 *)0) {

151 
	`CPU_CRITICAL_ENTER
();

152 
p_msg_q
 = &
p_q
->
MsgQ
;

153 
p_msg_q
->
NbrE¡rõsMax
 = (
OS_MSG_QTY
)0;

154 
p_q
 =Ö_q->
DbgNextPå
;

155 
	`CPU_CRITICAL_EXIT
();

159 
	`OS_TickLi°Re£tPók
();

161 #i‡
OS_CFG_TMR_EN
 > 0u

162 
	`OS_TmrRe£tPók
();

166 *
p_îr
 = 
OS_ERR_NONE
;

167 
	}
}

191 
	$OSSètTaskCPUUßgeInô
 (
OS_ERR
 *
p_îr
)

193 
OS_ERR
 
îr
;

194 
OS_TICK
 
dly
;

195 
	`CPU_SR_ALLOC
();

199 #ifde‡
OS_SAFETY_CRITICAL


200 i‡(
p_îr
 =(
OS_ERR
 *)0) {

201 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

206 #i‡(
OS_CFG_TMR_EN
 > 0u)

207 
	`OSTaskSu•íd
(&
OSTmrTaskTCB
, &
îr
);

208 i‡(
îr
 !
OS_ERR_NONE
) {

209 *
p_îr
 = 
îr
;

214 
	`OSTimeDly
((
OS_TICK
 )2,

215 (
OS_OPT
 )
OS_OPT_TIME_DLY
,

216 (
OS_ERR
 *)&
îr
);

217 i‡(
îr
 !
OS_ERR_NONE
) {

218 *
p_îr
 = 
îr
;

221 
	`CPU_CRITICAL_ENTER
();

222 
OSSètTaskCå
 = (
OS_TICK
)0;

223 
	`CPU_CRITICAL_EXIT
();

225 
dly
 = (
OS_TICK
)0;

226 i‡(
OSCfg_TickR©e_Hz
 > 
OSCfg_SètTaskR©e_Hz
) {

227 
dly
 = (
OS_TICK
)(
OSCfg_TickR©e_Hz
 / 
OSCfg_SètTaskR©e_Hz
);

229 i‡(
dly
 =(
OS_TICK
)0) {

230 
dly
 = (
OS_TICK
)(
OSCfg_TickR©e_Hz
 / (
OS_RATE_HZ
)10);

233 
	`OSTimeDly
(
dly
,

234 
OS_OPT_TIME_DLY
,

235 &
îr
);

237 #i‡(
OS_CFG_TMR_EN
 > 0u)

238 
	`OSTaskResume
(&
OSTmrTaskTCB
, &
îr
);

239 i‡(
îr
 !
OS_ERR_NONE
) {

240 *
p_îr
 = 
îr
;

245 
	`CPU_CRITICAL_ENTER
();

246 
OSSètTaskTimeMax
 = (
CPU_TS
)0;

248 
OSSètTaskCåMax
 = 
OSSètTaskCå
;

249 
OSSètTaskRdy
 = 
OS_STATE_RDY
;

250 
	`CPU_CRITICAL_EXIT
();

251 *
p_îr
 = 
OS_ERR_NONE
;

252 
	}
}

281 
	$OS_SètTask
 (*
p_¨g
)

283 #i‡
OS_CFG_DBG_EN
 > 0u

284 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

285 
OS_CPU_USAGE
 
ußge
;

286 
OS_CYCLES
 
cy˛es_tŸÆ
;

287 
OS_CYCLES
 
cy˛es_div
;

288 
OS_CYCLES
 
cy˛es_mu…
;

289 
OS_CYCLES
 
cy˛es_max
;

291 
OS_TCB
 *
p_tcb
;

293 
OS_TICK
 
˘r_max
;

294 
OS_TICK
 
˘r_mu…
;

295 
OS_TICK
 
˘r_div
;

296 
OS_ERR
 
îr
;

297 
OS_TICK
 
dly
;

298 
CPU_TS
 
ts_°¨t
;

299 
CPU_TS
 
ts_íd
;

300 
	`CPU_SR_ALLOC
();

304 
p_¨g
 =Ö_arg;

305 
OSSètTaskRdy
 !
DEF_TRUE
) {

306 
	`OSTimeDly
(2u * 
OSCfg_SètTaskR©e_Hz
,

307 
OS_OPT_TIME_DLY
,

308 &
îr
);

310 
	`OSSètRe£t
(&
îr
);

312 
dly
 = (
OS_TICK
)0;

313 i‡(
OSCfg_TickR©e_Hz
 > 
OSCfg_SètTaskR©e_Hz
) {

314 
dly
 = (
OS_TICK
)(
OSCfg_TickR©e_Hz
 / 
OSCfg_SètTaskR©e_Hz
);

316 i‡(
dly
 =(
OS_TICK
)0) {

317 
dly
 = (
OS_TICK
)(
OSCfg_TickR©e_Hz
 / (
OS_RATE_HZ
)10);

320 
DEF_ON
) {

321 
ts_°¨t
 = 
	`OS_TS_GET
();

322 #ifde‡ 
CPU_CFG_INT_DIS_MEAS_EN


323 
OSI¡DisTimeMax
 = 
	`CPU_I¡DisMósMaxGë
();

326 
	`CPU_CRITICAL_ENTER
();

327 
OSSètTaskCåRun
 = 
OSSètTaskCå
;

328 
OSSètTaskCå
 = (
OS_TICK
)0;

329 
	`CPU_CRITICAL_EXIT
();

331 i‡(
OSSètTaskCåMax
 > 
OSSètTaskCåRun
) {

332 i‡(
OSSètTaskCåMax
 < 400000u) {

333 
˘r_mu…
 = 10000u;

334 
˘r_div
 = 1u;

335 } i‡(
OSSètTaskCåMax
 < 4000000u) {

336 
˘r_mu…
 = 1000u;

337 
˘r_div
 = 10u;

338 } i‡(
OSSètTaskCåMax
 < 40000000u) {

339 
˘r_mu…
 = 100u;

340 
˘r_div
 = 100u;

341 } i‡(
OSSètTaskCåMax
 < 400000000u) {

342 
˘r_mu…
 = 10u;

343 
˘r_div
 = 1000u;

345 
˘r_mu…
 = 1u;

346 
˘r_div
 = 10000u;

348 
˘r_max
 = 
OSSètTaskCåMax
 / 
˘r_div
;

349 
OSSètTaskCPUUßge
 = (
OS_CPU_USAGE
)((
OS_TICK
)10000u - 
˘r_mu…
 * 
OSSètTaskCåRun
 / 
˘r_max
);

350 i‡(
OSSètTaskCPUUßgeMax
 < 
OSSètTaskCPUUßge
) {

351 
OSSètTaskCPUUßgeMax
 = 
OSSètTaskCPUUßge
;

354 
OSSètTaskCPUUßge
 = (
OS_CPU_USAGE
)10000u;

357 
	`OSSètTaskHook
();

360 #i‡
OS_CFG_DBG_EN
 > 0u

361 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

362 
cy˛es_tŸÆ
 = (
OS_CYCLES
)0;

364 
	`CPU_CRITICAL_ENTER
();

365 
p_tcb
 = 
OSTaskDbgLi°På
;

366 
	`CPU_CRITICAL_EXIT
();

367 
p_tcb
 !(
OS_TCB
 *)0) {

368 
	`OS_CRITICAL_ENTER
();

369 
p_tcb
->
Cy˛esTŸÆPªv
 =Ö_tcb->
Cy˛esTŸÆ
;

370 
p_tcb
->
Cy˛esTŸÆ
 = (
OS_CYCLES
)0;

371 
	`OS_CRITICAL_EXIT
();

373 
cy˛es_tŸÆ
 +
p_tcb
->
Cy˛esTŸÆPªv
;

375 
	`CPU_CRITICAL_ENTER
();

376 
p_tcb
 =Ö_tcb->
DbgNextPå
;

377 
	`CPU_CRITICAL_EXIT
();

382 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

384 i‡(
cy˛es_tŸÆ
 > (
OS_CYCLES
)0u) {

385 i‡(
cy˛es_tŸÆ
 < 400000u) {

386 
cy˛es_mu…
 = 10000u;

387 
cy˛es_div
 = 1u;

388 } i‡(
cy˛es_tŸÆ
 < 4000000u) {

389 
cy˛es_mu…
 = 1000u;

390 
cy˛es_div
 = 10u;

391 } i‡(
cy˛es_tŸÆ
 < 40000000u) {

392 
cy˛es_mu…
 = 100u;

393 
cy˛es_div
 = 100u;

394 } i‡(
cy˛es_tŸÆ
 < 400000000u) {

395 
cy˛es_mu…
 = 10u;

396 
cy˛es_div
 = 1000u;

398 
cy˛es_mu…
 = 1u;

399 
cy˛es_div
 = 10000u;

401 
cy˛es_max
 = 
cy˛es_tŸÆ
 / 
cy˛es_div
;

403 
cy˛es_mu…
 = 0u;

404 
cy˛es_max
 = 1u;

407 
	`CPU_CRITICAL_ENTER
();

408 
p_tcb
 = 
OSTaskDbgLi°På
;

409 
	`CPU_CRITICAL_EXIT
();

410 
p_tcb
 !(
OS_TCB
 *)0) {

411 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

412 
ußge
 = (
OS_CPU_USAGE
)(
cy˛es_mu…
 * 
p_tcb
->
Cy˛esTŸÆPªv
 / 
cy˛es_max
);

413 i‡(
ußge
 > 10000u) {

414 
ußge
 = 10000u;

416 
p_tcb
->
CPUUßge
 = 
ußge
;

417 i‡(
p_tcb
->
CPUUßgeMax
 < 
ußge
) {

418 
p_tcb
->
CPUUßgeMax
 = 
ußge
;

422 #i‡
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u

423 
	`OSTaskStkChk
–
p_tcb
,

424 &
p_tcb
->
StkFªe
,

425 &
p_tcb
->
StkU£d
,

426 &
îr
);

429 
	`CPU_CRITICAL_ENTER
();

430 
p_tcb
 =Ö_tcb->
DbgNextPå
;

431 
	`CPU_CRITICAL_EXIT
();

435 i‡(
OSSètRe£tFœg
 =
DEF_TRUE
) {

436 
OSSètRe£tFœg
 = 
DEF_FALSE
;

437 
	`OSSètRe£t
(&
îr
);

440 
ts_íd
 = 
	`OS_TS_GET
(Ë- 
ts_°¨t
;

441 i‡(
OSSètTaskTimeMax
 < 
ts_íd
) {

442 
OSSètTaskTimeMax
 = 
ts_íd
;

445 
	`OSTimeDly
(
dly
,

446 
OS_OPT_TIME_DLY
,

447 &
îr
);

449 
	}
}

472 
	$OS_SètTaskInô
 (
OS_ERR
 *
p_îr
)

474 #ifde‡
OS_SAFETY_CRITICAL


475 i‡(
p_îr
 =(
OS_ERR
 *)0) {

476 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

481 
OSSètTaskCå
 = (
OS_TICK
)0;

482 
OSSètTaskCåRun
 = (
OS_TICK
)0;

483 
OSSètTaskCåMax
 = (
OS_TICK
)0;

484 
OSSètTaskRdy
 = 
OS_STATE_NOT_RDY
;

485 
OSSètRe£tFœg
 = 
DEF_FALSE
;

488 i‡(
OSCfg_SètTaskStkBa£På
 =(
CPU_STK
 *)0) {

489 *
p_îr
 = 
OS_ERR_STAT_STK_INVALID
;

493 i‡(
OSCfg_SètTaskStkSize
 < 
OSCfg_StkSizeMö
) {

494 *
p_îr
 = 
OS_ERR_STAT_STK_SIZE_INVALID
;

498 i‡(
OSCfg_SètTaskPrio
 >(
OS_CFG_PRIO_MAX
 - 1u)) {

499 *
p_îr
 = 
OS_ERR_STAT_PRIO_INVALID
;

503 
	`OSTaskCª©e
((
OS_TCB
 *)&
OSSètTaskTCB
,

504 (
CPU_CHAR
 *)((*)"uC/OS-III Stat Task"),

505 (
OS_TASK_PTR
 )
OS_SètTask
,

507 (
OS_PRIO
 )
OSCfg_SètTaskPrio
,

508 (
CPU_STK
 *)
OSCfg_SètTaskStkBa£På
,

509 (
CPU_STK_SIZE
)
OSCfg_SètTaskStkLimô
,

510 (
CPU_STK_SIZE
)
OSCfg_SètTaskStkSize
,

511 (
OS_MSG_QTY
 )0,

512 (
OS_TICK
 )0,

514 (
OS_OPT
 )(
OS_OPT_TASK_STK_CHK
 | 
OS_OPT_TASK_STK_CLR
),

515 (
OS_ERR
 *)
p_îr
);

516 
	}
}

	@UCOSIII/uCOS-III/Source/os_task.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_èsk__c
 = "$Id: $";

61 #i‡
OS_CFG_TASK_CHANGE_PRIO_EN
 > 0u

62 
	$OSTaskCh™gePrio
 (
OS_TCB
 *
p_tcb
,

63 
OS_PRIO
 
¥io_√w
,

64 
OS_ERR
 *
p_îr
)

66 
CPU_BOOLEAN
 
£lf
;

67 
	`CPU_SR_ALLOC
();

71 #ifde‡
OS_SAFETY_CRITICAL


72 i‡(
p_îr
 =(
OS_ERR
 *)0) {

73 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

78 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

79 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

80 *
p_îr
 = 
OS_ERR_TASK_CHANGE_PRIO_ISR
;

85 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

86 i‡(
¥io_√w
 == 0) {

87 *
p_îr
 = 
OS_ERR_PRIO_INVALID
;

92 i‡(
¥io_√w
 >(
OS_CFG_PRIO_MAX
 - 1u)) {

93 *
p_îr
 = 
OS_ERR_PRIO_INVALID
;

97 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

98 
	`CPU_CRITICAL_ENTER
();

99 
p_tcb
 = 
OSTCBCurPå
;

100 
	`CPU_CRITICAL_EXIT
();

101 
£lf
 = 
DEF_TRUE
;

103 
£lf
 = 
DEF_FALSE
;

106 
	`OS_CRITICAL_ENTER
();

107 
p_tcb
->
TaskSèã
) {

108 
OS_TASK_STATE_RDY
:

109 
	`OS_RdyLi°Remove
(
p_tcb
);

110 
p_tcb
->
Prio
 = 
¥io_√w
;

111 
	`OS_PrioIn£π
(
p_tcb
->
Prio
);

112 i‡(
£lf
 =
DEF_TRUE
) {

113 
	`OS_RdyLi°In£πHód
(
p_tcb
);

115 
	`OS_RdyLi°In£πTaû
(
p_tcb
);

119 
OS_TASK_STATE_DLY
:

120 
OS_TASK_STATE_SUSPENDED
:

121 
OS_TASK_STATE_DLY_SUSPENDED
:

122 
p_tcb
->
Prio
 = 
¥io_√w
;

125 
OS_TASK_STATE_PEND
:

126 
OS_TASK_STATE_PEND_TIMEOUT
:

127 
OS_TASK_STATE_PEND_SUSPENDED
:

128 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

129 
p_tcb
->
PídOn
) {

130 
OS_TASK_PEND_ON_TASK_Q
:

131 
OS_TASK_PEND_ON_TASK_SEM
:

132 
OS_TASK_PEND_ON_FLAG
:

133 
p_tcb
->
Prio
 = 
¥io_√w
;

136 
OS_TASK_PEND_ON_MUTEX
:

137 
OS_TASK_PEND_ON_MULTI
:

138 
OS_TASK_PEND_ON_Q
:

139 
OS_TASK_PEND_ON_SEM
:

140 
	`OS_PídLi°Ch™gePrio
(
p_tcb
,

141 
¥io_√w
);

150 
	`OS_CRITICAL_EXIT
();

151 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

155 
	`OS_CRITICAL_EXIT_NO_SCHED
();

157 
	`OSSched
();

159 *
p_îr
 = 
OS_ERR_NONE
;

160 
	}
}

249 
	$OSTaskCª©e
 (
OS_TCB
 *
p_tcb
,

250 
CPU_CHAR
 *
p_«me
,

251 
OS_TASK_PTR
 
p_èsk
,

252 *
p_¨g
,

253 
OS_PRIO
 
¥io
,

254 
CPU_STK
 *
p_°k_ba£
,

255 
CPU_STK_SIZE
 
°k_limô
,

256 
CPU_STK_SIZE
 
°k_size
,

257 
OS_MSG_QTY
 
q_size
,

258 
OS_TICK
 
time_qu™è
,

259 *
p_ext
,

260 
OS_OPT
 
›t
,

261 
OS_ERR
 *
p_îr
)

263 
CPU_STK_SIZE
 
i
;

264 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

265 
OS_REG_ID
 
ªg_nbr
;

267 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

268 
OS_TLS_ID
 
id
;

271 
CPU_STK
 *
p_•
;

272 
CPU_STK
 *
p_°k_limô
;

273 
	`CPU_SR_ALLOC
();

277 #ifde‡
OS_SAFETY_CRITICAL


278 i‡(
p_îr
 =(
OS_ERR
 *)0) {

279 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

284 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


285 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

286 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

291 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

292 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

293 *
p_îr
 = 
OS_ERR_TASK_CREATE_ISR
;

298 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

299 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

300 *
p_îr
 = 
OS_ERR_TCB_INVALID
;

303 i‡(
p_èsk
 =(
OS_TASK_PTR
)0) {

304 *
p_îr
 = 
OS_ERR_TASK_INVALID
;

307 i‡(
p_°k_ba£
 =(
CPU_STK
 *)0) {

308 *
p_îr
 = 
OS_ERR_STK_INVALID
;

311 i‡(
°k_size
 < 
OSCfg_StkSizeMö
) {

312 *
p_îr
 = 
OS_ERR_STK_SIZE_INVALID
;

315 i‡(
°k_limô
 >
°k_size
) {

316 *
p_îr
 = 
OS_ERR_STK_LIMIT_INVALID
;

319 i‡(
¥io
 >
OS_CFG_PRIO_MAX
) {

320 *
p_îr
 = 
OS_ERR_PRIO_INVALID
;

325 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

326 i‡(
¥io
 =(
OS_PRIO
)0) {

327 i‡(
p_tcb
 !&
OSI¡QTaskTCB
) {

328 *
p_îr
 = 
OS_ERR_PRIO_INVALID
;

334 i‡(
¥io
 =(
OS_CFG_PRIO_MAX
 - 1u)) {

335 i‡(
p_tcb
 !&
OSIdÀTaskTCB
) {

336 *
p_îr
 = 
OS_ERR_PRIO_INVALID
;

341 
	`OS_TaskInôTCB
(
p_tcb
);

343 *
p_îr
 = 
OS_ERR_NONE
;

345 i‡((
›t
 & 
OS_OPT_TASK_STK_CHK
Ë!(
OS_OPT
)0) {

346 i‡((
›t
 & 
OS_OPT_TASK_STK_CLR
Ë!(
OS_OPT
)0) {

347 
p_•
 = 
p_°k_ba£
;

348 
i
 = 0u; i < 
°k_size
; i++) {

349 *
p_•
 = (
CPU_STK
)0;

350 
p_•
++;

355 #i‡(
CPU_CFG_STK_GROWTH
 =
CPU_STK_GROWTH_HI_TO_LO
)

356 
p_°k_limô
 = 
p_°k_ba£
 + 
°k_limô
;

358 
p_°k_limô
 = 
p_°k_ba£
 + (
°k_size
 - 1uË- 
°k_limô
;

361 
p_•
 = 
	`OSTaskStkInô
(
p_èsk
,

362 
p_¨g
,

363 
p_°k_ba£
,

364 
p_°k_limô
,

365 
°k_size
,

366 
›t
);

369 
p_tcb
->
TaskE¡ryAddr
 = 
p_èsk
;

370 
p_tcb
->
TaskE¡ryArg
 = 
p_¨g
;

372 
p_tcb
->
NamePå
 = 
p_«me
;

374 
p_tcb
->
Prio
 = 
¥io
;

376 
p_tcb
->
StkPå
 = 
p_•
;

377 
p_tcb
->
StkLimôPå
 = 
p_°k_limô
;

379 
p_tcb
->
TimeQu™è
 = 
time_qu™è
;

380 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

381 i‡(
time_qu™è
 =(
OS_TICK
)0) {

382 
p_tcb
->
TimeQu™èCå
 = 
OSSchedRoundRoböDÊtTimeQu™è
;

384 
p_tcb
->
TimeQu™èCå
 = 
time_qu™è
;

387 
p_tcb
->
ExtPå
 = 
p_ext
;

388 
p_tcb
->
StkBa£På
 = 
p_°k_ba£
;

389 
p_tcb
->
StkSize
 = 
°k_size
;

390 
p_tcb
->
O±
 = 
›t
;

392 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

393 
ªg_nbr
 = 0u;Ñeg_nb∏< 
OS_CFG_TASK_REG_TBL_SIZE
;Ñeg_nbr++) {

394 
p_tcb
->
RegTbl
[
ªg_nbr
] = (
OS_REG
)0;

398 #i‡
OS_CFG_TASK_Q_EN
 > 0u

399 
	`OS_MsgQInô
(&
p_tcb
->
MsgQ
,

400 
q_size
);

402 ()&
q_size
;

405 
	`OSTaskCª©eHook
(
p_tcb
);

407 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

408 
id
 = 0u; id < 
OS_CFG_TLS_TBL_SIZE
; id++) {

409 
p_tcb
->
TLS_Tbl
[
id
] = (
OS_TLS
)0;

411 
	`OS_TLS_TaskCª©e
(
p_tcb
);

414 
	`OS_CRITICAL_ENTER
();

415 
	`OS_PrioIn£π
(
p_tcb
->
Prio
);

416 
	`OS_RdyLi°In£πTaû
(
p_tcb
);

418 #i‡
OS_CFG_DBG_EN
 > 0u

419 
	`OS_TaskDbgLi°Add
(
p_tcb
);

422 
OSTaskQty
++;

424 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

425 
	`OS_CRITICAL_EXIT
();

429 
	`OS_CRITICAL_EXIT_NO_SCHED
();

431 
	`OSSched
();

432 
	}
}

459 #i‡
OS_CFG_TASK_DEL_EN
 > 0u

460 
	$OSTaskDñ
 (
OS_TCB
 *
p_tcb
,

461 
OS_ERR
 *
p_îr
)

463 
	`CPU_SR_ALLOC
();

467 #ifde‡
OS_SAFETY_CRITICAL


468 i‡(
p_îr
 =(
OS_ERR
 *)0) {

469 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

474 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

475 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

476 *
p_îr
 = 
OS_ERR_TASK_DEL_ISR
;

481 i‡(
p_tcb
 =&
OSIdÀTaskTCB
) {

482 *
p_îr
 = 
OS_ERR_TASK_DEL_IDLE
;

486 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

487 i‡(
p_tcb
 =&
OSI¡QTaskTCB
) {

488 *
p_îr
 = 
OS_ERR_TASK_DEL_INVALID
;

493 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

494 
	`CPU_CRITICAL_ENTER
();

495 
p_tcb
 = 
OSTCBCurPå
;

496 
	`CPU_CRITICAL_EXIT
();

499 
	`OS_CRITICAL_ENTER
();

500 
p_tcb
->
TaskSèã
) {

501 
OS_TASK_STATE_RDY
:

502 
	`OS_RdyLi°Remove
(
p_tcb
);

505 
OS_TASK_STATE_SUSPENDED
:

508 
OS_TASK_STATE_DLY
:

509 
OS_TASK_STATE_DLY_SUSPENDED
:

510 
	`OS_TickLi°Remove
(
p_tcb
);

513 
OS_TASK_STATE_PEND
:

514 
OS_TASK_STATE_PEND_SUSPENDED
:

515 
OS_TASK_STATE_PEND_TIMEOUT
:

516 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

517 
	`OS_TickLi°Remove
(
p_tcb
);

518 
p_tcb
->
PídOn
) {

519 
OS_TASK_PEND_ON_NOTHING
:

520 
OS_TASK_PEND_ON_TASK_Q
:

521 
OS_TASK_PEND_ON_TASK_SEM
:

524 
OS_TASK_PEND_ON_FLAG
:

525 
OS_TASK_PEND_ON_MULTI
:

526 
OS_TASK_PEND_ON_MUTEX
:

527 
OS_TASK_PEND_ON_Q
:

528 
OS_TASK_PEND_ON_SEM
:

529 
	`OS_PídLi°Remove
(
p_tcb
);

538 
	`OS_CRITICAL_EXIT
();

539 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

543 #i‡
OS_CFG_TASK_Q_EN
 > 0u

544 ()
	`OS_MsgQFªeAŒ
(&
p_tcb
->
MsgQ
);

547 
	`OSTaskDñHook
(
p_tcb
);

549 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

550 
	`OS_TLS_TaskDñ
(
p_tcb
);

553 #i‡
OS_CFG_DBG_EN
 > 0u

554 
	`OS_TaskDbgLi°Remove
(
p_tcb
);

556 
OSTaskQty
--;

558 
	`OS_TaskInôTCB
(
p_tcb
);

559 
p_tcb
->
TaskSèã
 = (
OS_STATE
)
OS_TASK_STATE_DEL
;

561 
	`OS_CRITICAL_EXIT_NO_SCHED
();

563 *
p_îr
 = 
OS_ERR_NONE
;

565 
	`OSSched
();

566 
	}
}

593 #i‡
OS_CFG_TASK_Q_EN
 > 0u

594 
OS_MSG_QTY
 
	$OSTaskQFlush
 (
OS_TCB
 *
p_tcb
,

595 
OS_ERR
 *
p_îr
)

597 
OS_MSG_QTY
 
íåõs
;

598 
	`CPU_SR_ALLOC
();

602 #ifde‡
OS_SAFETY_CRITICAL


603 i‡(
p_îr
 =(
OS_ERR
 *)0) {

604 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

605  ((
OS_MSG_QTY
)0);

609 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

610 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

611 *
p_îr
 = 
OS_ERR_FLUSH_ISR
;

612  ((
OS_MSG_QTY
)0);

616 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

617 
	`CPU_CRITICAL_ENTER
();

618 
p_tcb
 = 
OSTCBCurPå
;

619 
	`CPU_CRITICAL_EXIT
();

622 
	`OS_CRITICAL_ENTER
();

623 
íåõs
 = 
	`OS_MsgQFªeAŒ
(&
p_tcb
->
MsgQ
);

624 
	`OS_CRITICAL_EXIT
();

625 *
p_îr
 = 
OS_ERR_NONE
;

626  (
íåõs
);

627 
	}
}

671 #i‡
OS_CFG_TASK_Q_EN
 > 0u

672 *
	$OSTaskQPíd
 (
OS_TICK
 
timeout
,

673 
OS_OPT
 
›t
,

674 
OS_MSG_SIZE
 *
p_msg_size
,

675 
CPU_TS
 *
p_ts
,

676 
OS_ERR
 *
p_îr
)

678 
OS_MSG_Q
 *
p_msg_q
;

679 *
p_void
;

680 
	`CPU_SR_ALLOC
();

684 #ifde‡
OS_SAFETY_CRITICAL


685 i‡(
p_îr
 =(
OS_ERR
 *)0) {

686 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

691 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

692 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

693 *
p_îr
 = 
OS_ERR_PEND_ISR
;

698 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

699 i‡(
p_msg_size
 =(
OS_MSG_SIZE
 *)0) {

700 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

703 
›t
) {

704 
OS_OPT_PEND_BLOCKING
:

705 
OS_OPT_PEND_NON_BLOCKING
:

709 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

714 i‡(
p_ts
 !(
CPU_TS
 *)0) {

715 *
p_ts
 = (
CPU_TS
 )0;

718 
	`CPU_CRITICAL_ENTER
();

719 
p_msg_q
 = &
OSTCBCurPå
->
MsgQ
;

720 
p_void
 = 
	`OS_MsgQGë
(
p_msg_q
,

721 
p_msg_size
,

722 
p_ts
,

723 
p_îr
);

724 i‡(*
p_îr
 =
OS_ERR_NONE
) {

725 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

726 i‡(
p_ts
 !(
CPU_TS
 *)0) {

727 
OSTCBCurPå
->
MsgQPídTime
 = 
	`OS_TS_GET
(Ë- *
p_ts
;

728 i‡(
OSTCBCurPå
->
MsgQPídTimeMax
 < OSTCBCurPå->
MsgQPídTime
) {

729 
OSTCBCurPå
->
MsgQPídTimeMax
 = OSTCBCurPå->
MsgQPídTime
;

733 
	`CPU_CRITICAL_EXIT
();

734  (
p_void
);

737 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

738 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

739 
	`CPU_CRITICAL_EXIT
();

742 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

743 
	`CPU_CRITICAL_EXIT
();

744 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

749 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

750 
	`OS_Píd
((
OS_PEND_DATA
 *)0,

751 (
OS_PEND_OBJ
 *)0,

752 (
OS_STATE
 )
OS_TASK_PEND_ON_TASK_Q
,

753 (
OS_TICK
 )
timeout
);

754 
	`OS_CRITICAL_EXIT_NO_SCHED
();

756 
	`OSSched
();

758 
	`CPU_CRITICAL_ENTER
();

759 
OSTCBCurPå
->
PídSètus
) {

760 
OS_STATUS_PEND_OK
:

761 
p_void
 = 
OSTCBCurPå
->
MsgPå
;

762 *
p_msg_size
 = 
OSTCBCurPå
->
MsgSize
;

763 i‡(
p_ts
 !(
CPU_TS
 *)0) {

764 *
p_ts
 = 
OSTCBCurPå
->
TS
;

765 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

766 
OSTCBCurPå
->
MsgQPídTime
 = 
	`OS_TS_GET
(Ë- OSTCBCurPå->
TS
;

767 i‡(
OSTCBCurPå
->
MsgQPídTimeMax
 < OSTCBCurPå->
MsgQPídTime
) {

768 
OSTCBCurPå
->
MsgQPídTimeMax
 = OSTCBCurPå->
MsgQPídTime
;

772 *
p_îr
 = 
OS_ERR_NONE
;

775 
OS_STATUS_PEND_ABORT
:

776 
p_void
 = (*)0;

777 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

778 i‡(
p_ts
 !(
CPU_TS
 *)0) {

779 *
p_ts
 = (
CPU_TS
 )0;

781 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

784 
OS_STATUS_PEND_TIMEOUT
:

786 
p_void
 = (*)0;

787 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

788 i‡(
p_ts
 !(
CPU_TS
 *)0) {

789 *
p_ts
 = 
OSTCBCurPå
->
TS
;

791 *
p_îr
 = 
OS_ERR_TIMEOUT
;

794 
	`CPU_CRITICAL_EXIT
();

795  (
p_void
);

796 
	}
}

827 #i‡(
OS_CFG_TASK_Q_EN
 > 0uË&& (
OS_CFG_TASK_Q_PEND_ABORT_EN
 > 0u)

828 
CPU_BOOLEAN
 
	$OSTaskQPídAb‹t
 (
OS_TCB
 *
p_tcb
,

829 
OS_OPT
 
›t
,

830 
OS_ERR
 *
p_îr
)

832 
CPU_TS
 
ts
;

833 
	`CPU_SR_ALLOC
();

837 #ifde‡
OS_SAFETY_CRITICAL


838 i‡(
p_îr
 =(
OS_ERR
 *)0) {

839 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

840  (
DEF_FALSE
);

844 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

845 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

846 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

847  (
DEF_FALSE
);

851 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

852 
›t
) {

853 
OS_OPT_POST_NONE
:

854 
OS_OPT_POST_NO_SCHED
:

858 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

859  (
DEF_FALSE
);

863 
	`CPU_CRITICAL_ENTER
();

864 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

865 i‡((
p_tcb
 =(
OS_TCB
 *)0) ||

866 (
p_tcb
 =
OSTCBCurPå
)) {

867 
	`CPU_CRITICAL_EXIT
();

868 *
p_îr
 = 
OS_ERR_PEND_ABORT_SELF
;

869  (
DEF_FALSE
);

873 i‡(
p_tcb
->
PídOn
 !
OS_TASK_PEND_ON_TASK_Q
) {

874 
	`CPU_CRITICAL_EXIT
();

875 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

876  (
DEF_FALSE
);

879 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

880 
ts
 = 
	`OS_TS_GET
();

881 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)0,

882 
p_tcb
,

883 
ts
);

884 
	`OS_CRITICAL_EXIT_NO_SCHED
();

885 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

886 
	`OSSched
();

888 *
p_îr
 = 
OS_ERR_NONE
;

889  (
DEF_TRUE
);

890 
	}
}

929 #i‡
OS_CFG_TASK_Q_EN
 > 0u

930 
	$OSTaskQPo°
 (
OS_TCB
 *
p_tcb
,

931 *
p_void
,

932 
OS_MSG_SIZE
 
msg_size
,

933 
OS_OPT
 
›t
,

934 
OS_ERR
 *
p_îr
)

936 
CPU_TS
 
ts
;

940 #ifde‡
OS_SAFETY_CRITICAL


941 i‡(
p_îr
 =(
OS_ERR
 *)0) {

942 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

947 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

948 
›t
) {

949 
OS_OPT_POST_FIFO
:

950 
OS_OPT_POST_LIFO
:

951 
OS_OPT_POST_FIFO
 | 
OS_OPT_POST_NO_SCHED
:

952 
OS_OPT_POST_LIFO
 | 
OS_OPT_POST_NO_SCHED
:

956 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

961 
ts
 = 
	`OS_TS_GET
();

963 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

964 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

965 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_TASK_MSG
,

966 (*)
p_tcb
,

967 (*)
p_void
,

968 (
OS_MSG_SIZE
)
msg_size
,

969 (
OS_FLAGS
 )0,

970 (
OS_OPT
 )
›t
,

971 (
CPU_TS
 )
ts
,

972 (
OS_ERR
 *)
p_îr
);

977 
	`OS_TaskQPo°
(
p_tcb
,

978 
p_void
,

979 
msg_size
,

980 
›t
,

981 
ts
,

982 
p_îr
);

983 
	}
}

1010 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1011 
OS_REG
 
	$OSTaskRegGë
 (
OS_TCB
 *
p_tcb
,

1012 
OS_REG_ID
 
id
,

1013 
OS_ERR
 *
p_îr
)

1015 
OS_REG
 
vÆue
;

1016 
	`CPU_SR_ALLOC
();

1020 #ifde‡
OS_SAFETY_CRITICAL


1021 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1022 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1023  ((
OS_REG
)0);

1027 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1028 i‡(
id
 >
OS_CFG_TASK_REG_TBL_SIZE
) {

1029 *
p_îr
 = 
OS_ERR_REG_ID_INVALID
;

1030  ((
OS_REG
)0);

1034 
	`CPU_CRITICAL_ENTER
();

1035 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1036 
p_tcb
 = 
OSTCBCurPå
;

1038 
vÆue
 = 
p_tcb
->
RegTbl
[
id
];

1039 
	`CPU_CRITICAL_EXIT
();

1040 *
p_îr
 = 
OS_ERR_NONE
;

1041  ((
OS_REG
)
vÆue
);

1042 
	}
}

1063 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1064 
OS_REG_ID
 
	$OSTaskRegGëID
 (
OS_ERR
 *
p_îr
)

1066 
OS_REG_ID
 
id
;

1067 
	`CPU_SR_ALLOC
();

1071 #ifde‡
OS_SAFETY_CRITICAL


1072 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1073 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1074  ((
OS_REG_ID
)
OS_CFG_TASK_REG_TBL_SIZE
);

1078 
	`CPU_CRITICAL_ENTER
();

1079 i‡(
OSTaskRegNextAvaûID
 >
OS_CFG_TASK_REG_TBL_SIZE
) {

1080 *
p_îr
 = 
OS_ERR_NO_MORE_ID_AVAIL
;

1081 
	`CPU_CRITICAL_EXIT
();

1082  ((
OS_REG_ID
)
OS_CFG_TASK_REG_TBL_SIZE
);

1085 
id
 = 
OSTaskRegNextAvaûID
;

1086 
OSTaskRegNextAvaûID
++;

1087 
	`CPU_CRITICAL_EXIT
();

1088 *
p_îr
 = 
OS_ERR_NONE
;

1089  (
id
);

1090 
	}
}

1119 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1120 
	$OSTaskRegSë
 (
OS_TCB
 *
p_tcb
,

1121 
OS_REG_ID
 
id
,

1122 
OS_REG
 
vÆue
,

1123 
OS_ERR
 *
p_îr
)

1125 
	`CPU_SR_ALLOC
();

1129 #ifde‡
OS_SAFETY_CRITICAL


1130 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1131 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1136 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1137 i‡(
id
 >
OS_CFG_TASK_REG_TBL_SIZE
) {

1138 *
p_îr
 = 
OS_ERR_REG_ID_INVALID
;

1143 
	`CPU_CRITICAL_ENTER
();

1144 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1145 
p_tcb
 = 
OSTCBCurPå
;

1147 
p_tcb
->
RegTbl
[
id
] = 
vÆue
;

1148 
	`CPU_CRITICAL_EXIT
();

1149 *
p_îr
 = 
OS_ERR_NONE
;

1150 
	}
}

1175 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1176 
	$OSTaskResume
 (
OS_TCB
 *
p_tcb
,

1177 
OS_ERR
 *
p_îr
)

1179 
	`CPU_SR_ALLOC
();

1183 #ifde‡
OS_SAFETY_CRITICAL


1184 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1185 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1190 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 == 0u) && \

1191 (
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u)

1192 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1193 *
p_îr
 = 
OS_ERR_TASK_RESUME_ISR
;

1199 
	`CPU_CRITICAL_ENTER
();

1200 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1201 i‡((
p_tcb
 =(
OS_TCB
 *)0) ||

1202 (
p_tcb
 =
OSTCBCurPå
)) {

1203 
	`CPU_CRITICAL_EXIT
();

1204 *
p_îr
 = 
OS_ERR_TASK_RESUME_SELF
;

1208 
	`CPU_CRITICAL_EXIT
();

1210 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

1211 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1212 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_TASK_RESUME
,

1213 (*)
p_tcb
,

1215 (
OS_MSG_SIZE
)0,

1216 (
OS_FLAGS
 )0,

1217 (
OS_OPT
 )0,

1218 (
CPU_TS
 )0,

1219 (
OS_ERR
 *)
p_îr
);

1224 
	`OS_TaskResume
(
p_tcb
, 
p_îr
);

1225 
	}
}

1262 
OS_SEM_CTR
 
	$OSTaskSemPíd
 (
OS_TICK
 
timeout
,

1263 
OS_OPT
 
›t
,

1264 
CPU_TS
 *
p_ts
,

1265 
OS_ERR
 *
p_îr
)

1267 
OS_SEM_CTR
 
˘r
;

1268 
	`CPU_SR_ALLOC
();

1272 #ifde‡
OS_SAFETY_CRITICAL


1273 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1274 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1275  ((
OS_SEM_CTR
)0);

1279 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

1280 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1281 *
p_îr
 = 
OS_ERR_PEND_ISR
;

1282  ((
OS_SEM_CTR
)0);

1286 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1287 
›t
) {

1288 
OS_OPT_PEND_BLOCKING
:

1289 
OS_OPT_PEND_NON_BLOCKING
:

1293 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

1294  ((
OS_SEM_CTR
)0);

1298 i‡(
p_ts
 !(
CPU_TS
 *)0) {

1299 *
p_ts
 = (
CPU_TS
 )0;

1302 
	`CPU_CRITICAL_ENTER
();

1303 i‡(
OSTCBCurPå
->
SemCå
 > (
OS_SEM_CTR
)0) {

1304 
OSTCBCurPå
->
SemCå
--;

1305 
˘r
 = 
OSTCBCurPå
->
SemCå
;

1306 i‡(
p_ts
 !(
CPU_TS
 *)0) {

1307 *
p_ts
 = 
OSTCBCurPå
->
TS
;

1309 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

1310 
OSTCBCurPå
->
SemPídTime
 = 
	`OS_TS_GET
(Ë- OSTCBCurPå->
TS
;

1311 i‡(
OSTCBCurPå
->
SemPídTimeMax
 < OSTCBCurPå->
SemPídTime
) {

1312 
OSTCBCurPå
->
SemPídTimeMax
 = OSTCBCurPå->
SemPídTime
;

1315 
	`CPU_CRITICAL_EXIT
();

1316 *
p_îr
 = 
OS_ERR_NONE
;

1317  (
˘r
);

1320 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

1321 
	`CPU_CRITICAL_EXIT
();

1322 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

1323  ((
OS_SEM_CTR
)0);

1325 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

1326 
	`CPU_CRITICAL_EXIT
();

1327 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

1328  ((
OS_SEM_CTR
)0);

1332 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

1333 
	`OS_Píd
((
OS_PEND_DATA
 *)0,

1334 (
OS_PEND_OBJ
 *)0,

1335 (
OS_STATE
 )
OS_TASK_PEND_ON_TASK_SEM
,

1336 (
OS_TICK
 )
timeout
);

1337 
	`OS_CRITICAL_EXIT_NO_SCHED
();

1339 
	`OSSched
();

1341 
	`CPU_CRITICAL_ENTER
();

1342 
OSTCBCurPå
->
PídSètus
) {

1343 
OS_STATUS_PEND_OK
:

1344 i‡(
p_ts
 !(
CPU_TS
 *)0) {

1345 *
p_ts
 = 
OSTCBCurPå
->
TS
;

1346 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

1347 
OSTCBCurPå
->
SemPídTime
 = 
	`OS_TS_GET
(Ë- OSTCBCurPå->
TS
;

1348 i‡(
OSTCBCurPå
->
SemPídTimeMax
 < OSTCBCurPå->
SemPídTime
) {

1349 
OSTCBCurPå
->
SemPídTimeMax
 = OSTCBCurPå->
SemPídTime
;

1353 *
p_îr
 = 
OS_ERR_NONE
;

1356 
OS_STATUS_PEND_ABORT
:

1357 i‡(
p_ts
 !(
CPU_TS
 *)0) {

1358 *
p_ts
 = 
OSTCBCurPå
->
TS
;

1360 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

1363 
OS_STATUS_PEND_TIMEOUT
:

1364 i‡(
p_ts
 !(
CPU_TS
 *)0) {

1365 *
p_ts
 = (
CPU_TS
 )0;

1367 *
p_îr
 = 
OS_ERR_TIMEOUT
;

1371 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

1374 
˘r
 = 
OSTCBCurPå
->
SemCå
;

1375 
	`CPU_CRITICAL_EXIT
();

1376  (
˘r
);

1377 
	}
}

1408 #i‡
OS_CFG_TASK_SEM_PEND_ABORT_EN
 > 0u

1409 
CPU_BOOLEAN
 
	$OSTaskSemPídAb‹t
 (
OS_TCB
 *
p_tcb
,

1410 
OS_OPT
 
›t
,

1411 
OS_ERR
 *
p_îr
)

1413 
CPU_TS
 
ts
;

1414 
	`CPU_SR_ALLOC
();

1418 #ifde‡
OS_SAFETY_CRITICAL


1419 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1420 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1421  (
DEF_FALSE
);

1425 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

1426 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1427 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

1428  (
DEF_FALSE
);

1432 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1433 
›t
) {

1434 
OS_OPT_POST_NONE
:

1435 
OS_OPT_POST_NO_SCHED
:

1439 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

1440  (
DEF_FALSE
);

1444 
	`CPU_CRITICAL_ENTER
();

1445 i‡((
p_tcb
 =(
OS_TCB
 *)0) ||

1446 (
p_tcb
 =
OSTCBCurPå
)) {

1447 
	`CPU_CRITICAL_EXIT
();

1448 *
p_îr
 = 
OS_ERR_PEND_ABORT_SELF
;

1449  (
DEF_FALSE
);

1452 i‡(
p_tcb
->
PídOn
 !
OS_TASK_PEND_ON_TASK_SEM
) {

1453 
	`CPU_CRITICAL_EXIT
();

1454 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

1455  (
DEF_FALSE
);

1457 
	`CPU_CRITICAL_EXIT
();

1459 
	`OS_CRITICAL_ENTER
();

1460 
ts
 = 
	`OS_TS_GET
();

1461 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)0,

1462 
p_tcb
,

1463 
ts
);

1464 
	`OS_CRITICAL_EXIT_NO_SCHED
();

1465 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

1466 
	`OSSched
();

1468 *
p_îr
 = 
OS_ERR_NONE
;

1469  (
DEF_TRUE
);

1470 
	}
}

1497 
OS_SEM_CTR
 
	$OSTaskSemPo°
 (
OS_TCB
 *
p_tcb
,

1498 
OS_OPT
 
›t
,

1499 
OS_ERR
 *
p_îr
)

1501 
OS_SEM_CTR
 
˘r
;

1502 
CPU_TS
 
ts
;

1506 #ifde‡
OS_SAFETY_CRITICAL


1507 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1508 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1509  ((
OS_SEM_CTR
)0);

1513 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1514 
›t
) {

1515 
OS_OPT_POST_NONE
:

1516 
OS_OPT_POST_NO_SCHED
:

1520 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

1521  ((
OS_SEM_CTR
)0u);

1525 
ts
 = 
	`OS_TS_GET
();

1527 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

1528 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1529 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_TASK_SIGNAL
,

1530 (*)
p_tcb
,

1532 (
OS_MSG_SIZE
)0,

1533 (
OS_FLAGS
 )0,

1534 (
OS_OPT
 )0,

1535 (
CPU_TS
 )
ts
,

1536 (
OS_ERR
 *)
p_îr
);

1537  ((
OS_SEM_CTR
)0);

1541 
˘r
 = 
	`OS_TaskSemPo°
(
p_tcb
,

1542 
›t
,

1543 
ts
,

1544 
p_îr
);

1546  (
˘r
);

1547 
	}
}

1570 
OS_SEM_CTR
 
	$OSTaskSemSë
 (
OS_TCB
 *
p_tcb
,

1571 
OS_SEM_CTR
 
˙t
,

1572 
OS_ERR
 *
p_îr
)

1574 
OS_SEM_CTR
 
˘r
;

1575 
	`CPU_SR_ALLOC
();

1579 #ifde‡
OS_SAFETY_CRITICAL


1580 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1581 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1582  ((
OS_SEM_CTR
)0);

1586 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

1587 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1588 *
p_îr
 = 
OS_ERR_SET_ISR
;

1589  ((
OS_SEM_CTR
)0);

1593 
	`CPU_CRITICAL_ENTER
();

1594 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1595 
p_tcb
 = 
OSTCBCurPå
;

1597 
˘r
 = 
p_tcb
->
SemCå
;

1598 
p_tcb
->
SemCå
 = (
OS_SEM_CTR
)
˙t
;

1599 
	`CPU_CRITICAL_EXIT
();

1600 *
p_îr
 = 
OS_ERR_NONE
;

1601  (
˘r
);

1602 
	}
}

1629 #i‡
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u

1630 
	$OSTaskStkChk
 (
OS_TCB
 *
p_tcb
,

1631 
CPU_STK_SIZE
 *
p_‰ì
,

1632 
CPU_STK_SIZE
 *
p_u£d
,

1633 
OS_ERR
 *
p_îr
)

1635 
CPU_STK_SIZE
 
‰ì_°k
;

1636 
CPU_STK
 *
p_°k
;

1637 
	`CPU_SR_ALLOC
();

1641 #ifde‡
OS_SAFETY_CRITICAL


1642 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1643 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1648 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

1649 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1650 *
p_îr
 = 
OS_ERR_TASK_STK_CHK_ISR
;

1655 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1656 i‡(
p_‰ì
 =(
CPU_STK_SIZE
*)0) {

1657 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

1661 i‡(
p_u£d
 =(
CPU_STK_SIZE
*)0) {

1662 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

1667 
	`CPU_CRITICAL_ENTER
();

1668 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1669 
p_tcb
 = 
OSTCBCurPå
;

1672 i‡(
p_tcb
->
StkPå
 =(
CPU_STK
*)0) {

1673 
	`CPU_CRITICAL_EXIT
();

1674 *
p_‰ì
 = (
CPU_STK_SIZE
)0;

1675 *
p_u£d
 = (
CPU_STK_SIZE
)0;

1676 *
p_îr
 = 
OS_ERR_TASK_NOT_EXIST
;

1680 i‡((
p_tcb
->
O±
 & 
OS_OPT_TASK_STK_CHK
Ë=(
OS_OPT
)0) {

1681 
	`CPU_CRITICAL_EXIT
();

1682 *
p_‰ì
 = (
CPU_STK_SIZE
)0;

1683 *
p_u£d
 = (
CPU_STK_SIZE
)0;

1684 *
p_îr
 = 
OS_ERR_TASK_OPT
;

1687 
	`CPU_CRITICAL_EXIT
();

1689 
‰ì_°k
 = 0u;

1690 #i‡
CPU_CFG_STK_GROWTH
 =
CPU_STK_GROWTH_HI_TO_LO


1691 
p_°k
 = 
p_tcb
->
StkBa£På
;

1692 *
p_°k
 =(
CPU_STK
)0) {

1693 
p_°k
++;

1694 
‰ì_°k
++;

1697 
p_°k
 = 
p_tcb
->
StkBa£På
 +Ö_tcb->
StkSize
 - 1u;

1698 *
p_°k
 =(
CPU_STK
)0) {

1699 
‰ì_°k
++;

1700 
p_°k
--;

1703 *
p_‰ì
 = 
‰ì_°k
;

1704 *
p_u£d
 = (
p_tcb
->
StkSize
 - 
‰ì_°k
);

1705 *
p_îr
 = 
OS_ERR_NONE
;

1706 
	}
}

1737 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1738 
	$OSTaskSu•íd
 (
OS_TCB
 *
p_tcb
,

1739 
OS_ERR
 *
p_îr
)

1741 #ifde‡
OS_SAFETY_CRITICAL


1742 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1743 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1748 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 == 0u) && \

1749 (
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u)

1750 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1751 *
p_îr
 = 
OS_ERR_TASK_SUSPEND_ISR
;

1756 i‡(
p_tcb
 =&
OSIdÀTaskTCB
) {

1757 *
p_îr
 = 
OS_ERR_TASK_SUSPEND_IDLE
;

1761 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

1762 i‡(
p_tcb
 =&
OSI¡QTaskTCB
) {

1763 *
p_îr
 = 
OS_ERR_TASK_SUSPEND_INT_HANDLER
;

1767 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1768 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
)
OS_OBJ_TYPE_TASK_SUSPEND
,

1769 (*)
p_tcb
,

1771 (
OS_MSG_SIZE
)0,

1772 (
OS_FLAGS
 )0,

1773 (
OS_OPT
 )0,

1774 (
CPU_TS
 )0,

1775 (
OS_ERR
 *)
p_îr
);

1780 
	`OS_TaskSu•íd
(
p_tcb
, 
p_îr
);

1781 
	}
}

1805 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

1806 
	$OSTaskTimeQu™èSë
 (
OS_TCB
 *
p_tcb
,

1807 
OS_TICK
 
time_qu™è
,

1808 
OS_ERR
 *
p_îr
)

1810 
	`CPU_SR_ALLOC
();

1814 #ifde‡
OS_SAFETY_CRITICAL


1815 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1816 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1821 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

1822 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1823 *
p_îr
 = 
OS_ERR_SET_ISR
;

1828 
	`CPU_CRITICAL_ENTER
();

1829 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1830 
p_tcb
 = 
OSTCBCurPå
;

1833 i‡(
time_qu™è
 == 0u) {

1834 
p_tcb
->
TimeQu™è
 = 
OSSchedRoundRoböDÊtTimeQu™è
;

1836 
p_tcb
->
TimeQu™è
 = 
time_qu™è
;

1838 i‡(
p_tcb
->
TimeQu™è
 >Ö_tcb->
TimeQu™èCå
) {

1839 
p_tcb
->
TimeQu™èCå
 =Ö_tcb->
TimeQu™è
;

1841 
	`CPU_CRITICAL_EXIT
();

1842 *
p_îr
 = 
OS_ERR_NONE
;

1843 
	}
}

1861 #i‡
OS_CFG_DBG_EN
 > 0u

1862 
	$OS_TaskDbgLi°Add
 (
OS_TCB
 *
p_tcb
)

1864 
p_tcb
->
DbgPªvPå
 = (
OS_TCB
 *)0;

1865 i‡(
OSTaskDbgLi°På
 =(
OS_TCB
 *)0) {

1866 
p_tcb
->
DbgNextPå
 = (
OS_TCB
 *)0;

1868 
p_tcb
->
DbgNextPå
 = 
OSTaskDbgLi°På
;

1869 
OSTaskDbgLi°På
->
DbgPªvPå
 = 
p_tcb
;

1871 
OSTaskDbgLi°På
 = 
p_tcb
;

1872 
	}
}

1876 
	$OS_TaskDbgLi°Remove
 (
OS_TCB
 *
p_tcb
)

1878 
OS_TCB
 *
p_tcb_√xt
;

1879 
OS_TCB
 *
p_tcb_¥ev
;

1882 
p_tcb_¥ev
 = 
p_tcb
->
DbgPªvPå
;

1883 
p_tcb_√xt
 = 
p_tcb
->
DbgNextPå
;

1885 i‡(
p_tcb_¥ev
 =(
OS_TCB
 *)0) {

1886 
OSTaskDbgLi°På
 = 
p_tcb_√xt
;

1887 i‡(
p_tcb_√xt
 !(
OS_TCB
 *)0) {

1888 
p_tcb_√xt
->
DbgPªvPå
 = (
OS_TCB
 *)0;

1890 
p_tcb
->
DbgNextPå
 = (
OS_TCB
 *)0;

1892 } i‡(
p_tcb_√xt
 =(
OS_TCB
 *)0) {

1893 
p_tcb_¥ev
->
DbgNextPå
 = (
OS_TCB
 *)0;

1894 
p_tcb
->
DbgPªvPå
 = (
OS_TCB
 *)0;

1897 
p_tcb_¥ev
->
DbgNextPå
 = 
p_tcb_√xt
;

1898 
p_tcb_√xt
->
DbgPªvPå
 = 
p_tcb_¥ev
;

1899 
p_tcb
->
DbgNextPå
 = (
OS_TCB
 *)0;

1900 
p_tcb
->
DbgPªvPå
 = (
OS_TCB
 *)0;

1902 
	}
}

1923 
	$OS_TaskInô
 (
OS_ERR
 *
p_îr
)

1925 #ifde‡
OS_SAFETY_CRITICAL


1926 i‡(
p_îr
 =(
OS_ERR
 *)0) {

1927 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

1932 #i‡
OS_CFG_DBG_EN
 > 0u

1933 
OSTaskDbgLi°På
 = (
OS_TCB
 *)0;

1936 
OSTaskQty
 = (
OS_OBJ_QTY
 )0;

1937 
OSTaskCtxSwCå
 = (
OS_CTX_SW_CTR
)0;

1939 *
p_îr
 = 
OS_ERR_NONE
;

1940 
	}
}

1957 
	$OS_TaskInôTCB
 (
OS_TCB
 *
p_tcb
)

1959 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1960 
OS_REG_ID
 
ªg_id
;

1962 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

1963 
OS_TLS_ID
 
id
;

1965 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

1966 
CPU_TS
 
ts
;

1970 
p_tcb
->
StkPå
 = (
CPU_STK
 *)0;

1971 
p_tcb
->
StkLimôPå
 = (
CPU_STK
 *)0;

1973 
p_tcb
->
ExtPå
 = (*)0;

1975 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

1976 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

1978 
p_tcb
->
TickNextPå
 = (
OS_TCB
 *)0;

1979 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

1980 
p_tcb
->
TickSpokePå
 = (
OS_TICK_SPOKE
 *)0;

1982 
p_tcb
->
NamePå
 = (
CPU_CHAR
 *)((*)"?Task");

1984 
p_tcb
->
StkBa£På
 = (
CPU_STK
 *)0;

1986 
p_tcb
->
TaskE¡ryAddr
 = (
OS_TASK_PTR
 )0;

1987 
p_tcb
->
TaskE¡ryArg
 = (*)0;

1989 #i‡(
OS_CFG_PEND_MULTI_EN
 > 0u)

1990 
p_tcb
->
PídD©aTblPå
 = (
OS_PEND_DATA
 *)0;

1991 
p_tcb
->
PídD©aTblE¡rõs
 = (
OS_OBJ_QTY
 )0u;

1994 
p_tcb
->
TS
 = (
CPU_TS
 )0u;

1996 #i‡(
OS_MSG_EN
 > 0u)

1997 
p_tcb
->
MsgPå
 = (*)0;

1998 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
 )0u;

2001 #i‡
OS_CFG_TASK_Q_EN
 > 0u

2002 
	`OS_MsgQInô
(&
p_tcb
->
MsgQ
,

2003 (
OS_MSG_QTY
)0u);

2004 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

2005 
p_tcb
->
MsgQPídTime
 = (
CPU_TS
 )0u;

2006 
p_tcb
->
MsgQPídTimeMax
 = (
CPU_TS
 )0u;

2010 #i‡
OS_CFG_FLAG_EN
 > 0u

2011 
p_tcb
->
FœgsPíd
 = (
OS_FLAGS
 )0u;

2012 
p_tcb
->
FœgsO±
 = (
OS_OPT
 )0u;

2013 
p_tcb
->
FœgsRdy
 = (
OS_FLAGS
 )0u;

2016 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

2017 
ªg_id
 = 0u;Ñeg_id < 
OS_CFG_TASK_REG_TBL_SIZE
;Ñeg_id++) {

2018 
p_tcb
->
RegTbl
[
ªg_id
] = (
OS_REG
)0u;

2022 #i‡
	`deföed
(
OS_CFG_TLS_TBL_SIZE
) && (OS_CFG_TLS_TBL_SIZE > 0u)

2023 
id
 = 0u; id < 
OS_CFG_TLS_TBL_SIZE
; id++) {

2024 
p_tcb
->
TLS_Tbl
[
id
] = (
OS_TLS
)0;

2028 
p_tcb
->
SemCå
 = (
OS_SEM_CTR
 )0u;

2029 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

2030 
p_tcb
->
SemPídTime
 = (
CPU_TS
 )0u;

2031 
p_tcb
->
SemPídTimeMax
 = (
CPU_TS
 )0u;

2034 
p_tcb
->
StkSize
 = (
CPU_STK_SIZE
 )0u;

2037 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

2038 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
 )0u;

2041 #i‡
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u

2042 
p_tcb
->
StkFªe
 = (
CPU_STK_SIZE
 )0u;

2043 
p_tcb
->
StkU£d
 = (
CPU_STK_SIZE
 )0u;

2046 
p_tcb
->
O±
 = (
OS_OPT
 )0u;

2048 
p_tcb
->
TickCåPªv
 = (
OS_TICK
 )
OS_TICK_TH_INIT
;

2049 
p_tcb
->
TickCåM©ch
 = (
OS_TICK
 )0u;

2050 
p_tcb
->
TickRemaö
 = (
OS_TICK
 )0u;

2052 
p_tcb
->
TimeQu™è
 = (
OS_TICK
 )0u;

2053 
p_tcb
->
TimeQu™èCå
 = (
OS_TICK
 )0u;

2055 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

2056 
p_tcb
->
CPUUßge
 = (
OS_CPU_USAGE
 )0u;

2057 
p_tcb
->
CPUUßgeMax
 = (
OS_CPU_USAGE
 )0u;

2058 
p_tcb
->
CtxSwCå
 = (
OS_CTX_SW_CTR
 )0u;

2059 
p_tcb
->
Cy˛esDñè
 = (
CPU_TS
 )0u;

2060 
ts
 = 
	`OS_TS_GET
();

2061 
p_tcb
->
Cy˛esSèπ
 = 
ts
;

2062 
p_tcb
->
Cy˛esTŸÆ
 = (
OS_CYCLES
 )0u;

2064 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


2065 
p_tcb
->
I¡DisTimeMax
 = (
CPU_TS
 )0u;

2067 #i‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u

2068 
p_tcb
->
SchedLockTimeMax
 = (
CPU_TS
 )0u;

2071 
p_tcb
->
PídOn
 = (
OS_STATE
 )
OS_TASK_PEND_ON_NOTHING
;

2072 
p_tcb
->
PídSètus
 = (
OS_STATUS
 )
OS_STATUS_PEND_OK
;

2073 
p_tcb
->
TaskSèã
 = (
OS_STATE
 )
OS_TASK_STATE_RDY
;

2075 
p_tcb
->
Prio
 = (
OS_PRIO
 )
OS_PRIO_INIT
;

2077 #i‡
OS_CFG_DBG_EN
 > 0u

2078 
p_tcb
->
DbgPªvPå
 = (
OS_TCB
 *)0;

2079 
p_tcb
->
DbgNextPå
 = (
OS_TCB
 *)0;

2080 
p_tcb
->
DbgNamePå
 = (
CPU_CHAR
 *)((*)" ");

2082 
	}
}

2126 #i‡
OS_CFG_TASK_Q_EN
 > 0u

2127 
	$OS_TaskQPo°
 (
OS_TCB
 *
p_tcb
,

2128 *
p_void
,

2129 
OS_MSG_SIZE
 
msg_size
,

2130 
OS_OPT
 
›t
,

2131 
CPU_TS
 
ts
,

2132 
OS_ERR
 *
p_îr
)

2134 
	`CPU_SR_ALLOC
();

2138 
	`OS_CRITICAL_ENTER
();

2139 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

2140 
p_tcb
 = 
OSTCBCurPå
;

2142 *
p_îr
 = 
OS_ERR_NONE
;

2143 
p_tcb
->
TaskSèã
) {

2144 
OS_TASK_STATE_RDY
:

2145 
OS_TASK_STATE_DLY
:

2146 
OS_TASK_STATE_SUSPENDED
:

2147 
OS_TASK_STATE_DLY_SUSPENDED
:

2148 
	`OS_MsgQPut
(&
p_tcb
->
MsgQ
,

2149 
p_void
,

2150 
msg_size
,

2151 
›t
,

2152 
ts
,

2153 
p_îr
);

2154 
	`OS_CRITICAL_EXIT
();

2157 
OS_TASK_STATE_PEND
:

2158 
OS_TASK_STATE_PEND_TIMEOUT
:

2159 
OS_TASK_STATE_PEND_SUSPENDED
:

2160 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

2161 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_TASK_Q
) {

2162 
	`OS_Po°
((
OS_PEND_OBJ
 *)0,

2163 
p_tcb
,

2164 
p_void
,

2165 
msg_size
,

2166 
ts
);

2167 
	`OS_CRITICAL_EXIT_NO_SCHED
();

2168 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0u) {

2169 
	`OSSched
();

2172 
	`OS_MsgQPut
(&
p_tcb
->
MsgQ
,

2173 
p_void
,

2174 
msg_size
,

2175 
›t
,

2176 
ts
,

2177 
p_îr
);

2178 
	`OS_CRITICAL_EXIT
();

2183 
	`OS_CRITICAL_EXIT
();

2184 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

2187 
	}
}

2214 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

2215 
	$OS_TaskResume
 (
OS_TCB
 *
p_tcb
,

2216 
OS_ERR
 *
p_îr
)

2218 
	`CPU_SR_ALLOC
();

2221 
	`CPU_CRITICAL_ENTER
();

2222 *
p_îr
 = 
OS_ERR_NONE
;

2223 
p_tcb
->
TaskSèã
) {

2224 
OS_TASK_STATE_RDY
:

2225 
OS_TASK_STATE_DLY
:

2226 
OS_TASK_STATE_PEND
:

2227 
OS_TASK_STATE_PEND_TIMEOUT
:

2228 
	`CPU_CRITICAL_EXIT
();

2229 *
p_îr
 = 
OS_ERR_TASK_NOT_SUSPENDED
;

2232 
OS_TASK_STATE_SUSPENDED
:

2233 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

2234 
p_tcb
->
Su•ídCå
--;

2235 i‡(
p_tcb
->
Su•ídCå
 =(
OS_NESTING_CTR
)0) {

2236 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

2237 
	`OS_TaskRdy
(
p_tcb
);

2239 
	`OS_CRITICAL_EXIT_NO_SCHED
();

2242 
OS_TASK_STATE_DLY_SUSPENDED
:

2243 
p_tcb
->
Su•ídCå
--;

2244 i‡(
p_tcb
->
Su•ídCå
 =(
OS_NESTING_CTR
)0) {

2245 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_DLY
;

2247 
	`CPU_CRITICAL_EXIT
();

2250 
OS_TASK_STATE_PEND_SUSPENDED
:

2251 
p_tcb
->
Su•ídCå
--;

2252 i‡(
p_tcb
->
Su•ídCå
 =(
OS_NESTING_CTR
)0) {

2253 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND
;

2255 
	`CPU_CRITICAL_EXIT
();

2258 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

2259 
p_tcb
->
Su•ídCå
--;

2260 i‡(
p_tcb
->
Su•ídCå
 =(
OS_NESTING_CTR
)0) {

2261 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND_TIMEOUT
;

2263 
	`CPU_CRITICAL_EXIT
();

2267 
	`CPU_CRITICAL_EXIT
();

2268 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

2272 
	`OSSched
();

2273 
	}
}

2292 
	$OS_TaskRëu∫
 ()

2294 
OS_ERR
 
îr
;

2298 
	`OSTaskRëu∫Hook
(
OSTCBCurPå
);

2299 #i‡
OS_CFG_TASK_DEL_EN
 > 0u

2300 
	`OSTaskDñ
((
OS_TCB
 *)0,

2301 (
OS_ERR
 *)&
îr
);

2304 
	`OSTimeDly
((
OS_TICK
 )
OSCfg_TickR©e_Hz
,

2305 (
OS_OPT
 )
OS_OPT_TIME_DLY
,

2306 (
OS_ERR
 *)&
îr
);

2309 
	}
}

2342 
OS_SEM_CTR
 
	$OS_TaskSemPo°
 (
OS_TCB
 *
p_tcb
,

2343 
OS_OPT
 
›t
,

2344 
CPU_TS
 
ts
,

2345 
OS_ERR
 *
p_îr
)

2347 
OS_SEM_CTR
 
˘r
;

2348 
	`CPU_SR_ALLOC
();

2352 
	`OS_CRITICAL_ENTER
();

2353 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

2354 
p_tcb
 = 
OSTCBCurPå
;

2356 
p_tcb
->
TS
 = 
ts
;

2357 *
p_îr
 = 
OS_ERR_NONE
;

2358 
p_tcb
->
TaskSèã
) {

2359 
OS_TASK_STATE_RDY
:

2360 
OS_TASK_STATE_DLY
:

2361 
OS_TASK_STATE_SUSPENDED
:

2362 
OS_TASK_STATE_DLY_SUSPENDED
:

2363 (
OS_SEM_CTR
)) {

2365 i‡(
p_tcb
->
SemCå
 =
DEF_INT_08U_MAX_VAL
) {

2366 
	`OS_CRITICAL_EXIT
();

2367 *
p_îr
 = 
OS_ERR_SEM_OVF
;

2368  ((
OS_SEM_CTR
)0);

2373 i‡(
p_tcb
->
SemCå
 =
DEF_INT_16U_MAX_VAL
) {

2374 
	`OS_CRITICAL_EXIT
();

2375 *
p_îr
 = 
OS_ERR_SEM_OVF
;

2376  ((
OS_SEM_CTR
)0);

2381 i‡(
p_tcb
->
SemCå
 =
DEF_INT_32U_MAX_VAL
) {

2382 
	`OS_CRITICAL_EXIT
();

2383 *
p_îr
 = 
OS_ERR_SEM_OVF
;

2384  ((
OS_SEM_CTR
)0);

2391 
p_tcb
->
SemCå
++;

2392 
˘r
 = 
p_tcb
->
SemCå
;

2393 
	`OS_CRITICAL_EXIT
();

2396 
OS_TASK_STATE_PEND
:

2397 
OS_TASK_STATE_PEND_TIMEOUT
:

2398 
OS_TASK_STATE_PEND_SUSPENDED
:

2399 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

2400 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_TASK_SEM
) {

2401 
	`OS_Po°
((
OS_PEND_OBJ
 *)0,

2402 (
OS_TCB
 *)
p_tcb
,

2404 (
OS_MSG_SIZE
 )0u,

2405 (
CPU_TS
 )
ts
);

2406 
˘r
 = 
p_tcb
->
SemCå
;

2407 
	`OS_CRITICAL_EXIT_NO_SCHED
();

2408 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

2409 
	`OSSched
();

2412 (
OS_SEM_CTR
)) {

2414 i‡(
p_tcb
->
SemCå
 =
DEF_INT_08U_MAX_VAL
) {

2415 
	`OS_CRITICAL_EXIT
();

2416 *
p_îr
 = 
OS_ERR_SEM_OVF
;

2417  ((
OS_SEM_CTR
)0);

2422 i‡(
p_tcb
->
SemCå
 =
DEF_INT_16U_MAX_VAL
) {

2423 
	`OS_CRITICAL_EXIT
();

2424 *
p_îr
 = 
OS_ERR_SEM_OVF
;

2425  ((
OS_SEM_CTR
)0);

2430 i‡(
p_tcb
->
SemCå
 =
DEF_INT_32U_MAX_VAL
) {

2431 
	`OS_CRITICAL_EXIT
();

2432 *
p_îr
 = 
OS_ERR_SEM_OVF
;

2433  ((
OS_SEM_CTR
)0);

2440 
p_tcb
->
SemCå
++;

2441 
˘r
 = 
p_tcb
->
SemCå
;

2442 
	`OS_CRITICAL_EXIT
();

2447 
	`OS_CRITICAL_EXIT
();

2448 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

2449 
˘r
 = (
OS_SEM_CTR
)0;

2452  (
˘r
);

2453 
	}
}

2485 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

2486 
	$OS_TaskSu•íd
 (
OS_TCB
 *
p_tcb
,

2487 
OS_ERR
 *
p_îr
)

2489 
	`CPU_SR_ALLOC
();

2493 
	`CPU_CRITICAL_ENTER
();

2494 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

2495 
p_tcb
 = 
OSTCBCurPå
;

2498 i‡(
p_tcb
 =
OSTCBCurPå
) {

2499 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

2500 
	`CPU_CRITICAL_EXIT
();

2501 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

2506 *
p_îr
 = 
OS_ERR_NONE
;

2507 
p_tcb
->
TaskSèã
) {

2508 
OS_TASK_STATE_RDY
:

2509 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

2510 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

2511 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
)1;

2512 
	`OS_RdyLi°Remove
(
p_tcb
);

2513 
	`OS_CRITICAL_EXIT_NO_SCHED
();

2516 
OS_TASK_STATE_DLY
:

2517 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_DLY_SUSPENDED
;

2518 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
)1;

2519 
	`CPU_CRITICAL_EXIT
();

2522 
OS_TASK_STATE_PEND
:

2523 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND_SUSPENDED
;

2524 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
)1;

2525 
	`CPU_CRITICAL_EXIT
();

2528 
OS_TASK_STATE_PEND_TIMEOUT
:

2529 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
;

2530 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
)1;

2531 
	`CPU_CRITICAL_EXIT
();

2534 
OS_TASK_STATE_SUSPENDED
:

2535 
OS_TASK_STATE_DLY_SUSPENDED
:

2536 
OS_TASK_STATE_PEND_SUSPENDED
:

2537 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

2538 
p_tcb
->
Su•ídCå
++;

2539 
	`CPU_CRITICAL_EXIT
();

2543 
	`CPU_CRITICAL_EXIT
();

2544 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

2548 
	`OSSched
();

2549 
	}
}

	@UCOSIII/uCOS-III/Source/os_tick.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_tick__c
 = "$Id: $";

61 
	$OS_TickTask
 (*
p_¨g
)

63 
OS_ERR
 
îr
;

64 
CPU_TS
 
ts
;

67 
p_¨g
 =Ö_arg;

69 
DEF_ON
) {

70 ()
	`OSTaskSemPíd
((
OS_TICK
 )0,

71 (
OS_OPT
 )
OS_OPT_PEND_BLOCKING
,

72 (
CPU_TS
 *)&
ts
,

73 (
OS_ERR
 *)&
îr
);

74 i‡(
îr
 =
OS_ERR_NONE
) {

75 i‡(
OSRu¬ög
 =
OS_STATE_OS_RUNNING
) {

76 
	`OS_TickLi°Upd©e
();

80 
	}
}

104 
	$OS_TickTaskInô
 (
OS_ERR
 *
p_îr
)

106 #ifde‡
OS_SAFETY_CRITICAL


107 i‡(
p_îr
 =(
OS_ERR
 *)0) {

108 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

113 
OSTickCå
 = (
OS_TICK
)0u;

115 
OSTickTaskTimeMax
 = (
CPU_TS
)0u;

118 
	`OS_TickLi°Inô
();

121 i‡(
OSCfg_TickTaskStkBa£På
 =(
CPU_STK
 *)0) {

122 *
p_îr
 = 
OS_ERR_TICK_STK_INVALID
;

126 i‡(
OSCfg_TickTaskStkSize
 < 
OSCfg_StkSizeMö
) {

127 *
p_îr
 = 
OS_ERR_TICK_STK_SIZE_INVALID
;

131 i‡(
OSCfg_TickTaskPrio
 >(
OS_CFG_PRIO_MAX
 - 1u)) {

132 *
p_îr
 = 
OS_ERR_TICK_PRIO_INVALID
;

136 
	`OSTaskCª©e
((
OS_TCB
 *)&
OSTickTaskTCB
,

137 (
CPU_CHAR
 *)((*)"uC/OS-III Tick Task"),

138 (
OS_TASK_PTR
 )
OS_TickTask
,

140 (
OS_PRIO
 )
OSCfg_TickTaskPrio
,

141 (
CPU_STK
 *)
OSCfg_TickTaskStkBa£På
,

142 (
CPU_STK_SIZE
)
OSCfg_TickTaskStkLimô
,

143 (
CPU_STK_SIZE
)
OSCfg_TickTaskStkSize
,

144 (
OS_MSG_QTY
 )0u,

145 (
OS_TICK
 )0u,

147 (
OS_OPT
 )(
OS_OPT_TASK_STK_CHK
 | 
OS_OPT_TASK_STK_CLR
 | 
OS_OPT_TASK_NO_TLS
),

148 (
OS_ERR
 *)
p_îr
);

149 
	}
}

166 
	$OS_TickLi°Inô
 ()

168 
OS_TICK_SPOKE_IX
 
i
;

169 
OS_TICK_SPOKE
 *
p_•oke
;

173 
i
 = 0u; i < 
OSCfg_TickWhìlSize
; i++) {

174 
p_•oke
 = (
OS_TICK_SPOKE
 *)&
OSCfg_TickWhìl
[
i
];

175 
p_•oke
->
Fú°På
 = (
OS_TCB
 *)0;

176 
p_•oke
->
NbrE¡rõs
 = (
OS_OBJ_QTY
 )0u;

177 
p_•oke
->
NbrE¡rõsMax
 = (
OS_OBJ_QTY
 )0u;

179 
	}
}

220 
	$OS_TickLi°In£π
 (
OS_TCB
 *
p_tcb
,

221 
OS_TICK
 
time
,

222 
OS_OPT
 
›t
,

223 
OS_ERR
 *
p_îr
)

225 
OS_TICK
 
tick_dñè
;

226 
OS_TICK
 
tick_√xt
;

227 
OS_TICK_SPOKE
 *
p_•oke
;

228 
OS_TCB
 *
p_tcb0
;

229 
OS_TCB
 *
p_tcb1
;

230 
OS_TICK_SPOKE_IX
 
•oke
;

234 i‡(
›t
 =
OS_OPT_TIME_MATCH
) {

235 
tick_dñè
 = 
time
 - 
OSTickCå
 - 1u;

236 i‡(
tick_dñè
 > 
OS_TICK_TH_RDY
) {

237 
p_tcb
->
TickCåM©ch
 = (
OS_TICK
 )0u;

238 
p_tcb
->
TickRemaö
 = (
OS_TICK
 )0u;

239 
p_tcb
->
TickSpokePå
 = (
OS_TICK_SPOKE
 *)0;

240 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

243 
p_tcb
->
TickCåM©ch
 = 
time
;

244 
p_tcb
->
TickRemaö
 = 
tick_dñè
 + 1u;

246 } i‡(
time
 > (
OS_TICK
)0u) {

247 i‡(
›t
 =
OS_OPT_TIME_PERIODIC
) {

248 
tick_√xt
 = 
p_tcb
->
TickCåPªv
 + 
time
;

249 
tick_dñè
 = 
tick_√xt
 - 
OSTickCå
 - 1u;

250 i‡(
tick_dñè
 < 
time
) {

251 
p_tcb
->
TickCåM©ch
 = 
tick_√xt
;

253 
p_tcb
->
TickCåM©ch
 = 
OSTickCå
 + 
time
;

255 
p_tcb
->
TickRemaö
 =Ö_tcb->
TickCåM©ch
 - 
OSTickCå
;

256 
p_tcb
->
TickCåPªv
 =Ö_tcb->
TickCåM©ch
;

259 
p_tcb
->
TickCåM©ch
 = 
OSTickCå
 + 
time
;

260 
p_tcb
->
TickRemaö
 = 
time
;

264 
p_tcb
->
TickCåM©ch
 = (
OS_TICK
 )0u;

265 
p_tcb
->
TickRemaö
 = (
OS_TICK
 )0u;

266 
p_tcb
->
TickSpokePå
 = (
OS_TICK_SPOKE
 *)0;

267 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

272 
•oke
 = (
OS_TICK_SPOKE_IX
)(
p_tcb
->
TickCåM©ch
 % 
OSCfg_TickWhìlSize
);

273 
p_•oke
 = &
OSCfg_TickWhìl
[
•oke
];

275 i‡(
p_•oke
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

276 
p_tcb
->
TickNextPå
 = (
OS_TCB
 *)0;

277 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

278 
p_•oke
->
Fú°På
 = 
p_tcb
;

279 
p_•oke
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)1u;

281 
p_tcb1
 = 
p_•oke
->
Fú°På
;

282 
p_tcb1
 !(
OS_TCB
 *)0) {

283 
p_tcb1
->
TickRemaö
 =Ö_tcb1->
TickCåM©ch


284 - 
OSTickCå
;

285 i‡(
p_tcb
->
TickRemaö
 > 
p_tcb1
->TickRemain) {

286 i‡(
p_tcb1
->
TickNextPå
 !(
OS_TCB
 *)0) {

287 
p_tcb1
 =Ö_tcb1->
TickNextPå
;

289 
p_tcb
->
TickNextPå
 = (
OS_TCB
 *)0;

290 
p_tcb
->
TickPªvPå
 = 
p_tcb1
;

291 
p_tcb1
->
TickNextPå
 = 
p_tcb
;

292 
p_tcb1
 = (
OS_TCB
 *)0;

295 i‡(
p_tcb1
->
TickPªvPå
 =(
OS_TCB
 *)0) {

296 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

297 
p_tcb
->
TickNextPå
 = 
p_tcb1
;

298 
p_tcb1
->
TickPªvPå
 = 
p_tcb
;

299 
p_•oke
->
Fú°På
 = 
p_tcb
;

301 
p_tcb0
 = 
p_tcb1
->
TickPªvPå
;

302 
p_tcb
->
TickPªvPå
 = 
p_tcb0
;

303 
p_tcb
->
TickNextPå
 = 
p_tcb1
;

304 
p_tcb0
->
TickNextPå
 = 
p_tcb
;

305 
p_tcb1
->
TickPªvPå
 = 
p_tcb
;

307 
p_tcb1
 = (
OS_TCB
 *)0;

310 
p_•oke
->
NbrE¡rõs
++;

312 i‡(
p_•oke
->
NbrE¡rõsMax
 <Ö_•oke->
NbrE¡rõs
) {

313 
p_•oke
->
NbrE¡rõsMax
 =Ö_•oke->
NbrE¡rõs
;

315 
p_tcb
->
TickSpokePå
 = 
p_•oke
;

316 *
p_îr
 = 
OS_ERR_NONE
;

317 
	}
}

337 
	$OS_TickLi°Remove
 (
OS_TCB
 *
p_tcb
)

339 
OS_TICK_SPOKE
 *
p_•oke
;

340 
OS_TCB
 *
p_tcb1
;

341 
OS_TCB
 *
p_tcb2
;

345 
p_•oke
 = 
p_tcb
->
TickSpokePå
;

346 i‡(
p_•oke
 !(
OS_TICK_SPOKE
 *)0) {

347 
p_tcb
->
TickRemaö
 = (
OS_TICK
)0u;

348 i‡(
p_•oke
->
Fú°På
 =
p_tcb
) {

349 
p_tcb1
 = (
OS_TCB
 *)
p_tcb
->
TickNextPå
;

350 
p_•oke
->
Fú°På
 = 
p_tcb1
;

351 i‡(
p_tcb1
 !(
OS_TCB
 *)0) {

352 
p_tcb1
->
TickPªvPå
 = (
OS_TCB
 *)0;

355 
p_tcb1
 = 
p_tcb
->
TickPªvPå
;

356 
p_tcb2
 = 
p_tcb
->
TickNextPå
;

357 
p_tcb1
->
TickNextPå
 = 
p_tcb2
;

358 i‡(
p_tcb2
 !(
OS_TCB
 *)0) {

359 
p_tcb2
->
TickPªvPå
 = 
p_tcb1
;

362 
p_tcb
->
TickNextPå
 = (
OS_TCB
 *)0;

363 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

364 
p_tcb
->
TickSpokePå
 = (
OS_TICK_SPOKE
 *)0;

365 
p_tcb
->
TickCåM©ch
 = (
OS_TICK
 )0u;

366 
p_•oke
->
NbrE¡rõs
--;

368 
	}
}

386 
	$OS_TickLi°Re£tPók
 ()

388 
OS_TICK_SPOKE_IX
 
i
;

389 
OS_TICK_SPOKE
 *
p_•oke
;

393 
i
 = 0u; i < 
OSCfg_TickWhìlSize
; i++) {

394 
p_•oke
 = (
OS_TICK_SPOKE
 *)&
OSCfg_TickWhìl
[
i
];

395 
p_•oke
->
NbrE¡rõsMax
 = (
OS_OBJ_QTY
 )0u;

397 
	}
}

415 
	$OS_TickLi°Upd©e
 ()

417 
CPU_BOOLEAN
 
d⁄e
;

418 
OS_TICK_SPOKE
 *
p_•oke
;

419 
OS_TCB
 *
p_tcb
;

420 
OS_TCB
 *
p_tcb_√xt
;

421 
OS_TICK_SPOKE_IX
 
•oke
;

422 
CPU_TS
 
ts_°¨t
;

423 
CPU_TS
 
ts_íd
;

424 
	`CPU_SR_ALLOC
();

427 
	`OS_CRITICAL_ENTER
();

428 
ts_°¨t
 = 
	`OS_TS_GET
();

429 
OSTickCå
++;

430 
•oke
 = (
OS_TICK_SPOKE_IX
)(
OSTickCå
 % 
OSCfg_TickWhìlSize
);

431 
p_•oke
 = &
OSCfg_TickWhìl
[
•oke
];

432 
p_tcb
 = 
p_•oke
->
Fú°På
;

433 
d⁄e
 = 
DEF_FALSE
;

434 
d⁄e
 =
DEF_FALSE
) {

435 i‡(
p_tcb
 !(
OS_TCB
 *)0) {

436 
p_tcb_√xt
 = 
p_tcb
->
TickNextPå
;

437 
p_tcb
->
TaskSèã
) {

438 
OS_TASK_STATE_RDY
:

439 
OS_TASK_STATE_PEND
:

440 
OS_TASK_STATE_SUSPENDED
:

441 
OS_TASK_STATE_PEND_SUSPENDED
:

444 
OS_TASK_STATE_DLY
:

445 
p_tcb
->
TickRemaö
 =Ö_tcb->
TickCåM©ch


446 - 
OSTickCå
;

447 i‡(
OSTickCå
 =
p_tcb
->
TickCåM©ch
) {

448 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

449 
	`OS_TaskRdy
(
p_tcb
);

451 
d⁄e
 = 
DEF_TRUE
;

455 
OS_TASK_STATE_PEND_TIMEOUT
:

456 
p_tcb
->
TickRemaö
 =Ö_tcb->
TickCåM©ch


457 - 
OSTickCå
;

458 i‡(
OSTickCå
 =
p_tcb
->
TickCåM©ch
) {

459 #i‡(
OS_MSG_EN
 > 0u)

460 
p_tcb
->
MsgPå
 = (*)0;

461 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

463 
p_tcb
->
TS
 = 
	`OS_TS_GET
();

464 
	`OS_PídLi°Remove
(
p_tcb
);

465 
	`OS_TaskRdy
(
p_tcb
);

466 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

467 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_TIMEOUT
;

468 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

470 
d⁄e
 = 
DEF_TRUE
;

474 
OS_TASK_STATE_DLY_SUSPENDED
:

475 
p_tcb
->
TickRemaö
 =Ö_tcb->
TickCåM©ch


476 - 
OSTickCå
;

477 i‡(
OSTickCå
 =
p_tcb
->
TickCåM©ch
) {

478 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

479 
	`OS_TickLi°Remove
(
p_tcb
);

481 
d⁄e
 = 
DEF_TRUE
;

485 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

486 
p_tcb
->
TickRemaö
 =Ö_tcb->
TickCåM©ch


487 - 
OSTickCå
;

488 i‡(
OSTickCå
 =
p_tcb
->
TickCåM©ch
) {

489 #i‡(
OS_MSG_EN
 > 0u)

490 
p_tcb
->
MsgPå
 = (*)0;

491 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

493 
p_tcb
->
TS
 = 
	`OS_TS_GET
();

494 
	`OS_PídLi°Remove
(
p_tcb
);

495 
	`OS_TickLi°Remove
(
p_tcb
);

496 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

497 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_TIMEOUT
;

498 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

500 
d⁄e
 = 
DEF_TRUE
;

507 
p_tcb
 = 
p_tcb_√xt
;

509 
d⁄e
 = 
DEF_TRUE
;

512 
ts_íd
 = 
	`OS_TS_GET
(Ë- 
ts_°¨t
;

513 i‡(
OSTickTaskTimeMax
 < 
ts_íd
) {

514 
OSTickTaskTimeMax
 = 
ts_íd
;

516 
	`OS_CRITICAL_EXIT
();

517 
	}
}

	@UCOSIII/uCOS-III/Source/os_time.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_time__c
 = "$Id: $";

80 
	$OSTimeDly
 (
OS_TICK
 
dly
,

81 
OS_OPT
 
›t
,

82 
OS_ERR
 *
p_îr
)

84 
	`CPU_SR_ALLOC
();

88 #ifde‡
OS_SAFETY_CRITICAL


89 i‡(
p_îr
 =(
OS_ERR
 *)0) {

90 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

95 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

96 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

97 *
p_îr
 = 
OS_ERR_TIME_DLY_ISR
;

102 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0u) {

103 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

107 
›t
) {

108 
OS_OPT_TIME_DLY
:

109 
OS_OPT_TIME_TIMEOUT
:

110 
OS_OPT_TIME_PERIODIC
:

111 i‡(
dly
 =(
OS_TICK
)0u) {

112 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

117 
OS_OPT_TIME_MATCH
:

121 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

125 
	`OS_CRITICAL_ENTER
();

126 
OSTCBCurPå
->
TaskSèã
 = 
OS_TASK_STATE_DLY
;

127 
	`OS_TickLi°In£π
(
OSTCBCurPå
,

128 
dly
,

129 
›t
,

130 
p_îr
);

131 i‡(*
p_îr
 !
OS_ERR_NONE
) {

132 
	`OS_CRITICAL_EXIT_NO_SCHED
();

135 
	`OS_RdyLi°Remove
(
OSTCBCurPå
);

136 
	`OS_CRITICAL_EXIT_NO_SCHED
();

137 
	`OSSched
();

138 *
p_îr
 = 
OS_ERR_NONE
;

139 
	}
}

199 #i‡
OS_CFG_TIME_DLY_HMSM_EN
 > 0u

200 
	$OSTimeDlyHMSM
 (
CPU_INT16U
 
hours
,

201 
CPU_INT16U
 
möuãs
,

202 
CPU_INT16U
 
£c⁄ds
,

203 
CPU_INT32U
 
mûli
,

204 
OS_OPT
 
›t
,

205 
OS_ERR
 *
p_îr
)

207 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

208 
CPU_BOOLEAN
 
›t_övÆid
;

209 
CPU_BOOLEAN
 
›t_n⁄_°ri˘
;

211 
OS_OPT
 
›t_time
;

212 
OS_RATE_HZ
 
tick_øã
;

213 
OS_TICK
 
ticks
;

214 
	`CPU_SR_ALLOC
();

218 #ifde‡
OS_SAFETY_CRITICAL


219 i‡(
p_îr
 =(
OS_ERR
 *)0) {

220 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

225 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

226 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

227 *
p_îr
 = 
OS_ERR_TIME_DLY_ISR
;

232 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0u) {

233 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

237 
›t_time
 = 
›t
 & 
OS_OPT_TIME_MASK
;

238 
›t_time
) {

239 
OS_OPT_TIME_DLY
:

240 
OS_OPT_TIME_TIMEOUT
:

241 
OS_OPT_TIME_PERIODIC
:

242 i‡(
mûli
 =(
CPU_INT32U
)0u) {

243 i‡(
£c⁄ds
 =(
CPU_INT16U
)0u) {

244 i‡(
möuãs
 =(
CPU_INT16U
)0u) {

245 i‡(
hours
 =(
CPU_INT16U
)0u) {

246 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

254 
OS_OPT_TIME_MATCH
:

258 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

262 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

263 
›t_övÆid
 = 
	`DEF_BIT_IS_SET_ANY
(
›t
, ~
OS_OPT_TIME_OPTS_MASK
);

264 i‡(
›t_övÆid
 =
DEF_YES
) {

265 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

269 
›t_n⁄_°ri˘
 = 
	`DEF_BIT_IS_SET
(
›t
, 
OS_OPT_TIME_HMSM_NON_STRICT
);

270 i‡(
›t_n⁄_°ri˘
 !
DEF_YES
) {

271 i‡(
mûli
 > (
CPU_INT32U
)999u) {

272 *
p_îr
 = 
OS_ERR_TIME_INVALID_MILLISECONDS
;

275 i‡(
£c⁄ds
 > (
CPU_INT16U
)59u) {

276 *
p_îr
 = 
OS_ERR_TIME_INVALID_SECONDS
;

279 i‡(
möuãs
 > (
CPU_INT16U
)59u) {

280 *
p_îr
 = 
OS_ERR_TIME_INVALID_MINUTES
;

283 i‡(
hours
 > (
CPU_INT16U
)99u) {

284 *
p_îr
 = 
OS_ERR_TIME_INVALID_HOURS
;

288 i‡(
möuãs
 > (
CPU_INT16U
)9999u) {

289 *
p_îr
 = 
OS_ERR_TIME_INVALID_MINUTES
;

292 i‡(
hours
 > (
CPU_INT16U
)999u) {

293 *
p_îr
 = 
OS_ERR_TIME_INVALID_HOURS
;

301 
tick_øã
 = 
OSCfg_TickR©e_Hz
;

302 
ticks
 = ((
OS_TICK
)
hours
 * (OS_TICK)3600u + (OS_TICK)
möuãs
 * (OS_TICK)60u + (OS_TICK)
£c⁄ds
Ë* 
tick_øã


303 + (
tick_øã
 * ((
OS_TICK
)
mûli
 + (OS_TICK)500u /Åick_rate)) / (OS_TICK)1000u;

305 i‡(
ticks
 > (
OS_TICK
)0u) {

306 
	`OS_CRITICAL_ENTER
();

307 
OSTCBCurPå
->
TaskSèã
 = 
OS_TASK_STATE_DLY
;

308 
	`OS_TickLi°In£π
(
OSTCBCurPå
,

309 
ticks
,

310 
›t_time
,

311 
p_îr
);

312 i‡(*
p_îr
 !
OS_ERR_NONE
) {

313 
	`OS_CRITICAL_EXIT_NO_SCHED
();

316 
	`OS_RdyLi°Remove
(
OSTCBCurPå
);

317 
	`OS_CRITICAL_EXIT_NO_SCHED
();

318 
	`OSSched
();

319 *
p_îr
 = 
OS_ERR_NONE
;

321 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

323 
	}
}

348 #i‡
OS_CFG_TIME_DLY_RESUME_EN
 > 0u

349 
	$OSTimeDlyResume
 (
OS_TCB
 *
p_tcb
,

350 
OS_ERR
 *
p_îr
)

352 
	`CPU_SR_ALLOC
();

356 #ifde‡
OS_SAFETY_CRITICAL


357 i‡(
p_îr
 =(
OS_ERR
 *)0) {

358 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

363 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

364 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

365 *
p_îr
 = 
OS_ERR_TIME_DLY_RESUME_ISR
;

370 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

371 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

372 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

377 
	`CPU_CRITICAL_ENTER
();

378 i‡(
p_tcb
 =
OSTCBCurPå
) {

379 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

380 
	`CPU_CRITICAL_EXIT
();

384 
p_tcb
->
TaskSèã
) {

385 
OS_TASK_STATE_RDY
:

386 
	`CPU_CRITICAL_EXIT
();

387 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

390 
OS_TASK_STATE_DLY
:

391 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

392 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

393 
	`OS_TickLi°Remove
(
p_tcb
);

394 
	`OS_RdyLi°In£π
(
p_tcb
);

395 
	`OS_CRITICAL_EXIT_NO_SCHED
();

396 *
p_îr
 = 
OS_ERR_NONE
;

399 
OS_TASK_STATE_PEND
:

400 
	`CPU_CRITICAL_EXIT
();

401 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

404 
OS_TASK_STATE_PEND_TIMEOUT
:

405 
	`CPU_CRITICAL_EXIT
();

406 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

409 
OS_TASK_STATE_SUSPENDED
:

410 
	`CPU_CRITICAL_EXIT
();

411 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

414 
OS_TASK_STATE_DLY_SUSPENDED
:

415 
	`OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT
();

416 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

417 
	`OS_TickLi°Remove
(
p_tcb
);

418 
	`OS_CRITICAL_EXIT_NO_SCHED
();

419 *
p_îr
 = 
OS_ERR_TASK_SUSPENDED
;

422 
OS_TASK_STATE_PEND_SUSPENDED
:

423 
	`CPU_CRITICAL_EXIT
();

424 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

427 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

428 
	`CPU_CRITICAL_EXIT
();

429 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

433 
	`CPU_CRITICAL_EXIT
();

434 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

438 
	`OSSched
();

439 
	}
}

457 
OS_TICK
 
	$OSTimeGë
 (
OS_ERR
 *
p_îr
)

459 
OS_TICK
 
ticks
;

460 
	`CPU_SR_ALLOC
();

464 #ifde‡
OS_SAFETY_CRITICAL


465 i‡(
p_îr
 =(
OS_ERR
 *)0) {

466 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

467  ((
OS_TICK
)0);

471 
	`CPU_CRITICAL_ENTER
();

472 
ticks
 = 
OSTickCå
;

473 
	`CPU_CRITICAL_EXIT
();

474 *
p_îr
 = 
OS_ERR_NONE
;

475  (
ticks
);

476 
	}
}

494 
	$OSTimeSë
 (
OS_TICK
 
ticks
,

495 
OS_ERR
 *
p_îr
)

497 
	`CPU_SR_ALLOC
();

501 #ifde‡
OS_SAFETY_CRITICAL


502 i‡(
p_îr
 =(
OS_ERR
 *)0) {

503 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

508 
	`CPU_CRITICAL_ENTER
();

509 
OSTickCå
 = 
ticks
;

510 
	`CPU_CRITICAL_EXIT
();

511 *
p_îr
 = 
OS_ERR_NONE
;

512 
	}
}

528 
	$OSTimeTick
 ()

530 
OS_ERR
 
îr
;

531 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

532 
CPU_TS
 
ts
;

536 
	`OSTimeTickHook
();

538 #i‡
OS_CFG_ISR_POST_DEFERRED_EN
 > 0u

540 
ts
 = 
	`OS_TS_GET
();

541 
	`OS_I¡QPo°
((
OS_OBJ_TYPE
Ë
OS_OBJ_TYPE_TICK
,

542 (*)&
OSRdyLi°
[
OSPrioCur
],

544 (
OS_MSG_SIZE
) 0u,

545 (
OS_FLAGS
 ) 0u,

546 (
OS_OPT
 ) 0u,

547 (
CPU_TS
 ) 
ts
,

548 (
OS_ERR
 *)&
îr
);

552 ()
	`OSTaskSemPo°
((
OS_TCB
 *)&
OSTickTaskTCB
,

553 (
OS_OPT
 ) 
OS_OPT_POST_NONE
,

554 (
OS_ERR
 *)&
îr
);

557 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

558 
	`OS_SchedRoundRobö
(&
OSRdyLi°
[
OSPrioCur
]);

561 #i‡
OS_CFG_TMR_EN
 > 0u

562 
OSTmrUpd©eCå
--;

563 i‡(
OSTmrUpd©eCå
 =(
OS_CTR
)0u) {

564 
OSTmrUpd©eCå
 = 
OSTmrUpd©eC¡
;

565 
	`OSTaskSemPo°
((
OS_TCB
 *)&
OSTmrTaskTCB
,

566 (
OS_OPT
 ) 
OS_OPT_POST_NONE
,

567 (
OS_ERR
 *)&
îr
);

572 
	}
}

	@UCOSIII/uCOS-III/Source/os_tmr.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

36 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


37 c⁄° 
CPU_CHAR
 *
	gos_tmr__c
 = "$Id: $";

41 #i‡
OS_CFG_TMR_EN
 > 0u

48 
	#OS_OPT_LINK_DLY
 (
OS_OPT
)(0u)

	)

49 
	#OS_OPT_LINK_PERIODIC
 (
OS_OPT
)(1u)

	)

104 
	$OSTmrCª©e
 (
OS_TMR
 *
p_tmr
,

105 
CPU_CHAR
 *
p_«me
,

106 
OS_TICK
 
dly
,

107 
OS_TICK
 
≥riod
,

108 
OS_OPT
 
›t
,

109 
OS_TMR_CALLBACK_PTR
 
p_ˇŒback
,

110 *
p_ˇŒback_¨g
,

111 
OS_ERR
 *
p_îr
)

113 
	`CPU_SR_ALLOC
();

117 #ifde‡
OS_SAFETY_CRITICAL


118 i‡(
p_îr
 =(
OS_ERR
 *)0) {

119 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

124 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


125 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
DEF_TRUE
) {

126 *
p_îr
 = 
OS_ERR_ILLEGAL_CREATE_RUN_TIME
;

131 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

132 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

133 *
p_îr
 = 
OS_ERR_TMR_ISR
;

138 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

139 i‡(
p_tmr
 =(
OS_TMR
 *)0) {

140 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

144 
›t
) {

145 
OS_OPT_TMR_PERIODIC
:

146 i‡(
≥riod
 =(
OS_TICK
)0) {

147 *
p_îr
 = 
OS_ERR_TMR_INVALID_PERIOD
;

152 
OS_OPT_TMR_ONE_SHOT
:

153 i‡(
dly
 =(
OS_TICK
)0) {

154 *
p_îr
 = 
OS_ERR_TMR_INVALID_DLY
;

160 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

165 
	`OS_CRITICAL_ENTER
();

166 
p_tmr
->
Sèã
 = (
OS_STATE
 )
OS_TMR_STATE_STOPPED
;

167 
p_tmr
->
Ty≥
 = (
OS_OBJ_TYPE
 )
OS_OBJ_TYPE_TMR
;

168 
p_tmr
->
NamePå
 = (
CPU_CHAR
 *)
p_«me
;

169 
p_tmr
->
Dly
 = (
OS_TICK
 )
dly
;

170 
p_tmr
->
M©ch
 = (
OS_TICK
 )0;

171 
p_tmr
->
Remaö
 = (
OS_TICK
 )0;

172 
p_tmr
->
Pîiod
 = (
OS_TICK
 )
≥riod
;

173 
p_tmr
->
O±
 = (
OS_OPT
 )
›t
;

174 
p_tmr
->
CÆlbackPå
 = (
OS_TMR_CALLBACK_PTR
)
p_ˇŒback
;

175 
p_tmr
->
CÆlbackPåArg
 = (*)
p_ˇŒback_¨g
;

176 
p_tmr
->
NextPå
 = (
OS_TMR
 *)0;

177 
p_tmr
->
PªvPå
 = (
OS_TMR
 *)0;

179 #i‡
OS_CFG_DBG_EN
 > 0u

180 
	`OS_TmrDbgLi°Add
(
p_tmr
);

182 
OSTmrQty
++;

184 
	`OS_CRITICAL_EXIT_NO_SCHED
();

185 *
p_îr
 = 
OS_ERR_NONE
;

186 
	}
}

211 #i‡
OS_CFG_TMR_DEL_EN
 > 0u

212 
CPU_BOOLEAN
 
	$OSTmrDñ
 (
OS_TMR
 *
p_tmr
,

213 
OS_ERR
 *
p_îr
)

215 
OS_ERR
 
îr
;

219 #ifde‡
OS_SAFETY_CRITICAL


220 i‡(
p_îr
 =(
OS_ERR
 *)0) {

221 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

222  (
DEF_FALSE
);

226 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

227 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

228 *
p_îr
 = 
OS_ERR_TMR_ISR
;

229  (
DEF_FALSE
);

233 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

234 i‡(
p_tmr
 =(
OS_TMR
 *)0) {

235 *
p_îr
 = 
OS_ERR_TMR_INVALID
;

236  (
DEF_FALSE
);

240 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

241 i‡(
p_tmr
->
Ty≥
 !
OS_OBJ_TYPE_TMR
) {

242 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

243  (
DEF_FALSE
);

247 
	`OSSchedLock
(&
îr
);

248 #i‡
OS_CFG_DBG_EN
 > 0u

249 
	`OS_TmrDbgLi°Remove
(
p_tmr
);

251 
OSTmrQty
--;

253 
p_tmr
->
Sèã
) {

254 
OS_TMR_STATE_RUNNING
:

255 
	`OS_TmrU∆ök
(
p_tmr
);

256 
	`OS_TmrCÃ
(
p_tmr
);

257 
	`OSSchedU∆ock
(&
îr
);

258 *
p_îr
 = 
OS_ERR_NONE
;

259  (
DEF_TRUE
);

261 
OS_TMR_STATE_STOPPED
:

262 
OS_TMR_STATE_COMPLETED
:

263 
	`OS_TmrCÃ
(
p_tmr
);

264 
	`OSSchedU∆ock
(&
îr
);

265 *
p_îr
 = 
OS_ERR_NONE
;

266  (
DEF_TRUE
);

268 
OS_TMR_STATE_UNUSED
:

269 
	`OSSchedU∆ock
(&
îr
);

270 *
p_îr
 = 
OS_ERR_TMR_INACTIVE
;

271  (
DEF_FALSE
);

274 
	`OSSchedU∆ock
(&
îr
);

275 *
p_îr
 = 
OS_ERR_TMR_INVALID_STATE
;

276  (
DEF_FALSE
);

278 
	}
}

305 
OS_TICK
 
	$OSTmrRemaöGë
 (
OS_TMR
 *
p_tmr
,

306 
OS_ERR
 *
p_îr
)

308 
OS_TICK
 
ªmaö
;

309 
OS_ERR
 
îr
;

313 #ifde‡
OS_SAFETY_CRITICAL


314 i‡(
p_îr
 =(
OS_ERR
 *)0) {

315 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

316  ((
OS_TICK
)0);

320 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

321 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

322 *
p_îr
 = 
OS_ERR_TMR_ISR
;

323  ((
OS_TICK
)0);

327 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

328 i‡(
p_tmr
 =(
OS_TMR
 *)0) {

329 *
p_îr
 = 
OS_ERR_TMR_INVALID
;

330  ((
OS_TICK
)0);

334 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

335 i‡(
p_tmr
->
Ty≥
 !
OS_OBJ_TYPE_TMR
) {

336 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

337  ((
OS_TICK
)0);

341 
	`OSSchedLock
(&
îr
);

342 
p_tmr
->
Sèã
) {

343 
OS_TMR_STATE_RUNNING
:

344 
ªmaö
 = 
p_tmr
->
M©ch


345 - 
OSTmrTickCå
;

346 
p_tmr
->
Remaö
 = 
ªmaö
;

347 
	`OSSchedU∆ock
(&
îr
);

348 *
p_îr
 = 
OS_ERR_NONE
;

349  (
ªmaö
);

351 
OS_TMR_STATE_STOPPED
:

352 i‡(
p_tmr
->
O±
 =
OS_OPT_TMR_PERIODIC
) {

353 i‡(
p_tmr
->
Dly
 == 0u) {

354 
ªmaö
 = 
p_tmr
->
Pîiod
;

356 
ªmaö
 = 
p_tmr
->
Dly
;

359 
ªmaö
 = 
p_tmr
->
Dly
;

361 
p_tmr
->
Remaö
 = 
ªmaö
;

362 
	`OSSchedU∆ock
(&
îr
);

363 *
p_îr
 = 
OS_ERR_NONE
;

364  (
ªmaö
);

366 
OS_TMR_STATE_COMPLETED
:

367 
	`OSSchedU∆ock
(&
îr
);

368 *
p_îr
 = 
OS_ERR_NONE
;

369  ((
OS_TICK
)0);

371 
OS_TMR_STATE_UNUSED
:

372 
	`OSSchedU∆ock
(&
îr
);

373 *
p_îr
 = 
OS_ERR_TMR_INACTIVE
;

374  ((
OS_TICK
)0);

377 
	`OSSchedU∆ock
(&
îr
);

378 *
p_îr
 = 
OS_ERR_TMR_INVALID_STATE
;

379  ((
OS_TICK
)0);

381 
	}
}

411 
CPU_BOOLEAN
 
	$OSTmrSèπ
 (
OS_TMR
 *
p_tmr
,

412 
OS_ERR
 *
p_îr
)

414 
OS_ERR
 
îr
;

418 #ifde‡
OS_SAFETY_CRITICAL


419 i‡(
p_îr
 =(
OS_ERR
 *)0) {

420 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

421  (
DEF_FALSE
);

425 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

426 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

427 *
p_îr
 = 
OS_ERR_TMR_ISR
;

428  (
DEF_FALSE
);

432 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

433 i‡(
p_tmr
 =(
OS_TMR
 *)0) {

434 *
p_îr
 = 
OS_ERR_TMR_INVALID
;

435  (
DEF_FALSE
);

439 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

440 i‡(
p_tmr
->
Ty≥
 !
OS_OBJ_TYPE_TMR
) {

441 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

442  (
DEF_FALSE
);

446 
	`OSSchedLock
(&
îr
);

447 
p_tmr
->
Sèã
) {

448 
OS_TMR_STATE_RUNNING
:

449 
	`OS_TmrU∆ök
(
p_tmr
);

450 
	`OS_TmrLök
(
p_tmr
, 
OS_OPT_LINK_DLY
);

451 
	`OSSchedU∆ock
(&
îr
);

452 *
p_îr
 = 
OS_ERR_NONE
;

453  (
DEF_TRUE
);

455 
OS_TMR_STATE_STOPPED
:

456 
OS_TMR_STATE_COMPLETED
:

457 
	`OS_TmrLök
(
p_tmr
, 
OS_OPT_LINK_DLY
);

458 
	`OSSchedU∆ock
(&
îr
);

459 *
p_îr
 = 
OS_ERR_NONE
;

460  (
DEF_TRUE
);

462 
OS_TMR_STATE_UNUSED
:

463 
	`OSSchedU∆ock
(&
îr
);

464 *
p_îr
 = 
OS_ERR_TMR_INACTIVE
;

465  (
DEF_FALSE
);

468 
	`OSSchedU∆ock
(&
îr
);

469 *
p_îr
 = 
OS_ERR_TMR_INVALID_STATE
;

470  (
DEF_FALSE
);

472 
	}
}

500 
OS_STATE
 
	$OSTmrSèãGë
 (
OS_TMR
 *
p_tmr
,

501 
OS_ERR
 *
p_îr
)

503 
OS_STATE
 
°©e
;

504 
	`CPU_SR_ALLOC
();

508 #ifde‡
OS_SAFETY_CRITICAL


509 i‡(
p_îr
 =(
OS_ERR
 *)0) {

510 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

511  (
OS_TMR_STATE_UNUSED
);

515 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

516 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

517 *
p_îr
 = 
OS_ERR_TMR_ISR
;

518  (
OS_TMR_STATE_UNUSED
);

522 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

523 i‡(
p_tmr
 =(
OS_TMR
 *)0) {

524 *
p_îr
 = 
OS_ERR_TMR_INVALID
;

525  (
OS_TMR_STATE_UNUSED
);

529 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

530 i‡(
p_tmr
->
Ty≥
 !
OS_OBJ_TYPE_TMR
) {

531 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

532  (
OS_TMR_STATE_UNUSED
);

536 
	`CPU_CRITICAL_ENTER
();

537 
°©e
 = 
p_tmr
->
Sèã
;

538 
°©e
) {

539 
OS_TMR_STATE_UNUSED
:

540 
OS_TMR_STATE_STOPPED
:

541 
OS_TMR_STATE_COMPLETED
:

542 
OS_TMR_STATE_RUNNING
:

543 *
p_îr
 = 
OS_ERR_NONE
;

547 *
p_îr
 = 
OS_ERR_TMR_INVALID_STATE
;

550 
	`CPU_CRITICAL_EXIT
();

551  (
°©e
);

552 
	}
}

591 
CPU_BOOLEAN
 
	$OSTmrSt›
 (
OS_TMR
 *
p_tmr
,

592 
OS_OPT
 
›t
,

593 *
p_ˇŒback_¨g
,

594 
OS_ERR
 *
p_îr
)

596 
OS_TMR_CALLBACK_PTR
 
p_‚˘
;

597 
OS_ERR
 
îr
;

601 #ifde‡
OS_SAFETY_CRITICAL


602 i‡(
p_îr
 =(
OS_ERR
 *)0) {

603 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

604  (
DEF_FALSE
);

608 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

609 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

610 *
p_îr
 = 
OS_ERR_TMR_ISR
;

611  (
DEF_FALSE
);

615 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

616 i‡(
p_tmr
 =(
OS_TMR
 *)0) {

617 *
p_îr
 = 
OS_ERR_TMR_INVALID
;

618  (
DEF_FALSE
);

622 #i‡
OS_CFG_OBJ_TYPE_CHK_EN
 > 0u

623 i‡(
p_tmr
->
Ty≥
 !
OS_OBJ_TYPE_TMR
) {

624 *
p_îr
 = 
OS_ERR_OBJ_TYPE
;

625  (
DEF_FALSE
);

629 
	`OSSchedLock
(&
îr
);

630 
p_tmr
->
Sèã
) {

631 
OS_TMR_STATE_RUNNING
:

632 
	`OS_TmrU∆ök
(
p_tmr
);

633 *
p_îr
 = 
OS_ERR_NONE
;

634 
›t
) {

635 
OS_OPT_TMR_CALLBACK
:

636 
p_‚˘
 = 
p_tmr
->
CÆlbackPå
;

637 i‡(
p_‚˘
 !(
OS_TMR_CALLBACK_PTR
)0) {

638 (*
p_‚˘
)((*)
p_tmr
,Ö_tmr->
CÆlbackPåArg
);

640 *
p_îr
 = 
OS_ERR_TMR_NO_CALLBACK
;

644 
OS_OPT_TMR_CALLBACK_ARG
:

645 
p_‚˘
 = 
p_tmr
->
CÆlbackPå
;

646 i‡(
p_‚˘
 !(
OS_TMR_CALLBACK_PTR
)0) {

647 (*
p_‚˘
)((*)
p_tmr
, 
p_ˇŒback_¨g
);

649 *
p_îr
 = 
OS_ERR_TMR_NO_CALLBACK
;

653 
OS_OPT_TMR_NONE
:

657 
	`OSSchedU∆ock
(&
îr
);

658 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

659  (
DEF_FALSE
);

661 
	`OSSchedU∆ock
(&
îr
);

662  (
DEF_TRUE
);

664 
OS_TMR_STATE_COMPLETED
:

665 
OS_TMR_STATE_STOPPED
:

666 
	`OSSchedU∆ock
(&
îr
);

667 *
p_îr
 = 
OS_ERR_TMR_STOPPED
;

668  (
DEF_TRUE
);

670 
OS_TMR_STATE_UNUSED
:

671 
	`OSSchedU∆ock
(&
îr
);

672 *
p_îr
 = 
OS_ERR_TMR_INACTIVE
;

673  (
DEF_FALSE
);

676 
	`OSSchedU∆ock
(&
îr
);

677 *
p_îr
 = 
OS_ERR_TMR_INVALID_STATE
;

678  (
DEF_FALSE
);

680 
	}
}

698 
	$OS_TmrCÃ
 (
OS_TMR
 *
p_tmr
)

700 
p_tmr
->
Sèã
 = 
OS_TMR_STATE_UNUSED
;

701 
p_tmr
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

702 
p_tmr
->
NamePå
 = (
CPU_CHAR
 *)((*)"?TMR");

703 
p_tmr
->
Dly
 = (
OS_TICK
 )0;

704 
p_tmr
->
M©ch
 = (
OS_TICK
 )0;

705 
p_tmr
->
Remaö
 = (
OS_TICK
 )0;

706 
p_tmr
->
Pîiod
 = (
OS_TICK
 )0;

707 
p_tmr
->
O±
 = (
OS_OPT
 )0;

708 
p_tmr
->
CÆlbackPå
 = (
OS_TMR_CALLBACK_PTR
)0;

709 
p_tmr
->
CÆlbackPåArg
 = (*)0;

710 
p_tmr
->
NextPå
 = (
OS_TMR
 *)0;

711 
p_tmr
->
PªvPå
 = (
OS_TMR
 *)0;

712 
	}
}

730 #i‡
OS_CFG_DBG_EN
 > 0u

731 
	$OS_TmrDbgLi°Add
 (
OS_TMR
 *
p_tmr
)

733 
p_tmr
->
DbgPªvPå
 = (
OS_TMR
 *)0;

734 i‡(
OSTmrDbgLi°På
 =(
OS_TMR
 *)0) {

735 
p_tmr
->
DbgNextPå
 = (
OS_TMR
 *)0;

737 
p_tmr
->
DbgNextPå
 = 
OSTmrDbgLi°På
;

738 
OSTmrDbgLi°På
->
DbgPªvPå
 = 
p_tmr
;

740 
OSTmrDbgLi°På
 = 
p_tmr
;

741 
	}
}

745 
	$OS_TmrDbgLi°Remove
 (
OS_TMR
 *
p_tmr
)

747 
OS_TMR
 *
p_tmr_√xt
;

748 
OS_TMR
 *
p_tmr_¥ev
;

751 
p_tmr_¥ev
 = 
p_tmr
->
DbgPªvPå
;

752 
p_tmr_√xt
 = 
p_tmr
->
DbgNextPå
;

754 i‡(
p_tmr_¥ev
 =(
OS_TMR
 *)0) {

755 
OSTmrDbgLi°På
 = 
p_tmr_√xt
;

756 i‡(
p_tmr_√xt
 !(
OS_TMR
 *)0) {

757 
p_tmr_√xt
->
DbgPªvPå
 = (
OS_TMR
 *)0;

759 
p_tmr
->
DbgNextPå
 = (
OS_TMR
 *)0;

761 } i‡(
p_tmr_√xt
 =(
OS_TMR
 *)0) {

762 
p_tmr_¥ev
->
DbgNextPå
 = (
OS_TMR
 *)0;

763 
p_tmr
->
DbgPªvPå
 = (
OS_TMR
 *)0;

766 
p_tmr_¥ev
->
DbgNextPå
 = 
p_tmr_√xt
;

767 
p_tmr_√xt
->
DbgPªvPå
 = 
p_tmr_¥ev
;

768 
p_tmr
->
DbgNextPå
 = (
OS_TMR
 *)0;

769 
p_tmr
->
DbgPªvPå
 = (
OS_TMR
 *)0;

771 
	}
}

795 
	$OS_TmrInô
 (
OS_ERR
 *
p_îr
)

797 
OS_TMR_SPOKE_IX
 
i
;

798 
OS_TMR_SPOKE
 *
p_•oke
;

802 #ifde‡
OS_SAFETY_CRITICAL


803 i‡(
p_îr
 =(
OS_ERR
 *)0) {

804 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

809 #i‡
OS_CFG_DBG_EN
 > 0u

810 
OSTmrDbgLi°På
 = (
OS_TMR
 *)0;

813 i‡(
OSCfg_TmrTaskR©e_Hz
 > (
OS_RATE_HZ
)0) {

814 
OSTmrUpd©eC¡
 = 
OSCfg_TickR©e_Hz
 / 
OSCfg_TmrTaskR©e_Hz
;

816 
OSTmrUpd©eC¡
 = 
OSCfg_TickR©e_Hz
 / (
OS_RATE_HZ
)10;

818 
OSTmrUpd©eCå
 = 
OSTmrUpd©eC¡
;

820 
OSTmrTickCå
 = (
OS_TICK
)0;

822 
OSTmrTaskTimeMax
 = (
CPU_TS
)0;

824 
i
 = 0u; i < 
OSCfg_TmrWhìlSize
; i++) {

825 
p_•oke
 = &
OSCfg_TmrWhìl
[
i
];

826 
p_•oke
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)0;

827 
p_•oke
->
NbrE¡rõsMax
 = (
OS_OBJ_QTY
)0;

828 
p_•oke
->
Fú°På
 = (
OS_TMR
 *)0;

832 i‡(
OSCfg_TmrTaskStkBa£På
 =(
CPU_STK
*)0) {

833 *
p_îr
 = 
OS_ERR_TMR_STK_INVALID
;

837 i‡(
OSCfg_TmrTaskStkSize
 < 
OSCfg_StkSizeMö
) {

838 *
p_îr
 = 
OS_ERR_TMR_STK_SIZE_INVALID
;

842 i‡(
OSCfg_TmrTaskPrio
 >(
OS_CFG_PRIO_MAX
 - 1u)) {

843 *
p_îr
 = 
OS_ERR_TMR_PRIO_INVALID
;

847 
	`OSTaskCª©e
((
OS_TCB
 *)&
OSTmrTaskTCB
,

848 (
CPU_CHAR
 *)((*)"uC/OS-III Timer Task"),

849 (
OS_TASK_PTR
 )
OS_TmrTask
,

851 (
OS_PRIO
 )
OSCfg_TmrTaskPrio
,

852 (
CPU_STK
 *)
OSCfg_TmrTaskStkBa£På
,

853 (
CPU_STK_SIZE
)
OSCfg_TmrTaskStkLimô
,

854 (
CPU_STK_SIZE
)
OSCfg_TmrTaskStkSize
,

855 (
OS_MSG_QTY
 )0,

856 (
OS_TICK
 )0,

858 (
OS_OPT
 )(
OS_OPT_TASK_STK_CHK
 | 
OS_OPT_TASK_STK_CLR
 | 
OS_OPT_TASK_NO_TLS
),

859 (
OS_ERR
 *)
p_îr
);

860 
	}
}

884 
	$OS_TmrLök
 (
OS_TMR
 *
p_tmr
,

885 
OS_OPT
 
›t
)

887 
OS_TMR_SPOKE
 *
p_•oke
;

888 
OS_TMR
 *
p_tmr0
;

889 
OS_TMR
 *
p_tmr1
;

890 
OS_TMR_SPOKE_IX
 
•oke
;

894 
p_tmr
->
Sèã
 = 
OS_TMR_STATE_RUNNING
;

895 i‡(
›t
 =
OS_OPT_LINK_PERIODIC
) {

896 
p_tmr
->
M©ch
 =Ö_tmr->
Pîiod
 + 
OSTmrTickCå
;

898 i‡(
p_tmr
->
Dly
 =(
OS_TICK
)0) {

899 
p_tmr
->
M©ch
 =Ö_tmr->
Pîiod
 + 
OSTmrTickCå
;

901 
p_tmr
->
M©ch
 =Ö_tmr->
Dly
 + 
OSTmrTickCå
;

904 
•oke
 = (
OS_TMR_SPOKE_IX
)(
p_tmr
->
M©ch
 % 
OSCfg_TmrWhìlSize
);

905 
p_•oke
 = &
OSCfg_TmrWhìl
[
•oke
];

907 i‡(
p_•oke
->
Fú°På
 =(
OS_TMR
 *)0) {

908 
p_tmr
->
NextPå
 = (
OS_TMR
 *)0;

909 
p_tmr
->
PªvPå
 = (
OS_TMR
 *)0;

910 
p_•oke
->
Fú°På
 = 
p_tmr
;

911 
p_•oke
->
NbrE¡rõs
 = 1u;

913 
p_tmr
->
Remaö
 =Ö_tmr->
M©ch


914 - 
OSTmrTickCå
;

915 
p_tmr1
 = 
p_•oke
->
Fú°På
;

916 
p_tmr1
 !(
OS_TMR
 *)0) {

917 
p_tmr1
->
Remaö
 =Ö_tmr1->
M©ch


918 - 
OSTmrTickCå
;

919 i‡(
p_tmr
->
Remaö
 > 
p_tmr1
->Remain) {

920 i‡(
p_tmr1
->
NextPå
 !(
OS_TMR
 *)0) {

921 
p_tmr1
 =Ö_tmr1->
NextPå
;

923 
p_tmr
->
NextPå
 = (
OS_TMR
 *)0;

924 
p_tmr
->
PªvPå
 = 
p_tmr1
;

925 
p_tmr1
->
NextPå
 = 
p_tmr
;

926 
p_tmr1
 = (
OS_TMR
 *)0;

929 i‡(
p_tmr1
->
PªvPå
 =(
OS_TMR
 *)0) {

930 
p_tmr
->
PªvPå
 = (
OS_TMR
 *)0;

931 
p_tmr
->
NextPå
 = 
p_tmr1
;

932 
p_tmr1
->
PªvPå
 = 
p_tmr
;

933 
p_•oke
->
Fú°På
 = 
p_tmr
;

935 
p_tmr0
 = 
p_tmr1
->
PªvPå
;

936 
p_tmr
->
PªvPå
 = 
p_tmr0
;

937 
p_tmr
->
NextPå
 = 
p_tmr1
;

938 
p_tmr0
->
NextPå
 = 
p_tmr
;

939 
p_tmr1
->
PªvPå
 = 
p_tmr
;

941 
p_tmr1
 = (
OS_TMR
 *)0;

944 
p_•oke
->
NbrE¡rõs
++;

946 i‡(
p_•oke
->
NbrE¡rõsMax
 <Ö_•oke->
NbrE¡rõs
) {

947 
p_•oke
->
NbrE¡rõsMax
 =Ö_•oke->
NbrE¡rõs
;

949 
	}
}

966 
	$OS_TmrRe£tPók
 ()

968 
OS_TMR_SPOKE
 *
p_•oke
;

969 
OS_TMR_SPOKE_IX
 
i
;

973 
i
 = 0u; i < 
OSCfg_TmrWhìlSize
; i++) {

974 
p_•oke
 = (
OS_TMR_SPOKE
 *)&
OSCfg_TmrWhìl
[
i
];

975 
p_•oke
->
NbrE¡rõsMax
 = (
OS_OBJ_QTY
 )0u;

977 
	}
}

995 
	$OS_TmrU∆ök
 (
OS_TMR
 *
p_tmr
)

997 
OS_TMR_SPOKE
 *
p_•oke
;

998 
OS_TMR
 *
p_tmr1
;

999 
OS_TMR
 *
p_tmr2
;

1000 
OS_TMR_SPOKE_IX
 
•oke
;

1004 
•oke
 = (
OS_TMR_SPOKE_IX
)(
p_tmr
->
M©ch
 % 
OSCfg_TmrWhìlSize
);

1005 
p_•oke
 = &
OSCfg_TmrWhìl
[
•oke
];

1007 i‡(
p_•oke
->
Fú°På
 =
p_tmr
) {

1008 
p_tmr1
 = (
OS_TMR
 *)
p_tmr
->
NextPå
;

1009 
p_•oke
->
Fú°På
 = (
OS_TMR
 *)
p_tmr1
;

1010 i‡(
p_tmr1
 !(
OS_TMR
 *)0) {

1011 
p_tmr1
->
PªvPå
 = (
OS_TMR
 *)0;

1014 
p_tmr1
 = (
OS_TMR
 *)
p_tmr
->
PªvPå
;

1015 
p_tmr2
 = (
OS_TMR
 *)
p_tmr
->
NextPå
;

1016 
p_tmr1
->
NextPå
 = 
p_tmr2
;

1017 i‡(
p_tmr2
 !(
OS_TMR
 *)0) {

1018 
p_tmr2
->
PªvPå
 = (
OS_TMR
 *)
p_tmr1
;

1021 
p_tmr
->
Sèã
 = 
OS_TMR_STATE_STOPPED
;

1022 
p_tmr
->
NextPå
 = (
OS_TMR
 *)0;

1023 
p_tmr
->
PªvPå
 = (
OS_TMR
 *)0;

1024 
p_•oke
->
NbrE¡rõs
--;

1025 
	}
}

1042 
	$OS_TmrTask
 (*
p_¨g
)

1044 
CPU_BOOLEAN
 
d⁄e
;

1045 
OS_ERR
 
îr
;

1046 
OS_TMR_CALLBACK_PTR
 
p_‚˘
;

1047 
OS_TMR_SPOKE
 *
p_•oke
;

1048 
OS_TMR
 *
p_tmr
;

1049 
OS_TMR
 *
p_tmr_√xt
;

1050 
OS_TMR_SPOKE_IX
 
•oke
;

1051 
CPU_TS
 
ts
;

1052 
CPU_TS
 
ts_°¨t
;

1053 
CPU_TS
 
ts_íd
;

1057 
p_¨g
 =Ö_arg;

1058 
DEF_ON
) {

1059 ()
	`OSTaskSemPíd
((
OS_TICK
 )0,

1060 (
OS_OPT
 )
OS_OPT_PEND_BLOCKING
,

1061 (
CPU_TS
 *)&
ts
,

1062 (
OS_ERR
 *)&
îr
);

1064 
	`OSSchedLock
(&
îr
);

1065 
ts_°¨t
 = 
	`OS_TS_GET
();

1066 
OSTmrTickCå
++;

1067 
•oke
 = (
OS_TMR_SPOKE_IX
)(
OSTmrTickCå
 % 
OSCfg_TmrWhìlSize
);

1068 
p_•oke
 = &
OSCfg_TmrWhìl
[
•oke
];

1069 
p_tmr
 = 
p_•oke
->
Fú°På
;

1070 
d⁄e
 = 
DEF_FALSE
;

1071 
d⁄e
 =
DEF_FALSE
) {

1072 i‡(
p_tmr
 !(
OS_TMR
 *)0) {

1073 
p_tmr_√xt
 = (
OS_TMR
 *)
p_tmr
->
NextPå
;

1075 i‡(
OSTmrTickCå
 =
p_tmr
->
M©ch
) {

1076 
	`OS_TmrU∆ök
(
p_tmr
);

1077 i‡(
p_tmr
->
O±
 =
OS_OPT_TMR_PERIODIC
) {

1078 
	`OS_TmrLök
(
p_tmr
,

1079 
OS_OPT_LINK_PERIODIC
);

1081 
p_tmr
->
Sèã
 = 
OS_TMR_STATE_COMPLETED
;

1083 
p_‚˘
 = 
p_tmr
->
CÆlbackPå
;

1084 i‡(
p_‚˘
 !(
OS_TMR_CALLBACK_PTR
)0) {

1085 (*
p_‚˘
)((*)
p_tmr
,

1086 
p_tmr
->
CÆlbackPåArg
);

1088 
p_tmr
 = 
p_tmr_√xt
;

1090 
d⁄e
 = 
DEF_TRUE
;

1093 
d⁄e
 = 
DEF_TRUE
;

1096 
ts_íd
 = 
	`OS_TS_GET
(Ë- 
ts_°¨t
;

1097 
	`OSSchedU∆ock
(&
îr
);

1098 i‡(
OSTmrTaskTimeMax
 < 
ts_íd
) {

1099 
OSTmrTaskTimeMax
 = 
ts_íd
;

1102 
	}
}

	@UCOSIII/uCOS-III/Source/os_type.h

31 #i‚de‡ 
OS_TYPE_H


32 
	#OS_TYPE_H


	)

34 #ifde‡ 
VSC_INCLUDE_H_FILE_NAMES


35 c⁄° 
CPU_CHAR
 *
	gos_ty≥__h
 = "$Id: $";

48 
CPU_INT16U
 
	tOS_CPU_USAGE
;

50 
CPU_INT32U
 
	tOS_CTR
;

52 
CPU_INT32U
 
	tOS_CTX_SW_CTR
;

54 
CPU_INT32U
 
	tOS_CYCLES
;

56 
CPU_INT32U
 
	tOS_FLAGS
;

58 
CPU_INT32U
 
	tOS_IDLE_CTR
;

60 
CPU_INT16U
 
	tOS_MEM_QTY
;

61 
CPU_INT16U
 
	tOS_MEM_SIZE
;

63 
CPU_INT16U
 
	tOS_MSG_QTY
;

64 
CPU_INT16U
 
	tOS_MSG_SIZE
;

66 
CPU_INT08U
 
	tOS_NESTING_CTR
;

68 
CPU_INT16U
 
	tOS_OBJ_QTY
;

69 
CPU_INT32U
 
	tOS_OBJ_TYPE
;

71 
CPU_INT16U
 
	tOS_OPT
;

73 
CPU_INT08U
 
	tOS_PRIO
;

75 
CPU_INT16U
 
	tOS_QTY
;

77 
CPU_INT32U
 
	tOS_RATE_HZ
;

79 
CPU_INT32U
 
	tOS_REG
;

80 
CPU_INT08U
 
	tOS_REG_ID
;

82 
CPU_INT32U
 
	tOS_SEM_CTR
;

84 
CPU_INT08U
 
	tOS_STATE
;

86 
CPU_INT08U
 
	tOS_STATUS
;

88 
CPU_INT32U
 
	tOS_TICK
;

89 
CPU_INT16U
 
	tOS_TICK_SPOKE_IX
;

91 
CPU_INT16U
 
	tOS_TMR_SPOKE_IX
;

	@UCOSIII/uCOS-III/Source/os_var.c

33 
	#OS_GLOBALS


	)

35 
	#MICRIUM_SOURCE


	)

36 
	~<os.h
>

38 #ifde‡
VSC_INCLUDE_SOURCE_FILE_NAMES


39 c⁄° 
CPU_CHAR
 *
	gos_v¨__c
 = "$Id: $";

	@UCOSIII/uCOS_CONFIG/app_cfg.h

1 #i‚de‡ 
APP_CFG_MODULE_PRESENT


2 
	#APP_CFG_MODULE_PRESENT


	)

6 
	#APP_CFG_TASK_START_PRIO
 2u

	)

9 
	#APP_CFG_TASK_START_STK_SIZE
 128u

	)

10 
	#APP_CFG_TASK_BLINKY_STK_SIZE
 128u

	)

13 
	#APP_CFG_TASK_START_STK_SIZE_PCT_FULL
 90u

	)

14 
	#APP_CFG_TASK_START_STK_SIZE_LIMIT
 (
APP_CFG_TASK_START_STK_SIZE
 * (100u - 
APP_CFG_TASK_START_STK_SIZE_PCT_FULL
)Ë/ 100u

	)

16 
	#APP_CFG_TASK_BLINKY_STK_SIZE_LIMIT
 (
APP_CFG_TASK_BLINKY_STK_SIZE
 * (100u - 
APP_CFG_TASK_START_STK_SIZE_PCT_FULL
)Ë/ 100u

	)

19 #i‚de‡ 
TRACE_LEVEL_OFF


20 
	#TRACE_LEVEL_OFF
 0

	)

23 #i‚de‡ 
TRACE_LEVEL_INFO


24 
	#TRACE_LEVEL_INFO
 1

	)

27 #i‚de‡ 
TRACE_LEVEL_DBG


28 
	#TRACE_LEVEL_DBG
 2

	)

31 
	#APP_CFG_TRACE_LEVEL
 
TRACE_LEVEL_OFF


	)

32 
	#APP_CFG_TRACE
 
¥ötf


	)

34 
	#BSP_CFG_TRACE_LEVEL
 
TRACE_LEVEL_OFF


	)

35 
	#BSP_CFG_TRACE
 
¥ötf


	)

37 
	#APP_TRACE_INFO
(
x
Ë((
APP_CFG_TRACE_LEVEL
 >
TRACE_LEVEL_INFO
Ë? ()(
APP_CFG_TRACE
 xË: ()0)

	)

38 
	#APP_TRACE_DBG
(
x
Ë((
APP_CFG_TRACE_LEVEL
 >
TRACE_LEVEL_DBG
Ë? ()(
APP_CFG_TRACE
 xË: ()0)

	)

40 
	#BSP_TRACE_INFO
(
x
Ë((
BSP_CFG_TRACE_LEVEL
 >
TRACE_LEVEL_INFO
Ë? ()(
BSP_CFG_TRACE
 xË: ()0)

	)

41 
	#BSP_TRACE_DBG
(
x
Ë((
BSP_CFG_TRACE_LEVEL
 >
TRACE_LEVEL_DBG
Ë? ()(
BSP_CFG_TRACE
 xË: ()0)

	)

	@UCOSIII/uCOS_CONFIG/cpu_cfg.h

43 #i‚de‡ 
CPU_CFG_MODULE_PRESENT


44 
	#CPU_CFG_MODULE_PRESENT


	)

64 
	#CPU_CFG_NAME_EN
 
DEF_ENABLED


	)

69 
	#CPU_CFG_NAME_SIZE
 16

	)

99 
	#CPU_CFG_TS_32_EN
 
DEF_ENABLED


	)

100 
	#CPU_CFG_TS_64_EN
 
DEF_DISABLED


	)

106 
	#CPU_CFG_TS_TMR_SIZE
 
CPU_WORD_SIZE_32


	)

135 
	#CPU_CFG_INT_DIS_MEAS_EN


	)

139 
	#CPU_CFG_INT_DIS_MEAS_OVRHD_NBR
 1

	)

161 
	#CPU_CFG_LEAD_ZEROS_ASM_PRESENT


	)

	@UCOSIII/uCOS_CONFIG/includes.h

30 #i‚de‡ 
INCLUDES_MODULES_PRESENT


31 
	#INCLUDES_MODULES_PRESENT


	)

41 
	~<°dio.h
>

42 
	~<°rög.h
>

43 
	~<˘y≥.h
>

44 
	~<°dlib.h
>

45 
	~<°d¨g.h
>

46 
	~<m©h.h
>

55 
	~<os.h
>

64 
	~<˝u.h
>

65 
	~<lib_def.h
>

66 
	~<lib_ascii.h
>

67 
	~<lib_m©h.h
>

68 
	~<lib_mem.h
>

69 
	~<lib_°r.h
>

77 
	~<≠p_cfg.h
>

78 
	~<b•.h
>

87 
CPU_VOID
 
	tVOID
;

88 
CPU_CHAR
 
	tCHAR
;

89 
CPU_BOOLEAN
 
	tBOOLEAN
;

90 
CPU_INT08U
 
	tINT8U
;

91 
CPU_INT08S
 
	tINT8S
;

92 
CPU_INT16U
 
	tINT16U
;

93 
CPU_INT16S
 
	tINT16S
;

94 
CPU_INT32U
 
	tINT32U
;

95 
CPU_INT32S
 
	tINT32S
;

96 
CPU_FP32
 
	tFP32
;

97 
CPU_FP64
 
	tFP64
;

98 * 
	tPVOID
;

100 
	#FALSE
 0

	)

101 
	#TRUE
 1

	)

	@UCOSIII/uCOS_CONFIG/lib_cfg.h

42 #i‚de‡ 
LIB_CFG_MODULE_PRESENT


43 
	#LIB_CFG_MODULE_PRESENT


	)

71 
	#LIB_MEM_CFG_ARG_CHK_EXT_EN
 
DEF_DISABLED


	)

85 
	#LIB_MEM_CFG_OPTIMIZE_ASM_EN
 
DEF_ENABLED


	)

110 
	#LIB_MEM_CFG_ALLOC_EN
 
DEF_ENABLED


	)

115 
	#LIB_MEM_CFG_HEAP_SIZE
 (1u * 1024uË

	)

118 
	#LIB_MEM_CFG_HEAP_BASE_ADDR
 0x00000000u

	)

145 
	#LIB_STR_CFG_FP_EN
 
DEF_DISABLED


	)

151 
	#LIB_STR_CFG_FP_MAX_NBR_DIG_SIG
 
LIB_STR_FP_MAX_NBR_DIG_SIG_DFLT


	)

	@UCOSIII/uCOS_CONFIG/os_app_hooks.c

33 
	#MICRIUM_SOURCE


	)

34 
	~<os.h
>

35 
	~<os_≠p_hooks.h
>

50 
	$Aµ_OS_SëAŒHooks
 ()

52 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

53 
	`CPU_SR_ALLOC
();

56 
	`CPU_CRITICAL_ENTER
();

57 
OS_AµTaskCª©eHookPå
 = 
Aµ_OS_TaskCª©eHook
;

58 
OS_AµTaskDñHookPå
 = 
Aµ_OS_TaskDñHook
;

59 
OS_AµTaskRëu∫HookPå
 = 
Aµ_OS_TaskRëu∫Hook
;

61 
OS_AµIdÀTaskHookPå
 = 
Aµ_OS_IdÀTaskHook
;

62 
OS_AµSètTaskHookPå
 = 
Aµ_OS_SètTaskHook
;

63 
OS_AµTaskSwHookPå
 = 
Aµ_OS_TaskSwHook
;

64 
OS_AµTimeTickHookPå
 = 
Aµ_OS_TimeTickHook
;

65 
	`CPU_CRITICAL_EXIT
();

67 
	}
}

82 
	$Aµ_OS_CÃAŒHooks
 ()

84 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

85 
	`CPU_SR_ALLOC
();

88 
	`CPU_CRITICAL_ENTER
();

89 
OS_AµTaskCª©eHookPå
 = (
OS_APP_HOOK_TCB
)0;

90 
OS_AµTaskDñHookPå
 = (
OS_APP_HOOK_TCB
)0;

91 
OS_AµTaskRëu∫HookPå
 = (
OS_APP_HOOK_TCB
)0;

93 
OS_AµIdÀTaskHookPå
 = (
OS_APP_HOOK_VOID
)0;

94 
OS_AµSètTaskHookPå
 = (
OS_APP_HOOK_VOID
)0;

95 
OS_AµTaskSwHookPå
 = (
OS_APP_HOOK_VOID
)0;

96 
OS_AµTimeTickHookPå
 = (
OS_APP_HOOK_VOID
)0;

97 
	`CPU_CRITICAL_EXIT
();

99 
	}
}

114 
	$Aµ_OS_TaskCª©eHook
 (
OS_TCB
 *
p_tcb
)

116 ()&
p_tcb
;

117 
	}
}

132 
	$Aµ_OS_TaskDñHook
 (
OS_TCB
 *
p_tcb
)

134 ()&
p_tcb
;

135 
	}
}

151 
	$Aµ_OS_TaskRëu∫Hook
 (
OS_TCB
 *
p_tcb
)

153 ()&
p_tcb
;

154 
	}
}

170 
	$Aµ_OS_IdÀTaskHook
 ()

173 
	}
}

188 
	$Aµ_OS_InôHook
 ()

191 
	}
}

207 
	$Aµ_OS_SètTaskHook
 ()

210 
	}
}

229 
	$Aµ_OS_TaskSwHook
 ()

232 
	}
}

247 
	$Aµ_OS_TimeTickHook
 ()

250 
	}
}

	@UCOSIII/uCOS_CONFIG/os_app_hooks.h

33 #i‚de‡ 
OS_APP_HOOKS_H


34 
	#OS_APP_HOOKS_H


	)

37 #ifde‡ 
OS_APP_HOOKS_H_GLOBALS


38 
	#OS_APP_HOOKS_H_EXT


	)

40 
	#OS_APP_HOOKS_H_EXT
 

	)

49 
	~<os.h
>

57 
Aµ_OS_SëAŒHooks
 ();

58 
Aµ_OS_CÃAŒHooks
 ();

62 
Aµ_OS_TaskCª©eHook
(
OS_TCB
 *
p_tcb
);

63 
Aµ_OS_TaskDñHook
 (
OS_TCB
 *
p_tcb
);

64 
Aµ_OS_TaskRëu∫Hook
(
OS_TCB
 *
p_tcb
);

66 
Aµ_OS_IdÀTaskHook
 ();

67 
Aµ_OS_InôHook
 ();

68 
Aµ_OS_SètTaskHook
 ();

69 
Aµ_OS_TaskSwHook
 ();

70 
Aµ_OS_TimeTickHook
 ();

	@UCOSIII/uCOS_CONFIG/os_cfg.h

33 #i‚de‡
OS_CFG_H


34 
	#OS_CFG_H


	)

38 
	#OS_CFG_APP_HOOKS_EN
 1u

	)

39 
	#OS_CFG_ARG_CHK_EN
 1u

	)

40 
	#OS_CFG_CALLED_FROM_ISR_CHK_EN
 1u

	)

41 
	#OS_CFG_DBG_EN
 1u

	)

42 
	#OS_CFG_ISR_POST_DEFERRED_EN
 1u

	)

43 
	#OS_CFG_OBJ_TYPE_CHK_EN
 1u

	)

44 
	#OS_CFG_TS_EN
 1u

	)

46 
	#OS_CFG_PEND_MULTI_EN
 0u

	)

48 
	#OS_CFG_PRIO_MAX
 64u

	)

50 
	#OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 1u

	)

51 
	#OS_CFG_SCHED_ROUND_ROBIN_EN
 1u

	)

52 
	#OS_CFG_STK_SIZE_MIN
 64u

	)

56 
	#OS_CFG_FLAG_EN
 1u

	)

57 
	#OS_CFG_FLAG_DEL_EN
 1u

	)

58 
	#OS_CFG_FLAG_MODE_CLR_EN
 1u

	)

59 
	#OS_CFG_FLAG_PEND_ABORT_EN
 1u

	)

63 
	#OS_CFG_MEM_EN
 1u

	)

67 
	#OS_CFG_MUTEX_EN
 1u

	)

68 
	#OS_CFG_MUTEX_DEL_EN
 1u

	)

69 
	#OS_CFG_MUTEX_PEND_ABORT_EN
 1u

	)

73 
	#OS_CFG_Q_EN
 1u

	)

74 
	#OS_CFG_Q_DEL_EN
 1u

	)

75 
	#OS_CFG_Q_FLUSH_EN
 1u

	)

76 
	#OS_CFG_Q_PEND_ABORT_EN
 1u

	)

80 
	#OS_CFG_SEM_EN
 1u

	)

81 
	#OS_CFG_SEM_DEL_EN
 1u

	)

82 
	#OS_CFG_SEM_PEND_ABORT_EN
 1u

	)

83 
	#OS_CFG_SEM_SET_EN
 1u

	)

87 
	#OS_CFG_STAT_TASK_EN
 1u

	)

88 
	#OS_CFG_STAT_TASK_STK_CHK_EN
 1u

	)

90 
	#OS_CFG_TASK_CHANGE_PRIO_EN
 1u

	)

91 
	#OS_CFG_TASK_DEL_EN
 1u

	)

92 
	#OS_CFG_TASK_Q_EN
 1u

	)

93 
	#OS_CFG_TASK_Q_PEND_ABORT_EN
 1u

	)

94 
	#OS_CFG_TASK_PROFILE_EN
 1u

	)

95 
	#OS_CFG_TASK_REG_TBL_SIZE
 1u

	)

96 
	#OS_CFG_TASK_SEM_PEND_ABORT_EN
 1u

	)

97 
	#OS_CFG_TASK_SUSPEND_EN
 1u

	)

101 
	#OS_CFG_TIME_DLY_HMSM_EN
 1u

	)

102 
	#OS_CFG_TIME_DLY_RESUME_EN
 1u

	)

106 
	#OS_CFG_TLS_TBL_SIZE
 0u

	)

110 
	#OS_CFG_TMR_EN
 1u

	)

111 
	#OS_CFG_TMR_DEL_EN
 1u

	)

	@UCOSIII/uCOS_CONFIG/os_cfg_app.h

33 #i‚de‡
OS_CFG_APP_H


34 
	#OS_CFG_APP_H


	)

43 
	#OS_CFG_MSG_POOL_SIZE
 100u

	)

44 
	#OS_CFG_ISR_STK_SIZE
 128u

	)

45 
	#OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
 10u

	)

49 
	#OS_CFG_IDLE_TASK_STK_SIZE
 128u

	)

53 
	#OS_CFG_INT_Q_SIZE
 10u

	)

54 
	#OS_CFG_INT_Q_TASK_STK_SIZE
 128u

	)

57 
	#OS_CFG_STAT_TASK_PRIO
 (
OS_CFG_PRIO_MAX
-2uË

	)

58 
	#OS_CFG_STAT_TASK_RATE_HZ
 10u

	)

59 
	#OS_CFG_STAT_TASK_STK_SIZE
 128u

	)

63 
	#OS_CFG_TICK_RATE_HZ
 1000u

	)

64 
	#OS_CFG_TICK_TASK_PRIO
 1u

	)

65 
	#OS_CFG_TICK_TASK_STK_SIZE
 128u

	)

66 
	#OS_CFG_TICK_WHEEL_SIZE
 17u

	)

70 
	#OS_CFG_TMR_TASK_PRIO
 2u

	)

71 
	#OS_CFG_TMR_TASK_RATE_HZ
 100u

	)

72 
	#OS_CFG_TMR_TASK_STK_SIZE
 128u

	)

73 
	#OS_CFG_TMR_WHEEL_SIZE
 17u

	)

	@USER/App/inc/ModuleMotorDriver.h

16 #i‚de‡ 
__MODULE_MOTORDIRVER_H__


17 
	#__MODULE_MOTORDIRVER_H__


	)

19 
	~"comm⁄.h
"

20 
	~"°ru˘_def.h
"

22 
	sModuÀMŸ‹DrivîD©a


24 
P_MSGQUEUE
 
	mm_pMsgQueue
;

25 
INT16U
 
	mm_Cou¡
;

26 
BOOLEAN
 
	mm_PªssSè
;

28 
BOOLEAN
 
	mm_CpuLedSè
;

29 }
	tMODULEMOTORDIRVERDATA
,*
	tPMODULEMOTORDIRVERDATA
;

31 
	sModuÀMŸ‹Drivî


33 
	mm_ModName
[16];

34 
BOOLEAN
 (*
pModñeInô
)(* 
	mpArg
);

35 
BOOLEAN
 (*
pModñeRe£t
)(* 
	mpArg
);

36 
BOOLEAN
 (*
pModñeSèπ
)(* 
	mpArg
);

37 
BOOLEAN
 (*
pModñeSt›
)(* 
	mpArg
);

38 
BOOLEAN
 (*
pModñeRñó£
)(* 
	mpArg
);

39 (*
	mpMsgNŸify
)(
PVOID
 
	mpArg
, 
INT8U
 
	mMsgId
, 
INT16U
 
	mlP¨am
, INT16U 
	mwP¨am
, * 
	mpBuf
);

40 (*
	mpModñe10msPro˚ss
)(* 
	mpArg
);

41 (*
	mpModñe50msPro˚ss
)(* 
	mpArg
);

42 (*
	mpModñe1sPro˚ss
)(* 
	mpArg
);

43 (*
	mpModñe1msPro˚ss
)(* 
	mpArg
);

44 
PVOID
 
	mm_pBa£D©a
;

45 }
	tMODULEMOTORDIRVER
,*
	tPMODULEMOTORDIRVER
;

59 
PMODULEBASE
 
Cª©eModuÀMŸ‹Drivî
(
PMODULESERVERDATA
 
pSîvîD©a
);

61 
BOOLEAN
 
ModuÀMŸ‹DrivîInô
(* 
pArg
);

62 
BOOLEAN
 
ModuÀMŸ‹DrivîRe£t
(* 
pArg
);

63 
BOOLEAN
 
ModuÀMŸ‹DrivîSèπ
(* 
pArg
);

64 
BOOLEAN
 
ModuÀMŸ‹DrivîSt›
(* 
pArg
);

65 
BOOLEAN
 
ModuÀMŸ‹DrivîRñó£
(* 
pArg
);

66 
ModuÀMŸ‹Drivî1sPro˚ss
(* 
pArg
);

67 
ModuÀMŸ‹Drivî50msPro˚ss
(* 
pArg
);

68 
MŸ‹DrivîMsgNŸify
(* 
pArg
, 
INT8U
 
MsgId
, 
INT16U
 
lP¨am
, INT16U 
wP¨am
, * 
pBuf
);

73 
COMP_Së_S≥ed
(
INT16U
 
S≥ed
);

74 
Ród_comp_•ìd
();

	@USER/App/inc/ModuleServer.h

16 #i‚de‡ 
__MODULE_SERVER_H__


17 
	#__MODULE_SERVER_H__


	)

19 
	~"comm⁄.h
"

21 
	sSubModIãm


23 
PMODULEBASE
 
	mpObj
;

24 
INT8U
 
	mègs
;

25 }
	tSUBMODITEM
,*
	tPSUBMODITEM
;

27 
	sModuÀSîvî


29 
	mm_ModName
[16];

30 
BOOLEAN
 (*
pModñeInô
)(* 
	mpArg
);

31 
BOOLEAN
 (*
pModñeRe£t
)(* 
	mpArg
);

32 
BOOLEAN
 (*
pModñeSèπ
)(* 
	mpArg
);

33 
BOOLEAN
 (*
pModñeSt›
)(* 
	mpArg
);

34 
BOOLEAN
 (*
pModñeRñó£
)(* 
	mpArg
);

35 (*
	mpMsgNŸify
)(
PVOID
 
	mpArg
, 
INT8U
 
	mMsgId
, 
INT16U
 
	mlP¨am
, INT16U 
	mwP¨am
, * 
	mpBuf
);

36 (*
	mpModñe10msPro˚ss
)(* 
	mpArg
);

37 (*
	mpModñe50msPro˚ss
)(* 
	mpArg
);

38 (*
	mpModñe1sPro˚ss
)(* 
	mpArg
);

39 (*
	mpModñe1msPro˚ss
)(* 
	mpArg
);

40 
PVOID
 
	mm_pBa£D©a
;

41 (*
	mpMsgNŸifyPro˚ss
)(
PVOID
 
	mpArg
);

42 (*
	mpSubModPushBack
)(
PVOID
 
	mpArg
, 
PSUBMODITEM
 
	mpObj
);

43 }
	tMODULESERVER
,*
	tPMODULESERVER
;

58 
PMODULEBASE
 
Cª©eModuÀSîvî
();

61 
BOOLEAN
 
ModuÀSîvîInô
(* 
pArg
);

62 
BOOLEAN
 
ModuÀSîvîRe£t
(* 
pArg
);

63 
BOOLEAN
 
ModuÀSîvîSèπ
(* 
pArg
);

64 
BOOLEAN
 
ModuÀSîvîSt›
(* 
pArg
);

65 
BOOLEAN
 
ModuÀSîvîRñó£
(* 
pArg
);

66 
ModuÀSîvî10msPro˚ss
(* 
pArg
);

67 
ModuÀSîvî50msPro˚ss
(* 
pArg
);

68 
ModuÀSîvî1sPro˚ss
(* 
pArg
);

69 
ModuÀSîvî1msPro˚ss
(* 
pArg
);

70 
SîvîMsgNŸify
(* 
pArg
, 
INT8U
 
MsgId
, 
INT16U
 
lP¨am
, INT16U 
wP¨am
, * 
pBuf
);

71 
MsgNŸifyPro˚ss
(
PVOID
 
pArg
);

73 
SubModPushBack
(
PVOID
 
pArg
, 
PSUBMODITEM
 
pObj
);

74 
SubModRe£t
(
Tag
, * 
Mem‹y
, * 
Args
);

75 
SubModSèπ
(
Tag
, * 
Mem‹y
, * 
Args
);

76 
SubModSt›
(
Tag
, * 
Mem‹y
, * 
Args
);

77 
SubModRñó£
(
Tag
, * 
Mem‹y
, * 
Args
);

78 
SubMod10msPro˚ss
(
Tag
, * 
Mem‹y
, * 
Args
);

79 
SubMod1msPro˚ss
(
Tag
, * 
Mem‹y
, * 
Args
);

80 
SubMod50msPro˚ss
(
Tag
, * 
Mem‹y
, * 
Args
);

81 
SubMod1sPro˚ss
(
Tag
, * 
Mem‹y
, * 
Args
);

82 
SubModMsgNŸify
(
Tag
, * 
Mem‹y
, * 
Args
);

	@USER/App/inc/ModuleXxx.h

16 #i‚de‡ 
__MODULE_XXX_H__


17 
	#__MODULE_XXX_H__


	)

19 
	~"comm⁄.h
"

20 
	~"°ru˘_def.h
"

22 
	sModuÀXxxD©a


24 
P_MSGQUEUE
 
	mm_pMsgQueue
;

25 
INT16U
 
	mm_Cou¡
;

26 
BOOLEAN
 
	mm_PªssSè
;

29 }
	tMODULEXXXDATA
,*
	tPMODULEXXXDATA
;

31 
	sModuÀXxx


33 
	mm_ModName
[16];

34 
BOOLEAN
 (*
pModñeInô
)(* 
	mpArg
);

35 
BOOLEAN
 (*
pModñeRe£t
)(* 
	mpArg
);

36 
BOOLEAN
 (*
pModñeSèπ
)(* 
	mpArg
);

37 
BOOLEAN
 (*
pModñeSt›
)(* 
	mpArg
);

38 
BOOLEAN
 (*
pModñeRñó£
)(* 
	mpArg
);

39 (*
	mpMsgNŸify
)(
PVOID
 
	mpArg
, 
INT8U
 
	mMsgId
, 
INT16U
 
	mlP¨am
, INT16U 
	mwP¨am
, * 
	mpBuf
);

40 (*
	mpModñe10msPro˚ss
)(* 
	mpArg
);

41 (*
	mpModñe50msPro˚ss
)(* 
	mpArg
);

42 (*
	mpModñe1sPro˚ss
)(* 
	mpArg
);

43 
PVOID
 
	mm_pBa£D©a
;

44 }
	tMODULEXXX
,*
	tPMODULEXXX
;

58 
PMODULEBASE
 
Cª©eModuÀXxx
(
PMODULESERVERDATA
 
pSîvîD©a
)£ª

61 
BOOLEAN
 
ModuÀXxxInô
(* 
pArg
);

62 
BOOLEAN
 
ModuÀXxxRe£t
(* 
pArg
);

63 
BOOLEAN
 
ModuÀXxxSèπ
(* 
pArg
);

64 
BOOLEAN
 
ModuÀXxxSt›
(* 
pArg
);

65 
BOOLEAN
 
ModuÀXxxRñó£
(* 
pArg
);

66 
ModuÀXxx1sPro˚ss
(* 
pArg
);

67 
XxxMsgNŸify
(* 
pArg
, 
INT8U
 
MsgId
, 
INT16U
 
lP¨am
, INT16U 
wP¨am
, * 
pBuf
);

	@USER/App/inc/TaskMain.h

16 #i‚de‡ 
__TASK_MAIN_H__


17 
	#__TASK_MAIN_H__


	)

19 
	~"comm⁄.h
"

20 
	~"°ru˘_def.h
"

21 
	~"ModuÀSîvî.h
"

23 
Task_O√_Pro˚ss
(*
pd©a
);

24 
Task_Two_Pro˚ss
(*
pd©a
);

25 
Task_The_Pro˚ss
(*
pd©a
);

26 
Task_Fou_Pro˚ss
(*
pd©a
);

27 
Task_Sîvî
(*
pd©a
);

	@USER/App/inc/struct_def.h

16 #i‚de‡ 
__STRUCT_DEF_H__


17 
	#__STRUCT_DEF_H__


	)

19 
	~"comm⁄.h
"

27 
	mSqu¨e
=1,

28 
	mSlow
,

29 
	mAc˚Àø
,

30 
	mO≥n
,

31 } 
	teWaveF‹m
;

44 
	sMsgIãm


47 
INT8U
 
	mMsgId
;

48 
INT16U
 
	mlP¨am
;

49 
INT16U
 
	mwP¨am
;

50 * 
	mpBuf
;

51 }
	tMSGITEM
,*
	tPMSGITEM
;

54 
	sModuÀBa£


57 
	mm_ModName
[16];

59 
BOOLEAN
 (*
pModñeInô
)(* 
	mpArg
);

61 
BOOLEAN
 (*
pModñeRe£t
)(* 
	mpArg
);

63 
BOOLEAN
 (*
pModñeSèπ
)(* 
	mpArg
);

65 
BOOLEAN
 (*
pModñeSt›
)(* 
	mpArg
);

67 
BOOLEAN
 (*
pModñeRñó£
)(* 
	mpArg
);

69 (*
	mpMsgNŸify
)(
PVOID
 
	mpArg
, 
INT8U
 
	mMsgId
, 
INT16U
 
	mlP¨am
, INT16U 
	mwP¨am
, * 
	mpBuf
);

71 (*
	mpModñe10msPro˚ss
)(* 
	mpArg
);

73 (*
	mpModñe50msPro˚ss
)(* 
	mpArg
);

75 (*
	mpModñe1sPro˚ss
)(* 
	mpArg
);

77 (*
	mpModñe1msPro˚ss
)(* 
	mpArg
);

79 
PVOID
 
	mm_pBa£D©a
;

80 }
	tMODULEBASE
,*
	tPMODULEBASE
;

85 
	sGlobÆD©a


87 
PMODULEBASE
 
	mpSîvî
;

89 }
	tGLOBALDATA
,*
	tPGLOBALDATA
;

92 
	sModuÀSîvîD©a


95 
P_MSGQUEUE
 
	mm_pMsgQueue
;

96 
DLLIST
* 
	mm_pSubMouÀLi°
;

97 
BOOLEAN
 
	mm_PªssSè
;

98 }
	tMODULESERVERDATA
,*
	tPMODULESERVERDATA
;

	@USER/App/src/ModuleMotorDriver.c

16 
	~"ModuÀMŸ‹Drivî.h
"

17 
	~"ußπ3.h
"

18 
	~"gpio.h
"

19 
	~"comm⁄.h
"

20 
	~"ußπ4.h
"

21 
	~"ußπ5.h
"

23 
BOOLEAN
 
	$ModuÀMŸ‹DrivîInô
(* 
pArg
)

25 
BOOLEAN
 
ªt
 = 
TRUE
;

26 
PMODULEMOTORDIRVERDATA
 
pD©a
 = (PMODULEMOTORDIRVERDATA)
pArg
;

27 if(
pD©a
 !
NULL
)

30  
ªt
;

31 
	}
}

33 
BOOLEAN
 
	$ModuÀMŸ‹DrivîRe£t
(* 
pArg
)

35 
BOOLEAN
 
ªt
 = 
TRUE
;

36 
PMODULEMOTORDIRVERDATA
 
pD©a
 = (PMODULEMOTORDIRVERDATA)
pArg
;

37 
pD©a
->
m_PªssSè
 = 
FALSE
;

38 
pD©a
->
m_Cou¡
 = 0;

39  
ªt
;

40 
	}
}

42 
BOOLEAN
 
	$ModuÀMŸ‹DrivîSèπ
(* 
pArg
)

44 
BOOLEAN
 
ªt
 = 
TRUE
;

45 
PMODULEMOTORDIRVERDATA
 
pD©a
 = (PMODULEMOTORDIRVERDATA)
pArg
;

46 
pD©a
->
m_PªssSè
 = 
TRUE
;

47  
ªt
;

48 
	}
}

50 
BOOLEAN
 
	$ModuÀMŸ‹DrivîSt›
(* 
pArg
)

52 
BOOLEAN
 
ªt
 = 
TRUE
;

53 
PMODULEMOTORDIRVERDATA
 
pD©a
 = (PMODULEMOTORDIRVERDATA)
pArg
;

54 
pD©a
->
m_PªssSè
 = 
FALSE
;

55  
ªt
;

56 
	}
}

58 
BOOLEAN
 
	$ModuÀMŸ‹DrivîRñó£
(* 
pArg
)

60 
BOOLEAN
 
ªt
 = 
TRUE
;

61 
PMODULEMOTORDIRVERDATA
 
pD©a
 = (PMODULEMOTORDIRVERDATA)
pArg
;

62 if(
pD©a
 !
NULL
)

63 
	`‰ì
(
pD©a
);

64  
ªt
;

65 
	}
}

67 
	$ModuÀMŸ‹Drivî50msPro˚ss
(* 
pArg
)

69 
PMODULEMOTORDIRVERDATA
 
pD©a
 = (PMODULEMOTORDIRVERDATA)
pArg
;

70 
INT16U
 
•ìd
 = 0;

72 if(
pD©a
->
m_PªssSè
 =
FALSE
)

74 
pD©a
->
m_CpuLedSè
 = !pData->m_CpuLedSta;

75 
	`SëCpuLed
(
pD©a
->
m_CpuLedSè
);

76 
	}
}

77 
	$U¨tSídD©a
()

79 
INT8U
 
d©a
[23];

80 
INT8U
 
i
;

81 
i
=0;i<23;i++)

82 
d©a
[
i
] = i;

83 
	`U¨t4SídD©a
(
d©a
,23);

84 
	}
}

85 
	$U¨tSídD©a5
()

87 
INT8U
 
d©a
[23];

88 
INT8U
 
i
;

89 
i
=0;i<23;i++)

90 
d©a
[
i
] = i;

91 
	`U¨t5SídD©a
(
d©a
,23);

92 
	}
}

93 
	$ModuÀMŸ‹Drivî1sPro˚ss
(* 
pArg
)

95 
PMODULEMOTORDIRVERDATA
 
pD©a
 = (PMODULEMOTORDIRVERDATA)
pArg
;

96 
INT16U
 
•ìd
 = 0;

98 if(
pD©a
->
m_PªssSè
 =
FALSE
)

100 
pD©a
->
m_Cou¡
++;

103 
pD©a
->
m_Cou¡
 = 0;

105 if(
pD©a
->
m_pMsgQueue
 !
NULL
)

107 
pD©a
->
m_pMsgQueue
->
	`push_back
’D©a->m_pMsgQueue->pD©a,100,1,0,
NULL
);

111 
	`SëPA15
(
FALSE
);

112 
	`COMP_Së_S≥ed
(
•ìd
);

113 
	`Ród_comp_•ìd
();

117 
	`U¨tSídD©a5
();

119 
	}
}

121 
	$MŸ‹DrivîMsgNŸify
(* 
pArg
, 
INT8U
 
MsgId
, 
INT16U
 
lP¨am
, INT16U 
wP¨am
, * 
pBuf
)

123 
MsgId
)

126 if(
lP¨am
 == 1)

134 
	}
}

136 
PMODULEBASE
 
	$Cª©eModuÀMŸ‹Drivî
(
PMODULESERVERDATA
 
pSîvîD©a
)

138 
PMODULEMOTORDIRVER
 
pModMŸ‹Drivî
 = 
NULL
;

139 
PMODULEMOTORDIRVERDATA
 
pD©a
 = 
NULL
;

141 
pModMŸ‹Drivî
 = (
PMODULEMOTORDIRVER
)
	`mÆloc
((
MODULEMOTORDIRVER
));

142 
pD©a
 = (
PMODULEMOTORDIRVERDATA
)
	`mÆloc
((
MODULEMOTORDIRVERDATA
));

145 
pD©a
->
m_pMsgQueue
 = 
pSîvîD©a
->m_pMsgQueue;

146 
pModMŸ‹Drivî
->
m_pBa£D©a
 = (
PVOID
)
pD©a
;

149 
pModMŸ‹Drivî
->
pModñeInô
 = 
ModuÀMŸ‹DrivîInô
;

150 
pModMŸ‹Drivî
->
pModñeRe£t
 = 
ModuÀMŸ‹DrivîRe£t
;

151 
pModMŸ‹Drivî
->
pModñeSèπ
 = 
ModuÀMŸ‹DrivîSèπ
;

152 
pModMŸ‹Drivî
->
pModñeSt›
 = 
ModuÀMŸ‹DrivîSt›
;

153 
pModMŸ‹Drivî
->
pModñeRñó£
 = 
ModuÀMŸ‹DrivîRñó£
;

154 
pModMŸ‹Drivî
->
pMsgNŸify
 = 
MŸ‹DrivîMsgNŸify
;

155 
pModMŸ‹Drivî
->
pModñe1msPro˚ss
 = 
NULL
;

156 
pModMŸ‹Drivî
->
pModñe10msPro˚ss
 = 
NULL
;

157 
pModMŸ‹Drivî
->
pModñe50msPro˚ss
 = 
ModuÀMŸ‹Drivî50msPro˚ss
;

158 
pModMŸ‹Drivî
->
pModñe1sPro˚ss
 = 
ModuÀMŸ‹Drivî1sPro˚ss
;

159 
	`°r˝y
(
pModMŸ‹Drivî
->
m_ModName
, "ModMotorDriver");

161 
	`¥ötf
("CreateModuleMotorDriver!!\n");

162  (
PMODULEBASE
)
pModMŸ‹Drivî
;

163 
	}
}

166 
	$COMP_Së_S≥ed
(
INT16U
 
S≥ed
)

168 
INT8U
 
d©a
[6];

169 
d©a
[0] = 0xAA;

170 
d©a
[1] = 0x66;

171 
d©a
[2] = 0xEE;

172 
d©a
[3] = (
INT8U
)(
S≥ed
/63.6);

174 
d©a
[4] = data[1]+data[2]+data[3];

175 
d©a
[5] = 0x55;

176 
	`Ußπ3SídD©a
(
d©a
,6);

177 
	}
}

179 
	$Ród_comp_•ìd
()

181 
INT8U
 
Comp_Cur_INS
[6]={0xAA,0xBB,0x22,0x22,0xFF,0x55};

182 
	`Ußπ3SídD©a
(
Comp_Cur_INS
, 6);

183 
	}
}

	@USER/App/src/ModuleServer.c

16 
	~"ModuÀSîvî.h
"

18 
	$SubModInô
(
Tag
, * 
Mem‹y
, * 
Args
)

20 
ªt
 = 0;

21 
PSUBMODITEM
 
pSrc
 = 
Mem‹y
;

23 
PMODULEBASE
 
pSubMod
 = 
NULL
;

24 if(
pSrc
 !
NULL
)

26 
pSubMod
 = 
pSrc
->
pObj
;

27 if(
pSubMod
 !
NULL
)

28 
pSubMod
->
	`pModñeInô
’SubMod->
m_pBa£D©a
);

31 
	`¥ötf
("%†Inô End!!\n",
pSubMod
->
m_ModName
);

32  
ªt
;

33 
	}
}

35 
	$SubModRe£t
(
Tag
, * 
Mem‹y
, * 
Args
)

37 
ªt
 = 0;

38 
PSUBMODITEM
 
pSrc
 = 
Mem‹y
;

40 
PMODULEBASE
 
pSubMod
 = 
NULL
;

41 if(
pSrc
 !
NULL
)

43 
pSubMod
 = 
pSrc
->
pObj
;

44 if(
pSubMod
 !
NULL
)

45 
pSubMod
->
	`pModñeRe£t
’SubMod->
m_pBa£D©a
);

47  
ªt
;

48 
	}
}

50 
	$SubModSèπ
(
Tag
, * 
Mem‹y
, * 
Args
)

52 
ªt
 = 0;

53 
PSUBMODITEM
 
pSrc
 = 
Mem‹y
;

55 
PMODULEBASE
 
pSubMod
 = 
NULL
;

56 if(
pSrc
 !
NULL
)

58 
pSubMod
 = 
pSrc
->
pObj
;

59 if(
pSubMod
 !
NULL
)

60 
pSubMod
->
	`pModñeSèπ
’SubMod->
m_pBa£D©a
);

63  
ªt
;

64 
	}
}

66 
	$SubModSt›
(
Tag
, * 
Mem‹y
, * 
Args
)

68 
ªt
 = 0;

69 
PSUBMODITEM
 
pSrc
 = 
Mem‹y
;

71 
PMODULEBASE
 
pSubMod
 = 
NULL
;

72 if(
pSrc
 !
NULL
)

74 
pSubMod
 = 
pSrc
->
pObj
;

75 if(
pSubMod
 !
NULL
)

76 
pSubMod
->
	`pModñeSt›
’SubMod->
m_pBa£D©a
);

78  
ªt
;

79 
	}
}

81 
	$SubModRñó£
(
Tag
, * 
Mem‹y
, * 
Args
)

83 
ªt
 = 0;

84 
PSUBMODITEM
 
pSrc
 = 
Mem‹y
;

86 
PMODULEBASE
 
pSubMod
 = 
NULL
;

87 if(
pSrc
 !
NULL
)

89 
pSubMod
 = 
pSrc
->
pObj
;

90 if(
pSubMod
 !
NULL
)

91 
pSubMod
->
	`pModñeRñó£
’SubMod->
m_pBa£D©a
);

93  
ªt
;

94 
	}
}

96 
	$SubMod10msPro˚ss
(
Tag
, * 
Mem‹y
, * 
Args
)

98 
ªt
 = 0;

99 
PSUBMODITEM
 
pSrc
 = 
Mem‹y
;

101 
PMODULEBASE
 
pSubMod
 = 
NULL
;

102 if(
pSrc
 !
NULL
)

104 
pSubMod
 = 
pSrc
->
pObj
;

105 if(
pSubMod
 !
NULL
 &&ÖSubMod->
pModñe10msPro˚ss
!=NULL )

106 
pSubMod
->
	`pModñe10msPro˚ss
’SubMod->
m_pBa£D©a
);

108  
ªt
;

109 
	}
}

111 
	$SubMod50msPro˚ss
(
Tag
, * 
Mem‹y
, * 
Args
)

113 
ªt
 = 0;

114 
PSUBMODITEM
 
pSrc
 = 
Mem‹y
;

116 
PMODULEBASE
 
pSubMod
 = 
NULL
;

117 if(
pSrc
 !
NULL
)

119 
pSubMod
 = 
pSrc
->
pObj
;

120 if(
pSubMod
 !
NULL
 &&ÖSubMod->
pModñe50msPro˚ss
!=NULL )

121 
pSubMod
->
	`pModñe50msPro˚ss
’SubMod->
m_pBa£D©a
);

123  
ªt
;

124 
	}
}

126 
	$SubMod1sPro˚ss
(
Tag
, * 
Mem‹y
, * 
Args
)

128 
ªt
 = 0;

129 
PSUBMODITEM
 
pSrc
 = 
Mem‹y
;

131 
PMODULEBASE
 
pSubMod
 = 
NULL
;

132 if(
pSrc
 !
NULL
)

134 
pSubMod
 = 
pSrc
->
pObj
;

135 if(
pSubMod
 !
NULL
 &&ÖSubMod->
pModñe1sPro˚ss
!=NULL )

136 
pSubMod
->
	`pModñe1sPro˚ss
’SubMod->
m_pBa£D©a
);

138  
ªt
;

139 
	}
}

142 
	$SubModMsgNŸify
(
Tag
, * 
Mem‹y
, * 
Args
)

144 
ªt
 = 0;

145 
PSUBMODITEM
 
pSrc
 = 
Mem‹y
;

146 
PMSGITEM
 
pDis
 = 
Args
;

147 
PMODULEBASE
 
pSubMod
 = 
NULL
;

148 if(
pSrc
 !
NULL
)

150 
pSubMod
 = 
pSrc
->
pObj
;

151 if(
pSubMod
 !
NULL
)

152 
pSubMod
->
	`pMsgNŸify
’SubMod->
m_pBa£D©a
,
pDis
->
MsgId
,ÖDis->
lP¨am
,ÖDis->
wP¨am
,ÖDis->
pBuf
);

154  
ªt
;

155 
	}
}

157 
BOOLEAN
 
	$ModuÀSîvîInô
(* 
pArg
)

160 
BOOLEAN
 
ªt
 = 
TRUE
;

161 
PMODULESERVERDATA
 
pD©a
 = (PMODULESERVERDATA)
pArg
;

162 
DLLIST
 *
FödAddr
 = 
NULL
;

163 
pD©a
->
m_PªssSè
 = 
FALSE
;

164 
	`DLWÆk
((
DLLIST
*)(
pD©a
->
m_pSubMouÀLi°
),&
FödAddr
,
SubModInô
,
NULL
);

166  
ªt
;

167 
	}
}

169 
BOOLEAN
 
	$ModuÀSîvîRe£t
(* 
pArg
)

171 
BOOLEAN
 
ªt
 = 
TRUE
;

172 
PMODULESERVERDATA
 
pD©a
 = (PMODULESERVERDATA)
pArg
;

173 
DLLIST
 *
FödAddr
 = 
NULL
;

174 
pD©a
->
m_PªssSè
 = 
FALSE
;

175 
	`DLWÆk
((
DLLIST
*)(
pD©a
->
m_pSubMouÀLi°
),&
FödAddr
,
SubModRe£t
,
NULL
);

177  
ªt
;

178 
	}
}

180 
BOOLEAN
 
	$ModuÀSîvîSèπ
(* 
pArg
)

182 
BOOLEAN
 
ªt
 = 
TRUE
;

183 
PMODULESERVERDATA
 
pD©a
 = (PMODULESERVERDATA)
pArg
;

184 
DLLIST
 *
FödAddr
 = 
NULL
;

185 
pD©a
->
m_PªssSè
 = 
TRUE
;

186 
	`DLWÆk
((
DLLIST
*)(
pD©a
->
m_pSubMouÀLi°
),&
FödAddr
,
SubModSèπ
,
NULL
);

188  
ªt
;

189 
	}
}

191 
BOOLEAN
 
	$ModuÀSîvîSt›
(* 
pArg
)

193 
BOOLEAN
 
ªt
 = 
TRUE
;

194 
PMODULESERVERDATA
 
pD©a
 = (PMODULESERVERDATA)
pArg
;

195 
DLLIST
 *
FödAddr
 = 
NULL
;

196 
pD©a
->
m_PªssSè
 = 
FALSE
;

197 
	`DLWÆk
((
DLLIST
*)(
pD©a
->
m_pSubMouÀLi°
),&
FödAddr
,
SubModSt›
,
NULL
);

198  
ªt
;

199 
	}
}

201 
BOOLEAN
 
	$ModuÀSîvîRñó£
(* 
pArg
)

203 
BOOLEAN
 
ªt
 = 
TRUE
;

204 
PMODULESERVERDATA
 
pD©a
 = (PMODULESERVERDATA)
pArg
;

206 
DLLIST
 *
FödAddr
 = 
NULL
;

207 
	`DLWÆk
((
DLLIST
*)(
pD©a
->
m_pSubMouÀLi°
),&
FödAddr
,
SubModRñó£
,
NULL
);

209 if(
pD©a
 !
NULL
)

210 
	`‰ì
(
pD©a
);

211  
ªt
;

212 
	}
}

214 
	$ModuÀSîvî1sPro˚ss
(* 
pArg
)

217 
PMODULESERVERDATA
 
pD©a
 = (PMODULESERVERDATA)
pArg
;

218 
DLLIST
 *
FödAddr
 = 
NULL
;

219 if(
pD©a
->
m_PªssSè
 =
FALSE
)

221 
	`DLWÆk
((
DLLIST
*)(
pD©a
->
m_pSubMouÀLi°
),&
FödAddr
,
SubMod1sPro˚ss
,
NULL
);

226 
	}
}

228 
	$ModuÀSîvî10msPro˚ss
(* 
pArg
)

231 
PMODULESERVERDATA
 
pD©a
 = (PMODULESERVERDATA)
pArg
;

232 
DLLIST
 *
FödAddr
 = 
NULL
;

233 if(
pD©a
->
m_PªssSè
 =
FALSE
)

235 
	`DLWÆk
((
DLLIST
*)(
pD©a
->
m_pSubMouÀLi°
),&
FödAddr
,
SubMod10msPro˚ss
,
NULL
);

236 
	}
}

238 
	$ModuÀSîvî50msPro˚ss
(* 
pArg
)

241 
PMODULESERVERDATA
 
pD©a
 = (PMODULESERVERDATA)
pArg
;

242 
DLLIST
 *
FödAddr
 = 
NULL
;

243 if(
pD©a
->
m_PªssSè
 =
FALSE
)

245 
	`DLWÆk
((
DLLIST
*)(
pD©a
->
m_pSubMouÀLi°
),&
FödAddr
,
SubMod50msPro˚ss
,
NULL
);

246 
	}
}

248 
	$SîvîMsgNŸify
(* 
pArg
, 
INT8U
 
MsgId
, 
INT16U
 
lP¨am
, INT16U 
wP¨am
, * 
pBuf
)

251 
PMODULESERVERDATA
 
pD©a
 = (PMODULESERVERDATA)
pArg
;

253 
MSGITEM
 
Iãm
;

254 
DLLIST
 *
FödAddr
 = 
NULL
;

256 
Iãm
.
MsgId
 = MsgId;

257 
Iãm
.
lP¨am
 =ÜParam;

258 
Iãm
.
wP¨am
 = wParam;

259 
Iãm
.
pBuf
 =ÖBuf;

261 
	`DLWÆk
((
DLLIST
*)(
pD©a
->
m_pSubMouÀLi°
), &
FödAddr
,
SubModMsgNŸify
, &
Iãm
);

262 
	}
}

264 
	$MsgNŸifyPro˚ss
(
PVOID
 
pArg
)

266 
PMODULESERVERDATA
 
pD©a
 = (PMODULESERVERDATA)
pArg
;

268 if(
pD©a
->
m_pMsgQueue
 !
NULL
)

270 
pD©a
->
m_pMsgQueue
->
	`≥nd
(pData->m_pMsgQueue->pData);

272 
	}
}

275 
	$SubModPushBack
(
PVOID
 
pArg
, 
PSUBMODITEM
 
pObj
)

277 
ªt
;

278 
PMODULESERVERDATA
 
pD©a
 = (PMODULESERVERDATA)
pArg
;

281 
ªt
 = 
	`DLAµíd
((
DLLIST
**)&(
pD©a
->
m_pSubMouÀLi°
),
pObj
->
ègs
,pObj,(
SUBMODITEM
));

282 if(
ªt
 !
DL_SUCCESS
)

283 
	`¥ötf
("Add %†Li° Eº‹\n", 
pObj
->pObj->
m_ModName
);

284 
	}
}

286 
	#MSGQUEUE_ID
 1

	)

287 
PMODULEBASE
 
	$Cª©eModuÀSîvî
()

289 
PMODULESERVER
 
pModSîvî
 = 
NULL
;

290 
PMODULESERVERDATA
 
pD©a
 = 
NULL
;

291 
MsgNŸiÊyPå
 
pFun
;

293 
pModSîvî
 = (
PMODULESERVER
)
	`mÆloc
(()(
MODULESERVER
));

294 
pD©a
 = (
PMODULESERVERDATA
)
	`mÆloc
((
MODULESERVERDATA
));

299 
pModSîvî
->
m_pBa£D©a
 = (
PVOID
)
pD©a
;

300 
pFun
 = 
SîvîMsgNŸify
;

305 
	`°r˝y
(
pModSîvî
->
m_ModName
, "ModServer");

307 
pModSîvî
->
pModñeInô
 = 
ModuÀSîvîInô
;

308 
pModSîvî
->
pModñeRe£t
 = 
ModuÀSîvîRe£t
;

309 
pModSîvî
->
pModñeSèπ
 = 
ModuÀSîvîSèπ
;

310 
pModSîvî
->
pModñeSt›
 = 
ModuÀSîvîSt›
;

311 
pModSîvî
->
pModñeRñó£
 = 
ModuÀSîvîRñó£
;

313 
pModSîvî
->
pModñe10msPro˚ss
 = 
ModuÀSîvî10msPro˚ss
;

314 
pModSîvî
->
pModñe50msPro˚ss
 = 
ModuÀSîvî50msPro˚ss
;

315 
pModSîvî
->
pModñe1sPro˚ss
 = 
ModuÀSîvî1sPro˚ss
;

316 
pModSîvî
->
pModñe1msPro˚ss
 = 
ModuÀSîvî1msPro˚ss
;

317 
pModSîvî
->
pMsgNŸifyPro˚ss
 = 
MsgNŸifyPro˚ss
;

321 
pD©a
->
m_pMsgQueue
 = 
	`MsgQueueCª©e
(
pFun
, 
pModSîvî
->
m_pBa£D©a
);

325 
pModSîvî
->
pSubModPushBack
 = 
SubModPushBack
;

326 
pD©a
->
m_pSubMouÀLi°
 = 
NULL
;

328 
	`PS
("CreateModuleServerÉnd");

329  (
PMODULEBASE
)
pModSîvî
;

330 
	}
}

332 
	$SubMod1msPro˚ss
(
Tag
, * 
Mem‹y
, * 
Args
)

334 
ªt
 = 0;

335 
PSUBMODITEM
 
pSrc
 = 
Mem‹y
;

337 
PMODULEBASE
 
pSubMod
 = 
NULL
;

338 if(
pSrc
 !
NULL
)

340 
pSubMod
 = 
pSrc
->
pObj
;

341 if(
pSubMod
 !
NULL
 &&ÖSubMod->
pModñe1msPro˚ss
!=NULL )

342 
pSubMod
->
	`pModñe1msPro˚ss
’SubMod->
m_pBa£D©a
);

344  
ªt
;

345 
	}
}

347 
	$ModuÀSîvî1msPro˚ss
(* 
pArg
)

349 
PMODULESERVERDATA
 
pD©a
 = (PMODULESERVERDATA)
pArg
;

350 
DLLIST
 *
FödAddr
 = 
NULL
;

351 if(
pD©a
->
m_PªssSè
 =
FALSE
)

354 
	`DLWÆk
((
DLLIST
*)(
pD©a
->
m_pSubMouÀLi°
),&
FödAddr
,
SubMod1msPro˚ss
,
NULL
);

355 
	}
}

	@USER/App/src/Modulexxx.c

16 
	~"ModuÀXxx.h
"

18 
	~"ußπ.h
"

20 
BOOLEAN
 
	$ModuÀXxxInô
(* 
pArg
)

22 
BOOLEAN
 
ªt
 = 
TRUE
;

23 
PMODULEXXXDATA
 
pD©a
 = (PMODULEXXXDATA)
pArg
;

24 if(
pD©a
 !
NULL
)

27  
ªt
;

28 
	}
}

30 
BOOLEAN
 
	$ModuÀXxxRe£t
(* 
pArg
)

32 
BOOLEAN
 
ªt
 = 
TRUE
;

33 
PMODULEXXXDATA
 
pD©a
 = (PMODULEXXXDATA)
pArg
;

34 
pD©a
->
m_PªssSè
 = 
FALSE
;

35 
pD©a
->
m_Cou¡
 = 0;

36  
ªt
;

37 
	}
}

39 
BOOLEAN
 
	$ModuÀXxxSèπ
(* 
pArg
)

41 
BOOLEAN
 
ªt
 = 
TRUE
;

42 
PMODULEXXXDATA
 
pD©a
 = (PMODULEXXXDATA)
pArg
;

43 
pD©a
->
m_PªssSè
 = 
TRUE
;

44  
ªt
;

45 
	}
}

47 
BOOLEAN
 
	$ModuÀXxxSt›
(* 
pArg
)

49 
BOOLEAN
 
ªt
 = 
TRUE
;

50 
PMODULEXXXDATA
 
pD©a
 = (PMODULEXXXDATA)
pArg
;

51 
pD©a
->
m_PªssSè
 = 
FALSE
;

52  
ªt
;

53 
	}
}

55 
BOOLEAN
 
	$ModuÀXxxRñó£
(* 
pArg
)

57 
BOOLEAN
 
ªt
 = 
TRUE
;

58 
PMODULEXXXDATA
 
pD©a
 = (PMODULEXXXDATA)
pArg
;

59 if(
pD©a
 !
NULL
)

60 
	`‰ì
(
pD©a
);

61  
ªt
;

62 
	}
}

64 
	$ModuÀXxx1sPro˚ss
(* 
pArg
)

66 
PMODULEXXXDATA
 
pD©a
 = (PMODULEXXXDATA)
pArg
;

68 if(
pD©a
->
m_PªssSè
 =
FALSE
)

70 
pD©a
->
m_Cou¡
++;

71 if(
pD©a
->
m_Cou¡
 > 60)

73 
pD©a
->
m_Cou¡
 = 0;

84 
	}
}

86 
	$XxxMsgNŸify
(* 
pArg
, 
INT8U
 
MsgId
, 
INT16U
 
lP¨am
, INT16U 
wP¨am
, * 
pBuf
)

102 
	}
}

104 
PMODULEBASE
 
	$Cª©eModuÀXxx
(
PMODULESERVERDATA
 
pSîvîD©a
)

106 
PMODULEXXX
 
pModXxx
 = 
NULL
;

107 
PMODULEXXXDATA
 
pD©a
 = 
NULL
;

109 
pModXxx
 = (
PMODULEXXX
)
	`mÆloc
((
MODULEXXX
));

110 
pD©a
 = (
PMODULEXXXDATA
)
	`mÆloc
((
MODULEXXXDATA
));

111 
	`ASSERT
(
pModXxx
 !
NULL
);

112 
	`ASSERT
(
pD©a
 !
NULL
);

113 
pD©a
->
m_pMsgQueue
 = 
pSîvîD©a
->m_pMsgQueue;

114 
pModXxx
->
m_pBa£D©a
 = (
PVOID
)
pD©a
;

117 
pModXxx
->
pModñeInô
 = 
ModuÀXxxInô
;

118 
pModXxx
->
pModñeRe£t
 = 
ModuÀXxxRe£t
;

119 
pModXxx
->
pModñeSèπ
 = 
ModuÀXxxSèπ
;

120 
pModXxx
->
pModñeSt›
 = 
ModuÀXxxSt›
;

121 
pModXxx
->
pModñeRñó£
 = 
ModuÀXxxRñó£
;

122 
pModXxx
->
pMsgNŸify
 = 
XxxMsgNŸify
;

123 
pModXxx
->
pModñe10msPro˚ss
 = 
NULL
;

124 
pModXxx
->
pModñe50msPro˚ss
 = 
NULL
;

125 
pModXxx
->
pModñe1sPro˚ss
 = 
ModuÀXxx1sPro˚ss
;

126 
	`°r˝y
(
pModXxx
->
m_ModName
, "ModXxx");

128 
	`¥ötf
("CreateModuleXxx!!\n");

129  (
PMODULEBASE
)
pModXxx
;

130 
	}
}

	@USER/App/src/TaskMain.c

16 
	~"TaskMaö.h
"

18 
	$Task_Sîvî
(*
pd©a
)

20 
PMODULESERVER
 
pSîvî
 = (PMODULESERVER)
pd©a
;

25 if(
pSîvî
 !
NULL
)

27 
pSîvî
->
	`pMsgNŸifyPro˚ss
’Sîvî->
m_pBa£D©a
);

32 
	}
}

34 
	$Task_O√_Pro˚ss
(*
pd©a
)

36 
PMODULEBASE
 
pSîvî
 = (PMODULEBASE)
pd©a
;

37 
OS_ERR
 
îr
;

40 
	`OSTimeDlyHMSM
(0,0,1,0,
OS_OPT_TIME_DLY
,&
îr
);

42 if(
pSîvî
 !
NULL
)

44 
pSîvî
->
	`pModñe1sPro˚ss
’Sîvî->
m_pBa£D©a
);

47 
	}
}

49 
	$Task_Two_Pro˚ss
(*
pd©a
)

51 
PMODULESERVER
 
pSîvî
 = (PMODULESERVER)
pd©a
;

52 
OS_ERR
 
îr
;

55 
	`OSTimeDlyHMSM
(0,0,0,50,
OS_OPT_TIME_DLY
,&
îr
);

58 if(
pSîvî
 !
NULL
)

60 
pSîvî
->
	`pModñe50msPro˚ss
’Sîvî->
m_pBa£D©a
);

63 
	}
}

66 
	$Task_The_Pro˚ss
(*
pd©a
)

68 
PMODULESERVER
 
pSîvî
 = (PMODULESERVER)
pd©a
;

69 
OS_ERR
 
îr
;

72 
	`OSTimeDlyHMSM
(0,0,1,0,
OS_OPT_TIME_DLY
,&
îr
);

74 if(
pSîvî
 !
NULL
)

76 
pSîvî
->
	`pModñe10msPro˚ss
’Sîvî->
m_pBa£D©a
);

79 
	}
}

81 
	$Task_Fou_Pro˚ss
(*
pd©a
)

83 
PMODULESERVER
 
pSîvî
 = (PMODULESERVER)
pd©a
;

84 
OS_ERR
 
îr
;

87 
	`OSTimeDlyHMSM
(0,0,1,0,
OS_OPT_TIME_DLY
,&
îr
);

88 if(
pSîvî
 !
NULL
)

90 
pSîvî
->
	`pModñe1msPro˚ss
’Sîvî->
m_pBa£D©a
);

93 
	}
}

	@USER/CreateMultiTask.c

8 
	~"Cª©eMu…iTask.h
"

9 
	~"TaskMaö.h
"

12 
OS_TCB
 
	gTask_Sîvî_TCB
;

13 
OS_TCB
 
	gTask_us_TCB
;

14 
OS_TCB
 
	gTask_10ms_TCB
;

15 
OS_TCB
 
	gTask_50ms_TCB
;

16 
OS_TCB
 
	gTask_1s_TCB
;

18 
CPU_STK
 
	gTASK_SERVER_STK
[
TASK_SERVER_STK_SIZE
];

19 
CPU_STK
 
	gUS_TASK_STK
[
TASK_US_STK_SIZE
];

20 
CPU_STK
 
	gTASK_10MS_STK
[
TASK_10MS_STK_SIZE
];

21 
CPU_STK
 
	gTASK_50MS_STK
[
TASK_50MS_STK_SIZE
];

22 
CPU_STK
 
	gTASK_1S_STK
[
TASK_1S_STK_SIZE
];

24 
	~"ModuÀSîvî.h
"

25 
	~"ModuÀMŸ‹Drivî.h
"

26 * 
	$AµBa£_Inô
(
PGLOBALDATA
 
pGlobÆ
)

28 
SUBMODITEM
 
Iãm
;

29 
pGlobÆ
->
pSîvî
 = 
	`Cª©eModuÀSîvî
();

31 
Iãm
.
ègs
 = 0;

34 
Iãm
.
pObj
 = 
	`Cª©eModuÀMŸ‹Drivî
(
pGlobÆ
->
pSîvî
->
m_pBa£D©a
);

35 
Iãm
.
ègs
++;

36 ((
PMODULESERVER
)
pGlobÆ
->
pSîvî
)->
	`pSubModPushBack
’GlobÆ->pSîvî->
m_pBa£D©a
,&
Iãm
);

39 
pGlobÆ
->
pSîvî
->
	`pModñeInô
’GlobÆ->pSîvî->
m_pBa£D©a
);

40 
pGlobÆ
->
pSîvî
->
	`pModñeSèπ
’GlobÆ->pSîvî->
m_pBa£D©a
);

41  
Iãm
.
pObj
;

42 
	}
}

44 
GLOBALDATA
 
	gg_GlobÆ
;

45 
	$Cª©eMu…iTask
()

47 
OS_ERR
 
îr
;

48 
PVOID
 
pObj
 = 
NULL
;

49 
pObj
 = 
	`AµBa£_Inô
(&
g_GlobÆ
);

51 
	`OSTaskCª©e
((
OS_TCB
 * )&
Task_Sîvî_TCB
,

52 (
CPU_CHAR
 * )"serverÅask",

53 (
OS_TASK_PTR
 )
Task_Sîvî
,

54 (
PVOID
)(
g_GlobÆ
.
pSîvî
),

57 (
OS_PRIO
 )
TASK_SERVER_PRIO
,

58 (
CPU_STK
 * )&
TASK_SERVER_STK
[0],

59 (
CPU_STK_SIZE
)
TASK_SERVER_STK_SIZE
/10,

60 (
CPU_STK_SIZE
)
TASK_SERVER_STK_SIZE
,

61 (
OS_MSG_QTY
 )0,

62 (
OS_TICK
 )0,

64 (
OS_OPT
 )
OS_OPT_TASK_STK_CHK
|
OS_OPT_TASK_STK_CLR
,

65 (
OS_ERR
 * )&
îr
);

67 
	`OSTaskCª©e
((
OS_TCB
 * )&
Task_us_TCB
,

68 (
CPU_CHAR
 * )"usÅask",

69 (
OS_TASK_PTR
 )
Task_O√_Pro˚ss
,

71 (
PVOID
)(
g_GlobÆ
.
pSîvî
),

72 (
OS_PRIO
 )
TASK_US_PRIO
,

73 (
CPU_STK
 * )&
US_TASK_STK
[0],

74 (
CPU_STK_SIZE
)
TASK_US_STK_SIZE
/10,

75 (
CPU_STK_SIZE
)
TASK_US_STK_SIZE
,

76 (
OS_MSG_QTY
 )0,

77 (
OS_TICK
 )0,

79 (
OS_OPT
 )
OS_OPT_TASK_STK_CHK
|
OS_OPT_TASK_STK_CLR
,

80 (
OS_ERR
 * )&
îr
);

82 
	`OSTaskCª©e
((
OS_TCB
 * )&
Task_10ms_TCB
,

83 (
CPU_CHAR
 * )"10msÅestÅask",

84 (
OS_TASK_PTR
 )
Task_Two_Pro˚ss
,

86 (
PVOID
)(
g_GlobÆ
.
pSîvî
),

87 (
OS_PRIO
 )
TASK_10MS_PRIO
,

88 (
CPU_STK
 * )&
TASK_10MS_STK
[0],

89 (
CPU_STK_SIZE
)
TASK_10MS_STK_SIZE
/10,

90 (
CPU_STK_SIZE
)
TASK_10MS_STK_SIZE
,

91 (
OS_MSG_QTY
 )0,

92 (
OS_TICK
 )0,

94 (
OS_OPT
 )
OS_OPT_TASK_STK_CHK
|
OS_OPT_TASK_STK_CLR
,

95 (
OS_ERR
 * )&
îr
);

97 
	`OSTaskCª©e
((
OS_TCB
 * )&
Task_50ms_TCB
,

98 (
CPU_CHAR
 * )"50msÅestÅask",

99 (
OS_TASK_PTR
 )
Task_The_Pro˚ss
,

101 (
PVOID
)(
g_GlobÆ
.
pSîvî
),

102 (
OS_PRIO
 )
TASK_50MS_PRIO
,

103 (
CPU_STK
 * )&
TASK_50MS_STK
[0],

104 (
CPU_STK_SIZE
)
TASK_50MS_STK_SIZE
/10,

105 (
CPU_STK_SIZE
)
TASK_50MS_STK_SIZE
,

106 (
OS_MSG_QTY
 )0,

107 (
OS_TICK
 )0,

109 (
OS_OPT
 )
OS_OPT_TASK_STK_CHK
|
OS_OPT_TASK_STK_CLR
,

110 (
OS_ERR
 * )&
îr
);

112 
	`OSTaskCª©e
((
OS_TCB
 * )&
Task_1s_TCB
,

113 (
CPU_CHAR
 * )"1sÅestÅask",

114 (
OS_TASK_PTR
 )
Task_Fou_Pro˚ss
,

116 (
PVOID
)(
g_GlobÆ
.
pSîvî
),

117 (
OS_PRIO
 )
TASK_1S_PRIO
,

118 (
CPU_STK
 * )&
TASK_1S_STK
[0],

119 (
CPU_STK_SIZE
)
TASK_1S_STK_SIZE
/10,

120 (
CPU_STK_SIZE
)
TASK_1S_STK_SIZE
,

121 (
OS_MSG_QTY
 )0,

122 (
OS_TICK
 )0,

124 (
OS_OPT
 )
OS_OPT_TASK_STK_CHK
|
OS_OPT_TASK_STK_CLR
,

125 (
OS_ERR
 * )&
îr
);

126 
	}
}

	@USER/CreateMultiTask.h

16 #i‚de‡
__CREATR_MULTI_TASK_123_


17 
	#__CREATR_MULTI_TASK_123_


	)

19 
	~"comm⁄.h
"

76 
	#START_2_UART_TASK_PRIO
 8

	)

77 
	#TASK_SERVER_PRIO
 7

	)

78 
	#TASK_US_PRIO
 6

	)

79 
	#TASK_10MS_PRIO
 5

	)

80 
	#TASK_50MS_PRIO
 9

	)

81 
	#TASK_1S_PRIO
 10

	)

83 
	#START_2_UART_STK_SIZE
 1024

	)

84 
	#TASK_SERVER_STK_SIZE
 256

	)

85 
	#TASK_US_STK_SIZE
 256

	)

86 
	#TASK_10MS_STK_SIZE
 256

	)

87 
	#TASK_50MS_STK_SIZE
 256

	)

88 
	#TASK_1S_STK_SIZE
 256

	)

91 
°¨t_2_u¨t_èsk
(*
p_¨g
);

92 
£rvî_èsk
(*
p_¨g
);

93 
us_èsk
(*
p_¨g
);

94 
èsk_10ms
(*
p_¨g
);

95 
èsk_50ms
(*
p_¨g
);

96 
èsk_1s
(*
p_¨g
);

98 
Cª©eMu…iTask
();

	@USER/app_cfg.h

16 #i‚de‡ 
__APP_CFG_H__


17 
	#__APP_CFG_H__


	)

37 
	#So·w¨e_Vîsi⁄s
 (101)

	)

45 
	#H¨dw¨e_Vîsi⁄s
 (100)

	)

	@USER/common.h

16 #i‚de‡ 
__COMMON_H__


17 
	#__COMMON_H__


	)

19 
	~"ö˛udes.h
"

20 
	~"Sy°em_Inô.h
"

21 
	~"T¨gë_Inô.h
"

22 
	~"MsgQueue.h
"

23 
	~"dŒi°.h
"

24 
	~"°ru˘_def.h
"

25 
	~<as£π.h
>

30 
	#DMAUART


31 
	#PRESS_10MS_FILTER


32 
	#USED_RELATIVEPRESS


34 

	)

51 #ifde‡
OFF_UART


52 
	#CAL_TYPE
 
CAL_PRESS


	)

67 
	#ASSERT
(
XX
Ë{
	`as£π
(XX);}

	)

68 
	#INVALID_32U_VALUE
 0xe„f

	)

69 
	#INVALID_16U_VALUE
 0xef

	)

70 
	#INVALID_8U_VALUE
 0xe

	)

72 
	#PR
 {
	`¥ötf
("\n");}

	)

73 
	#PP
 {
	`¥ötf
("%-15s()",
__func__
);¥ötf(" %-10s:%-5d",
__FILE__
,
__LINE__
);}

	)

75 
	#PD
(
X
Ë{
	`¥ötf
(#X" = %-5d ",(X));
PP
;
PR
;}

	)

76 
	#PS
(
X
Ë{
	`¥ötf
("Så i†< ");¥ötf(X);¥ötf(" > ");
PP
;
PR
;}

	)

78 
	#LOWORD
(
l
Ë((
INT32U
)÷))

	)

79 
	#HIWORD
(
l
Ë((
INT32U
)(((INT32U)÷Ë>> 16Ë& 0xFFFF))

	)

80 
	#LOBYTE
(
w
Ë((
INT8U
)(w))

	)

81 
	#HIBYTE
(
w
Ë((
INT8U
)(((
INT32U
)(wË>> 8Ë& 0xFF))

	)

83 
	#BIT0
 0x0001

	)

84 
	#BIT1
 0x0002

	)

85 
	#BIT2
 0x0004

	)

86 
	#BIT3
 0x0008

	)

87 
	#BIT4
 0x0010

	)

88 
	#BIT5
 0x0020

	)

89 
	#BIT6
 0x0040

	)

90 
	#BIT7
 0x0080

	)

91 
	#BIT8
 0x0100

	)

92 
	#BIT9
 0x0200

	)

93 
	#BIT10
 0x0400

	)

94 
	#BIT11
 0x0800

	)

95 
	#BIT12
 0x1000

	)

96 
	#BIT13
 0x2000

	)

97 
	#BIT14
 0x4000

	)

98 
	#BIT15
 0x8000

	)

	@USER/main.c

2 
	~"ö˛udes.h
"

3 
	~"Cª©eMu…iTask.h
"

4 
	~"Sy°em_Inô.h
"

5 
	~"T¨gë_Inô.h
"

8 
OS_TCB
 
	gSèπ2U¨tTaskTCB
;

10 
CPU_STK
 
	gSTART_2_UART_TASK_STK
[
START_2_UART_STK_SIZE
];

12 
	$maö
()

14 
OS_ERR
 
îr
;

15 
	`CPU_SR_ALLOC
();

18 
	`Sy°em_Inô
();

19 
	`INTX_DISABLE
();

20 
	`T¨gë_Inô
();

21 
	`INTX_ENABLE
();

23 
	`OSInô
(&
îr
);

24 
	`OS_CRITICAL_ENTER
();

26 
	`OSTaskCª©e
((
OS_TCB
 * )&
Sèπ2U¨tTaskTCB
,

27 (
CPU_CHAR
 * )"startÅask",

28 (
OS_TASK_PTR
 )
°¨t_2_u¨t_èsk
,

30 (
OS_PRIO
 )
START_2_UART_TASK_PRIO
,

31 (
CPU_STK
 * )&
START_2_UART_TASK_STK
[0],

32 (
CPU_STK_SIZE
)
START_2_UART_STK_SIZE
/10,

33 (
CPU_STK_SIZE
)
START_2_UART_STK_SIZE
,

34 (
OS_MSG_QTY
 )0,

35 (
OS_TICK
 )0,

37 (
OS_OPT
 )
OS_OPT_TASK_STK_CHK
|
OS_OPT_TASK_STK_CLR
,

38 (
OS_ERR
 * )&
îr
);

39 
	`OS_CRITICAL_EXIT
();

40 
	`OSSèπ
(&
îr
);

42 
	}
}

45 
	$°¨t_2_u¨t_èsk
(*
p_¨g
)

47 
OS_ERR
 
îr
;

48 
	`CPU_SR_ALLOC
();

49 
p_¨g
 =Ö_arg;

51 
	`CPU_Inô
();

52 #i‡
OS_CFG_STAT_TASK_EN
 > 0u

53 
	`OSSètTaskCPUUßgeInô
(&
îr
);

56 #ifde‡
CPU_CFG_INT_DIS_MEAS_EN


57 
	`CPU_I¡DisMósMaxCurRe£t
();

60 #if 
OS_CFG_SCHED_ROUND_ROBIN_EN


62 
	`OSSchedRoundRoböCfg
(
DEF_ENABLED
,1,&
îr
);

65 
	`OS_CRITICAL_ENTER
();

67 
	`Cª©eMu…iTask
();

70 
	`OS_CRITICAL_EXIT
();

71 
	}
}

	@USER/stm32f4xx.h

53 #i‚de‡
__STM32F4xx_H


54 
	#__STM32F4xx_H


	)

56 #ifde‡
__˝lu•lus


68 #i‡!
deföed
 (
STM32F40_41xxx
Ë&& !deföed (
STM32F427_437xx
Ë&& !deföed (
STM32F429_439xx
Ë&& !deföed (
STM32F401xx
Ë&& !deföed (
STM32F411xE
)

88 #ifde‡
STM32F40XX


89 
	#STM32F40_41xxx


	)

93 #ifde‡
STM32F427X


94 
	#STM32F427_437xx


	)

101 #i‡!
deföed
 (
STM32F40_41xxx
Ë&& !deföed (
STM32F427_437xx
Ë&& !deföed (
STM32F429_439xx
Ë&& !deföed (
STM32F401xx
Ë&& !deföed (
STM32F411xE
)

105 #i‡!
deföed
 (
USE_STDPERIPH_DRIVER
)

122 #i‡!
deföed
 (
HSE_VALUE
)

123 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

131 #i‡!
deföed
 (
HSE_STARTUP_TIMEOUT
)

132 
	#HSE_STARTUP_TIMEOUT
 ((
uöt16_t
)0x05000Ë

	)

135 #i‡!
deföed
 (
HSI_VALUE
)

136 
	#HSI_VALUE
 ((
uöt32_t
)16000000Ë

	)

142 
	#__STM32F4XX_STDPERIPH_VERSION_MAIN
 (0x01Ë

	)

143 
	#__STM32F4XX_STDPERIPH_VERSION_SUB1
 (0x04Ë

	)

144 
	#__STM32F4XX_STDPERIPH_VERSION_SUB2
 (0x00Ë

	)

145 
	#__STM32F4XX_STDPERIPH_VERSION_RC
 (0x00Ë

	)

146 
	#__STM32F4XX_STDPERIPH_VERSION
 ((
__STM32F4XX_STDPERIPH_VERSION_MAIN
 << 24)\

147 |(
__STM32F4XX_STDPERIPH_VERSION_SUB1
 << 16)\

148 |(
__STM32F4XX_STDPERIPH_VERSION_SUB2
 << 8)\

149 |(
__STM32F4XX_STDPERIPH_VERSION_RC
))

	)

162 
	#__CM4_REV
 0x0001

	)

163 
	#__MPU_PRESENT
 1

	)

164 
	#__NVIC_PRIO_BITS
 4

	)

165 
	#__Víd‹_SysTickC⁄fig
 0

	)

166 
	#__FPU_PRESENT
 1

	)

171 
	eIRQn


174 
N⁄MaskabÀI¡_IRQn
 = -14,

175 
Mem‹yM™agemít_IRQn
 = -12,

176 
BusFau…_IRQn
 = -11,

177 
UßgeFau…_IRQn
 = -10,

178 
SVCÆl_IRQn
 = -5,

179 
DebugM⁄ô‹_IRQn
 = -4,

180 
PídSV_IRQn
 = -2,

181 
SysTick_IRQn
 = -1,

183 
WWDG_IRQn
 = 0,

184 
PVD_IRQn
 = 1,

185 
TAMP_STAMP_IRQn
 = 2,

186 
RTC_WKUP_IRQn
 = 3,

187 
FLASH_IRQn
 = 4,

188 
RCC_IRQn
 = 5,

189 
EXTI0_IRQn
 = 6,

190 
EXTI1_IRQn
 = 7,

191 
EXTI2_IRQn
 = 8,

192 
EXTI3_IRQn
 = 9,

193 
EXTI4_IRQn
 = 10,

194 
DMA1_Såóm0_IRQn
 = 11,

195 
DMA1_Såóm1_IRQn
 = 12,

196 
DMA1_Såóm2_IRQn
 = 13,

197 
DMA1_Såóm3_IRQn
 = 14,

198 
DMA1_Såóm4_IRQn
 = 15,

199 
DMA1_Såóm5_IRQn
 = 16,

200 
DMA1_Såóm6_IRQn
 = 17,

201 
ADC_IRQn
 = 18,

203 #i‡
deföed
 (
STM32F40_41xxx
)

204 
CAN1_TX_IRQn
 = 19,

205 
CAN1_RX0_IRQn
 = 20,

206 
CAN1_RX1_IRQn
 = 21,

207 
CAN1_SCE_IRQn
 = 22,

208 
EXTI9_5_IRQn
 = 23,

209 
TIM1_BRK_TIM9_IRQn
 = 24,

210 
TIM1_UP_TIM10_IRQn
 = 25,

211 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

212 
TIM1_CC_IRQn
 = 27,

213 
TIM2_IRQn
 = 28,

214 
TIM3_IRQn
 = 29,

215 
TIM4_IRQn
 = 30,

216 
I2C1_EV_IRQn
 = 31,

217 
I2C1_ER_IRQn
 = 32,

218 
I2C2_EV_IRQn
 = 33,

219 
I2C2_ER_IRQn
 = 34,

220 
SPI1_IRQn
 = 35,

221 
SPI2_IRQn
 = 36,

222 
USART1_IRQn
 = 37,

223 
USART2_IRQn
 = 38,

224 
USART3_IRQn
 = 39,

225 
EXTI15_10_IRQn
 = 40,

226 
RTC_Aœrm_IRQn
 = 41,

227 
OTG_FS_WKUP_IRQn
 = 42,

228 
TIM8_BRK_TIM12_IRQn
 = 43,

229 
TIM8_UP_TIM13_IRQn
 = 44,

230 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

231 
TIM8_CC_IRQn
 = 46,

232 
DMA1_Såóm7_IRQn
 = 47,

233 
FSMC_IRQn
 = 48,

234 
SDIO_IRQn
 = 49,

235 
TIM5_IRQn
 = 50,

236 
SPI3_IRQn
 = 51,

237 
UART4_IRQn
 = 52,

238 
UART5_IRQn
 = 53,

239 
TIM6_DAC_IRQn
 = 54,

240 
TIM7_IRQn
 = 55,

241 
DMA2_Såóm0_IRQn
 = 56,

242 
DMA2_Såóm1_IRQn
 = 57,

243 
DMA2_Såóm2_IRQn
 = 58,

244 
DMA2_Såóm3_IRQn
 = 59,

245 
DMA2_Såóm4_IRQn
 = 60,

246 
ETH_IRQn
 = 61,

247 
ETH_WKUP_IRQn
 = 62,

248 
CAN2_TX_IRQn
 = 63,

249 
CAN2_RX0_IRQn
 = 64,

250 
CAN2_RX1_IRQn
 = 65,

251 
CAN2_SCE_IRQn
 = 66,

252 
OTG_FS_IRQn
 = 67,

253 
DMA2_Såóm5_IRQn
 = 68,

254 
DMA2_Såóm6_IRQn
 = 69,

255 
DMA2_Såóm7_IRQn
 = 70,

256 
USART6_IRQn
 = 71,

257 
I2C3_EV_IRQn
 = 72,

258 
I2C3_ER_IRQn
 = 73,

259 
OTG_HS_EP1_OUT_IRQn
 = 74,

260 
OTG_HS_EP1_IN_IRQn
 = 75,

261 
OTG_HS_WKUP_IRQn
 = 76,

262 
OTG_HS_IRQn
 = 77,

263 
DCMI_IRQn
 = 78,

264 
CRYP_IRQn
 = 79,

265 
HASH_RNG_IRQn
 = 80,

266 
FPU_IRQn
 = 81

269 #i‡
deföed
 (
STM32F427_437xx
)

270 
CAN1_TX_IRQn
 = 19,

271 
CAN1_RX0_IRQn
 = 20,

272 
CAN1_RX1_IRQn
 = 21,

273 
CAN1_SCE_IRQn
 = 22,

274 
EXTI9_5_IRQn
 = 23,

275 
TIM1_BRK_TIM9_IRQn
 = 24,

276 
TIM1_UP_TIM10_IRQn
 = 25,

277 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

278 
TIM1_CC_IRQn
 = 27,

279 
TIM2_IRQn
 = 28,

280 
TIM3_IRQn
 = 29,

281 
TIM4_IRQn
 = 30,

282 
I2C1_EV_IRQn
 = 31,

283 
I2C1_ER_IRQn
 = 32,

284 
I2C2_EV_IRQn
 = 33,

285 
I2C2_ER_IRQn
 = 34,

286 
SPI1_IRQn
 = 35,

287 
SPI2_IRQn
 = 36,

288 
USART1_IRQn
 = 37,

289 
USART2_IRQn
 = 38,

290 
USART3_IRQn
 = 39,

291 
EXTI15_10_IRQn
 = 40,

292 
RTC_Aœrm_IRQn
 = 41,

293 
OTG_FS_WKUP_IRQn
 = 42,

294 
TIM8_BRK_TIM12_IRQn
 = 43,

295 
TIM8_UP_TIM13_IRQn
 = 44,

296 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

297 
TIM8_CC_IRQn
 = 46,

298 
DMA1_Såóm7_IRQn
 = 47,

299 
FMC_IRQn
 = 48,

300 
SDIO_IRQn
 = 49,

301 
TIM5_IRQn
 = 50,

302 
SPI3_IRQn
 = 51,

303 
UART4_IRQn
 = 52,

304 
UART5_IRQn
 = 53,

305 
TIM6_DAC_IRQn
 = 54,

306 
TIM7_IRQn
 = 55,

307 
DMA2_Såóm0_IRQn
 = 56,

308 
DMA2_Såóm1_IRQn
 = 57,

309 
DMA2_Såóm2_IRQn
 = 58,

310 
DMA2_Såóm3_IRQn
 = 59,

311 
DMA2_Såóm4_IRQn
 = 60,

312 
ETH_IRQn
 = 61,

313 
ETH_WKUP_IRQn
 = 62,

314 
CAN2_TX_IRQn
 = 63,

315 
CAN2_RX0_IRQn
 = 64,

316 
CAN2_RX1_IRQn
 = 65,

317 
CAN2_SCE_IRQn
 = 66,

318 
OTG_FS_IRQn
 = 67,

319 
DMA2_Såóm5_IRQn
 = 68,

320 
DMA2_Såóm6_IRQn
 = 69,

321 
DMA2_Såóm7_IRQn
 = 70,

322 
USART6_IRQn
 = 71,

323 
I2C3_EV_IRQn
 = 72,

324 
I2C3_ER_IRQn
 = 73,

325 
OTG_HS_EP1_OUT_IRQn
 = 74,

326 
OTG_HS_EP1_IN_IRQn
 = 75,

327 
OTG_HS_WKUP_IRQn
 = 76,

328 
OTG_HS_IRQn
 = 77,

329 
DCMI_IRQn
 = 78,

330 
CRYP_IRQn
 = 79,

331 
HASH_RNG_IRQn
 = 80,

332 
FPU_IRQn
 = 81,

333 
UART7_IRQn
 = 82,

334 
UART8_IRQn
 = 83,

335 
SPI4_IRQn
 = 84,

336 
SPI5_IRQn
 = 85,

337 
SPI6_IRQn
 = 86,

338 
SAI1_IRQn
 = 87,

339 
DMA2D_IRQn
 = 90

342 #i‡
deföed
 (
STM32F429_439xx
)

343 
CAN1_TX_IRQn
 = 19,

344 
CAN1_RX0_IRQn
 = 20,

345 
CAN1_RX1_IRQn
 = 21,

346 
CAN1_SCE_IRQn
 = 22,

347 
EXTI9_5_IRQn
 = 23,

348 
TIM1_BRK_TIM9_IRQn
 = 24,

349 
TIM1_UP_TIM10_IRQn
 = 25,

350 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

351 
TIM1_CC_IRQn
 = 27,

352 
TIM2_IRQn
 = 28,

353 
TIM3_IRQn
 = 29,

354 
TIM4_IRQn
 = 30,

355 
I2C1_EV_IRQn
 = 31,

356 
I2C1_ER_IRQn
 = 32,

357 
I2C2_EV_IRQn
 = 33,

358 
I2C2_ER_IRQn
 = 34,

359 
SPI1_IRQn
 = 35,

360 
SPI2_IRQn
 = 36,

361 
USART1_IRQn
 = 37,

362 
USART2_IRQn
 = 38,

363 
USART3_IRQn
 = 39,

364 
EXTI15_10_IRQn
 = 40,

365 
RTC_Aœrm_IRQn
 = 41,

366 
OTG_FS_WKUP_IRQn
 = 42,

367 
TIM8_BRK_TIM12_IRQn
 = 43,

368 
TIM8_UP_TIM13_IRQn
 = 44,

369 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

370 
TIM8_CC_IRQn
 = 46,

371 
DMA1_Såóm7_IRQn
 = 47,

372 
FMC_IRQn
 = 48,

373 
SDIO_IRQn
 = 49,

374 
TIM5_IRQn
 = 50,

375 
SPI3_IRQn
 = 51,

376 
UART4_IRQn
 = 52,

377 
UART5_IRQn
 = 53,

378 
TIM6_DAC_IRQn
 = 54,

379 
TIM7_IRQn
 = 55,

380 
DMA2_Såóm0_IRQn
 = 56,

381 
DMA2_Såóm1_IRQn
 = 57,

382 
DMA2_Såóm2_IRQn
 = 58,

383 
DMA2_Såóm3_IRQn
 = 59,

384 
DMA2_Såóm4_IRQn
 = 60,

385 
ETH_IRQn
 = 61,

386 
ETH_WKUP_IRQn
 = 62,

387 
CAN2_TX_IRQn
 = 63,

388 
CAN2_RX0_IRQn
 = 64,

389 
CAN2_RX1_IRQn
 = 65,

390 
CAN2_SCE_IRQn
 = 66,

391 
OTG_FS_IRQn
 = 67,

392 
DMA2_Såóm5_IRQn
 = 68,

393 
DMA2_Såóm6_IRQn
 = 69,

394 
DMA2_Såóm7_IRQn
 = 70,

395 
USART6_IRQn
 = 71,

396 
I2C3_EV_IRQn
 = 72,

397 
I2C3_ER_IRQn
 = 73,

398 
OTG_HS_EP1_OUT_IRQn
 = 74,

399 
OTG_HS_EP1_IN_IRQn
 = 75,

400 
OTG_HS_WKUP_IRQn
 = 76,

401 
OTG_HS_IRQn
 = 77,

402 
DCMI_IRQn
 = 78,

403 
CRYP_IRQn
 = 79,

404 
HASH_RNG_IRQn
 = 80,

405 
FPU_IRQn
 = 81,

406 
UART7_IRQn
 = 82,

407 
UART8_IRQn
 = 83,

408 
SPI4_IRQn
 = 84,

409 
SPI5_IRQn
 = 85,

410 
SPI6_IRQn
 = 86,

411 
SAI1_IRQn
 = 87,

412 
LTDC_IRQn
 = 88,

413 
LTDC_ER_IRQn
 = 89,

414 
DMA2D_IRQn
 = 90

417 #i‡
deföed
 (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

418 
EXTI9_5_IRQn
 = 23,

419 
TIM1_BRK_TIM9_IRQn
 = 24,

420 
TIM1_UP_TIM10_IRQn
 = 25,

421 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

422 
TIM1_CC_IRQn
 = 27,

423 
TIM2_IRQn
 = 28,

424 
TIM3_IRQn
 = 29,

425 
TIM4_IRQn
 = 30,

426 
I2C1_EV_IRQn
 = 31,

427 
I2C1_ER_IRQn
 = 32,

428 
I2C2_EV_IRQn
 = 33,

429 
I2C2_ER_IRQn
 = 34,

430 
SPI1_IRQn
 = 35,

431 
SPI2_IRQn
 = 36,

432 
USART1_IRQn
 = 37,

433 
USART2_IRQn
 = 38,

434 
EXTI15_10_IRQn
 = 40,

435 
RTC_Aœrm_IRQn
 = 41,

436 
OTG_FS_WKUP_IRQn
 = 42,

437 
DMA1_Såóm7_IRQn
 = 47,

438 
SDIO_IRQn
 = 49,

439 
TIM5_IRQn
 = 50,

440 
SPI3_IRQn
 = 51,

441 
DMA2_Såóm0_IRQn
 = 56,

442 
DMA2_Såóm1_IRQn
 = 57,

443 
DMA2_Såóm2_IRQn
 = 58,

444 
DMA2_Såóm3_IRQn
 = 59,

445 
DMA2_Såóm4_IRQn
 = 60,

446 
OTG_FS_IRQn
 = 67,

447 
DMA2_Såóm5_IRQn
 = 68,

448 
DMA2_Såóm6_IRQn
 = 69,

449 
DMA2_Såóm7_IRQn
 = 70,

450 
USART6_IRQn
 = 71,

451 
I2C3_EV_IRQn
 = 72,

452 
I2C3_ER_IRQn
 = 73,

453 
FPU_IRQn
 = 81,

454 #i‡
deföed
 (
STM32F401xx
)

455 
SPI4_IRQn
 = 84

457 #i‡
deföed
 (
STM32F411xE
)

458 
SPI4_IRQn
 = 84,

459 
SPI5_IRQn
 = 85

463 } 
	tIRQn_Ty≥
;

469 
	~"c‹e_cm4.h
"

470 
	~"sy°em_°m32f4xx.h
"

471 
	~<°döt.h
>

477 
öt32_t
 
	ts32
;

478 
öt16_t
 
	ts16
;

479 
öt8_t
 
	ts8
;

481 c⁄° 
	töt32_t
 
	tsc32
;

482 c⁄° 
	töt16_t
 
	tsc16
;

483 c⁄° 
	töt8_t
 
	tsc8
;

485 
__IO
 
	töt32_t
 
	tvs32
;

486 
__IO
 
	töt16_t
 
	tvs16
;

487 
__IO
 
	töt8_t
 
	tvs8
;

489 
__I
 
	töt32_t
 
	tvsc32
;

490 
__I
 
	töt16_t
 
	tvsc16
;

491 
__I
 
	töt8_t
 
	tvsc8
;

493 
uöt32_t
 
	tu32
;

494 
uöt16_t
 
	tu16
;

495 
uöt8_t
 
	tu8
;

497 c⁄° 
	tuöt32_t
 
	tuc32
;

498 c⁄° 
	tuöt16_t
 
	tuc16
;

499 c⁄° 
	tuöt8_t
 
	tuc8
;

501 
__IO
 
	tuöt32_t
 
	tvu32
;

502 
__IO
 
	tuöt16_t
 
	tvu16
;

503 
__IO
 
	tuöt8_t
 
	tvu8
;

505 
__I
 
	tuöt32_t
 
	tvuc32
;

506 
__I
 
	tuöt16_t
 
	tvuc16
;

507 
__I
 
	tuöt8_t
 
	tvuc8
;

509 íum {
RESET
 = 0, 
SET
 = !RESET} 
	tFœgSètus
, 
	tITSètus
;

511 íum {
DISABLE
 = 0, 
ENABLE
 = !DISABLE} 
	tFun˘i⁄ÆSèã
;

512 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

514 íum {
ERROR
 = 0, 
SUCCESS
 = !ERROR} 
	tEº‹Sètus
;

530 
__IO
 
uöt32_t
 
SR
;

531 
__IO
 
uöt32_t
 
CR1
;

532 
__IO
 
uöt32_t
 
CR2
;

533 
__IO
 
uöt32_t
 
SMPR1
;

534 
__IO
 
uöt32_t
 
SMPR2
;

535 
__IO
 
uöt32_t
 
JOFR1
;

536 
__IO
 
uöt32_t
 
JOFR2
;

537 
__IO
 
uöt32_t
 
JOFR3
;

538 
__IO
 
uöt32_t
 
JOFR4
;

539 
__IO
 
uöt32_t
 
HTR
;

540 
__IO
 
uöt32_t
 
LTR
;

541 
__IO
 
uöt32_t
 
SQR1
;

542 
__IO
 
uöt32_t
 
SQR2
;

543 
__IO
 
uöt32_t
 
SQR3
;

544 
__IO
 
uöt32_t
 
JSQR
;

545 
__IO
 
uöt32_t
 
JDR1
;

546 
__IO
 
uöt32_t
 
JDR2
;

547 
__IO
 
uöt32_t
 
JDR3
;

548 
__IO
 
uöt32_t
 
JDR4
;

549 
__IO
 
uöt32_t
 
DR
;

550 } 
	tADC_Ty≥Def
;

554 
__IO
 
uöt32_t
 
CSR
;

555 
__IO
 
uöt32_t
 
CCR
;

556 
__IO
 
uöt32_t
 
CDR
;

558 } 
	tADC_Comm⁄_Ty≥Def
;

567 
__IO
 
uöt32_t
 
TIR
;

568 
__IO
 
uöt32_t
 
TDTR
;

569 
__IO
 
uöt32_t
 
TDLR
;

570 
__IO
 
uöt32_t
 
TDHR
;

571 } 
	tCAN_TxMaûBox_Ty≥Def
;

579 
__IO
 
uöt32_t
 
RIR
;

580 
__IO
 
uöt32_t
 
RDTR
;

581 
__IO
 
uöt32_t
 
RDLR
;

582 
__IO
 
uöt32_t
 
RDHR
;

583 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

591 
__IO
 
uöt32_t
 
FR1
;

592 
__IO
 
uöt32_t
 
FR2
;

593 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

601 
__IO
 
uöt32_t
 
MCR
;

602 
__IO
 
uöt32_t
 
MSR
;

603 
__IO
 
uöt32_t
 
TSR
;

604 
__IO
 
uöt32_t
 
RF0R
;

605 
__IO
 
uöt32_t
 
RF1R
;

606 
__IO
 
uöt32_t
 
IER
;

607 
__IO
 
uöt32_t
 
ESR
;

608 
__IO
 
uöt32_t
 
BTR
;

609 
uöt32_t
 
RESERVED0
[88];

610 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

611 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

612 
uöt32_t
 
RESERVED1
[12];

613 
__IO
 
uöt32_t
 
FMR
;

614 
__IO
 
uöt32_t
 
FM1R
;

615 
uöt32_t
 
RESERVED2
;

616 
__IO
 
uöt32_t
 
FS1R
;

617 
uöt32_t
 
RESERVED3
;

618 
__IO
 
uöt32_t
 
FFA1R
;

619 
uöt32_t
 
RESERVED4
;

620 
__IO
 
uöt32_t
 
FA1R
;

621 
uöt32_t
 
RESERVED5
[8];

622 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[28];

623 } 
	tCAN_Ty≥Def
;

631 
__IO
 
uöt32_t
 
DR
;

632 
__IO
 
uöt8_t
 
IDR
;

633 
uöt8_t
 
RESERVED0
;

634 
uöt16_t
 
RESERVED1
;

635 
__IO
 
uöt32_t
 
CR
;

636 } 
	tCRC_Ty≥Def
;

644 
__IO
 
uöt32_t
 
CR
;

645 
__IO
 
uöt32_t
 
SWTRIGR
;

646 
__IO
 
uöt32_t
 
DHR12R1
;

647 
__IO
 
uöt32_t
 
DHR12L1
;

648 
__IO
 
uöt32_t
 
DHR8R1
;

649 
__IO
 
uöt32_t
 
DHR12R2
;

650 
__IO
 
uöt32_t
 
DHR12L2
;

651 
__IO
 
uöt32_t
 
DHR8R2
;

652 
__IO
 
uöt32_t
 
DHR12RD
;

653 
__IO
 
uöt32_t
 
DHR12LD
;

654 
__IO
 
uöt32_t
 
DHR8RD
;

655 
__IO
 
uöt32_t
 
DOR1
;

656 
__IO
 
uöt32_t
 
DOR2
;

657 
__IO
 
uöt32_t
 
SR
;

658 } 
	tDAC_Ty≥Def
;

666 
__IO
 
uöt32_t
 
IDCODE
;

667 
__IO
 
uöt32_t
 
CR
;

668 
__IO
 
uöt32_t
 
APB1FZ
;

669 
__IO
 
uöt32_t
 
APB2FZ
;

670 }
	tDBGMCU_Ty≥Def
;

678 
__IO
 
uöt32_t
 
CR
;

679 
__IO
 
uöt32_t
 
SR
;

680 
__IO
 
uöt32_t
 
RISR
;

681 
__IO
 
uöt32_t
 
IER
;

682 
__IO
 
uöt32_t
 
MISR
;

683 
__IO
 
uöt32_t
 
ICR
;

684 
__IO
 
uöt32_t
 
ESCR
;

685 
__IO
 
uöt32_t
 
ESUR
;

686 
__IO
 
uöt32_t
 
CWSTRTR
;

687 
__IO
 
uöt32_t
 
CWSIZER
;

688 
__IO
 
uöt32_t
 
DR
;

689 } 
	tDCMI_Ty≥Def
;

697 
__IO
 
uöt32_t
 
CR
;

698 
__IO
 
uöt32_t
 
NDTR
;

699 
__IO
 
uöt32_t
 
PAR
;

700 
__IO
 
uöt32_t
 
M0AR
;

701 
__IO
 
uöt32_t
 
M1AR
;

702 
__IO
 
uöt32_t
 
FCR
;

703 } 
	tDMA_Såóm_Ty≥Def
;

707 
__IO
 
uöt32_t
 
LISR
;

708 
__IO
 
uöt32_t
 
HISR
;

709 
__IO
 
uöt32_t
 
LIFCR
;

710 
__IO
 
uöt32_t
 
HIFCR
;

711 } 
	tDMA_Ty≥Def
;

719 
__IO
 
uöt32_t
 
CR
;

720 
__IO
 
uöt32_t
 
ISR
;

721 
__IO
 
uöt32_t
 
IFCR
;

722 
__IO
 
uöt32_t
 
FGMAR
;

723 
__IO
 
uöt32_t
 
FGOR
;

724 
__IO
 
uöt32_t
 
BGMAR
;

725 
__IO
 
uöt32_t
 
BGOR
;

726 
__IO
 
uöt32_t
 
FGPFCCR
;

727 
__IO
 
uöt32_t
 
FGCOLR
;

728 
__IO
 
uöt32_t
 
BGPFCCR
;

729 
__IO
 
uöt32_t
 
BGCOLR
;

730 
__IO
 
uöt32_t
 
FGCMAR
;

731 
__IO
 
uöt32_t
 
BGCMAR
;

732 
__IO
 
uöt32_t
 
OPFCCR
;

733 
__IO
 
uöt32_t
 
OCOLR
;

734 
__IO
 
uöt32_t
 
OMAR
;

735 
__IO
 
uöt32_t
 
OOR
;

736 
__IO
 
uöt32_t
 
NLR
;

737 
__IO
 
uöt32_t
 
LWR
;

738 
__IO
 
uöt32_t
 
AMTCR
;

739 
uöt32_t
 
RESERVED
[236];

740 
__IO
 
uöt32_t
 
FGCLUT
[256];

741 
__IO
 
uöt32_t
 
BGCLUT
[256];

742 } 
	tDMA2D_Ty≥Def
;

750 
__IO
 
uöt32_t
 
MACCR
;

751 
__IO
 
uöt32_t
 
MACFFR
;

752 
__IO
 
uöt32_t
 
MACHTHR
;

753 
__IO
 
uöt32_t
 
MACHTLR
;

754 
__IO
 
uöt32_t
 
MACMIIAR
;

755 
__IO
 
uöt32_t
 
MACMIIDR
;

756 
__IO
 
uöt32_t
 
MACFCR
;

757 
__IO
 
uöt32_t
 
MACVLANTR
;

758 
uöt32_t
 
RESERVED0
[2];

759 
__IO
 
uöt32_t
 
MACRWUFFR
;

760 
__IO
 
uöt32_t
 
MACPMTCSR
;

761 
uöt32_t
 
RESERVED1
[2];

762 
__IO
 
uöt32_t
 
MACSR
;

763 
__IO
 
uöt32_t
 
MACIMR
;

764 
__IO
 
uöt32_t
 
MACA0HR
;

765 
__IO
 
uöt32_t
 
MACA0LR
;

766 
__IO
 
uöt32_t
 
MACA1HR
;

767 
__IO
 
uöt32_t
 
MACA1LR
;

768 
__IO
 
uöt32_t
 
MACA2HR
;

769 
__IO
 
uöt32_t
 
MACA2LR
;

770 
__IO
 
uöt32_t
 
MACA3HR
;

771 
__IO
 
uöt32_t
 
MACA3LR
;

772 
uöt32_t
 
RESERVED2
[40];

773 
__IO
 
uöt32_t
 
MMCCR
;

774 
__IO
 
uöt32_t
 
MMCRIR
;

775 
__IO
 
uöt32_t
 
MMCTIR
;

776 
__IO
 
uöt32_t
 
MMCRIMR
;

777 
__IO
 
uöt32_t
 
MMCTIMR
;

778 
uöt32_t
 
RESERVED3
[14];

779 
__IO
 
uöt32_t
 
MMCTGFSCCR
;

780 
__IO
 
uöt32_t
 
MMCTGFMSCCR
;

781 
uöt32_t
 
RESERVED4
[5];

782 
__IO
 
uöt32_t
 
MMCTGFCR
;

783 
uöt32_t
 
RESERVED5
[10];

784 
__IO
 
uöt32_t
 
MMCRFCECR
;

785 
__IO
 
uöt32_t
 
MMCRFAECR
;

786 
uöt32_t
 
RESERVED6
[10];

787 
__IO
 
uöt32_t
 
MMCRGUFCR
;

788 
uöt32_t
 
RESERVED7
[334];

789 
__IO
 
uöt32_t
 
PTPTSCR
;

790 
__IO
 
uöt32_t
 
PTPSSIR
;

791 
__IO
 
uöt32_t
 
PTPTSHR
;

792 
__IO
 
uöt32_t
 
PTPTSLR
;

793 
__IO
 
uöt32_t
 
PTPTSHUR
;

794 
__IO
 
uöt32_t
 
PTPTSLUR
;

795 
__IO
 
uöt32_t
 
PTPTSAR
;

796 
__IO
 
uöt32_t
 
PTPTTHR
;

797 
__IO
 
uöt32_t
 
PTPTTLR
;

798 
__IO
 
uöt32_t
 
RESERVED8
;

799 
__IO
 
uöt32_t
 
PTPTSSR
;

800 
uöt32_t
 
RESERVED9
[565];

801 
__IO
 
uöt32_t
 
DMABMR
;

802 
__IO
 
uöt32_t
 
DMATPDR
;

803 
__IO
 
uöt32_t
 
DMARPDR
;

804 
__IO
 
uöt32_t
 
DMARDLAR
;

805 
__IO
 
uöt32_t
 
DMATDLAR
;

806 
__IO
 
uöt32_t
 
DMASR
;

807 
__IO
 
uöt32_t
 
DMAOMR
;

808 
__IO
 
uöt32_t
 
DMAIER
;

809 
__IO
 
uöt32_t
 
DMAMFBOCR
;

810 
__IO
 
uöt32_t
 
DMARSWTR
;

811 
uöt32_t
 
RESERVED10
[8];

812 
__IO
 
uöt32_t
 
DMACHTDR
;

813 
__IO
 
uöt32_t
 
DMACHRDR
;

814 
__IO
 
uöt32_t
 
DMACHTBAR
;

815 
__IO
 
uöt32_t
 
DMACHRBAR
;

816 } 
	tETH_Ty≥Def
;

824 
__IO
 
uöt32_t
 
IMR
;

825 
__IO
 
uöt32_t
 
EMR
;

826 
__IO
 
uöt32_t
 
RTSR
;

827 
__IO
 
uöt32_t
 
FTSR
;

828 
__IO
 
uöt32_t
 
SWIER
;

829 
__IO
 
uöt32_t
 
PR
;

830 } 
	tEXTI_Ty≥Def
;

838 
__IO
 
uöt32_t
 
ACR
;

839 
__IO
 
uöt32_t
 
KEYR
;

840 
__IO
 
uöt32_t
 
OPTKEYR
;

841 
__IO
 
uöt32_t
 
SR
;

842 
__IO
 
uöt32_t
 
CR
;

843 
__IO
 
uöt32_t
 
OPTCR
;

844 
__IO
 
uöt32_t
 
OPTCR1
;

845 } 
	tFLASH_Ty≥Def
;

847 #i‡
deföed
 (
STM32F40_41xxx
)

854 
__IO
 
uöt32_t
 
BTCR
[8];

855 } 
	tFSMC_B™k1_Ty≥Def
;

863 
__IO
 
uöt32_t
 
BWTR
[7];

864 } 
	tFSMC_B™k1E_Ty≥Def
;

872 
__IO
 
uöt32_t
 
PCR2
;

873 
__IO
 
uöt32_t
 
SR2
;

874 
__IO
 
uöt32_t
 
PMEM2
;

875 
__IO
 
uöt32_t
 
PATT2
;

876 
uöt32_t
 
RESERVED0
;

877 
__IO
 
uöt32_t
 
ECCR2
;

878 } 
	tFSMC_B™k2_Ty≥Def
;

886 
__IO
 
uöt32_t
 
PCR3
;

887 
__IO
 
uöt32_t
 
SR3
;

888 
__IO
 
uöt32_t
 
PMEM3
;

889 
__IO
 
uöt32_t
 
PATT3
;

890 
uöt32_t
 
RESERVED0
;

891 
__IO
 
uöt32_t
 
ECCR3
;

892 } 
	tFSMC_B™k3_Ty≥Def
;

900 
__IO
 
uöt32_t
 
PCR4
;

901 
__IO
 
uöt32_t
 
SR4
;

902 
__IO
 
uöt32_t
 
PMEM4
;

903 
__IO
 
uöt32_t
 
PATT4
;

904 
__IO
 
uöt32_t
 
PIO4
;

905 } 
	tFSMC_B™k4_Ty≥Def
;

908 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

915 
__IO
 
uöt32_t
 
BTCR
[8];

916 } 
	tFMC_B™k1_Ty≥Def
;

924 
__IO
 
uöt32_t
 
BWTR
[7];

925 } 
	tFMC_B™k1E_Ty≥Def
;

933 
__IO
 
uöt32_t
 
PCR2
;

934 
__IO
 
uöt32_t
 
SR2
;

935 
__IO
 
uöt32_t
 
PMEM2
;

936 
__IO
 
uöt32_t
 
PATT2
;

937 
uöt32_t
 
RESERVED0
;

938 
__IO
 
uöt32_t
 
ECCR2
;

939 } 
	tFMC_B™k2_Ty≥Def
;

947 
__IO
 
uöt32_t
 
PCR3
;

948 
__IO
 
uöt32_t
 
SR3
;

949 
__IO
 
uöt32_t
 
PMEM3
;

950 
__IO
 
uöt32_t
 
PATT3
;

951 
uöt32_t
 
RESERVED0
;

952 
__IO
 
uöt32_t
 
ECCR3
;

953 } 
	tFMC_B™k3_Ty≥Def
;

961 
__IO
 
uöt32_t
 
PCR4
;

962 
__IO
 
uöt32_t
 
SR4
;

963 
__IO
 
uöt32_t
 
PMEM4
;

964 
__IO
 
uöt32_t
 
PATT4
;

965 
__IO
 
uöt32_t
 
PIO4
;

966 } 
	tFMC_B™k4_Ty≥Def
;

974 
__IO
 
uöt32_t
 
SDCR
[2];

975 
__IO
 
uöt32_t
 
SDTR
[2];

976 
__IO
 
uöt32_t
 
SDCMR
;

977 
__IO
 
uöt32_t
 
SDRTR
;

978 
__IO
 
uöt32_t
 
SDSR
;

979 } 
	tFMC_B™k5_6_Ty≥Def
;

988 
__IO
 
uöt32_t
 
MODER
;

989 
__IO
 
uöt32_t
 
OTYPER
;

990 
__IO
 
uöt32_t
 
OSPEEDR
;

991 
__IO
 
uöt32_t
 
PUPDR
;

992 
__IO
 
uöt32_t
 
IDR
;

993 
__IO
 
uöt32_t
 
ODR
;

994 
__IO
 
uöt16_t
 
BSRRL
;

995 
__IO
 
uöt16_t
 
BSRRH
;

996 
__IO
 
uöt32_t
 
LCKR
;

997 
__IO
 
uöt32_t
 
AFR
[2];

998 } 
	tGPIO_Ty≥Def
;

1006 
__IO
 
uöt32_t
 
MEMRMP
;

1007 
__IO
 
uöt32_t
 
PMC
;

1008 
__IO
 
uöt32_t
 
EXTICR
[4];

1009 
uöt32_t
 
RESERVED
[2];

1010 
__IO
 
uöt32_t
 
CMPCR
;

1011 } 
	tSYSCFG_Ty≥Def
;

1019 
__IO
 
uöt16_t
 
CR1
;

1020 
uöt16_t
 
RESERVED0
;

1021 
__IO
 
uöt16_t
 
CR2
;

1022 
uöt16_t
 
RESERVED1
;

1023 
__IO
 
uöt16_t
 
OAR1
;

1024 
uöt16_t
 
RESERVED2
;

1025 
__IO
 
uöt16_t
 
OAR2
;

1026 
uöt16_t
 
RESERVED3
;

1027 
__IO
 
uöt16_t
 
DR
;

1028 
uöt16_t
 
RESERVED4
;

1029 
__IO
 
uöt16_t
 
SR1
;

1030 
uöt16_t
 
RESERVED5
;

1031 
__IO
 
uöt16_t
 
SR2
;

1032 
uöt16_t
 
RESERVED6
;

1033 
__IO
 
uöt16_t
 
CCR
;

1034 
uöt16_t
 
RESERVED7
;

1035 
__IO
 
uöt16_t
 
TRISE
;

1036 
uöt16_t
 
RESERVED8
;

1037 
__IO
 
uöt16_t
 
FLTR
;

1038 
uöt16_t
 
RESERVED9
;

1039 } 
	tI2C_Ty≥Def
;

1047 
__IO
 
uöt32_t
 
KR
;

1048 
__IO
 
uöt32_t
 
PR
;

1049 
__IO
 
uöt32_t
 
RLR
;

1050 
__IO
 
uöt32_t
 
SR
;

1051 } 
	tIWDG_Ty≥Def
;

1059 
uöt32_t
 
RESERVED0
[2];

1060 
__IO
 
uöt32_t
 
SSCR
;

1061 
__IO
 
uöt32_t
 
BPCR
;

1062 
__IO
 
uöt32_t
 
AWCR
;

1063 
__IO
 
uöt32_t
 
TWCR
;

1064 
__IO
 
uöt32_t
 
GCR
;

1065 
uöt32_t
 
RESERVED1
[2];

1066 
__IO
 
uöt32_t
 
SRCR
;

1067 
uöt32_t
 
RESERVED2
[1];

1068 
__IO
 
uöt32_t
 
BCCR
;

1069 
uöt32_t
 
RESERVED3
[1];

1070 
__IO
 
uöt32_t
 
IER
;

1071 
__IO
 
uöt32_t
 
ISR
;

1072 
__IO
 
uöt32_t
 
ICR
;

1073 
__IO
 
uöt32_t
 
LIPCR
;

1074 
__IO
 
uöt32_t
 
CPSR
;

1075 
__IO
 
uöt32_t
 
CDSR
;

1076 } 
	tLTDC_Ty≥Def
;

1084 
__IO
 
uöt32_t
 
CR
;

1085 
__IO
 
uöt32_t
 
WHPCR
;

1086 
__IO
 
uöt32_t
 
WVPCR
;

1087 
__IO
 
uöt32_t
 
CKCR
;

1088 
__IO
 
uöt32_t
 
PFCR
;

1089 
__IO
 
uöt32_t
 
CACR
;

1090 
__IO
 
uöt32_t
 
DCCR
;

1091 
__IO
 
uöt32_t
 
BFCR
;

1092 
uöt32_t
 
RESERVED0
[2];

1093 
__IO
 
uöt32_t
 
CFBAR
;

1094 
__IO
 
uöt32_t
 
CFBLR
;

1095 
__IO
 
uöt32_t
 
CFBLNR
;

1096 
uöt32_t
 
RESERVED1
[3];

1097 
__IO
 
uöt32_t
 
CLUTWR
;

1099 } 
	tLTDC_Layî_Ty≥Def
;

1107 
__IO
 
uöt32_t
 
CR
;

1108 
__IO
 
uöt32_t
 
CSR
;

1109 } 
	tPWR_Ty≥Def
;

1117 
__IO
 
uöt32_t
 
CR
;

1118 
__IO
 
uöt32_t
 
PLLCFGR
;

1119 
__IO
 
uöt32_t
 
CFGR
;

1120 
__IO
 
uöt32_t
 
CIR
;

1121 
__IO
 
uöt32_t
 
AHB1RSTR
;

1122 
__IO
 
uöt32_t
 
AHB2RSTR
;

1123 
__IO
 
uöt32_t
 
AHB3RSTR
;

1124 
uöt32_t
 
RESERVED0
;

1125 
__IO
 
uöt32_t
 
APB1RSTR
;

1126 
__IO
 
uöt32_t
 
APB2RSTR
;

1127 
uöt32_t
 
RESERVED1
[2];

1128 
__IO
 
uöt32_t
 
AHB1ENR
;

1129 
__IO
 
uöt32_t
 
AHB2ENR
;

1130 
__IO
 
uöt32_t
 
AHB3ENR
;

1131 
uöt32_t
 
RESERVED2
;

1132 
__IO
 
uöt32_t
 
APB1ENR
;

1133 
__IO
 
uöt32_t
 
APB2ENR
;

1134 
uöt32_t
 
RESERVED3
[2];

1135 
__IO
 
uöt32_t
 
AHB1LPENR
;

1136 
__IO
 
uöt32_t
 
AHB2LPENR
;

1137 
__IO
 
uöt32_t
 
AHB3LPENR
;

1138 
uöt32_t
 
RESERVED4
;

1139 
__IO
 
uöt32_t
 
APB1LPENR
;

1140 
__IO
 
uöt32_t
 
APB2LPENR
;

1141 
uöt32_t
 
RESERVED5
[2];

1142 
__IO
 
uöt32_t
 
BDCR
;

1143 
__IO
 
uöt32_t
 
CSR
;

1144 
uöt32_t
 
RESERVED6
[2];

1145 
__IO
 
uöt32_t
 
SSCGR
;

1146 
__IO
 
uöt32_t
 
PLLI2SCFGR
;

1147 
__IO
 
uöt32_t
 
PLLSAICFGR
;

1148 
__IO
 
uöt32_t
 
DCKCFGR
;

1150 } 
	tRCC_Ty≥Def
;

1158 
__IO
 
uöt32_t
 
TR
;

1159 
__IO
 
uöt32_t
 
DR
;

1160 
__IO
 
uöt32_t
 
CR
;

1161 
__IO
 
uöt32_t
 
ISR
;

1162 
__IO
 
uöt32_t
 
PRER
;

1163 
__IO
 
uöt32_t
 
WUTR
;

1164 
__IO
 
uöt32_t
 
CALIBR
;

1165 
__IO
 
uöt32_t
 
ALRMAR
;

1166 
__IO
 
uöt32_t
 
ALRMBR
;

1167 
__IO
 
uöt32_t
 
WPR
;

1168 
__IO
 
uöt32_t
 
SSR
;

1169 
__IO
 
uöt32_t
 
SHIFTR
;

1170 
__IO
 
uöt32_t
 
TSTR
;

1171 
__IO
 
uöt32_t
 
TSDR
;

1172 
__IO
 
uöt32_t
 
TSSSR
;

1173 
__IO
 
uöt32_t
 
CALR
;

1174 
__IO
 
uöt32_t
 
TAFCR
;

1175 
__IO
 
uöt32_t
 
ALRMASSR
;

1176 
__IO
 
uöt32_t
 
ALRMBSSR
;

1177 
uöt32_t
 
RESERVED7
;

1178 
__IO
 
uöt32_t
 
BKP0R
;

1179 
__IO
 
uöt32_t
 
BKP1R
;

1180 
__IO
 
uöt32_t
 
BKP2R
;

1181 
__IO
 
uöt32_t
 
BKP3R
;

1182 
__IO
 
uöt32_t
 
BKP4R
;

1183 
__IO
 
uöt32_t
 
BKP5R
;

1184 
__IO
 
uöt32_t
 
BKP6R
;

1185 
__IO
 
uöt32_t
 
BKP7R
;

1186 
__IO
 
uöt32_t
 
BKP8R
;

1187 
__IO
 
uöt32_t
 
BKP9R
;

1188 
__IO
 
uöt32_t
 
BKP10R
;

1189 
__IO
 
uöt32_t
 
BKP11R
;

1190 
__IO
 
uöt32_t
 
BKP12R
;

1191 
__IO
 
uöt32_t
 
BKP13R
;

1192 
__IO
 
uöt32_t
 
BKP14R
;

1193 
__IO
 
uöt32_t
 
BKP15R
;

1194 
__IO
 
uöt32_t
 
BKP16R
;

1195 
__IO
 
uöt32_t
 
BKP17R
;

1196 
__IO
 
uöt32_t
 
BKP18R
;

1197 
__IO
 
uöt32_t
 
BKP19R
;

1198 } 
	tRTC_Ty≥Def
;

1207 
__IO
 
uöt32_t
 
GCR
;

1208 } 
	tSAI_Ty≥Def
;

1212 
__IO
 
uöt32_t
 
CR1
;

1213 
__IO
 
uöt32_t
 
CR2
;

1214 
__IO
 
uöt32_t
 
FRCR
;

1215 
__IO
 
uöt32_t
 
SLOTR
;

1216 
__IO
 
uöt32_t
 
IMR
;

1217 
__IO
 
uöt32_t
 
SR
;

1218 
__IO
 
uöt32_t
 
CLRFR
;

1219 
__IO
 
uöt32_t
 
DR
;

1220 } 
	tSAI_Block_Ty≥Def
;

1228 
__IO
 
uöt32_t
 
POWER
;

1229 
__IO
 
uöt32_t
 
CLKCR
;

1230 
__IO
 
uöt32_t
 
ARG
;

1231 
__IO
 
uöt32_t
 
CMD
;

1232 
__I
 
uöt32_t
 
RESPCMD
;

1233 
__I
 
uöt32_t
 
RESP1
;

1234 
__I
 
uöt32_t
 
RESP2
;

1235 
__I
 
uöt32_t
 
RESP3
;

1236 
__I
 
uöt32_t
 
RESP4
;

1237 
__IO
 
uöt32_t
 
DTIMER
;

1238 
__IO
 
uöt32_t
 
DLEN
;

1239 
__IO
 
uöt32_t
 
DCTRL
;

1240 
__I
 
uöt32_t
 
DCOUNT
;

1241 
__I
 
uöt32_t
 
STA
;

1242 
__IO
 
uöt32_t
 
ICR
;

1243 
__IO
 
uöt32_t
 
MASK
;

1244 
uöt32_t
 
RESERVED0
[2];

1245 
__I
 
uöt32_t
 
FIFOCNT
;

1246 
uöt32_t
 
RESERVED1
[13];

1247 
__IO
 
uöt32_t
 
FIFO
;

1248 } 
	tSDIO_Ty≥Def
;

1256 
__IO
 
uöt16_t
 
CR1
;

1257 
uöt16_t
 
RESERVED0
;

1258 
__IO
 
uöt16_t
 
CR2
;

1259 
uöt16_t
 
RESERVED1
;

1260 
__IO
 
uöt16_t
 
SR
;

1261 
uöt16_t
 
RESERVED2
;

1262 
__IO
 
uöt16_t
 
DR
;

1263 
uöt16_t
 
RESERVED3
;

1264 
__IO
 
uöt16_t
 
CRCPR
;

1265 
uöt16_t
 
RESERVED4
;

1266 
__IO
 
uöt16_t
 
RXCRCR
;

1267 
uöt16_t
 
RESERVED5
;

1268 
__IO
 
uöt16_t
 
TXCRCR
;

1269 
uöt16_t
 
RESERVED6
;

1270 
__IO
 
uöt16_t
 
I2SCFGR
;

1271 
uöt16_t
 
RESERVED7
;

1272 
__IO
 
uöt16_t
 
I2SPR
;

1273 
uöt16_t
 
RESERVED8
;

1274 } 
	tSPI_Ty≥Def
;

1282 
__IO
 
uöt16_t
 
CR1
;

1283 
uöt16_t
 
RESERVED0
;

1284 
__IO
 
uöt16_t
 
CR2
;

1285 
uöt16_t
 
RESERVED1
;

1286 
__IO
 
uöt16_t
 
SMCR
;

1287 
uöt16_t
 
RESERVED2
;

1288 
__IO
 
uöt16_t
 
DIER
;

1289 
uöt16_t
 
RESERVED3
;

1290 
__IO
 
uöt16_t
 
SR
;

1291 
uöt16_t
 
RESERVED4
;

1292 
__IO
 
uöt16_t
 
EGR
;

1293 
uöt16_t
 
RESERVED5
;

1294 
__IO
 
uöt16_t
 
CCMR1
;

1295 
uöt16_t
 
RESERVED6
;

1296 
__IO
 
uöt16_t
 
CCMR2
;

1297 
uöt16_t
 
RESERVED7
;

1298 
__IO
 
uöt16_t
 
CCER
;

1299 
uöt16_t
 
RESERVED8
;

1300 
__IO
 
uöt32_t
 
CNT
;

1301 
__IO
 
uöt16_t
 
PSC
;

1302 
uöt16_t
 
RESERVED9
;

1303 
__IO
 
uöt32_t
 
ARR
;

1304 
__IO
 
uöt16_t
 
RCR
;

1305 
uöt16_t
 
RESERVED10
;

1306 
__IO
 
uöt32_t
 
CCR1
;

1307 
__IO
 
uöt32_t
 
CCR2
;

1308 
__IO
 
uöt32_t
 
CCR3
;

1309 
__IO
 
uöt32_t
 
CCR4
;

1310 
__IO
 
uöt16_t
 
BDTR
;

1311 
uöt16_t
 
RESERVED11
;

1312 
__IO
 
uöt16_t
 
DCR
;

1313 
uöt16_t
 
RESERVED12
;

1314 
__IO
 
uöt16_t
 
DMAR
;

1315 
uöt16_t
 
RESERVED13
;

1316 
__IO
 
uöt16_t
 
OR
;

1317 
uöt16_t
 
RESERVED14
;

1318 } 
	tTIM_Ty≥Def
;

1326 
__IO
 
uöt16_t
 
SR
;

1327 
uöt16_t
 
RESERVED0
;

1328 
__IO
 
uöt16_t
 
DR
;

1329 
uöt16_t
 
RESERVED1
;

1330 
__IO
 
uöt16_t
 
BRR
;

1331 
uöt16_t
 
RESERVED2
;

1332 
__IO
 
uöt16_t
 
CR1
;

1333 
uöt16_t
 
RESERVED3
;

1334 
__IO
 
uöt16_t
 
CR2
;

1335 
uöt16_t
 
RESERVED4
;

1336 
__IO
 
uöt16_t
 
CR3
;

1337 
uöt16_t
 
RESERVED5
;

1338 
__IO
 
uöt16_t
 
GTPR
;

1339 
uöt16_t
 
RESERVED6
;

1340 } 
	tUSART_Ty≥Def
;

1348 
__IO
 
uöt32_t
 
CR
;

1349 
__IO
 
uöt32_t
 
CFR
;

1350 
__IO
 
uöt32_t
 
SR
;

1351 } 
	tWWDG_Ty≥Def
;

1359 
__IO
 
uöt32_t
 
CR
;

1360 
__IO
 
uöt32_t
 
SR
;

1361 
__IO
 
uöt32_t
 
DR
;

1362 
__IO
 
uöt32_t
 
DOUT
;

1363 
__IO
 
uöt32_t
 
DMACR
;

1364 
__IO
 
uöt32_t
 
IMSCR
;

1365 
__IO
 
uöt32_t
 
RISR
;

1366 
__IO
 
uöt32_t
 
MISR
;

1367 
__IO
 
uöt32_t
 
K0LR
;

1368 
__IO
 
uöt32_t
 
K0RR
;

1369 
__IO
 
uöt32_t
 
K1LR
;

1370 
__IO
 
uöt32_t
 
K1RR
;

1371 
__IO
 
uöt32_t
 
K2LR
;

1372 
__IO
 
uöt32_t
 
K2RR
;

1373 
__IO
 
uöt32_t
 
K3LR
;

1374 
__IO
 
uöt32_t
 
K3RR
;

1375 
__IO
 
uöt32_t
 
IV0LR
;

1376 
__IO
 
uöt32_t
 
IV0RR
;

1377 
__IO
 
uöt32_t
 
IV1LR
;

1378 
__IO
 
uöt32_t
 
IV1RR
;

1379 
__IO
 
uöt32_t
 
CSGCMCCM0R
;

1380 
__IO
 
uöt32_t
 
CSGCMCCM1R
;

1381 
__IO
 
uöt32_t
 
CSGCMCCM2R
;

1382 
__IO
 
uöt32_t
 
CSGCMCCM3R
;

1383 
__IO
 
uöt32_t
 
CSGCMCCM4R
;

1384 
__IO
 
uöt32_t
 
CSGCMCCM5R
;

1385 
__IO
 
uöt32_t
 
CSGCMCCM6R
;

1386 
__IO
 
uöt32_t
 
CSGCMCCM7R
;

1387 
__IO
 
uöt32_t
 
CSGCM0R
;

1388 
__IO
 
uöt32_t
 
CSGCM1R
;

1389 
__IO
 
uöt32_t
 
CSGCM2R
;

1390 
__IO
 
uöt32_t
 
CSGCM3R
;

1391 
__IO
 
uöt32_t
 
CSGCM4R
;

1392 
__IO
 
uöt32_t
 
CSGCM5R
;

1393 
__IO
 
uöt32_t
 
CSGCM6R
;

1394 
__IO
 
uöt32_t
 
CSGCM7R
;

1395 } 
	tCRYP_Ty≥Def
;

1403 
__IO
 
uöt32_t
 
CR
;

1404 
__IO
 
uöt32_t
 
DIN
;

1405 
__IO
 
uöt32_t
 
STR
;

1406 
__IO
 
uöt32_t
 
HR
[5];

1407 
__IO
 
uöt32_t
 
IMR
;

1408 
__IO
 
uöt32_t
 
SR
;

1409 
uöt32_t
 
RESERVED
[52];

1410 
__IO
 
uöt32_t
 
CSR
[54];

1411 } 
	tHASH_Ty≥Def
;

1419 
__IO
 
uöt32_t
 
HR
[8];

1420 } 
	tHASH_DIGEST_Ty≥Def
;

1428 
__IO
 
uöt32_t
 
CR
;

1429 
__IO
 
uöt32_t
 
SR
;

1430 
__IO
 
uöt32_t
 
DR
;

1431 } 
	tRNG_Ty≥Def
;

1440 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

1441 
	#CCMDATARAM_BASE
 ((
uöt32_t
)0x10000000Ë

	)

1442 
	#SRAM1_BASE
 ((
uöt32_t
)0x20000000Ë

	)

1443 
	#SRAM2_BASE
 ((
uöt32_t
)0x2001C000Ë

	)

1444 
	#SRAM3_BASE
 ((
uöt32_t
)0x20020000Ë

	)

1445 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

1446 
	#BKPSRAM_BASE
 ((
uöt32_t
)0x40024000Ë

	)

1448 #i‡
deföed
 (
STM32F40_41xxx
)

1449 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1452 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

1453 
	#FMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1456 
	#CCMDATARAM_BB_BASE
 ((
uöt32_t
)0x12000000Ë

	)

1457 
	#SRAM1_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

1458 
	#SRAM2_BB_BASE
 ((
uöt32_t
)0x2201C000Ë

	)

1459 
	#SRAM3_BB_BASE
 ((
uöt32_t
)0x22400000Ë

	)

1460 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

1461 
	#BKPSRAM_BB_BASE
 ((
uöt32_t
)0x42024000Ë

	)

1464 
	#SRAM_BASE
 
SRAM1_BASE


	)

1465 
	#SRAM_BB_BASE
 
SRAM1_BB_BASE


	)

1469 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

1470 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x00010000)

	)

1471 
	#AHB1PERIPH_BASE
 (
PERIPH_BASE
 + 0x00020000)

	)

1472 
	#AHB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000000)

	)

1475 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

1476 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

1477 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

1478 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

1479 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

1480 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

1481 
	#TIM12_BASE
 (
APB1PERIPH_BASE
 + 0x1800)

	)

1482 
	#TIM13_BASE
 (
APB1PERIPH_BASE
 + 0x1C00)

	)

1483 
	#TIM14_BASE
 (
APB1PERIPH_BASE
 + 0x2000)

	)

1484 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

1485 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

1486 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

1487 
	#I2S2ext_BASE
 (
APB1PERIPH_BASE
 + 0x3400)

	)

1488 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

1489 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

1490 
	#I2S3ext_BASE
 (
APB1PERIPH_BASE
 + 0x4000)

	)

1491 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

1492 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

1493 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

1494 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

1495 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

1496 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

1497 
	#I2C3_BASE
 (
APB1PERIPH_BASE
 + 0x5C00)

	)

1498 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

1499 
	#CAN2_BASE
 (
APB1PERIPH_BASE
 + 0x6800)

	)

1500 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

1501 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

1502 
	#UART7_BASE
 (
APB1PERIPH_BASE
 + 0x7800)

	)

1503 
	#UART8_BASE
 (
APB1PERIPH_BASE
 + 0x7C00)

	)

1506 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

1507 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

1508 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

1509 
	#USART6_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

1510 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

1511 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2100)

	)

1512 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x2200)

	)

1513 
	#ADC_BASE
 (
APB2PERIPH_BASE
 + 0x2300)

	)

1514 
	#SDIO_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

1515 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

1516 
	#SPI4_BASE
 (
APB2PERIPH_BASE
 + 0x3400)

	)

1517 
	#SYSCFG_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

1518 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

1519 
	#TIM9_BASE
 (
APB2PERIPH_BASE
 + 0x4000)

	)

1520 
	#TIM10_BASE
 (
APB2PERIPH_BASE
 + 0x4400)

	)

1521 
	#TIM11_BASE
 (
APB2PERIPH_BASE
 + 0x4800)

	)

1522 
	#SPI5_BASE
 (
APB2PERIPH_BASE
 + 0x5000)

	)

1523 
	#SPI6_BASE
 (
APB2PERIPH_BASE
 + 0x5400)

	)

1524 
	#SAI1_BASE
 (
APB2PERIPH_BASE
 + 0x5800)

	)

1525 
	#SAI1_Block_A_BASE
 (
SAI1_BASE
 + 0x004)

	)

1526 
	#SAI1_Block_B_BASE
 (
SAI1_BASE
 + 0x024)

	)

1527 
	#LTDC_BASE
 (
APB2PERIPH_BASE
 + 0x6800)

	)

1528 
	#LTDC_Layî1_BASE
 (
LTDC_BASE
 + 0x84)

	)

1529 
	#LTDC_Layî2_BASE
 (
LTDC_BASE
 + 0x104)

	)

1532 
	#GPIOA_BASE
 (
AHB1PERIPH_BASE
 + 0x0000)

	)

1533 
	#GPIOB_BASE
 (
AHB1PERIPH_BASE
 + 0x0400)

	)

1534 
	#GPIOC_BASE
 (
AHB1PERIPH_BASE
 + 0x0800)

	)

1535 
	#GPIOD_BASE
 (
AHB1PERIPH_BASE
 + 0x0C00)

	)

1536 
	#GPIOE_BASE
 (
AHB1PERIPH_BASE
 + 0x1000)

	)

1537 
	#GPIOF_BASE
 (
AHB1PERIPH_BASE
 + 0x1400)

	)

1538 
	#GPIOG_BASE
 (
AHB1PERIPH_BASE
 + 0x1800)

	)

1539 
	#GPIOH_BASE
 (
AHB1PERIPH_BASE
 + 0x1C00)

	)

1540 
	#GPIOI_BASE
 (
AHB1PERIPH_BASE
 + 0x2000)

	)

1541 
	#GPIOJ_BASE
 (
AHB1PERIPH_BASE
 + 0x2400)

	)

1542 
	#GPIOK_BASE
 (
AHB1PERIPH_BASE
 + 0x2800)

	)

1543 
	#CRC_BASE
 (
AHB1PERIPH_BASE
 + 0x3000)

	)

1544 
	#RCC_BASE
 (
AHB1PERIPH_BASE
 + 0x3800)

	)

1545 
	#FLASH_R_BASE
 (
AHB1PERIPH_BASE
 + 0x3C00)

	)

1546 
	#DMA1_BASE
 (
AHB1PERIPH_BASE
 + 0x6000)

	)

1547 
	#DMA1_Såóm0_BASE
 (
DMA1_BASE
 + 0x010)

	)

1548 
	#DMA1_Såóm1_BASE
 (
DMA1_BASE
 + 0x028)

	)

1549 
	#DMA1_Såóm2_BASE
 (
DMA1_BASE
 + 0x040)

	)

1550 
	#DMA1_Såóm3_BASE
 (
DMA1_BASE
 + 0x058)

	)

1551 
	#DMA1_Såóm4_BASE
 (
DMA1_BASE
 + 0x070)

	)

1552 
	#DMA1_Såóm5_BASE
 (
DMA1_BASE
 + 0x088)

	)

1553 
	#DMA1_Såóm6_BASE
 (
DMA1_BASE
 + 0x0A0)

	)

1554 
	#DMA1_Såóm7_BASE
 (
DMA1_BASE
 + 0x0B8)

	)

1555 
	#DMA2_BASE
 (
AHB1PERIPH_BASE
 + 0x6400)

	)

1556 
	#DMA2_Såóm0_BASE
 (
DMA2_BASE
 + 0x010)

	)

1557 
	#DMA2_Såóm1_BASE
 (
DMA2_BASE
 + 0x028)

	)

1558 
	#DMA2_Såóm2_BASE
 (
DMA2_BASE
 + 0x040)

	)

1559 
	#DMA2_Såóm3_BASE
 (
DMA2_BASE
 + 0x058)

	)

1560 
	#DMA2_Såóm4_BASE
 (
DMA2_BASE
 + 0x070)

	)

1561 
	#DMA2_Såóm5_BASE
 (
DMA2_BASE
 + 0x088)

	)

1562 
	#DMA2_Såóm6_BASE
 (
DMA2_BASE
 + 0x0A0)

	)

1563 
	#DMA2_Såóm7_BASE
 (
DMA2_BASE
 + 0x0B8)

	)

1564 
	#ETH_BASE
 (
AHB1PERIPH_BASE
 + 0x8000)

	)

1565 
	#ETH_MAC_BASE
 (
ETH_BASE
)

	)

1566 
	#ETH_MMC_BASE
 (
ETH_BASE
 + 0x0100)

	)

1567 
	#ETH_PTP_BASE
 (
ETH_BASE
 + 0x0700)

	)

1568 
	#ETH_DMA_BASE
 (
ETH_BASE
 + 0x1000)

	)

1569 
	#DMA2D_BASE
 (
AHB1PERIPH_BASE
 + 0xB000)

	)

1572 
	#DCMI_BASE
 (
AHB2PERIPH_BASE
 + 0x50000)

	)

1573 
	#CRYP_BASE
 (
AHB2PERIPH_BASE
 + 0x60000)

	)

1574 
	#HASH_BASE
 (
AHB2PERIPH_BASE
 + 0x60400)

	)

1575 
	#HASH_DIGEST_BASE
 (
AHB2PERIPH_BASE
 + 0x60710)

	)

1576 
	#RNG_BASE
 (
AHB2PERIPH_BASE
 + 0x60800)

	)

1578 #i‡
deföed
 (
STM32F40_41xxx
)

1580 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000)

	)

1581 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104)

	)

1582 
	#FSMC_B™k2_R_BASE
 (
FSMC_R_BASE
 + 0x0060)

	)

1583 
	#FSMC_B™k3_R_BASE
 (
FSMC_R_BASE
 + 0x0080)

	)

1584 
	#FSMC_B™k4_R_BASE
 (
FSMC_R_BASE
 + 0x00A0)

	)

1587 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

1589 
	#FMC_B™k1_R_BASE
 (
FMC_R_BASE
 + 0x0000)

	)

1590 
	#FMC_B™k1E_R_BASE
 (
FMC_R_BASE
 + 0x0104)

	)

1591 
	#FMC_B™k2_R_BASE
 (
FMC_R_BASE
 + 0x0060)

	)

1592 
	#FMC_B™k3_R_BASE
 (
FMC_R_BASE
 + 0x0080)

	)

1593 
	#FMC_B™k4_R_BASE
 (
FMC_R_BASE
 + 0x00A0)

	)

1594 
	#FMC_B™k5_6_R_BASE
 (
FMC_R_BASE
 + 0x0140)

	)

1598 
	#DBGMCU_BASE
 ((
uöt32_t
 )0xE0042000)

	)

1607 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

1608 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

1609 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

1610 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

1611 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

1612 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

1613 
	#TIM12
 ((
TIM_Ty≥Def
 *Ë
TIM12_BASE
)

	)

1614 
	#TIM13
 ((
TIM_Ty≥Def
 *Ë
TIM13_BASE
)

	)

1615 
	#TIM14
 ((
TIM_Ty≥Def
 *Ë
TIM14_BASE
)

	)

1616 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

1617 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

1618 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

1619 
	#I2S2ext
 ((
SPI_Ty≥Def
 *Ë
I2S2ext_BASE
)

	)

1620 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

1621 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

1622 
	#I2S3ext
 ((
SPI_Ty≥Def
 *Ë
I2S3ext_BASE
)

	)

1623 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

1624 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

1625 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

1626 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

1627 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

1628 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

1629 
	#I2C3
 ((
I2C_Ty≥Def
 *Ë
I2C3_BASE
)

	)

1630 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

1631 
	#CAN2
 ((
CAN_Ty≥Def
 *Ë
CAN2_BASE
)

	)

1632 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

1633 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

1634 
	#UART7
 ((
USART_Ty≥Def
 *Ë
UART7_BASE
)

	)

1635 
	#UART8
 ((
USART_Ty≥Def
 *Ë
UART8_BASE
)

	)

1636 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

1637 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

1638 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1639 
	#USART6
 ((
USART_Ty≥Def
 *Ë
USART6_BASE
)

	)

1640 
	#ADC
 ((
ADC_Comm⁄_Ty≥Def
 *Ë
ADC_BASE
)

	)

1641 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

1642 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

1643 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1644 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

1645 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

1646 
	#SPI4
 ((
SPI_Ty≥Def
 *Ë
SPI4_BASE
)

	)

1647 
	#SYSCFG
 ((
SYSCFG_Ty≥Def
 *Ë
SYSCFG_BASE
)

	)

1648 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

1649 
	#TIM9
 ((
TIM_Ty≥Def
 *Ë
TIM9_BASE
)

	)

1650 
	#TIM10
 ((
TIM_Ty≥Def
 *Ë
TIM10_BASE
)

	)

1651 
	#TIM11
 ((
TIM_Ty≥Def
 *Ë
TIM11_BASE
)

	)

1652 
	#SPI5
 ((
SPI_Ty≥Def
 *Ë
SPI5_BASE
)

	)

1653 
	#SPI6
 ((
SPI_Ty≥Def
 *Ë
SPI6_BASE
)

	)

1654 
	#SAI1
 ((
SAI_Ty≥Def
 *Ë
SAI1_BASE
)

	)

1655 
	#SAI1_Block_A
 ((
SAI_Block_Ty≥Def
 *)
SAI1_Block_A_BASE
)

	)

1656 
	#SAI1_Block_B
 ((
SAI_Block_Ty≥Def
 *)
SAI1_Block_B_BASE
)

	)

1657 
	#LTDC
 ((
LTDC_Ty≥Def
 *)
LTDC_BASE
)

	)

1658 
	#LTDC_Layî1
 ((
LTDC_Layî_Ty≥Def
 *)
LTDC_Layî1_BASE
)

	)

1659 
	#LTDC_Layî2
 ((
LTDC_Layî_Ty≥Def
 *)
LTDC_Layî2_BASE
)

	)

1660 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

1661 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

1662 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

1663 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

1664 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

1665 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

1666 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

1667 
	#GPIOH
 ((
GPIO_Ty≥Def
 *Ë
GPIOH_BASE
)

	)

1668 
	#GPIOI
 ((
GPIO_Ty≥Def
 *Ë
GPIOI_BASE
)

	)

1669 
	#GPIOJ
 ((
GPIO_Ty≥Def
 *Ë
GPIOJ_BASE
)

	)

1670 
	#GPIOK
 ((
GPIO_Ty≥Def
 *Ë
GPIOK_BASE
)

	)

1671 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

1672 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

1673 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

1674 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

1675 
	#DMA1_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm0_BASE
)

	)

1676 
	#DMA1_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm1_BASE
)

	)

1677 
	#DMA1_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm2_BASE
)

	)

1678 
	#DMA1_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm3_BASE
)

	)

1679 
	#DMA1_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm4_BASE
)

	)

1680 
	#DMA1_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm5_BASE
)

	)

1681 
	#DMA1_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm6_BASE
)

	)

1682 
	#DMA1_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm7_BASE
)

	)

1683 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

1684 
	#DMA2_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm0_BASE
)

	)

1685 
	#DMA2_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm1_BASE
)

	)

1686 
	#DMA2_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm2_BASE
)

	)

1687 
	#DMA2_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm3_BASE
)

	)

1688 
	#DMA2_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm4_BASE
)

	)

1689 
	#DMA2_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm5_BASE
)

	)

1690 
	#DMA2_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm6_BASE
)

	)

1691 
	#DMA2_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm7_BASE
)

	)

1692 
	#ETH
 ((
ETH_Ty≥Def
 *Ë
ETH_BASE
)

	)

1693 
	#DMA2D
 ((
DMA2D_Ty≥Def
 *)
DMA2D_BASE
)

	)

1694 
	#DCMI
 ((
DCMI_Ty≥Def
 *Ë
DCMI_BASE
)

	)

1695 
	#CRYP
 ((
CRYP_Ty≥Def
 *Ë
CRYP_BASE
)

	)

1696 
	#HASH
 ((
HASH_Ty≥Def
 *Ë
HASH_BASE
)

	)

1697 
	#HASH_DIGEST
 ((
HASH_DIGEST_Ty≥Def
 *Ë
HASH_DIGEST_BASE
)

	)

1698 
	#RNG
 ((
RNG_Ty≥Def
 *Ë
RNG_BASE
)

	)

1700 #i‡
deföed
 (
STM32F40_41xxx
)

1701 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

1702 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

1703 
	#FSMC_B™k2
 ((
FSMC_B™k2_Ty≥Def
 *Ë
FSMC_B™k2_R_BASE
)

	)

1704 
	#FSMC_B™k3
 ((
FSMC_B™k3_Ty≥Def
 *Ë
FSMC_B™k3_R_BASE
)

	)

1705 
	#FSMC_B™k4
 ((
FSMC_B™k4_Ty≥Def
 *Ë
FSMC_B™k4_R_BASE
)

	)

1708 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

1709 
	#FMC_B™k1
 ((
FMC_B™k1_Ty≥Def
 *Ë
FMC_B™k1_R_BASE
)

	)

1710 
	#FMC_B™k1E
 ((
FMC_B™k1E_Ty≥Def
 *Ë
FMC_B™k1E_R_BASE
)

	)

1711 
	#FMC_B™k2
 ((
FMC_B™k2_Ty≥Def
 *Ë
FMC_B™k2_R_BASE
)

	)

1712 
	#FMC_B™k3
 ((
FMC_B™k3_Ty≥Def
 *Ë
FMC_B™k3_R_BASE
)

	)

1713 
	#FMC_B™k4
 ((
FMC_B™k4_Ty≥Def
 *Ë
FMC_B™k4_R_BASE
)

	)

1714 
	#FMC_B™k5_6
 ((
FMC_B™k5_6_Ty≥Def
 *Ë
FMC_B™k5_6_R_BASE
)

	)

1717 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

1741 
	#ADC_SR_AWD
 ((
uöt8_t
)0x01Ë

	)

1742 
	#ADC_SR_EOC
 ((
uöt8_t
)0x02Ë

	)

1743 
	#ADC_SR_JEOC
 ((
uöt8_t
)0x04Ë

	)

1744 
	#ADC_SR_JSTRT
 ((
uöt8_t
)0x08Ë

	)

1745 
	#ADC_SR_STRT
 ((
uöt8_t
)0x10Ë

	)

1746 
	#ADC_SR_OVR
 ((
uöt8_t
)0x20Ë

	)

1749 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

1750 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

1751 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

1752 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

1753 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

1754 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

1755 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

1756 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

1757 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

1758 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

1759 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

1760 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

1761 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

1762 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

1763 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

1764 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

1765 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

1766 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

1767 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

1768 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

1769 
	#ADC_CR1_RES
 ((
uöt32_t
)0x03000000Ë

	)

1770 
	#ADC_CR1_RES_0
 ((
uöt32_t
)0x01000000Ë

	)

1771 
	#ADC_CR1_RES_1
 ((
uöt32_t
)0x02000000Ë

	)

1772 
	#ADC_CR1_OVRIE
 ((
uöt32_t
)0x04000000Ë

	)

1775 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

1776 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

1777 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

1778 
	#ADC_CR2_DDS
 ((
uöt32_t
)0x00000200Ë

	)

1779 
	#ADC_CR2_EOCS
 ((
uöt32_t
)0x00000400Ë

	)

1780 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

1781 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x000F0000Ë

	)

1782 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00010000Ë

	)

1783 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00020000Ë

	)

1784 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00040000Ë

	)

1785 
	#ADC_CR2_JEXTSEL_3
 ((
uöt32_t
)0x00080000Ë

	)

1786 
	#ADC_CR2_JEXTEN
 ((
uöt32_t
)0x00300000Ë

	)

1787 
	#ADC_CR2_JEXTEN_0
 ((
uöt32_t
)0x00100000Ë

	)

1788 
	#ADC_CR2_JEXTEN_1
 ((
uöt32_t
)0x00200000Ë

	)

1789 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00400000Ë

	)

1790 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x0F000000Ë

	)

1791 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x01000000Ë

	)

1792 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x02000000Ë

	)

1793 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x04000000Ë

	)

1794 
	#ADC_CR2_EXTSEL_3
 ((
uöt32_t
)0x08000000Ë

	)

1795 
	#ADC_CR2_EXTEN
 ((
uöt32_t
)0x30000000Ë

	)

1796 
	#ADC_CR2_EXTEN_0
 ((
uöt32_t
)0x10000000Ë

	)

1797 
	#ADC_CR2_EXTEN_1
 ((
uöt32_t
)0x20000000Ë

	)

1798 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x40000000Ë

	)

1801 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

1802 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

1803 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

1804 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

1805 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

1806 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

1807 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

1808 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

1809 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

1810 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

1811 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

1812 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

1813 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

1814 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

1815 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

1816 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

1817 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

1818 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

1819 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

1820 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

1821 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

1822 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

1823 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

1824 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

1825 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

1826 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

1827 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

1828 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

1829 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

1830 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

1831 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

1832 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

1833 
	#ADC_SMPR1_SMP18
 ((
uöt32_t
)0x07000000Ë

	)

1834 
	#ADC_SMPR1_SMP18_0
 ((
uöt32_t
)0x01000000Ë

	)

1835 
	#ADC_SMPR1_SMP18_1
 ((
uöt32_t
)0x02000000Ë

	)

1836 
	#ADC_SMPR1_SMP18_2
 ((
uöt32_t
)0x04000000Ë

	)

1839 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

1840 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

1841 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

1842 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

1843 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

1844 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

1845 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

1846 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

1847 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

1848 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

1849 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

1850 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

1851 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

1852 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

1853 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

1854 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

1855 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

1856 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

1857 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

1858 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

1859 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

1860 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

1861 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

1862 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

1863 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

1864 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

1865 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

1866 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

1867 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

1868 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

1869 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

1870 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

1871 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

1872 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

1873 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

1874 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

1875 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

1876 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

1877 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

1878 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

1881 
	#ADC_JOFR1_JOFFSET1
 ((
uöt16_t
)0x0FFFË

	)

1884 
	#ADC_JOFR2_JOFFSET2
 ((
uöt16_t
)0x0FFFË

	)

1887 
	#ADC_JOFR3_JOFFSET3
 ((
uöt16_t
)0x0FFFË

	)

1890 
	#ADC_JOFR4_JOFFSET4
 ((
uöt16_t
)0x0FFFË

	)

1893 
	#ADC_HTR_HT
 ((
uöt16_t
)0x0FFFË

	)

1896 
	#ADC_LTR_LT
 ((
uöt16_t
)0x0FFFË

	)

1899 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

1900 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

1901 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

1902 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

1903 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

1904 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

1905 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

1906 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

1907 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

1908 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

1909 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

1910 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

1911 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

1912 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

1913 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

1914 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

1915 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

1916 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

1917 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

1918 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

1919 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

1920 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

1921 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

1922 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

1923 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

1924 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

1925 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

1926 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

1927 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

1930 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

1931 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

1932 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

1933 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

1934 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

1935 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

1936 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

1937 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

1938 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

1939 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

1940 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

1941 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

1942 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

1943 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

1944 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

1945 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

1946 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

1947 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

1948 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

1949 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

1950 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

1951 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

1952 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

1953 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

1954 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

1955 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

1956 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

1957 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

1958 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

1959 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

1960 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

1961 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

1962 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

1963 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

1964 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

1965 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

1968 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

1969 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

1970 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

1971 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

1972 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

1973 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

1974 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

1975 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

1976 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

1977 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

1978 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

1979 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

1980 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

1981 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

1982 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

1983 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

1984 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

1985 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

1986 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

1987 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

1988 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

1989 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

1990 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

1991 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

1992 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

1993 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

1994 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

1995 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

1996 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

1997 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

1998 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

1999 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

2000 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

2001 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

2002 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

2003 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

2006 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

2007 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

2008 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

2009 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

2010 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

2011 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

2012 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

2013 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

2014 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

2015 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

2016 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

2017 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

2018 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

2019 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

2020 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

2021 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

2022 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

2023 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

2024 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

2025 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

2026 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

2027 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

2028 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

2029 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

2030 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

2031 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

2032 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

2035 
	#ADC_JDR1_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2038 
	#ADC_JDR2_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2041 
	#ADC_JDR3_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2044 
	#ADC_JDR4_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2047 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

2048 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

2051 
	#ADC_CSR_AWD1
 ((
uöt32_t
)0x00000001Ë

	)

2052 
	#ADC_CSR_EOC1
 ((
uöt32_t
)0x00000002Ë

	)

2053 
	#ADC_CSR_JEOC1
 ((
uöt32_t
)0x00000004Ë

	)

2054 
	#ADC_CSR_JSTRT1
 ((
uöt32_t
)0x00000008Ë

	)

2055 
	#ADC_CSR_STRT1
 ((
uöt32_t
)0x00000010Ë

	)

2056 
	#ADC_CSR_DOVR1
 ((
uöt32_t
)0x00000020Ë

	)

2057 
	#ADC_CSR_AWD2
 ((
uöt32_t
)0x00000100Ë

	)

2058 
	#ADC_CSR_EOC2
 ((
uöt32_t
)0x00000200Ë

	)

2059 
	#ADC_CSR_JEOC2
 ((
uöt32_t
)0x00000400Ë

	)

2060 
	#ADC_CSR_JSTRT2
 ((
uöt32_t
)0x00000800Ë

	)

2061 
	#ADC_CSR_STRT2
 ((
uöt32_t
)0x00001000Ë

	)

2062 
	#ADC_CSR_DOVR2
 ((
uöt32_t
)0x00002000Ë

	)

2063 
	#ADC_CSR_AWD3
 ((
uöt32_t
)0x00010000Ë

	)

2064 
	#ADC_CSR_EOC3
 ((
uöt32_t
)0x00020000Ë

	)

2065 
	#ADC_CSR_JEOC3
 ((
uöt32_t
)0x00040000Ë

	)

2066 
	#ADC_CSR_JSTRT3
 ((
uöt32_t
)0x00080000Ë

	)

2067 
	#ADC_CSR_STRT3
 ((
uöt32_t
)0x00100000Ë

	)

2068 
	#ADC_CSR_DOVR3
 ((
uöt32_t
)0x00200000Ë

	)

2071 
	#ADC_CCR_MULTI
 ((
uöt32_t
)0x0000001FË

	)

2072 
	#ADC_CCR_MULTI_0
 ((
uöt32_t
)0x00000001Ë

	)

2073 
	#ADC_CCR_MULTI_1
 ((
uöt32_t
)0x00000002Ë

	)

2074 
	#ADC_CCR_MULTI_2
 ((
uöt32_t
)0x00000004Ë

	)

2075 
	#ADC_CCR_MULTI_3
 ((
uöt32_t
)0x00000008Ë

	)

2076 
	#ADC_CCR_MULTI_4
 ((
uöt32_t
)0x00000010Ë

	)

2077 
	#ADC_CCR_DELAY
 ((
uöt32_t
)0x00000F00Ë

	)

2078 
	#ADC_CCR_DELAY_0
 ((
uöt32_t
)0x00000100Ë

	)

2079 
	#ADC_CCR_DELAY_1
 ((
uöt32_t
)0x00000200Ë

	)

2080 
	#ADC_CCR_DELAY_2
 ((
uöt32_t
)0x00000400Ë

	)

2081 
	#ADC_CCR_DELAY_3
 ((
uöt32_t
)0x00000800Ë

	)

2082 
	#ADC_CCR_DDS
 ((
uöt32_t
)0x00002000Ë

	)

2083 
	#ADC_CCR_DMA
 ((
uöt32_t
)0x0000C000Ë

	)

2084 
	#ADC_CCR_DMA_0
 ((
uöt32_t
)0x00004000Ë

	)

2085 
	#ADC_CCR_DMA_1
 ((
uöt32_t
)0x00008000Ë

	)

2086 
	#ADC_CCR_ADCPRE
 ((
uöt32_t
)0x00030000Ë

	)

2087 
	#ADC_CCR_ADCPRE_0
 ((
uöt32_t
)0x00010000Ë

	)

2088 
	#ADC_CCR_ADCPRE_1
 ((
uöt32_t
)0x00020000Ë

	)

2089 
	#ADC_CCR_VBATE
 ((
uöt32_t
)0x00400000Ë

	)

2090 
	#ADC_CCR_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

2093 
	#ADC_CDR_DATA1
 ((
uöt32_t
)0x0000FFFFË

	)

2094 
	#ADC_CDR_DATA2
 ((
uöt32_t
)0xFFFF0000Ë

	)

2103 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

2104 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

2105 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

2106 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

2107 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

2108 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

2109 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

2110 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

2111 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

2114 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

2115 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

2116 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

2117 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

2118 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

2119 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

2120 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

2121 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

2122 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

2125 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

2126 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

2127 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

2128 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

2129 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

2130 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

2131 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

2132 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

2133 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

2134 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

2135 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

2136 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

2137 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

2138 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

2139 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

2140 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

2142 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

2143 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

2144 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

2145 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

2147 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

2148 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

2149 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

2150 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

2153 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

2154 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

2155 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

2156 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

2159 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

2160 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

2161 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

2162 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

2165 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

2166 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

2167 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

2168 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

2169 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

2170 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

2171 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

2172 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

2173 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

2174 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

2175 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

2176 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

2177 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

2178 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

2181 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

2182 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

2183 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

2185 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

2186 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

2187 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

2188 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

2190 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

2191 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

2194 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

2195 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

2196 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

2197 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

2198 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

2199 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

2203 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2204 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2205 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2206 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2207 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2210 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2211 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2212 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2215 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2216 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2217 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2218 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2221 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2222 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2223 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2224 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2227 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2228 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2229 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2230 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2231 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2234 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2235 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2236 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2239 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2240 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2241 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2242 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2245 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2246 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2247 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2248 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2251 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2252 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2253 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2254 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2255 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2258 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2259 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2260 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2263 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2264 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2265 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2266 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2269 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2270 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2271 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2272 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2275 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2276 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2277 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2278 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2281 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2282 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

2283 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2286 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2287 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2288 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2289 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2292 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2293 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2294 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2295 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2298 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2299 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2300 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2301 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2304 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2305 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

2306 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2309 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2310 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2311 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2312 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2315 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2316 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2317 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2318 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2322 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

2325 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

2326 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

2327 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

2328 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

2329 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

2330 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

2331 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

2332 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

2333 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

2334 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

2335 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

2336 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

2337 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

2338 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

2339 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

2342 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

2343 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

2344 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

2345 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

2346 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

2347 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

2348 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

2349 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

2350 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

2351 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

2352 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

2353 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

2354 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

2355 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

2356 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

2359 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

2360 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

2361 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

2362 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

2363 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

2364 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

2365 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

2366 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

2367 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

2368 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

2369 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

2370 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

2371 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

2372 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

2373 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

2376 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

2377 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

2378 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

2379 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

2380 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

2381 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

2382 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

2383 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

2384 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

2385 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

2386 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

2387 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

2388 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

2389 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

2390 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

2393 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2394 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2395 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2396 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2397 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2398 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2399 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2400 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2401 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2402 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2403 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2404 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2405 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2406 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2407 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2408 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2409 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2410 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2411 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2412 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2413 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2414 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2415 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2416 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2417 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2418 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2419 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2420 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2421 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2422 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2423 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2424 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2427 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2428 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2429 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2430 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2431 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2432 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2433 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2434 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2435 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2436 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2437 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2438 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2439 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2440 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2441 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2442 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2443 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2444 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2445 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2446 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2447 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2448 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2449 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2450 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2451 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2452 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2453 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2454 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2455 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2456 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2457 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2458 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2461 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2462 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2463 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2464 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2465 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2466 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2467 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2468 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2469 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2470 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2471 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2472 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2473 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2474 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2475 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2476 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2477 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2478 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2479 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2480 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2481 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2482 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2483 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2484 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2485 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2486 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2487 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2488 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2489 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2490 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2491 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2492 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2495 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2496 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2497 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2498 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2499 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2500 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2501 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2502 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2503 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2504 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2505 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2506 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2507 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2508 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2509 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2510 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2511 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2512 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2513 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2514 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2515 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2516 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2517 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2518 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2519 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2520 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2521 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2522 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2523 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2524 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2525 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2526 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2529 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2530 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2531 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2532 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2533 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2534 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2535 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2536 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2537 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2538 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2539 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2540 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2541 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2542 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2543 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2544 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2545 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2546 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2547 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2548 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2549 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2550 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2551 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2552 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2553 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2554 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2555 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2556 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2557 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2558 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2559 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2560 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2563 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2564 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2565 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2566 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2567 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2568 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2569 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2570 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2571 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2572 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2573 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2574 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2575 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2576 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2577 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2578 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2579 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2580 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2581 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2582 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2583 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2584 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2585 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2586 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2587 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2588 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2589 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2590 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2591 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2592 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2593 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2594 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2597 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2598 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2599 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2600 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2601 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2602 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2603 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2604 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2605 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2606 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2607 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2608 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2609 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2610 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2611 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2612 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2613 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2614 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2615 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2616 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2617 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2618 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2619 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2620 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2621 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2622 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2623 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2624 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2625 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2626 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2627 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2628 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2631 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2632 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2633 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2634 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2635 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2636 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2637 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2638 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2639 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2640 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2641 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2642 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2643 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2644 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2645 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2646 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2647 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2648 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2649 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2650 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2651 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2652 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2653 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2654 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2655 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2656 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2657 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2658 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2659 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2660 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2661 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2662 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2665 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2666 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2667 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2668 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2669 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2670 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2671 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2672 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2673 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2674 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2675 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2676 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2677 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2678 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2679 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2680 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2681 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2682 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2683 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2684 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2685 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2686 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2687 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2688 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2689 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2690 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2691 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2692 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2693 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2694 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2695 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2696 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2699 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2700 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2701 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2702 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2703 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2704 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2705 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2706 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2707 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2708 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2709 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2710 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2711 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2712 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2713 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2714 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2715 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2716 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2717 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2718 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2719 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2720 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2721 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2722 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2723 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2724 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2725 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2726 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2727 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2728 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2729 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2730 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2733 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2734 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2735 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2736 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2737 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2738 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2739 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2740 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2741 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2742 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2743 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2744 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2745 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2746 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2747 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2748 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2749 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2750 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2751 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2752 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2753 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2754 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2755 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2756 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2757 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2758 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2759 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2760 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2761 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2762 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2763 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2764 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2767 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2768 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2769 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2770 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2771 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2772 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2773 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2774 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2775 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2776 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2777 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2778 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2779 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2780 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2781 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2782 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2783 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2784 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2785 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2786 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2787 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2788 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2789 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2790 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2791 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2792 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2793 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2794 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2795 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2796 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2797 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2798 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2801 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2802 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2803 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2804 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2805 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2806 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2807 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2808 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2809 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2810 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2811 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2812 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2813 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2814 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2815 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2816 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2817 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2818 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2819 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2820 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2821 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2822 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2823 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2824 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2825 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2826 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2827 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2828 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2829 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2830 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2831 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2832 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2835 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2836 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2837 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2838 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2839 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2840 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2841 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2842 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2843 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2844 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2845 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2846 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2847 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2848 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2849 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2850 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2851 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2852 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2853 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2854 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2855 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2856 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2857 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2858 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2859 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2860 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2861 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2862 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2863 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2864 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2865 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2866 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2869 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2870 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2871 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2872 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2873 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2874 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2875 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2876 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2877 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2878 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2879 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2880 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2881 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2882 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2883 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2884 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2885 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2886 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2887 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2888 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2889 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2890 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2891 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2892 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2893 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2894 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2895 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2896 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2897 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2898 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2899 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2900 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2903 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2904 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2905 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2906 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2907 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2908 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2909 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2910 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2911 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2912 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2913 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2914 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2915 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2916 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2917 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2918 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2919 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2920 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2921 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2922 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2923 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2924 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2925 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2926 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2927 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2928 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2929 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2930 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2931 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2932 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2933 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2934 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2937 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2938 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2939 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2940 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2941 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2942 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2943 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2944 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2945 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2946 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2947 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2948 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2949 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2950 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2951 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2952 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2953 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2954 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2955 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2956 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2957 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2958 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2959 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2960 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2961 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2962 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2963 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2964 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2965 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2966 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2967 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2968 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2971 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2972 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2973 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2974 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2975 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2976 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2977 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2978 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2979 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2980 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2981 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2982 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2983 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2984 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2985 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2986 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2987 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2988 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2989 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2990 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2991 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2992 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2993 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2994 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2995 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2996 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2997 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2998 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2999 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3000 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3001 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3002 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3005 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3006 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3007 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3008 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3009 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3010 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3011 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3012 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3013 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3014 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3015 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3016 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3017 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3018 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3019 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3020 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3021 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3022 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3023 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3024 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3025 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3026 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3027 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3028 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3029 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3030 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3031 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3032 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3033 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3034 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3035 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3036 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3039 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3040 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3041 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3042 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3043 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3044 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3045 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3046 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3047 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3048 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3049 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3050 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3051 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3052 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3053 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3054 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3055 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3056 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3057 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3058 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3059 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3060 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3061 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3062 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3063 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3064 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3065 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3066 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3067 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3068 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3069 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3070 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3073 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3074 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3075 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3076 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3077 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3078 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3079 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3080 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3081 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3082 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3083 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3084 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3085 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3086 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3087 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3088 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3089 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3090 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3091 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3092 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3093 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3094 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3095 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3096 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3097 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3098 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3099 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3100 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3101 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3102 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3103 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3104 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3107 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3108 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3109 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3110 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3111 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3112 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3113 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3114 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3115 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3116 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3117 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3118 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3119 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3120 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3121 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3122 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3123 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3124 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3125 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3126 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3127 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3128 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3129 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3130 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3131 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3132 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3133 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3134 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3135 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3136 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3137 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3138 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3141 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3142 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3143 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3144 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3145 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3146 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3147 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3148 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3149 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3150 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3151 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3152 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3153 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3154 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3155 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3156 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3157 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3158 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3159 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3160 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3161 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3162 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3163 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3164 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3165 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3166 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3167 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3168 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3169 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3170 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3171 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3172 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3175 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3176 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3177 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3178 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3179 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3180 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3181 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3182 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3183 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3184 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3185 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3186 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3187 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3188 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3189 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3190 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3191 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3192 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3193 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3194 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3195 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3196 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3197 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3198 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3199 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3200 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3201 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3202 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3203 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3204 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3205 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3206 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3209 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3210 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3211 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3212 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3213 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3214 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3215 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3216 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3217 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3218 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3219 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3220 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3221 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3222 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3223 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3224 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3225 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3226 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3227 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3228 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3229 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3230 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3231 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3232 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3233 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3234 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3235 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3236 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3237 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3238 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3239 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3240 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3243 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3244 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3245 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3246 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3247 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3248 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3249 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3250 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3251 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3252 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3253 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3254 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3255 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3256 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3257 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3258 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3259 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3260 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3261 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3262 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3263 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3264 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3265 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3266 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3267 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3268 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3269 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3270 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3271 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3272 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3273 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3274 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3277 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3278 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3279 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3280 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3281 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3282 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3283 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3284 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3285 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3286 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3287 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3288 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3289 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3290 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3291 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3292 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3293 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3294 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3295 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3296 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3297 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3298 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3299 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3300 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3301 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3302 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3303 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3304 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3305 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3306 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3307 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3308 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3311 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3312 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3313 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3314 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3315 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3316 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3317 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3318 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3319 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3320 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3321 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3322 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3323 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3324 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3325 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3326 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3327 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3328 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3329 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3330 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3331 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3332 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3333 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3334 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3335 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3336 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3337 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3338 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3339 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3340 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3341 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3342 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3350 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

3354 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

3358 
	#CRC_CR_RESET
 ((
uöt8_t
)0x01Ë

	)

3366 
	#CRYP_CR_ALGODIR
 ((
uöt32_t
)0x00000004)

	)

3368 
	#CRYP_CR_ALGOMODE
 ((
uöt32_t
)0x00080038)

	)

3369 
	#CRYP_CR_ALGOMODE_0
 ((
uöt32_t
)0x00000008)

	)

3370 
	#CRYP_CR_ALGOMODE_1
 ((
uöt32_t
)0x00000010)

	)

3371 
	#CRYP_CR_ALGOMODE_2
 ((
uöt32_t
)0x00000020)

	)

3372 
	#CRYP_CR_ALGOMODE_TDES_ECB
 ((
uöt32_t
)0x00000000)

	)

3373 
	#CRYP_CR_ALGOMODE_TDES_CBC
 ((
uöt32_t
)0x00000008)

	)

3374 
	#CRYP_CR_ALGOMODE_DES_ECB
 ((
uöt32_t
)0x00000010)

	)

3375 
	#CRYP_CR_ALGOMODE_DES_CBC
 ((
uöt32_t
)0x00000018)

	)

3376 
	#CRYP_CR_ALGOMODE_AES_ECB
 ((
uöt32_t
)0x00000020)

	)

3377 
	#CRYP_CR_ALGOMODE_AES_CBC
 ((
uöt32_t
)0x00000028)

	)

3378 
	#CRYP_CR_ALGOMODE_AES_CTR
 ((
uöt32_t
)0x00000030)

	)

3379 
	#CRYP_CR_ALGOMODE_AES_KEY
 ((
uöt32_t
)0x00000038)

	)

3381 
	#CRYP_CR_DATATYPE
 ((
uöt32_t
)0x000000C0)

	)

3382 
	#CRYP_CR_DATATYPE_0
 ((
uöt32_t
)0x00000040)

	)

3383 
	#CRYP_CR_DATATYPE_1
 ((
uöt32_t
)0x00000080)

	)

3384 
	#CRYP_CR_KEYSIZE
 ((
uöt32_t
)0x00000300)

	)

3385 
	#CRYP_CR_KEYSIZE_0
 ((
uöt32_t
)0x00000100)

	)

3386 
	#CRYP_CR_KEYSIZE_1
 ((
uöt32_t
)0x00000200)

	)

3387 
	#CRYP_CR_FFLUSH
 ((
uöt32_t
)0x00004000)

	)

3388 
	#CRYP_CR_CRYPEN
 ((
uöt32_t
)0x00008000)

	)

3390 
	#CRYP_CR_GCM_CCMPH
 ((
uöt32_t
)0x00030000)

	)

3391 
	#CRYP_CR_GCM_CCMPH_0
 ((
uöt32_t
)0x00010000)

	)

3392 
	#CRYP_CR_GCM_CCMPH_1
 ((
uöt32_t
)0x00020000)

	)

3393 
	#CRYP_CR_ALGOMODE_3
 ((
uöt32_t
)0x00080000)

	)

3396 
	#CRYP_SR_IFEM
 ((
uöt32_t
)0x00000001)

	)

3397 
	#CRYP_SR_IFNF
 ((
uöt32_t
)0x00000002)

	)

3398 
	#CRYP_SR_OFNE
 ((
uöt32_t
)0x00000004)

	)

3399 
	#CRYP_SR_OFFU
 ((
uöt32_t
)0x00000008)

	)

3400 
	#CRYP_SR_BUSY
 ((
uöt32_t
)0x00000010)

	)

3402 
	#CRYP_DMACR_DIEN
 ((
uöt32_t
)0x00000001)

	)

3403 
	#CRYP_DMACR_DOEN
 ((
uöt32_t
)0x00000002)

	)

3405 
	#CRYP_IMSCR_INIM
 ((
uöt32_t
)0x00000001)

	)

3406 
	#CRYP_IMSCR_OUTIM
 ((
uöt32_t
)0x00000002)

	)

3408 
	#CRYP_RISR_OUTRIS
 ((
uöt32_t
)0x00000001)

	)

3409 
	#CRYP_RISR_INRIS
 ((
uöt32_t
)0x00000002)

	)

3411 
	#CRYP_MISR_INMIS
 ((
uöt32_t
)0x00000001)

	)

3412 
	#CRYP_MISR_OUTMIS
 ((
uöt32_t
)0x00000002)

	)

3420 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

3421 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

3422 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

3424 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

3425 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

3426 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

3427 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

3429 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

3430 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

3431 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

3433 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

3434 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

3435 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

3436 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

3437 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

3439 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

3440 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

3441 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

3442 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

3444 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

3445 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

3446 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

3447 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

3449 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

3450 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

3451 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

3453 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

3454 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

3455 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

3456 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

3457 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

3459 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

3462 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

3463 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

3466 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

3469 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3472 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

3475 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

3478 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3481 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

3484 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

3485 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

3488 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

3489 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

3492 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

3493 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

3496 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

3499 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

3502 
	#DAC_SR_DMAUDR1
 ((
uöt32_t
)0x00002000Ë

	)

3503 
	#DAC_SR_DMAUDR2
 ((
uöt32_t
)0x20000000Ë

	)

3517 
	#DCMI_CR_CAPTURE
 ((
uöt32_t
)0x00000001)

	)

3518 
	#DCMI_CR_CM
 ((
uöt32_t
)0x00000002)

	)

3519 
	#DCMI_CR_CROP
 ((
uöt32_t
)0x00000004)

	)

3520 
	#DCMI_CR_JPEG
 ((
uöt32_t
)0x00000008)

	)

3521 
	#DCMI_CR_ESS
 ((
uöt32_t
)0x00000010)

	)

3522 
	#DCMI_CR_PCKPOL
 ((
uöt32_t
)0x00000020)

	)

3523 
	#DCMI_CR_HSPOL
 ((
uöt32_t
)0x00000040)

	)

3524 
	#DCMI_CR_VSPOL
 ((
uöt32_t
)0x00000080)

	)

3525 
	#DCMI_CR_FCRC_0
 ((
uöt32_t
)0x00000100)

	)

3526 
	#DCMI_CR_FCRC_1
 ((
uöt32_t
)0x00000200)

	)

3527 
	#DCMI_CR_EDM_0
 ((
uöt32_t
)0x00000400)

	)

3528 
	#DCMI_CR_EDM_1
 ((
uöt32_t
)0x00000800)

	)

3529 
	#DCMI_CR_CRE
 ((
uöt32_t
)0x00001000)

	)

3530 
	#DCMI_CR_ENABLE
 ((
uöt32_t
)0x00004000)

	)

3533 
	#DCMI_SR_HSYNC
 ((
uöt32_t
)0x00000001)

	)

3534 
	#DCMI_SR_VSYNC
 ((
uöt32_t
)0x00000002)

	)

3535 
	#DCMI_SR_FNE
 ((
uöt32_t
)0x00000004)

	)

3538 
	#DCMI_RISR_FRAME_RIS
 ((
uöt32_t
)0x00000001)

	)

3539 
	#DCMI_RISR_OVF_RIS
 ((
uöt32_t
)0x00000002)

	)

3540 
	#DCMI_RISR_ERR_RIS
 ((
uöt32_t
)0x00000004)

	)

3541 
	#DCMI_RISR_VSYNC_RIS
 ((
uöt32_t
)0x00000008)

	)

3542 
	#DCMI_RISR_LINE_RIS
 ((
uöt32_t
)0x00000010)

	)

3545 
	#DCMI_IER_FRAME_IE
 ((
uöt32_t
)0x00000001)

	)

3546 
	#DCMI_IER_OVF_IE
 ((
uöt32_t
)0x00000002)

	)

3547 
	#DCMI_IER_ERR_IE
 ((
uöt32_t
)0x00000004)

	)

3548 
	#DCMI_IER_VSYNC_IE
 ((
uöt32_t
)0x00000008)

	)

3549 
	#DCMI_IER_LINE_IE
 ((
uöt32_t
)0x00000010)

	)

3552 
	#DCMI_MISR_FRAME_MIS
 ((
uöt32_t
)0x00000001)

	)

3553 
	#DCMI_MISR_OVF_MIS
 ((
uöt32_t
)0x00000002)

	)

3554 
	#DCMI_MISR_ERR_MIS
 ((
uöt32_t
)0x00000004)

	)

3555 
	#DCMI_MISR_VSYNC_MIS
 ((
uöt32_t
)0x00000008)

	)

3556 
	#DCMI_MISR_LINE_MIS
 ((
uöt32_t
)0x00000010)

	)

3559 
	#DCMI_ICR_FRAME_ISC
 ((
uöt32_t
)0x00000001)

	)

3560 
	#DCMI_ICR_OVF_ISC
 ((
uöt32_t
)0x00000002)

	)

3561 
	#DCMI_ICR_ERR_ISC
 ((
uöt32_t
)0x00000004)

	)

3562 
	#DCMI_ICR_VSYNC_ISC
 ((
uöt32_t
)0x00000008)

	)

3563 
	#DCMI_ICR_LINE_ISC
 ((
uöt32_t
)0x00000010)

	)

3571 
	#DMA_SxCR_CHSEL
 ((
uöt32_t
)0x0E000000)

	)

3572 
	#DMA_SxCR_CHSEL_0
 ((
uöt32_t
)0x02000000)

	)

3573 
	#DMA_SxCR_CHSEL_1
 ((
uöt32_t
)0x04000000)

	)

3574 
	#DMA_SxCR_CHSEL_2
 ((
uöt32_t
)0x08000000)

	)

3575 
	#DMA_SxCR_MBURST
 ((
uöt32_t
)0x01800000)

	)

3576 
	#DMA_SxCR_MBURST_0
 ((
uöt32_t
)0x00800000)

	)

3577 
	#DMA_SxCR_MBURST_1
 ((
uöt32_t
)0x01000000)

	)

3578 
	#DMA_SxCR_PBURST
 ((
uöt32_t
)0x00600000)

	)

3579 
	#DMA_SxCR_PBURST_0
 ((
uöt32_t
)0x00200000)

	)

3580 
	#DMA_SxCR_PBURST_1
 ((
uöt32_t
)0x00400000)

	)

3581 
	#DMA_SxCR_ACK
 ((
uöt32_t
)0x00100000)

	)

3582 
	#DMA_SxCR_CT
 ((
uöt32_t
)0x00080000)

	)

3583 
	#DMA_SxCR_DBM
 ((
uöt32_t
)0x00040000)

	)

3584 
	#DMA_SxCR_PL
 ((
uöt32_t
)0x00030000)

	)

3585 
	#DMA_SxCR_PL_0
 ((
uöt32_t
)0x00010000)

	)

3586 
	#DMA_SxCR_PL_1
 ((
uöt32_t
)0x00020000)

	)

3587 
	#DMA_SxCR_PINCOS
 ((
uöt32_t
)0x00008000)

	)

3588 
	#DMA_SxCR_MSIZE
 ((
uöt32_t
)0x00006000)

	)

3589 
	#DMA_SxCR_MSIZE_0
 ((
uöt32_t
)0x00002000)

	)

3590 
	#DMA_SxCR_MSIZE_1
 ((
uöt32_t
)0x00004000)

	)

3591 
	#DMA_SxCR_PSIZE
 ((
uöt32_t
)0x00001800)

	)

3592 
	#DMA_SxCR_PSIZE_0
 ((
uöt32_t
)0x00000800)

	)

3593 
	#DMA_SxCR_PSIZE_1
 ((
uöt32_t
)0x00001000)

	)

3594 
	#DMA_SxCR_MINC
 ((
uöt32_t
)0x00000400)

	)

3595 
	#DMA_SxCR_PINC
 ((
uöt32_t
)0x00000200)

	)

3596 
	#DMA_SxCR_CIRC
 ((
uöt32_t
)0x00000100)

	)

3597 
	#DMA_SxCR_DIR
 ((
uöt32_t
)0x000000C0)

	)

3598 
	#DMA_SxCR_DIR_0
 ((
uöt32_t
)0x00000040)

	)

3599 
	#DMA_SxCR_DIR_1
 ((
uöt32_t
)0x00000080)

	)

3600 
	#DMA_SxCR_PFCTRL
 ((
uöt32_t
)0x00000020)

	)

3601 
	#DMA_SxCR_TCIE
 ((
uöt32_t
)0x00000010)

	)

3602 
	#DMA_SxCR_HTIE
 ((
uöt32_t
)0x00000008)

	)

3603 
	#DMA_SxCR_TEIE
 ((
uöt32_t
)0x00000004)

	)

3604 
	#DMA_SxCR_DMEIE
 ((
uöt32_t
)0x00000002)

	)

3605 
	#DMA_SxCR_EN
 ((
uöt32_t
)0x00000001)

	)

3608 
	#DMA_SxNDT
 ((
uöt32_t
)0x0000FFFF)

	)

3609 
	#DMA_SxNDT_0
 ((
uöt32_t
)0x00000001)

	)

3610 
	#DMA_SxNDT_1
 ((
uöt32_t
)0x00000002)

	)

3611 
	#DMA_SxNDT_2
 ((
uöt32_t
)0x00000004)

	)

3612 
	#DMA_SxNDT_3
 ((
uöt32_t
)0x00000008)

	)

3613 
	#DMA_SxNDT_4
 ((
uöt32_t
)0x00000010)

	)

3614 
	#DMA_SxNDT_5
 ((
uöt32_t
)0x00000020)

	)

3615 
	#DMA_SxNDT_6
 ((
uöt32_t
)0x00000040)

	)

3616 
	#DMA_SxNDT_7
 ((
uöt32_t
)0x00000080)

	)

3617 
	#DMA_SxNDT_8
 ((
uöt32_t
)0x00000100)

	)

3618 
	#DMA_SxNDT_9
 ((
uöt32_t
)0x00000200)

	)

3619 
	#DMA_SxNDT_10
 ((
uöt32_t
)0x00000400)

	)

3620 
	#DMA_SxNDT_11
 ((
uöt32_t
)0x00000800)

	)

3621 
	#DMA_SxNDT_12
 ((
uöt32_t
)0x00001000)

	)

3622 
	#DMA_SxNDT_13
 ((
uöt32_t
)0x00002000)

	)

3623 
	#DMA_SxNDT_14
 ((
uöt32_t
)0x00004000)

	)

3624 
	#DMA_SxNDT_15
 ((
uöt32_t
)0x00008000)

	)

3627 
	#DMA_SxFCR_FEIE
 ((
uöt32_t
)0x00000080)

	)

3628 
	#DMA_SxFCR_FS
 ((
uöt32_t
)0x00000038)

	)

3629 
	#DMA_SxFCR_FS_0
 ((
uöt32_t
)0x00000008)

	)

3630 
	#DMA_SxFCR_FS_1
 ((
uöt32_t
)0x00000010)

	)

3631 
	#DMA_SxFCR_FS_2
 ((
uöt32_t
)0x00000020)

	)

3632 
	#DMA_SxFCR_DMDIS
 ((
uöt32_t
)0x00000004)

	)

3633 
	#DMA_SxFCR_FTH
 ((
uöt32_t
)0x00000003)

	)

3634 
	#DMA_SxFCR_FTH_0
 ((
uöt32_t
)0x00000001)

	)

3635 
	#DMA_SxFCR_FTH_1
 ((
uöt32_t
)0x00000002)

	)

3638 
	#DMA_LISR_TCIF3
 ((
uöt32_t
)0x08000000)

	)

3639 
	#DMA_LISR_HTIF3
 ((
uöt32_t
)0x04000000)

	)

3640 
	#DMA_LISR_TEIF3
 ((
uöt32_t
)0x02000000)

	)

3641 
	#DMA_LISR_DMEIF3
 ((
uöt32_t
)0x01000000)

	)

3642 
	#DMA_LISR_FEIF3
 ((
uöt32_t
)0x00400000)

	)

3643 
	#DMA_LISR_TCIF2
 ((
uöt32_t
)0x00200000)

	)

3644 
	#DMA_LISR_HTIF2
 ((
uöt32_t
)0x00100000)

	)

3645 
	#DMA_LISR_TEIF2
 ((
uöt32_t
)0x00080000)

	)

3646 
	#DMA_LISR_DMEIF2
 ((
uöt32_t
)0x00040000)

	)

3647 
	#DMA_LISR_FEIF2
 ((
uöt32_t
)0x00010000)

	)

3648 
	#DMA_LISR_TCIF1
 ((
uöt32_t
)0x00000800)

	)

3649 
	#DMA_LISR_HTIF1
 ((
uöt32_t
)0x00000400)

	)

3650 
	#DMA_LISR_TEIF1
 ((
uöt32_t
)0x00000200)

	)

3651 
	#DMA_LISR_DMEIF1
 ((
uöt32_t
)0x00000100)

	)

3652 
	#DMA_LISR_FEIF1
 ((
uöt32_t
)0x00000040)

	)

3653 
	#DMA_LISR_TCIF0
 ((
uöt32_t
)0x00000020)

	)

3654 
	#DMA_LISR_HTIF0
 ((
uöt32_t
)0x00000010)

	)

3655 
	#DMA_LISR_TEIF0
 ((
uöt32_t
)0x00000008)

	)

3656 
	#DMA_LISR_DMEIF0
 ((
uöt32_t
)0x00000004)

	)

3657 
	#DMA_LISR_FEIF0
 ((
uöt32_t
)0x00000001)

	)

3660 
	#DMA_HISR_TCIF7
 ((
uöt32_t
)0x08000000)

	)

3661 
	#DMA_HISR_HTIF7
 ((
uöt32_t
)0x04000000)

	)

3662 
	#DMA_HISR_TEIF7
 ((
uöt32_t
)0x02000000)

	)

3663 
	#DMA_HISR_DMEIF7
 ((
uöt32_t
)0x01000000)

	)

3664 
	#DMA_HISR_FEIF7
 ((
uöt32_t
)0x00400000)

	)

3665 
	#DMA_HISR_TCIF6
 ((
uöt32_t
)0x00200000)

	)

3666 
	#DMA_HISR_HTIF6
 ((
uöt32_t
)0x00100000)

	)

3667 
	#DMA_HISR_TEIF6
 ((
uöt32_t
)0x00080000)

	)

3668 
	#DMA_HISR_DMEIF6
 ((
uöt32_t
)0x00040000)

	)

3669 
	#DMA_HISR_FEIF6
 ((
uöt32_t
)0x00010000)

	)

3670 
	#DMA_HISR_TCIF5
 ((
uöt32_t
)0x00000800)

	)

3671 
	#DMA_HISR_HTIF5
 ((
uöt32_t
)0x00000400)

	)

3672 
	#DMA_HISR_TEIF5
 ((
uöt32_t
)0x00000200)

	)

3673 
	#DMA_HISR_DMEIF5
 ((
uöt32_t
)0x00000100)

	)

3674 
	#DMA_HISR_FEIF5
 ((
uöt32_t
)0x00000040)

	)

3675 
	#DMA_HISR_TCIF4
 ((
uöt32_t
)0x00000020)

	)

3676 
	#DMA_HISR_HTIF4
 ((
uöt32_t
)0x00000010)

	)

3677 
	#DMA_HISR_TEIF4
 ((
uöt32_t
)0x00000008)

	)

3678 
	#DMA_HISR_DMEIF4
 ((
uöt32_t
)0x00000004)

	)

3679 
	#DMA_HISR_FEIF4
 ((
uöt32_t
)0x00000001)

	)

3682 
	#DMA_LIFCR_CTCIF3
 ((
uöt32_t
)0x08000000)

	)

3683 
	#DMA_LIFCR_CHTIF3
 ((
uöt32_t
)0x04000000)

	)

3684 
	#DMA_LIFCR_CTEIF3
 ((
uöt32_t
)0x02000000)

	)

3685 
	#DMA_LIFCR_CDMEIF3
 ((
uöt32_t
)0x01000000)

	)

3686 
	#DMA_LIFCR_CFEIF3
 ((
uöt32_t
)0x00400000)

	)

3687 
	#DMA_LIFCR_CTCIF2
 ((
uöt32_t
)0x00200000)

	)

3688 
	#DMA_LIFCR_CHTIF2
 ((
uöt32_t
)0x00100000)

	)

3689 
	#DMA_LIFCR_CTEIF2
 ((
uöt32_t
)0x00080000)

	)

3690 
	#DMA_LIFCR_CDMEIF2
 ((
uöt32_t
)0x00040000)

	)

3691 
	#DMA_LIFCR_CFEIF2
 ((
uöt32_t
)0x00010000)

	)

3692 
	#DMA_LIFCR_CTCIF1
 ((
uöt32_t
)0x00000800)

	)

3693 
	#DMA_LIFCR_CHTIF1
 ((
uöt32_t
)0x00000400)

	)

3694 
	#DMA_LIFCR_CTEIF1
 ((
uöt32_t
)0x00000200)

	)

3695 
	#DMA_LIFCR_CDMEIF1
 ((
uöt32_t
)0x00000100)

	)

3696 
	#DMA_LIFCR_CFEIF1
 ((
uöt32_t
)0x00000040)

	)

3697 
	#DMA_LIFCR_CTCIF0
 ((
uöt32_t
)0x00000020)

	)

3698 
	#DMA_LIFCR_CHTIF0
 ((
uöt32_t
)0x00000010)

	)

3699 
	#DMA_LIFCR_CTEIF0
 ((
uöt32_t
)0x00000008)

	)

3700 
	#DMA_LIFCR_CDMEIF0
 ((
uöt32_t
)0x00000004)

	)

3701 
	#DMA_LIFCR_CFEIF0
 ((
uöt32_t
)0x00000001)

	)

3704 
	#DMA_HIFCR_CTCIF7
 ((
uöt32_t
)0x08000000)

	)

3705 
	#DMA_HIFCR_CHTIF7
 ((
uöt32_t
)0x04000000)

	)

3706 
	#DMA_HIFCR_CTEIF7
 ((
uöt32_t
)0x02000000)

	)

3707 
	#DMA_HIFCR_CDMEIF7
 ((
uöt32_t
)0x01000000)

	)

3708 
	#DMA_HIFCR_CFEIF7
 ((
uöt32_t
)0x00400000)

	)

3709 
	#DMA_HIFCR_CTCIF6
 ((
uöt32_t
)0x00200000)

	)

3710 
	#DMA_HIFCR_CHTIF6
 ((
uöt32_t
)0x00100000)

	)

3711 
	#DMA_HIFCR_CTEIF6
 ((
uöt32_t
)0x00080000)

	)

3712 
	#DMA_HIFCR_CDMEIF6
 ((
uöt32_t
)0x00040000)

	)

3713 
	#DMA_HIFCR_CFEIF6
 ((
uöt32_t
)0x00010000)

	)

3714 
	#DMA_HIFCR_CTCIF5
 ((
uöt32_t
)0x00000800)

	)

3715 
	#DMA_HIFCR_CHTIF5
 ((
uöt32_t
)0x00000400)

	)

3716 
	#DMA_HIFCR_CTEIF5
 ((
uöt32_t
)0x00000200)

	)

3717 
	#DMA_HIFCR_CDMEIF5
 ((
uöt32_t
)0x00000100)

	)

3718 
	#DMA_HIFCR_CFEIF5
 ((
uöt32_t
)0x00000040)

	)

3719 
	#DMA_HIFCR_CTCIF4
 ((
uöt32_t
)0x00000020)

	)

3720 
	#DMA_HIFCR_CHTIF4
 ((
uöt32_t
)0x00000010)

	)

3721 
	#DMA_HIFCR_CTEIF4
 ((
uöt32_t
)0x00000008)

	)

3722 
	#DMA_HIFCR_CDMEIF4
 ((
uöt32_t
)0x00000004)

	)

3723 
	#DMA_HIFCR_CFEIF4
 ((
uöt32_t
)0x00000001)

	)

3733 
	#DMA2D_CR_START
 ((
uöt32_t
)0x00000001Ë

	)

3734 
	#DMA2D_CR_SUSP
 ((
uöt32_t
)0x00000002Ë

	)

3735 
	#DMA2D_CR_ABORT
 ((
uöt32_t
)0x00000004Ë

	)

3736 
	#DMA2D_CR_TEIE
 ((
uöt32_t
)0x00000100Ë

	)

3737 
	#DMA2D_CR_TCIE
 ((
uöt32_t
)0x00000200Ë

	)

3738 
	#DMA2D_CR_TWIE
 ((
uöt32_t
)0x00000400Ë

	)

3739 
	#DMA2D_CR_CAEIE
 ((
uöt32_t
)0x00000800Ë

	)

3740 
	#DMA2D_CR_CTCIE
 ((
uöt32_t
)0x00001000Ë

	)

3741 
	#DMA2D_CR_CEIE
 ((
uöt32_t
)0x00002000Ë

	)

3742 
	#DMA2D_CR_MODE
 ((
uöt32_t
)0x00030000Ë

	)

3746 
	#DMA2D_ISR_TEIF
 ((
uöt32_t
)0x00000001Ë

	)

3747 
	#DMA2D_ISR_TCIF
 ((
uöt32_t
)0x00000002Ë

	)

3748 
	#DMA2D_ISR_TWIF
 ((
uöt32_t
)0x00000004Ë

	)

3749 
	#DMA2D_ISR_CAEIF
 ((
uöt32_t
)0x00000008Ë

	)

3750 
	#DMA2D_ISR_CTCIF
 ((
uöt32_t
)0x00000010Ë

	)

3751 
	#DMA2D_ISR_CEIF
 ((
uöt32_t
)0x00000020Ë

	)

3755 
	#DMA2D_IFSR_CTEIF
 ((
uöt32_t
)0x00000001Ë

	)

3756 
	#DMA2D_IFSR_CTCIF
 ((
uöt32_t
)0x00000002Ë

	)

3757 
	#DMA2D_IFSR_CTWIF
 ((
uöt32_t
)0x00000004Ë

	)

3758 
	#DMA2D_IFSR_CCAEIF
 ((
uöt32_t
)0x00000008Ë

	)

3759 
	#DMA2D_IFSR_CCTCIF
 ((
uöt32_t
)0x00000010Ë

	)

3760 
	#DMA2D_IFSR_CCEIF
 ((
uöt32_t
)0x00000020Ë

	)

3764 
	#DMA2D_FGMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3768 
	#DMA2D_FGOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

3772 
	#DMA2D_BGMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3776 
	#DMA2D_BGOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

3780 
	#DMA2D_FGPFCCR_CM
 ((
uöt32_t
)0x0000000FË

	)

3781 
	#DMA2D_FGPFCCR_CCM
 ((
uöt32_t
)0x00000010Ë

	)

3782 
	#DMA2D_FGPFCCR_START
 ((
uöt32_t
)0x00000020Ë

	)

3783 
	#DMA2D_FGPFCCR_CS
 ((
uöt32_t
)0x0000FF00Ë

	)

3784 
	#DMA2D_FGPFCCR_AM
 ((
uöt32_t
)0x00030000Ë

	)

3785 
	#DMA2D_FGPFCCR_ALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

3789 
	#DMA2D_FGCOLR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

3790 
	#DMA2D_FGCOLR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

3791 
	#DMA2D_FGCOLR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

3795 
	#DMA2D_BGPFCCR_CM
 ((
uöt32_t
)0x0000000FË

	)

3796 
	#DMA2D_BGPFCCR_CCM
 ((
uöt32_t
)0x00000010Ë

	)

3797 
	#DMA2D_BGPFCCR_START
 ((
uöt32_t
)0x00000020Ë

	)

3798 
	#DMA2D_BGPFCCR_CS
 ((
uöt32_t
)0x0000FF00Ë

	)

3799 
	#DMA2D_BGPFCCR_AM
 ((
uöt32_t
)0x00030000Ë

	)

3800 
	#DMA2D_BGPFCCR_ALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

3804 
	#DMA2D_BGCOLR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

3805 
	#DMA2D_BGCOLR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

3806 
	#DMA2D_BGCOLR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

3810 
	#DMA2D_FGCMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3814 
	#DMA2D_BGCMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3818 
	#DMA2D_OPFCCR_CM
 ((
uöt32_t
)0x00000007Ë

	)

3824 
	#DMA2D_OCOLR_BLUE_1
 ((
uöt32_t
)0x000000FFË

	)

3825 
	#DMA2D_OCOLR_GREEN_1
 ((
uöt32_t
)0x0000FF00Ë

	)

3826 
	#DMA2D_OCOLR_RED_1
 ((
uöt32_t
)0x00FF0000Ë

	)

3827 
	#DMA2D_OCOLR_ALPHA_1
 ((
uöt32_t
)0xFF000000Ë

	)

3830 
	#DMA2D_OCOLR_BLUE_2
 ((
uöt32_t
)0x0000001FË

	)

3831 
	#DMA2D_OCOLR_GREEN_2
 ((
uöt32_t
)0x000007E0Ë

	)

3832 
	#DMA2D_OCOLR_RED_2
 ((
uöt32_t
)0x0000F800Ë

	)

3835 
	#DMA2D_OCOLR_BLUE_3
 ((
uöt32_t
)0x0000001FË

	)

3836 
	#DMA2D_OCOLR_GREEN_3
 ((
uöt32_t
)0x000003E0Ë

	)

3837 
	#DMA2D_OCOLR_RED_3
 ((
uöt32_t
)0x00007C00Ë

	)

3838 
	#DMA2D_OCOLR_ALPHA_3
 ((
uöt32_t
)0x00008000Ë

	)

3841 
	#DMA2D_OCOLR_BLUE_4
 ((
uöt32_t
)0x0000000FË

	)

3842 
	#DMA2D_OCOLR_GREEN_4
 ((
uöt32_t
)0x000000F0Ë

	)

3843 
	#DMA2D_OCOLR_RED_4
 ((
uöt32_t
)0x00000F00Ë

	)

3844 
	#DMA2D_OCOLR_ALPHA_4
 ((
uöt32_t
)0x0000F000Ë

	)

3848 
	#DMA2D_OMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3852 
	#DMA2D_OOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

3856 
	#DMA2D_NLR_NL
 ((
uöt32_t
)0x0000FFFFË

	)

3857 
	#DMA2D_NLR_PL
 ((
uöt32_t
)0x3FFF0000Ë

	)

3861 
	#DMA2D_LWR_LW
 ((
uöt32_t
)0x0000FFFFË

	)

3865 
	#DMA2D_AMTCR_EN
 ((
uöt32_t
)0x00000001Ë

	)

3866 
	#DMA2D_AMTCR_DT
 ((
uöt32_t
)0x0000FF00Ë

	)

3881 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3882 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3883 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3884 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3885 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3886 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3887 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3888 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3889 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3890 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3891 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3892 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3893 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3894 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3895 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3896 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3897 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3898 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3899 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3900 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3903 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3904 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3905 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3906 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3907 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3908 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3909 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3910 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3911 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3912 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3913 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3914 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3915 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3916 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3917 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3918 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3919 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3920 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3921 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3922 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3925 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3926 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3927 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3928 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3929 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3930 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3931 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3932 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3933 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3934 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3935 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3936 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3937 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3938 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3939 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3940 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3941 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3942 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3943 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3944 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3947 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3948 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3949 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3950 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3951 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3952 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3953 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3954 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3955 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3956 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3957 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3958 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3959 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3960 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3961 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3962 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3963 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3964 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3965 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3966 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3969 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

3970 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

3971 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

3972 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

3973 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

3974 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

3975 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

3976 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

3977 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

3978 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

3979 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

3980 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

3981 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

3982 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

3983 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

3984 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

3985 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

3986 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

3987 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

3988 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

3991 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

3992 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

3993 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

3994 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

3995 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

3996 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

3997 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

3998 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

3999 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

4000 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

4001 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

4002 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

4003 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

4004 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

4005 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

4006 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

4007 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

4008 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

4009 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

4010 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

4018 
	#FLASH_ACR_LATENCY
 ((
uöt32_t
)0x0000000F)

	)

4019 
	#FLASH_ACR_LATENCY_0WS
 ((
uöt32_t
)0x00000000)

	)

4020 
	#FLASH_ACR_LATENCY_1WS
 ((
uöt32_t
)0x00000001)

	)

4021 
	#FLASH_ACR_LATENCY_2WS
 ((
uöt32_t
)0x00000002)

	)

4022 
	#FLASH_ACR_LATENCY_3WS
 ((
uöt32_t
)0x00000003)

	)

4023 
	#FLASH_ACR_LATENCY_4WS
 ((
uöt32_t
)0x00000004)

	)

4024 
	#FLASH_ACR_LATENCY_5WS
 ((
uöt32_t
)0x00000005)

	)

4025 
	#FLASH_ACR_LATENCY_6WS
 ((
uöt32_t
)0x00000006)

	)

4026 
	#FLASH_ACR_LATENCY_7WS
 ((
uöt32_t
)0x00000007)

	)

4027 
	#FLASH_ACR_LATENCY_8WS
 ((
uöt32_t
)0x00000008)

	)

4028 
	#FLASH_ACR_LATENCY_9WS
 ((
uöt32_t
)0x00000009)

	)

4029 
	#FLASH_ACR_LATENCY_10WS
 ((
uöt32_t
)0x0000000A)

	)

4030 
	#FLASH_ACR_LATENCY_11WS
 ((
uöt32_t
)0x0000000B)

	)

4031 
	#FLASH_ACR_LATENCY_12WS
 ((
uöt32_t
)0x0000000C)

	)

4032 
	#FLASH_ACR_LATENCY_13WS
 ((
uöt32_t
)0x0000000D)

	)

4033 
	#FLASH_ACR_LATENCY_14WS
 ((
uöt32_t
)0x0000000E)

	)

4034 
	#FLASH_ACR_LATENCY_15WS
 ((
uöt32_t
)0x0000000F)

	)

4036 
	#FLASH_ACR_PRFTEN
 ((
uöt32_t
)0x00000100)

	)

4037 
	#FLASH_ACR_ICEN
 ((
uöt32_t
)0x00000200)

	)

4038 
	#FLASH_ACR_DCEN
 ((
uöt32_t
)0x00000400)

	)

4039 
	#FLASH_ACR_ICRST
 ((
uöt32_t
)0x00000800)

	)

4040 
	#FLASH_ACR_DCRST
 ((
uöt32_t
)0x00001000)

	)

4041 
	#FLASH_ACR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C00)

	)

4042 
	#FLASH_ACR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C03)

	)

4045 
	#FLASH_SR_EOP
 ((
uöt32_t
)0x00000001)

	)

4046 
	#FLASH_SR_SOP
 ((
uöt32_t
)0x00000002)

	)

4047 
	#FLASH_SR_WRPERR
 ((
uöt32_t
)0x00000010)

	)

4048 
	#FLASH_SR_PGAERR
 ((
uöt32_t
)0x00000020)

	)

4049 
	#FLASH_SR_PGPERR
 ((
uöt32_t
)0x00000040)

	)

4050 
	#FLASH_SR_PGSERR
 ((
uöt32_t
)0x00000080)

	)

4051 
	#FLASH_SR_BSY
 ((
uöt32_t
)0x00010000)

	)

4054 
	#FLASH_CR_PG
 ((
uöt32_t
)0x00000001)

	)

4055 
	#FLASH_CR_SER
 ((
uöt32_t
)0x00000002)

	)

4056 
	#FLASH_CR_MER
 ((
uöt32_t
)0x00000004)

	)

4057 
	#FLASH_CR_MER1
 
FLASH_CR_MER


	)

4058 
	#FLASH_CR_SNB
 ((
uöt32_t
)0x000000F8)

	)

4059 
	#FLASH_CR_SNB_0
 ((
uöt32_t
)0x00000008)

	)

4060 
	#FLASH_CR_SNB_1
 ((
uöt32_t
)0x00000010)

	)

4061 
	#FLASH_CR_SNB_2
 ((
uöt32_t
)0x00000020)

	)

4062 
	#FLASH_CR_SNB_3
 ((
uöt32_t
)0x00000040)

	)

4063 
	#FLASH_CR_SNB_4
 ((
uöt32_t
)0x00000040)

	)

4064 
	#FLASH_CR_PSIZE
 ((
uöt32_t
)0x00000300)

	)

4065 
	#FLASH_CR_PSIZE_0
 ((
uöt32_t
)0x00000100)

	)

4066 
	#FLASH_CR_PSIZE_1
 ((
uöt32_t
)0x00000200)

	)

4067 
	#FLASH_CR_MER2
 ((
uöt32_t
)0x00008000)

	)

4068 
	#FLASH_CR_STRT
 ((
uöt32_t
)0x00010000)

	)

4069 
	#FLASH_CR_EOPIE
 ((
uöt32_t
)0x01000000)

	)

4070 
	#FLASH_CR_LOCK
 ((
uöt32_t
)0x80000000)

	)

4073 
	#FLASH_OPTCR_OPTLOCK
 ((
uöt32_t
)0x00000001)

	)

4074 
	#FLASH_OPTCR_OPTSTRT
 ((
uöt32_t
)0x00000002)

	)

4075 
	#FLASH_OPTCR_BOR_LEV_0
 ((
uöt32_t
)0x00000004)

	)

4076 
	#FLASH_OPTCR_BOR_LEV_1
 ((
uöt32_t
)0x00000008)

	)

4077 
	#FLASH_OPTCR_BOR_LEV
 ((
uöt32_t
)0x0000000C)

	)

4078 
	#FLASH_OPTCR_BFB2
 ((
uöt32_t
)0x00000010)

	)

4080 
	#FLASH_OPTCR_WDG_SW
 ((
uöt32_t
)0x00000020)

	)

4081 
	#FLASH_OPTCR_nRST_STOP
 ((
uöt32_t
)0x00000040)

	)

4082 
	#FLASH_OPTCR_nRST_STDBY
 ((
uöt32_t
)0x00000080)

	)

4083 
	#FLASH_OPTCR_RDP
 ((
uöt32_t
)0x0000FF00)

	)

4084 
	#FLASH_OPTCR_RDP_0
 ((
uöt32_t
)0x00000100)

	)

4085 
	#FLASH_OPTCR_RDP_1
 ((
uöt32_t
)0x00000200)

	)

4086 
	#FLASH_OPTCR_RDP_2
 ((
uöt32_t
)0x00000400)

	)

4087 
	#FLASH_OPTCR_RDP_3
 ((
uöt32_t
)0x00000800)

	)

4088 
	#FLASH_OPTCR_RDP_4
 ((
uöt32_t
)0x00001000)

	)

4089 
	#FLASH_OPTCR_RDP_5
 ((
uöt32_t
)0x00002000)

	)

4090 
	#FLASH_OPTCR_RDP_6
 ((
uöt32_t
)0x00004000)

	)

4091 
	#FLASH_OPTCR_RDP_7
 ((
uöt32_t
)0x00008000)

	)

4092 
	#FLASH_OPTCR_nWRP
 ((
uöt32_t
)0x0FFF0000)

	)

4093 
	#FLASH_OPTCR_nWRP_0
 ((
uöt32_t
)0x00010000)

	)

4094 
	#FLASH_OPTCR_nWRP_1
 ((
uöt32_t
)0x00020000)

	)

4095 
	#FLASH_OPTCR_nWRP_2
 ((
uöt32_t
)0x00040000)

	)

4096 
	#FLASH_OPTCR_nWRP_3
 ((
uöt32_t
)0x00080000)

	)

4097 
	#FLASH_OPTCR_nWRP_4
 ((
uöt32_t
)0x00100000)

	)

4098 
	#FLASH_OPTCR_nWRP_5
 ((
uöt32_t
)0x00200000)

	)

4099 
	#FLASH_OPTCR_nWRP_6
 ((
uöt32_t
)0x00400000)

	)

4100 
	#FLASH_OPTCR_nWRP_7
 ((
uöt32_t
)0x00800000)

	)

4101 
	#FLASH_OPTCR_nWRP_8
 ((
uöt32_t
)0x01000000)

	)

4102 
	#FLASH_OPTCR_nWRP_9
 ((
uöt32_t
)0x02000000)

	)

4103 
	#FLASH_OPTCR_nWRP_10
 ((
uöt32_t
)0x04000000)

	)

4104 
	#FLASH_OPTCR_nWRP_11
 ((
uöt32_t
)0x08000000)

	)

4106 
	#FLASH_OPTCR_DB1M
 ((
uöt32_t
)0x40000000)

	)

4107 
	#FLASH_OPTCR_SPRMOD
 ((
uöt32_t
)0x80000000)

	)

4110 
	#FLASH_OPTCR1_nWRP
 ((
uöt32_t
)0x0FFF0000)

	)

4111 
	#FLASH_OPTCR1_nWRP_0
 ((
uöt32_t
)0x00010000)

	)

4112 
	#FLASH_OPTCR1_nWRP_1
 ((
uöt32_t
)0x00020000)

	)

4113 
	#FLASH_OPTCR1_nWRP_2
 ((
uöt32_t
)0x00040000)

	)

4114 
	#FLASH_OPTCR1_nWRP_3
 ((
uöt32_t
)0x00080000)

	)

4115 
	#FLASH_OPTCR1_nWRP_4
 ((
uöt32_t
)0x00100000)

	)

4116 
	#FLASH_OPTCR1_nWRP_5
 ((
uöt32_t
)0x00200000)

	)

4117 
	#FLASH_OPTCR1_nWRP_6
 ((
uöt32_t
)0x00400000)

	)

4118 
	#FLASH_OPTCR1_nWRP_7
 ((
uöt32_t
)0x00800000)

	)

4119 
	#FLASH_OPTCR1_nWRP_8
 ((
uöt32_t
)0x01000000)

	)

4120 
	#FLASH_OPTCR1_nWRP_9
 ((
uöt32_t
)0x02000000)

	)

4121 
	#FLASH_OPTCR1_nWRP_10
 ((
uöt32_t
)0x04000000)

	)

4122 
	#FLASH_OPTCR1_nWRP_11
 ((
uöt32_t
)0x08000000)

	)

4124 #i‡
deföed
 (
STM32F40_41xxx
)

4131 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4132 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4134 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4135 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4136 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4138 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4139 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4140 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4142 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4143 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4144 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4145 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4146 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4147 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4148 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4149 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4150 
	#FSMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4151 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4154 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4155 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4157 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4158 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4159 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4161 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4162 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4163 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4165 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4166 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4167 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4168 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4169 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4170 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4171 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4172 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4173 
	#FSMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4174 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4177 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4178 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4180 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4181 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4182 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4184 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4185 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4186 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4188 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4189 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4190 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4191 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4192 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4193 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4194 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4195 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4196 
	#FSMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4197 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4200 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4201 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4203 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4204 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4205 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4207 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4208 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4209 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4211 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4212 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4213 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4214 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4215 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4216 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4217 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4218 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4219 
	#FSMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4220 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4223 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4224 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4225 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4226 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4227 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4229 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4230 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4231 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4232 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4233 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4235 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4236 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4237 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4238 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4239 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4241 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4242 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4243 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4244 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4245 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4247 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4248 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4249 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4250 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4251 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4253 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4254 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4255 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4256 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4257 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4259 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4260 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4261 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4264 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4265 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4266 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4267 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4268 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4270 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4271 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4272 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4273 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4274 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4276 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4277 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4278 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4279 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4280 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4282 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4283 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4284 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4285 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4286 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4288 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4289 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4290 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4291 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4292 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4294 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4295 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4296 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4297 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4298 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4300 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4301 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4302 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4305 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4306 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4307 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4308 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4309 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4311 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4312 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4313 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4314 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4315 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4317 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4318 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4319 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4320 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4321 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4323 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4324 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4325 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4326 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4327 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4329 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4330 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4331 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4332 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4333 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4335 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4336 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4337 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4338 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4339 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4341 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4342 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4343 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4346 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4347 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4348 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4349 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4350 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4352 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4353 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4354 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4355 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4356 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4358 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4359 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4360 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4361 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4362 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4364 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4365 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4366 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4367 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4368 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4370 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4371 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4372 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4373 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4374 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4376 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4377 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4378 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4379 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4380 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4382 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4383 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4384 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4387 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4388 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4389 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4390 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4391 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4393 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4394 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4395 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4396 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4397 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4399 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4400 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4401 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4402 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4403 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4405 
	#FSMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4406 
	#FSMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4407 
	#FSMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4408 
	#FSMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4409 
	#FSMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4411 
	#FSMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4412 
	#FSMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4413 
	#FSMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4414 
	#FSMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4415 
	#FSMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4417 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4418 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4419 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4422 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4423 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4424 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4425 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4426 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4428 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4429 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4430 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4431 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4432 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4434 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4435 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4436 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4437 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4438 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4440 
	#FSMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4441 
	#FSMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4442 
	#FSMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4443 
	#FSMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4444 
	#FSMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4446 
	#FSMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4447 
	#FSMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4448 
	#FSMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4449 
	#FSMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4450 
	#FSMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4452 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4453 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4454 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4457 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4458 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4459 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4460 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4461 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4463 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4464 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4465 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4466 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4467 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4469 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4470 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4471 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4472 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4473 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4475 
	#FSMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4476 
	#FSMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4477 
	#FSMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4478 
	#FSMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4479 
	#FSMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4481 
	#FSMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4482 
	#FSMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4483 
	#FSMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4484 
	#FSMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4485 
	#FSMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4487 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4488 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4489 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4492 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4493 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4494 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4495 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4496 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4498 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4499 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4500 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4501 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4502 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4504 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4505 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4506 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4507 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4508 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4510 
	#FSMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4511 
	#FSMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4512 
	#FSMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4513 
	#FSMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4514 
	#FSMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4516 
	#FSMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4517 
	#FSMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4518 
	#FSMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4519 
	#FSMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4520 
	#FSMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4522 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4523 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4524 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4527 
	#FSMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4528 
	#FSMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4529 
	#FSMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4531 
	#FSMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4532 
	#FSMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4533 
	#FSMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4535 
	#FSMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4537 
	#FSMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4538 
	#FSMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4539 
	#FSMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4540 
	#FSMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4541 
	#FSMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4543 
	#FSMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4544 
	#FSMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4545 
	#FSMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4546 
	#FSMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4547 
	#FSMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4549 
	#FSMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4550 
	#FSMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4551 
	#FSMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4552 
	#FSMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4555 
	#FSMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4556 
	#FSMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4557 
	#FSMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4559 
	#FSMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4560 
	#FSMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4561 
	#FSMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4563 
	#FSMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4565 
	#FSMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4566 
	#FSMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4567 
	#FSMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4568 
	#FSMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4569 
	#FSMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4571 
	#FSMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4572 
	#FSMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4573 
	#FSMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4574 
	#FSMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4575 
	#FSMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4577 
	#FSMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4578 
	#FSMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4579 
	#FSMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4580 
	#FSMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4583 
	#FSMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4584 
	#FSMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4585 
	#FSMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4587 
	#FSMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4588 
	#FSMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4589 
	#FSMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4591 
	#FSMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4593 
	#FSMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4594 
	#FSMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4595 
	#FSMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4596 
	#FSMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4597 
	#FSMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4599 
	#FSMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4600 
	#FSMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4601 
	#FSMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4602 
	#FSMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4603 
	#FSMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4605 
	#FSMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4606 
	#FSMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4607 
	#FSMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4608 
	#FSMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4611 
	#FSMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

4612 
	#FSMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

4613 
	#FSMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

4614 
	#FSMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

4615 
	#FSMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

4616 
	#FSMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

4617 
	#FSMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4620 
	#FSMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

4621 
	#FSMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

4622 
	#FSMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

4623 
	#FSMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

4624 
	#FSMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

4625 
	#FSMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

4626 
	#FSMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4629 
	#FSMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

4630 
	#FSMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

4631 
	#FSMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

4632 
	#FSMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

4633 
	#FSMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

4634 
	#FSMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

4635 
	#FSMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4638 
	#FSMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

4639 
	#FSMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4640 
	#FSMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4641 
	#FSMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4642 
	#FSMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4643 
	#FSMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4644 
	#FSMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4645 
	#FSMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4646 
	#FSMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4648 
	#FSMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4649 
	#FSMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4650 
	#FSMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4651 
	#FSMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4652 
	#FSMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4653 
	#FSMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4654 
	#FSMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4655 
	#FSMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4656 
	#FSMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4658 
	#FSMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4659 
	#FSMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4660 
	#FSMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4661 
	#FSMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4662 
	#FSMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4663 
	#FSMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4664 
	#FSMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4665 
	#FSMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4666 
	#FSMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4668 
	#FSMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4669 
	#FSMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4670 
	#FSMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4671 
	#FSMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4672 
	#FSMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4673 
	#FSMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4674 
	#FSMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4675 
	#FSMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4676 
	#FSMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4679 
	#FSMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

4680 
	#FSMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4681 
	#FSMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4682 
	#FSMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4683 
	#FSMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4684 
	#FSMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4685 
	#FSMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4686 
	#FSMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4687 
	#FSMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4689 
	#FSMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4690 
	#FSMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4691 
	#FSMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4692 
	#FSMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4693 
	#FSMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4694 
	#FSMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4695 
	#FSMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4696 
	#FSMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4697 
	#FSMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4699 
	#FSMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4700 
	#FSMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4701 
	#FSMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4702 
	#FSMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4703 
	#FSMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4704 
	#FSMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4705 
	#FSMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4706 
	#FSMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4707 
	#FSMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4709 
	#FSMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4710 
	#FSMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4711 
	#FSMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4712 
	#FSMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4713 
	#FSMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4714 
	#FSMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4715 
	#FSMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4716 
	#FSMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4717 
	#FSMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4720 
	#FSMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

4721 
	#FSMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4722 
	#FSMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4723 
	#FSMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4724 
	#FSMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4725 
	#FSMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4726 
	#FSMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4727 
	#FSMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4728 
	#FSMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4730 
	#FSMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4731 
	#FSMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4732 
	#FSMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4733 
	#FSMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4734 
	#FSMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4735 
	#FSMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4736 
	#FSMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4737 
	#FSMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4738 
	#FSMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4740 
	#FSMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4741 
	#FSMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4742 
	#FSMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4743 
	#FSMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4744 
	#FSMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4745 
	#FSMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4746 
	#FSMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4747 
	#FSMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4748 
	#FSMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4750 
	#FSMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4751 
	#FSMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4752 
	#FSMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4753 
	#FSMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4754 
	#FSMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4755 
	#FSMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4756 
	#FSMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4757 
	#FSMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4758 
	#FSMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4761 
	#FSMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

4762 
	#FSMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4763 
	#FSMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4764 
	#FSMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4765 
	#FSMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4766 
	#FSMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4767 
	#FSMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4768 
	#FSMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4769 
	#FSMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4771 
	#FSMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4772 
	#FSMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4773 
	#FSMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4774 
	#FSMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4775 
	#FSMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4776 
	#FSMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4777 
	#FSMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4778 
	#FSMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4779 
	#FSMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4781 
	#FSMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4782 
	#FSMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4783 
	#FSMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4784 
	#FSMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4785 
	#FSMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4786 
	#FSMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4787 
	#FSMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4788 
	#FSMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4789 
	#FSMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4791 
	#FSMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4792 
	#FSMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4793 
	#FSMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4794 
	#FSMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4795 
	#FSMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4796 
	#FSMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4797 
	#FSMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4798 
	#FSMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4799 
	#FSMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4802 
	#FSMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

4803 
	#FSMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4804 
	#FSMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4805 
	#FSMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4806 
	#FSMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4807 
	#FSMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4808 
	#FSMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4809 
	#FSMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4810 
	#FSMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4812 
	#FSMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4813 
	#FSMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4814 
	#FSMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4815 
	#FSMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4816 
	#FSMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4817 
	#FSMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4818 
	#FSMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4819 
	#FSMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4820 
	#FSMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4822 
	#FSMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4823 
	#FSMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4824 
	#FSMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4825 
	#FSMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4826 
	#FSMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4827 
	#FSMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4828 
	#FSMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4829 
	#FSMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4830 
	#FSMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4832 
	#FSMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4833 
	#FSMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4834 
	#FSMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4835 
	#FSMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4836 
	#FSMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4837 
	#FSMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4838 
	#FSMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4839 
	#FSMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4840 
	#FSMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4843 
	#FSMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

4844 
	#FSMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4845 
	#FSMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4846 
	#FSMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4847 
	#FSMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4848 
	#FSMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4849 
	#FSMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4850 
	#FSMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4851 
	#FSMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4853 
	#FSMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4854 
	#FSMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4855 
	#FSMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4856 
	#FSMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4857 
	#FSMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4858 
	#FSMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4859 
	#FSMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4860 
	#FSMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4861 
	#FSMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4863 
	#FSMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4864 
	#FSMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4865 
	#FSMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4866 
	#FSMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4867 
	#FSMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4868 
	#FSMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4869 
	#FSMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4870 
	#FSMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4871 
	#FSMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4873 
	#FSMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4874 
	#FSMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4875 
	#FSMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4876 
	#FSMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4877 
	#FSMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4878 
	#FSMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4879 
	#FSMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4880 
	#FSMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4881 
	#FSMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4884 
	#FSMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

4885 
	#FSMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4886 
	#FSMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4887 
	#FSMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4888 
	#FSMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4889 
	#FSMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4890 
	#FSMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4891 
	#FSMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4892 
	#FSMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4894 
	#FSMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4895 
	#FSMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4896 
	#FSMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4897 
	#FSMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4898 
	#FSMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4899 
	#FSMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4900 
	#FSMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4901 
	#FSMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4902 
	#FSMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4904 
	#FSMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4905 
	#FSMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4906 
	#FSMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4907 
	#FSMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4908 
	#FSMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4909 
	#FSMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4910 
	#FSMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4911 
	#FSMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4912 
	#FSMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4914 
	#FSMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4915 
	#FSMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4916 
	#FSMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4917 
	#FSMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4918 
	#FSMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4919 
	#FSMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4920 
	#FSMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4921 
	#FSMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4922 
	#FSMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4925 
	#FSMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

4928 
	#FSMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

4931 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

4938 
	#FMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4939 
	#FMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4941 
	#FMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4942 
	#FMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4943 
	#FMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4945 
	#FMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4946 
	#FMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4947 
	#FMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4949 
	#FMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4950 
	#FMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4951 
	#FMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4952 
	#FMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4953 
	#FMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4954 
	#FMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4955 
	#FMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4956 
	#FMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4957 
	#FMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4958 
	#FMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4959 
	#FMC_BCR1_CCLKEN
 ((
uöt32_t
)0x00100000Ë

	)

4962 
	#FMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4963 
	#FMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4965 
	#FMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4966 
	#FMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4967 
	#FMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4969 
	#FMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4970 
	#FMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4971 
	#FMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4973 
	#FMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4974 
	#FMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4975 
	#FMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4976 
	#FMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4977 
	#FMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4978 
	#FMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4979 
	#FMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4980 
	#FMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4981 
	#FMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4982 
	#FMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4985 
	#FMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4986 
	#FMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4988 
	#FMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4989 
	#FMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4990 
	#FMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4992 
	#FMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4993 
	#FMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4994 
	#FMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4996 
	#FMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4997 
	#FMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4998 
	#FMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4999 
	#FMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

5000 
	#FMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

5001 
	#FMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

5002 
	#FMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

5003 
	#FMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

5004 
	#FMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

5005 
	#FMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

5008 
	#FMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

5009 
	#FMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

5011 
	#FMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

5012 
	#FMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

5013 
	#FMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

5015 
	#FMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5016 
	#FMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5017 
	#FMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5019 
	#FMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

5020 
	#FMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

5021 
	#FMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

5022 
	#FMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

5023 
	#FMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

5024 
	#FMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

5025 
	#FMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

5026 
	#FMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

5027 
	#FMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

5028 
	#FMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

5031 
	#FMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5032 
	#FMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5033 
	#FMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5034 
	#FMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5035 
	#FMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5037 
	#FMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5038 
	#FMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5039 
	#FMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5040 
	#FMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5041 
	#FMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5043 
	#FMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5044 
	#FMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5045 
	#FMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5046 
	#FMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5047 
	#FMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5048 
	#FMC_BTR1_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5049 
	#FMC_BTR1_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5050 
	#FMC_BTR1_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5051 
	#FMC_BTR1_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5053 
	#FMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5054 
	#FMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5055 
	#FMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5056 
	#FMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5057 
	#FMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5059 
	#FMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5060 
	#FMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5061 
	#FMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5062 
	#FMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5063 
	#FMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5065 
	#FMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5066 
	#FMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5067 
	#FMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5068 
	#FMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5069 
	#FMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5071 
	#FMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5072 
	#FMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5073 
	#FMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5076 
	#FMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5077 
	#FMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5078 
	#FMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5079 
	#FMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5080 
	#FMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5082 
	#FMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5083 
	#FMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5084 
	#FMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5085 
	#FMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5086 
	#FMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5088 
	#FMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5089 
	#FMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5090 
	#FMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5091 
	#FMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5092 
	#FMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5093 
	#FMC_BTR2_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5094 
	#FMC_BTR2_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5095 
	#FMC_BTR2_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5096 
	#FMC_BTR2_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5098 
	#FMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5099 
	#FMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5100 
	#FMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5101 
	#FMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5102 
	#FMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5104 
	#FMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5105 
	#FMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5106 
	#FMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5107 
	#FMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5108 
	#FMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5110 
	#FMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5111 
	#FMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5112 
	#FMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5113 
	#FMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5114 
	#FMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5116 
	#FMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5117 
	#FMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5118 
	#FMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5121 
	#FMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5122 
	#FMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5123 
	#FMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5124 
	#FMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5125 
	#FMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5127 
	#FMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5128 
	#FMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5129 
	#FMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5130 
	#FMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5131 
	#FMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5133 
	#FMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5134 
	#FMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5135 
	#FMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5136 
	#FMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5137 
	#FMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5138 
	#FMC_BTR3_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5139 
	#FMC_BTR3_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5140 
	#FMC_BTR3_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5141 
	#FMC_BTR3_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5143 
	#FMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5144 
	#FMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5145 
	#FMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5146 
	#FMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5147 
	#FMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5149 
	#FMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5150 
	#FMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5151 
	#FMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5152 
	#FMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5153 
	#FMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5155 
	#FMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5156 
	#FMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5157 
	#FMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5158 
	#FMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5159 
	#FMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5161 
	#FMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5162 
	#FMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5163 
	#FMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5166 
	#FMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5167 
	#FMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5168 
	#FMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5169 
	#FMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5170 
	#FMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5172 
	#FMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5173 
	#FMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5174 
	#FMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5175 
	#FMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5176 
	#FMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5178 
	#FMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5179 
	#FMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5180 
	#FMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5181 
	#FMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5182 
	#FMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5183 
	#FMC_BTR4_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5184 
	#FMC_BTR4_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5185 
	#FMC_BTR4_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5186 
	#FMC_BTR4_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5188 
	#FMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5189 
	#FMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5190 
	#FMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5191 
	#FMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5192 
	#FMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5194 
	#FMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5195 
	#FMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5196 
	#FMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5197 
	#FMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5198 
	#FMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5200 
	#FMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5201 
	#FMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5202 
	#FMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5203 
	#FMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5204 
	#FMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5206 
	#FMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5207 
	#FMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5208 
	#FMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5211 
	#FMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5212 
	#FMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5213 
	#FMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5214 
	#FMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5215 
	#FMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5217 
	#FMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5218 
	#FMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5219 
	#FMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5220 
	#FMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5221 
	#FMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5223 
	#FMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5224 
	#FMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5225 
	#FMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5226 
	#FMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5227 
	#FMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5228 
	#FMC_BWTR1_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5229 
	#FMC_BWTR1_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5230 
	#FMC_BWTR1_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5231 
	#FMC_BWTR1_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5233 
	#FMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5234 
	#FMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5235 
	#FMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5236 
	#FMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5237 
	#FMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5239 
	#FMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5240 
	#FMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5241 
	#FMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5242 
	#FMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5243 
	#FMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5245 
	#FMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5246 
	#FMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5247 
	#FMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5250 
	#FMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5251 
	#FMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5252 
	#FMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5253 
	#FMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5254 
	#FMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5256 
	#FMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5257 
	#FMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5258 
	#FMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5259 
	#FMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5260 
	#FMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5262 
	#FMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5263 
	#FMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5264 
	#FMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5265 
	#FMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5266 
	#FMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5267 
	#FMC_BWTR2_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5268 
	#FMC_BWTR2_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5269 
	#FMC_BWTR2_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5270 
	#FMC_BWTR2_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5272 
	#FMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5273 
	#FMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5274 
	#FMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5275 
	#FMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5276 
	#FMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5278 
	#FMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5279 
	#FMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5280 
	#FMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5281 
	#FMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5282 
	#FMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5284 
	#FMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5285 
	#FMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5286 
	#FMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5289 
	#FMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5290 
	#FMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5291 
	#FMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5292 
	#FMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5293 
	#FMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5295 
	#FMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5296 
	#FMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5297 
	#FMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5298 
	#FMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5299 
	#FMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5301 
	#FMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5302 
	#FMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5303 
	#FMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5304 
	#FMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5305 
	#FMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5306 
	#FMC_BWTR3_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5307 
	#FMC_BWTR3_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5308 
	#FMC_BWTR3_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5309 
	#FMC_BWTR3_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5311 
	#FMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5312 
	#FMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5313 
	#FMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5314 
	#FMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5315 
	#FMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5317 
	#FMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5318 
	#FMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5319 
	#FMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5320 
	#FMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5321 
	#FMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5323 
	#FMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5324 
	#FMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5325 
	#FMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5328 
	#FMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5329 
	#FMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5330 
	#FMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5331 
	#FMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5332 
	#FMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5334 
	#FMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5335 
	#FMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5336 
	#FMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5337 
	#FMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5338 
	#FMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5340 
	#FMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5341 
	#FMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5342 
	#FMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5343 
	#FMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5344 
	#FMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5345 
	#FMC_BWTR4_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5346 
	#FMC_BWTR4_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5347 
	#FMC_BWTR4_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5348 
	#FMC_BWTR4_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5350 
	#FMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5351 
	#FMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5352 
	#FMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5353 
	#FMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5354 
	#FMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5356 
	#FMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5357 
	#FMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5358 
	#FMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5359 
	#FMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5360 
	#FMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5362 
	#FMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5363 
	#FMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5364 
	#FMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5367 
	#FMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5368 
	#FMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5369 
	#FMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5371 
	#FMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5372 
	#FMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5373 
	#FMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5375 
	#FMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5377 
	#FMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5378 
	#FMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5379 
	#FMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5380 
	#FMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5381 
	#FMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5383 
	#FMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5384 
	#FMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5385 
	#FMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5386 
	#FMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5387 
	#FMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5389 
	#FMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5390 
	#FMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5391 
	#FMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5392 
	#FMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5395 
	#FMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5396 
	#FMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5397 
	#FMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5399 
	#FMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5400 
	#FMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5401 
	#FMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5403 
	#FMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5405 
	#FMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5406 
	#FMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5407 
	#FMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5408 
	#FMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5409 
	#FMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5411 
	#FMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5412 
	#FMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5413 
	#FMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5414 
	#FMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5415 
	#FMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5417 
	#FMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5418 
	#FMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5419 
	#FMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5420 
	#FMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5423 
	#FMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5424 
	#FMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5425 
	#FMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5427 
	#FMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5428 
	#FMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5429 
	#FMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5431 
	#FMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5433 
	#FMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5434 
	#FMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5435 
	#FMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5436 
	#FMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5437 
	#FMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5439 
	#FMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5440 
	#FMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5441 
	#FMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5442 
	#FMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5443 
	#FMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5445 
	#FMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5446 
	#FMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5447 
	#FMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5448 
	#FMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5451 
	#FMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

5452 
	#FMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

5453 
	#FMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

5454 
	#FMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

5455 
	#FMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

5456 
	#FMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

5457 
	#FMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5460 
	#FMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

5461 
	#FMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

5462 
	#FMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

5463 
	#FMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

5464 
	#FMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

5465 
	#FMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

5466 
	#FMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5469 
	#FMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

5470 
	#FMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

5471 
	#FMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

5472 
	#FMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

5473 
	#FMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

5474 
	#FMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

5475 
	#FMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5478 
	#FMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

5479 
	#FMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5480 
	#FMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5481 
	#FMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5482 
	#FMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5483 
	#FMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5484 
	#FMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5485 
	#FMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5486 
	#FMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5488 
	#FMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5489 
	#FMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5490 
	#FMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5491 
	#FMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5492 
	#FMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5493 
	#FMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5494 
	#FMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5495 
	#FMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5496 
	#FMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5498 
	#FMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5499 
	#FMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5500 
	#FMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5501 
	#FMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5502 
	#FMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5503 
	#FMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5504 
	#FMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5505 
	#FMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5506 
	#FMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5508 
	#FMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5509 
	#FMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5510 
	#FMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5511 
	#FMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5512 
	#FMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5513 
	#FMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5514 
	#FMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5515 
	#FMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5516 
	#FMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5519 
	#FMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

5520 
	#FMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5521 
	#FMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5522 
	#FMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5523 
	#FMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5524 
	#FMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5525 
	#FMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5526 
	#FMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5527 
	#FMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5529 
	#FMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5530 
	#FMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5531 
	#FMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5532 
	#FMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5533 
	#FMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5534 
	#FMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5535 
	#FMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5536 
	#FMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5537 
	#FMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5539 
	#FMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5540 
	#FMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5541 
	#FMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5542 
	#FMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5543 
	#FMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5544 
	#FMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5545 
	#FMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5546 
	#FMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5547 
	#FMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5549 
	#FMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5550 
	#FMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5551 
	#FMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5552 
	#FMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5553 
	#FMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5554 
	#FMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5555 
	#FMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5556 
	#FMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5557 
	#FMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5560 
	#FMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

5561 
	#FMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5562 
	#FMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5563 
	#FMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5564 
	#FMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5565 
	#FMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5566 
	#FMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5567 
	#FMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5568 
	#FMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5570 
	#FMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5571 
	#FMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5572 
	#FMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5573 
	#FMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5574 
	#FMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5575 
	#FMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5576 
	#FMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5577 
	#FMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5578 
	#FMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5580 
	#FMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5581 
	#FMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5582 
	#FMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5583 
	#FMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5584 
	#FMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5585 
	#FMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5586 
	#FMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5587 
	#FMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5588 
	#FMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5590 
	#FMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5591 
	#FMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5592 
	#FMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5593 
	#FMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5594 
	#FMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5595 
	#FMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5596 
	#FMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5597 
	#FMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5598 
	#FMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5601 
	#FMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

5602 
	#FMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5603 
	#FMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5604 
	#FMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5605 
	#FMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5606 
	#FMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5607 
	#FMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5608 
	#FMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5609 
	#FMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5611 
	#FMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5612 
	#FMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5613 
	#FMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5614 
	#FMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5615 
	#FMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5616 
	#FMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5617 
	#FMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5618 
	#FMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5619 
	#FMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5621 
	#FMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5622 
	#FMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5623 
	#FMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5624 
	#FMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5625 
	#FMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5626 
	#FMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5627 
	#FMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5628 
	#FMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5629 
	#FMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5631 
	#FMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5632 
	#FMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5633 
	#FMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5634 
	#FMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5635 
	#FMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5636 
	#FMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5637 
	#FMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5638 
	#FMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5639 
	#FMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5642 
	#FMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

5643 
	#FMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5644 
	#FMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5645 
	#FMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5646 
	#FMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5647 
	#FMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5648 
	#FMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5649 
	#FMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5650 
	#FMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5652 
	#FMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5653 
	#FMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5654 
	#FMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5655 
	#FMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5656 
	#FMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5657 
	#FMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5658 
	#FMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5659 
	#FMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5660 
	#FMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5662 
	#FMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5663 
	#FMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5664 
	#FMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5665 
	#FMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5666 
	#FMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5667 
	#FMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5668 
	#FMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5669 
	#FMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5670 
	#FMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5672 
	#FMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5673 
	#FMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5674 
	#FMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5675 
	#FMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5676 
	#FMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5677 
	#FMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5678 
	#FMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5679 
	#FMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5680 
	#FMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5683 
	#FMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

5684 
	#FMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5685 
	#FMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5686 
	#FMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5687 
	#FMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5688 
	#FMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5689 
	#FMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5690 
	#FMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5691 
	#FMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5693 
	#FMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5694 
	#FMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5695 
	#FMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5696 
	#FMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5697 
	#FMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5698 
	#FMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5699 
	#FMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5700 
	#FMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5701 
	#FMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5703 
	#FMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5704 
	#FMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5705 
	#FMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5706 
	#FMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5707 
	#FMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5708 
	#FMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5709 
	#FMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5710 
	#FMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5711 
	#FMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5713 
	#FMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5714 
	#FMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5715 
	#FMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5716 
	#FMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5717 
	#FMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5718 
	#FMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5719 
	#FMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5720 
	#FMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5721 
	#FMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5724 
	#FMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

5725 
	#FMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5726 
	#FMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5727 
	#FMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5728 
	#FMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5729 
	#FMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5730 
	#FMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5731 
	#FMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5732 
	#FMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5734 
	#FMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5735 
	#FMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5736 
	#FMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5737 
	#FMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5738 
	#FMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5739 
	#FMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5740 
	#FMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5741 
	#FMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5742 
	#FMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5744 
	#FMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5745 
	#FMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5746 
	#FMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5747 
	#FMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5748 
	#FMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5749 
	#FMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5750 
	#FMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5751 
	#FMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5752 
	#FMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5754 
	#FMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5755 
	#FMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5756 
	#FMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5757 
	#FMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5758 
	#FMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5759 
	#FMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5760 
	#FMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5761 
	#FMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5762 
	#FMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5765 
	#FMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5768 
	#FMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5771 
	#FMC_SDCR1_NC
 ((
uöt32_t
)0x00000003Ë

	)

5772 
	#FMC_SDCR1_NC_0
 ((
uöt32_t
)0x00000001Ë

	)

5773 
	#FMC_SDCR1_NC_1
 ((
uöt32_t
)0x00000002Ë

	)

5775 
	#FMC_SDCR1_NR
 ((
uöt32_t
)0x0000000CË

	)

5776 
	#FMC_SDCR1_NR_0
 ((
uöt32_t
)0x00000004Ë

	)

5777 
	#FMC_SDCR1_NR_1
 ((
uöt32_t
)0x00000008Ë

	)

5779 
	#FMC_SDCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5780 
	#FMC_SDCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5781 
	#FMC_SDCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5783 
	#FMC_SDCR1_NB
 ((
uöt32_t
)0x00000040Ë

	)

5785 
	#FMC_SDCR1_CAS
 ((
uöt32_t
)0x00000180Ë

	)

5786 
	#FMC_SDCR1_CAS_0
 ((
uöt32_t
)0x00000080Ë

	)

5787 
	#FMC_SDCR1_CAS_1
 ((
uöt32_t
)0x00000100Ë

	)

5789 
	#FMC_SDCR1_WP
 ((
uöt32_t
)0x00000200Ë

	)

5791 
	#FMC_SDCR1_SDCLK
 ((
uöt32_t
)0x00000C00Ë

	)

5792 
	#FMC_SDCR1_SDCLK_0
 ((
uöt32_t
)0x00000400Ë

	)

5793 
	#FMC_SDCR1_SDCLK_1
 ((
uöt32_t
)0x00000800Ë

	)

5795 
	#FMC_SDCR1_RBURST
 ((
uöt32_t
)0x00001000Ë

	)

5797 
	#FMC_SDCR1_RPIPE
 ((
uöt32_t
)0x00006000Ë

	)

5798 
	#FMC_SDCR1_RPIPE_0
 ((
uöt32_t
)0x00002000Ë

	)

5799 
	#FMC_SDCR1_RPIPE_1
 ((
uöt32_t
)0x00004000Ë

	)

5802 
	#FMC_SDCR2_NC
 ((
uöt32_t
)0x00000003Ë

	)

5803 
	#FMC_SDCR2_NC_0
 ((
uöt32_t
)0x00000001Ë

	)

5804 
	#FMC_SDCR2_NC_1
 ((
uöt32_t
)0x00000002Ë

	)

5806 
	#FMC_SDCR2_NR
 ((
uöt32_t
)0x0000000CË

	)

5807 
	#FMC_SDCR2_NR_0
 ((
uöt32_t
)0x00000004Ë

	)

5808 
	#FMC_SDCR2_NR_1
 ((
uöt32_t
)0x00000008Ë

	)

5810 
	#FMC_SDCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5811 
	#FMC_SDCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5812 
	#FMC_SDCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5814 
	#FMC_SDCR2_NB
 ((
uöt32_t
)0x00000040Ë

	)

5816 
	#FMC_SDCR2_CAS
 ((
uöt32_t
)0x00000180Ë

	)

5817 
	#FMC_SDCR2_CAS_0
 ((
uöt32_t
)0x00000080Ë

	)

5818 
	#FMC_SDCR2_CAS_1
 ((
uöt32_t
)0x00000100Ë

	)

5820 
	#FMC_SDCR2_WP
 ((
uöt32_t
)0x00000200Ë

	)

5822 
	#FMC_SDCR2_SDCLK
 ((
uöt32_t
)0x00000C00Ë

	)

5823 
	#FMC_SDCR2_SDCLK_0
 ((
uöt32_t
)0x00000400Ë

	)

5824 
	#FMC_SDCR2_SDCLK_1
 ((
uöt32_t
)0x00000800Ë

	)

5826 
	#FMC_SDCR2_RBURST
 ((
uöt32_t
)0x00001000Ë

	)

5828 
	#FMC_SDCR2_RPIPE
 ((
uöt32_t
)0x00006000Ë

	)

5829 
	#FMC_SDCR2_RPIPE_0
 ((
uöt32_t
)0x00002000Ë

	)

5830 
	#FMC_SDCR2_RPIPE_1
 ((
uöt32_t
)0x00004000Ë

	)

5833 
	#FMC_SDTR1_TMRD
 ((
uöt32_t
)0x0000000FË

	)

5834 
	#FMC_SDTR1_TMRD_0
 ((
uöt32_t
)0x00000001Ë

	)

5835 
	#FMC_SDTR1_TMRD_1
 ((
uöt32_t
)0x00000002Ë

	)

5836 
	#FMC_SDTR1_TMRD_2
 ((
uöt32_t
)0x00000004Ë

	)

5837 
	#FMC_SDTR1_TMRD_3
 ((
uöt32_t
)0x00000008Ë

	)

5839 
	#FMC_SDTR1_TXSR
 ((
uöt32_t
)0x000000F0Ë

	)

5840 
	#FMC_SDTR1_TXSR_0
 ((
uöt32_t
)0x00000010Ë

	)

5841 
	#FMC_SDTR1_TXSR_1
 ((
uöt32_t
)0x00000020Ë

	)

5842 
	#FMC_SDTR1_TXSR_2
 ((
uöt32_t
)0x00000040Ë

	)

5843 
	#FMC_SDTR1_TXSR_3
 ((
uöt32_t
)0x00000080Ë

	)

5845 
	#FMC_SDTR1_TRAS
 ((
uöt32_t
)0x00000F00Ë

	)

5846 
	#FMC_SDTR1_TRAS_0
 ((
uöt32_t
)0x00000100Ë

	)

5847 
	#FMC_SDTR1_TRAS_1
 ((
uöt32_t
)0x00000200Ë

	)

5848 
	#FMC_SDTR1_TRAS_2
 ((
uöt32_t
)0x00000400Ë

	)

5849 
	#FMC_SDTR1_TRAS_3
 ((
uöt32_t
)0x00000800Ë

	)

5851 
	#FMC_SDTR1_TRC
 ((
uöt32_t
)0x0000F000Ë

	)

5852 
	#FMC_SDTR1_TRC_0
 ((
uöt32_t
)0x00001000Ë

	)

5853 
	#FMC_SDTR1_TRC_1
 ((
uöt32_t
)0x00002000Ë

	)

5854 
	#FMC_SDTR1_TRC_2
 ((
uöt32_t
)0x00004000Ë

	)

5856 
	#FMC_SDTR1_TWR
 ((
uöt32_t
)0x000F0000Ë

	)

5857 
	#FMC_SDTR1_TWR_0
 ((
uöt32_t
)0x00010000Ë

	)

5858 
	#FMC_SDTR1_TWR_1
 ((
uöt32_t
)0x00020000Ë

	)

5859 
	#FMC_SDTR1_TWR_2
 ((
uöt32_t
)0x00040000Ë

	)

5861 
	#FMC_SDTR1_TRP
 ((
uöt32_t
)0x00F00000Ë

	)

5862 
	#FMC_SDTR1_TRP_0
 ((
uöt32_t
)0x00100000Ë

	)

5863 
	#FMC_SDTR1_TRP_1
 ((
uöt32_t
)0x00200000Ë

	)

5864 
	#FMC_SDTR1_TRP_2
 ((
uöt32_t
)0x00400000Ë

	)

5866 
	#FMC_SDTR1_TRCD
 ((
uöt32_t
)0x0F000000Ë

	)

5867 
	#FMC_SDTR1_TRCD_0
 ((
uöt32_t
)0x01000000Ë

	)

5868 
	#FMC_SDTR1_TRCD_1
 ((
uöt32_t
)0x02000000Ë

	)

5869 
	#FMC_SDTR1_TRCD_2
 ((
uöt32_t
)0x04000000Ë

	)

5872 
	#FMC_SDTR2_TMRD
 ((
uöt32_t
)0x0000000FË

	)

5873 
	#FMC_SDTR2_TMRD_0
 ((
uöt32_t
)0x00000001Ë

	)

5874 
	#FMC_SDTR2_TMRD_1
 ((
uöt32_t
)0x00000002Ë

	)

5875 
	#FMC_SDTR2_TMRD_2
 ((
uöt32_t
)0x00000004Ë

	)

5876 
	#FMC_SDTR2_TMRD_3
 ((
uöt32_t
)0x00000008Ë

	)

5878 
	#FMC_SDTR2_TXSR
 ((
uöt32_t
)0x000000F0Ë

	)

5879 
	#FMC_SDTR2_TXSR_0
 ((
uöt32_t
)0x00000010Ë

	)

5880 
	#FMC_SDTR2_TXSR_1
 ((
uöt32_t
)0x00000020Ë

	)

5881 
	#FMC_SDTR2_TXSR_2
 ((
uöt32_t
)0x00000040Ë

	)

5882 
	#FMC_SDTR2_TXSR_3
 ((
uöt32_t
)0x00000080Ë

	)

5884 
	#FMC_SDTR2_TRAS
 ((
uöt32_t
)0x00000F00Ë

	)

5885 
	#FMC_SDTR2_TRAS_0
 ((
uöt32_t
)0x00000100Ë

	)

5886 
	#FMC_SDTR2_TRAS_1
 ((
uöt32_t
)0x00000200Ë

	)

5887 
	#FMC_SDTR2_TRAS_2
 ((
uöt32_t
)0x00000400Ë

	)

5888 
	#FMC_SDTR2_TRAS_3
 ((
uöt32_t
)0x00000800Ë

	)

5890 
	#FMC_SDTR2_TRC
 ((
uöt32_t
)0x0000F000Ë

	)

5891 
	#FMC_SDTR2_TRC_0
 ((
uöt32_t
)0x00001000Ë

	)

5892 
	#FMC_SDTR2_TRC_1
 ((
uöt32_t
)0x00002000Ë

	)

5893 
	#FMC_SDTR2_TRC_2
 ((
uöt32_t
)0x00004000Ë

	)

5895 
	#FMC_SDTR2_TWR
 ((
uöt32_t
)0x000F0000Ë

	)

5896 
	#FMC_SDTR2_TWR_0
 ((
uöt32_t
)0x00010000Ë

	)

5897 
	#FMC_SDTR2_TWR_1
 ((
uöt32_t
)0x00020000Ë

	)

5898 
	#FMC_SDTR2_TWR_2
 ((
uöt32_t
)0x00040000Ë

	)

5900 
	#FMC_SDTR2_TRP
 ((
uöt32_t
)0x00F00000Ë

	)

5901 
	#FMC_SDTR2_TRP_0
 ((
uöt32_t
)0x00100000Ë

	)

5902 
	#FMC_SDTR2_TRP_1
 ((
uöt32_t
)0x00200000Ë

	)

5903 
	#FMC_SDTR2_TRP_2
 ((
uöt32_t
)0x00400000Ë

	)

5905 
	#FMC_SDTR2_TRCD
 ((
uöt32_t
)0x0F000000Ë

	)

5906 
	#FMC_SDTR2_TRCD_0
 ((
uöt32_t
)0x01000000Ë

	)

5907 
	#FMC_SDTR2_TRCD_1
 ((
uöt32_t
)0x02000000Ë

	)

5908 
	#FMC_SDTR2_TRCD_2
 ((
uöt32_t
)0x04000000Ë

	)

5911 
	#FMC_SDCMR_MODE
 ((
uöt32_t
)0x00000007Ë

	)

5912 
	#FMC_SDCMR_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

5913 
	#FMC_SDCMR_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

5914 
	#FMC_SDCMR_MODE_2
 ((
uöt32_t
)0x00000003Ë

	)

5916 
	#FMC_SDCMR_CTB2
 ((
uöt32_t
)0x00000008Ë

	)

5918 
	#FMC_SDCMR_CTB1
 ((
uöt32_t
)0x00000010Ë

	)

5920 
	#FMC_SDCMR_NRFS
 ((
uöt32_t
)0x000001E0Ë

	)

5921 
	#FMC_SDCMR_NRFS_0
 ((
uöt32_t
)0x00000020Ë

	)

5922 
	#FMC_SDCMR_NRFS_1
 ((
uöt32_t
)0x00000040Ë

	)

5923 
	#FMC_SDCMR_NRFS_2
 ((
uöt32_t
)0x00000080Ë

	)

5924 
	#FMC_SDCMR_NRFS_3
 ((
uöt32_t
)0x00000100Ë

	)

5926 
	#FMC_SDCMR_MRD
 ((
uöt32_t
)0x003FFE00Ë

	)

5929 
	#FMC_SDRTR_CRE
 ((
uöt32_t
)0x00000001Ë

	)

5931 
	#FMC_SDRTR_COUNT
 ((
uöt32_t
)0x00003FFEË

	)

5933 
	#FMC_SDRTR_REIE
 ((
uöt32_t
)0x00004000Ë

	)

5936 
	#FMC_SDSR_RE
 ((
uöt32_t
)0x00000001Ë

	)

5938 
	#FMC_SDSR_MODES1
 ((
uöt32_t
)0x00000006Ë

	)

5939 
	#FMC_SDSR_MODES1_0
 ((
uöt32_t
)0x00000002Ë

	)

5940 
	#FMC_SDSR_MODES1_1
 ((
uöt32_t
)0x00000004Ë

	)

5942 
	#FMC_SDSR_MODES2
 ((
uöt32_t
)0x00000018Ë

	)

5943 
	#FMC_SDSR_MODES2_0
 ((
uöt32_t
)0x00000008Ë

	)

5944 
	#FMC_SDSR_MODES2_1
 ((
uöt32_t
)0x00000010Ë

	)

5946 
	#FMC_SDSR_BUSY
 ((
uöt32_t
)0x00000020Ë

	)

5956 
	#GPIO_MODER_MODER0
 ((
uöt32_t
)0x00000003)

	)

5957 
	#GPIO_MODER_MODER0_0
 ((
uöt32_t
)0x00000001)

	)

5958 
	#GPIO_MODER_MODER0_1
 ((
uöt32_t
)0x00000002)

	)

5960 
	#GPIO_MODER_MODER1
 ((
uöt32_t
)0x0000000C)

	)

5961 
	#GPIO_MODER_MODER1_0
 ((
uöt32_t
)0x00000004)

	)

5962 
	#GPIO_MODER_MODER1_1
 ((
uöt32_t
)0x00000008)

	)

5964 
	#GPIO_MODER_MODER2
 ((
uöt32_t
)0x00000030)

	)

5965 
	#GPIO_MODER_MODER2_0
 ((
uöt32_t
)0x00000010)

	)

5966 
	#GPIO_MODER_MODER2_1
 ((
uöt32_t
)0x00000020)

	)

5968 
	#GPIO_MODER_MODER3
 ((
uöt32_t
)0x000000C0)

	)

5969 
	#GPIO_MODER_MODER3_0
 ((
uöt32_t
)0x00000040)

	)

5970 
	#GPIO_MODER_MODER3_1
 ((
uöt32_t
)0x00000080)

	)

5972 
	#GPIO_MODER_MODER4
 ((
uöt32_t
)0x00000300)

	)

5973 
	#GPIO_MODER_MODER4_0
 ((
uöt32_t
)0x00000100)

	)

5974 
	#GPIO_MODER_MODER4_1
 ((
uöt32_t
)0x00000200)

	)

5976 
	#GPIO_MODER_MODER5
 ((
uöt32_t
)0x00000C00)

	)

5977 
	#GPIO_MODER_MODER5_0
 ((
uöt32_t
)0x00000400)

	)

5978 
	#GPIO_MODER_MODER5_1
 ((
uöt32_t
)0x00000800)

	)

5980 
	#GPIO_MODER_MODER6
 ((
uöt32_t
)0x00003000)

	)

5981 
	#GPIO_MODER_MODER6_0
 ((
uöt32_t
)0x00001000)

	)

5982 
	#GPIO_MODER_MODER6_1
 ((
uöt32_t
)0x00002000)

	)

5984 
	#GPIO_MODER_MODER7
 ((
uöt32_t
)0x0000C000)

	)

5985 
	#GPIO_MODER_MODER7_0
 ((
uöt32_t
)0x00004000)

	)

5986 
	#GPIO_MODER_MODER7_1
 ((
uöt32_t
)0x00008000)

	)

5988 
	#GPIO_MODER_MODER8
 ((
uöt32_t
)0x00030000)

	)

5989 
	#GPIO_MODER_MODER8_0
 ((
uöt32_t
)0x00010000)

	)

5990 
	#GPIO_MODER_MODER8_1
 ((
uöt32_t
)0x00020000)

	)

5992 
	#GPIO_MODER_MODER9
 ((
uöt32_t
)0x000C0000)

	)

5993 
	#GPIO_MODER_MODER9_0
 ((
uöt32_t
)0x00040000)

	)

5994 
	#GPIO_MODER_MODER9_1
 ((
uöt32_t
)0x00080000)

	)

5996 
	#GPIO_MODER_MODER10
 ((
uöt32_t
)0x00300000)

	)

5997 
	#GPIO_MODER_MODER10_0
 ((
uöt32_t
)0x00100000)

	)

5998 
	#GPIO_MODER_MODER10_1
 ((
uöt32_t
)0x00200000)

	)

6000 
	#GPIO_MODER_MODER11
 ((
uöt32_t
)0x00C00000)

	)

6001 
	#GPIO_MODER_MODER11_0
 ((
uöt32_t
)0x00400000)

	)

6002 
	#GPIO_MODER_MODER11_1
 ((
uöt32_t
)0x00800000)

	)

6004 
	#GPIO_MODER_MODER12
 ((
uöt32_t
)0x03000000)

	)

6005 
	#GPIO_MODER_MODER12_0
 ((
uöt32_t
)0x01000000)

	)

6006 
	#GPIO_MODER_MODER12_1
 ((
uöt32_t
)0x02000000)

	)

6008 
	#GPIO_MODER_MODER13
 ((
uöt32_t
)0x0C000000)

	)

6009 
	#GPIO_MODER_MODER13_0
 ((
uöt32_t
)0x04000000)

	)

6010 
	#GPIO_MODER_MODER13_1
 ((
uöt32_t
)0x08000000)

	)

6012 
	#GPIO_MODER_MODER14
 ((
uöt32_t
)0x30000000)

	)

6013 
	#GPIO_MODER_MODER14_0
 ((
uöt32_t
)0x10000000)

	)

6014 
	#GPIO_MODER_MODER14_1
 ((
uöt32_t
)0x20000000)

	)

6016 
	#GPIO_MODER_MODER15
 ((
uöt32_t
)0xC0000000)

	)

6017 
	#GPIO_MODER_MODER15_0
 ((
uöt32_t
)0x40000000)

	)

6018 
	#GPIO_MODER_MODER15_1
 ((
uöt32_t
)0x80000000)

	)

6021 
	#GPIO_OTYPER_OT_0
 ((
uöt32_t
)0x00000001)

	)

6022 
	#GPIO_OTYPER_OT_1
 ((
uöt32_t
)0x00000002)

	)

6023 
	#GPIO_OTYPER_OT_2
 ((
uöt32_t
)0x00000004)

	)

6024 
	#GPIO_OTYPER_OT_3
 ((
uöt32_t
)0x00000008)

	)

6025 
	#GPIO_OTYPER_OT_4
 ((
uöt32_t
)0x00000010)

	)

6026 
	#GPIO_OTYPER_OT_5
 ((
uöt32_t
)0x00000020)

	)

6027 
	#GPIO_OTYPER_OT_6
 ((
uöt32_t
)0x00000040)

	)

6028 
	#GPIO_OTYPER_OT_7
 ((
uöt32_t
)0x00000080)

	)

6029 
	#GPIO_OTYPER_OT_8
 ((
uöt32_t
)0x00000100)

	)

6030 
	#GPIO_OTYPER_OT_9
 ((
uöt32_t
)0x00000200)

	)

6031 
	#GPIO_OTYPER_OT_10
 ((
uöt32_t
)0x00000400)

	)

6032 
	#GPIO_OTYPER_OT_11
 ((
uöt32_t
)0x00000800)

	)

6033 
	#GPIO_OTYPER_OT_12
 ((
uöt32_t
)0x00001000)

	)

6034 
	#GPIO_OTYPER_OT_13
 ((
uöt32_t
)0x00002000)

	)

6035 
	#GPIO_OTYPER_OT_14
 ((
uöt32_t
)0x00004000)

	)

6036 
	#GPIO_OTYPER_OT_15
 ((
uöt32_t
)0x00008000)

	)

6039 
	#GPIO_OSPEEDER_OSPEEDR0
 ((
uöt32_t
)0x00000003)

	)

6040 
	#GPIO_OSPEEDER_OSPEEDR0_0
 ((
uöt32_t
)0x00000001)

	)

6041 
	#GPIO_OSPEEDER_OSPEEDR0_1
 ((
uöt32_t
)0x00000002)

	)

6043 
	#GPIO_OSPEEDER_OSPEEDR1
 ((
uöt32_t
)0x0000000C)

	)

6044 
	#GPIO_OSPEEDER_OSPEEDR1_0
 ((
uöt32_t
)0x00000004)

	)

6045 
	#GPIO_OSPEEDER_OSPEEDR1_1
 ((
uöt32_t
)0x00000008)

	)

6047 
	#GPIO_OSPEEDER_OSPEEDR2
 ((
uöt32_t
)0x00000030)

	)

6048 
	#GPIO_OSPEEDER_OSPEEDR2_0
 ((
uöt32_t
)0x00000010)

	)

6049 
	#GPIO_OSPEEDER_OSPEEDR2_1
 ((
uöt32_t
)0x00000020)

	)

6051 
	#GPIO_OSPEEDER_OSPEEDR3
 ((
uöt32_t
)0x000000C0)

	)

6052 
	#GPIO_OSPEEDER_OSPEEDR3_0
 ((
uöt32_t
)0x00000040)

	)

6053 
	#GPIO_OSPEEDER_OSPEEDR3_1
 ((
uöt32_t
)0x00000080)

	)

6055 
	#GPIO_OSPEEDER_OSPEEDR4
 ((
uöt32_t
)0x00000300)

	)

6056 
	#GPIO_OSPEEDER_OSPEEDR4_0
 ((
uöt32_t
)0x00000100)

	)

6057 
	#GPIO_OSPEEDER_OSPEEDR4_1
 ((
uöt32_t
)0x00000200)

	)

6059 
	#GPIO_OSPEEDER_OSPEEDR5
 ((
uöt32_t
)0x00000C00)

	)

6060 
	#GPIO_OSPEEDER_OSPEEDR5_0
 ((
uöt32_t
)0x00000400)

	)

6061 
	#GPIO_OSPEEDER_OSPEEDR5_1
 ((
uöt32_t
)0x00000800)

	)

6063 
	#GPIO_OSPEEDER_OSPEEDR6
 ((
uöt32_t
)0x00003000)

	)

6064 
	#GPIO_OSPEEDER_OSPEEDR6_0
 ((
uöt32_t
)0x00001000)

	)

6065 
	#GPIO_OSPEEDER_OSPEEDR6_1
 ((
uöt32_t
)0x00002000)

	)

6067 
	#GPIO_OSPEEDER_OSPEEDR7
 ((
uöt32_t
)0x0000C000)

	)

6068 
	#GPIO_OSPEEDER_OSPEEDR7_0
 ((
uöt32_t
)0x00004000)

	)

6069 
	#GPIO_OSPEEDER_OSPEEDR7_1
 ((
uöt32_t
)0x00008000)

	)

6071 
	#GPIO_OSPEEDER_OSPEEDR8
 ((
uöt32_t
)0x00030000)

	)

6072 
	#GPIO_OSPEEDER_OSPEEDR8_0
 ((
uöt32_t
)0x00010000)

	)

6073 
	#GPIO_OSPEEDER_OSPEEDR8_1
 ((
uöt32_t
)0x00020000)

	)

6075 
	#GPIO_OSPEEDER_OSPEEDR9
 ((
uöt32_t
)0x000C0000)

	)

6076 
	#GPIO_OSPEEDER_OSPEEDR9_0
 ((
uöt32_t
)0x00040000)

	)

6077 
	#GPIO_OSPEEDER_OSPEEDR9_1
 ((
uöt32_t
)0x00080000)

	)

6079 
	#GPIO_OSPEEDER_OSPEEDR10
 ((
uöt32_t
)0x00300000)

	)

6080 
	#GPIO_OSPEEDER_OSPEEDR10_0
 ((
uöt32_t
)0x00100000)

	)

6081 
	#GPIO_OSPEEDER_OSPEEDR10_1
 ((
uöt32_t
)0x00200000)

	)

6083 
	#GPIO_OSPEEDER_OSPEEDR11
 ((
uöt32_t
)0x00C00000)

	)

6084 
	#GPIO_OSPEEDER_OSPEEDR11_0
 ((
uöt32_t
)0x00400000)

	)

6085 
	#GPIO_OSPEEDER_OSPEEDR11_1
 ((
uöt32_t
)0x00800000)

	)

6087 
	#GPIO_OSPEEDER_OSPEEDR12
 ((
uöt32_t
)0x03000000)

	)

6088 
	#GPIO_OSPEEDER_OSPEEDR12_0
 ((
uöt32_t
)0x01000000)

	)

6089 
	#GPIO_OSPEEDER_OSPEEDR12_1
 ((
uöt32_t
)0x02000000)

	)

6091 
	#GPIO_OSPEEDER_OSPEEDR13
 ((
uöt32_t
)0x0C000000)

	)

6092 
	#GPIO_OSPEEDER_OSPEEDR13_0
 ((
uöt32_t
)0x04000000)

	)

6093 
	#GPIO_OSPEEDER_OSPEEDR13_1
 ((
uöt32_t
)0x08000000)

	)

6095 
	#GPIO_OSPEEDER_OSPEEDR14
 ((
uöt32_t
)0x30000000)

	)

6096 
	#GPIO_OSPEEDER_OSPEEDR14_0
 ((
uöt32_t
)0x10000000)

	)

6097 
	#GPIO_OSPEEDER_OSPEEDR14_1
 ((
uöt32_t
)0x20000000)

	)

6099 
	#GPIO_OSPEEDER_OSPEEDR15
 ((
uöt32_t
)0xC0000000)

	)

6100 
	#GPIO_OSPEEDER_OSPEEDR15_0
 ((
uöt32_t
)0x40000000)

	)

6101 
	#GPIO_OSPEEDER_OSPEEDR15_1
 ((
uöt32_t
)0x80000000)

	)

6104 
	#GPIO_PUPDR_PUPDR0
 ((
uöt32_t
)0x00000003)

	)

6105 
	#GPIO_PUPDR_PUPDR0_0
 ((
uöt32_t
)0x00000001)

	)

6106 
	#GPIO_PUPDR_PUPDR0_1
 ((
uöt32_t
)0x00000002)

	)

6108 
	#GPIO_PUPDR_PUPDR1
 ((
uöt32_t
)0x0000000C)

	)

6109 
	#GPIO_PUPDR_PUPDR1_0
 ((
uöt32_t
)0x00000004)

	)

6110 
	#GPIO_PUPDR_PUPDR1_1
 ((
uöt32_t
)0x00000008)

	)

6112 
	#GPIO_PUPDR_PUPDR2
 ((
uöt32_t
)0x00000030)

	)

6113 
	#GPIO_PUPDR_PUPDR2_0
 ((
uöt32_t
)0x00000010)

	)

6114 
	#GPIO_PUPDR_PUPDR2_1
 ((
uöt32_t
)0x00000020)

	)

6116 
	#GPIO_PUPDR_PUPDR3
 ((
uöt32_t
)0x000000C0)

	)

6117 
	#GPIO_PUPDR_PUPDR3_0
 ((
uöt32_t
)0x00000040)

	)

6118 
	#GPIO_PUPDR_PUPDR3_1
 ((
uöt32_t
)0x00000080)

	)

6120 
	#GPIO_PUPDR_PUPDR4
 ((
uöt32_t
)0x00000300)

	)

6121 
	#GPIO_PUPDR_PUPDR4_0
 ((
uöt32_t
)0x00000100)

	)

6122 
	#GPIO_PUPDR_PUPDR4_1
 ((
uöt32_t
)0x00000200)

	)

6124 
	#GPIO_PUPDR_PUPDR5
 ((
uöt32_t
)0x00000C00)

	)

6125 
	#GPIO_PUPDR_PUPDR5_0
 ((
uöt32_t
)0x00000400)

	)

6126 
	#GPIO_PUPDR_PUPDR5_1
 ((
uöt32_t
)0x00000800)

	)

6128 
	#GPIO_PUPDR_PUPDR6
 ((
uöt32_t
)0x00003000)

	)

6129 
	#GPIO_PUPDR_PUPDR6_0
 ((
uöt32_t
)0x00001000)

	)

6130 
	#GPIO_PUPDR_PUPDR6_1
 ((
uöt32_t
)0x00002000)

	)

6132 
	#GPIO_PUPDR_PUPDR7
 ((
uöt32_t
)0x0000C000)

	)

6133 
	#GPIO_PUPDR_PUPDR7_0
 ((
uöt32_t
)0x00004000)

	)

6134 
	#GPIO_PUPDR_PUPDR7_1
 ((
uöt32_t
)0x00008000)

	)

6136 
	#GPIO_PUPDR_PUPDR8
 ((
uöt32_t
)0x00030000)

	)

6137 
	#GPIO_PUPDR_PUPDR8_0
 ((
uöt32_t
)0x00010000)

	)

6138 
	#GPIO_PUPDR_PUPDR8_1
 ((
uöt32_t
)0x00020000)

	)

6140 
	#GPIO_PUPDR_PUPDR9
 ((
uöt32_t
)0x000C0000)

	)

6141 
	#GPIO_PUPDR_PUPDR9_0
 ((
uöt32_t
)0x00040000)

	)

6142 
	#GPIO_PUPDR_PUPDR9_1
 ((
uöt32_t
)0x00080000)

	)

6144 
	#GPIO_PUPDR_PUPDR10
 ((
uöt32_t
)0x00300000)

	)

6145 
	#GPIO_PUPDR_PUPDR10_0
 ((
uöt32_t
)0x00100000)

	)

6146 
	#GPIO_PUPDR_PUPDR10_1
 ((
uöt32_t
)0x00200000)

	)

6148 
	#GPIO_PUPDR_PUPDR11
 ((
uöt32_t
)0x00C00000)

	)

6149 
	#GPIO_PUPDR_PUPDR11_0
 ((
uöt32_t
)0x00400000)

	)

6150 
	#GPIO_PUPDR_PUPDR11_1
 ((
uöt32_t
)0x00800000)

	)

6152 
	#GPIO_PUPDR_PUPDR12
 ((
uöt32_t
)0x03000000)

	)

6153 
	#GPIO_PUPDR_PUPDR12_0
 ((
uöt32_t
)0x01000000)

	)

6154 
	#GPIO_PUPDR_PUPDR12_1
 ((
uöt32_t
)0x02000000)

	)

6156 
	#GPIO_PUPDR_PUPDR13
 ((
uöt32_t
)0x0C000000)

	)

6157 
	#GPIO_PUPDR_PUPDR13_0
 ((
uöt32_t
)0x04000000)

	)

6158 
	#GPIO_PUPDR_PUPDR13_1
 ((
uöt32_t
)0x08000000)

	)

6160 
	#GPIO_PUPDR_PUPDR14
 ((
uöt32_t
)0x30000000)

	)

6161 
	#GPIO_PUPDR_PUPDR14_0
 ((
uöt32_t
)0x10000000)

	)

6162 
	#GPIO_PUPDR_PUPDR14_1
 ((
uöt32_t
)0x20000000)

	)

6164 
	#GPIO_PUPDR_PUPDR15
 ((
uöt32_t
)0xC0000000)

	)

6165 
	#GPIO_PUPDR_PUPDR15_0
 ((
uöt32_t
)0x40000000)

	)

6166 
	#GPIO_PUPDR_PUPDR15_1
 ((
uöt32_t
)0x80000000)

	)

6169 
	#GPIO_IDR_IDR_0
 ((
uöt32_t
)0x00000001)

	)

6170 
	#GPIO_IDR_IDR_1
 ((
uöt32_t
)0x00000002)

	)

6171 
	#GPIO_IDR_IDR_2
 ((
uöt32_t
)0x00000004)

	)

6172 
	#GPIO_IDR_IDR_3
 ((
uöt32_t
)0x00000008)

	)

6173 
	#GPIO_IDR_IDR_4
 ((
uöt32_t
)0x00000010)

	)

6174 
	#GPIO_IDR_IDR_5
 ((
uöt32_t
)0x00000020)

	)

6175 
	#GPIO_IDR_IDR_6
 ((
uöt32_t
)0x00000040)

	)

6176 
	#GPIO_IDR_IDR_7
 ((
uöt32_t
)0x00000080)

	)

6177 
	#GPIO_IDR_IDR_8
 ((
uöt32_t
)0x00000100)

	)

6178 
	#GPIO_IDR_IDR_9
 ((
uöt32_t
)0x00000200)

	)

6179 
	#GPIO_IDR_IDR_10
 ((
uöt32_t
)0x00000400)

	)

6180 
	#GPIO_IDR_IDR_11
 ((
uöt32_t
)0x00000800)

	)

6181 
	#GPIO_IDR_IDR_12
 ((
uöt32_t
)0x00001000)

	)

6182 
	#GPIO_IDR_IDR_13
 ((
uöt32_t
)0x00002000)

	)

6183 
	#GPIO_IDR_IDR_14
 ((
uöt32_t
)0x00004000)

	)

6184 
	#GPIO_IDR_IDR_15
 ((
uöt32_t
)0x00008000)

	)

6186 
	#GPIO_OTYPER_IDR_0
 
GPIO_IDR_IDR_0


	)

6187 
	#GPIO_OTYPER_IDR_1
 
GPIO_IDR_IDR_1


	)

6188 
	#GPIO_OTYPER_IDR_2
 
GPIO_IDR_IDR_2


	)

6189 
	#GPIO_OTYPER_IDR_3
 
GPIO_IDR_IDR_3


	)

6190 
	#GPIO_OTYPER_IDR_4
 
GPIO_IDR_IDR_4


	)

6191 
	#GPIO_OTYPER_IDR_5
 
GPIO_IDR_IDR_5


	)

6192 
	#GPIO_OTYPER_IDR_6
 
GPIO_IDR_IDR_6


	)

6193 
	#GPIO_OTYPER_IDR_7
 
GPIO_IDR_IDR_7


	)

6194 
	#GPIO_OTYPER_IDR_8
 
GPIO_IDR_IDR_8


	)

6195 
	#GPIO_OTYPER_IDR_9
 
GPIO_IDR_IDR_9


	)

6196 
	#GPIO_OTYPER_IDR_10
 
GPIO_IDR_IDR_10


	)

6197 
	#GPIO_OTYPER_IDR_11
 
GPIO_IDR_IDR_11


	)

6198 
	#GPIO_OTYPER_IDR_12
 
GPIO_IDR_IDR_12


	)

6199 
	#GPIO_OTYPER_IDR_13
 
GPIO_IDR_IDR_13


	)

6200 
	#GPIO_OTYPER_IDR_14
 
GPIO_IDR_IDR_14


	)

6201 
	#GPIO_OTYPER_IDR_15
 
GPIO_IDR_IDR_15


	)

6204 
	#GPIO_ODR_ODR_0
 ((
uöt32_t
)0x00000001)

	)

6205 
	#GPIO_ODR_ODR_1
 ((
uöt32_t
)0x00000002)

	)

6206 
	#GPIO_ODR_ODR_2
 ((
uöt32_t
)0x00000004)

	)

6207 
	#GPIO_ODR_ODR_3
 ((
uöt32_t
)0x00000008)

	)

6208 
	#GPIO_ODR_ODR_4
 ((
uöt32_t
)0x00000010)

	)

6209 
	#GPIO_ODR_ODR_5
 ((
uöt32_t
)0x00000020)

	)

6210 
	#GPIO_ODR_ODR_6
 ((
uöt32_t
)0x00000040)

	)

6211 
	#GPIO_ODR_ODR_7
 ((
uöt32_t
)0x00000080)

	)

6212 
	#GPIO_ODR_ODR_8
 ((
uöt32_t
)0x00000100)

	)

6213 
	#GPIO_ODR_ODR_9
 ((
uöt32_t
)0x00000200)

	)

6214 
	#GPIO_ODR_ODR_10
 ((
uöt32_t
)0x00000400)

	)

6215 
	#GPIO_ODR_ODR_11
 ((
uöt32_t
)0x00000800)

	)

6216 
	#GPIO_ODR_ODR_12
 ((
uöt32_t
)0x00001000)

	)

6217 
	#GPIO_ODR_ODR_13
 ((
uöt32_t
)0x00002000)

	)

6218 
	#GPIO_ODR_ODR_14
 ((
uöt32_t
)0x00004000)

	)

6219 
	#GPIO_ODR_ODR_15
 ((
uöt32_t
)0x00008000)

	)

6221 
	#GPIO_OTYPER_ODR_0
 
GPIO_ODR_ODR_0


	)

6222 
	#GPIO_OTYPER_ODR_1
 
GPIO_ODR_ODR_1


	)

6223 
	#GPIO_OTYPER_ODR_2
 
GPIO_ODR_ODR_2


	)

6224 
	#GPIO_OTYPER_ODR_3
 
GPIO_ODR_ODR_3


	)

6225 
	#GPIO_OTYPER_ODR_4
 
GPIO_ODR_ODR_4


	)

6226 
	#GPIO_OTYPER_ODR_5
 
GPIO_ODR_ODR_5


	)

6227 
	#GPIO_OTYPER_ODR_6
 
GPIO_ODR_ODR_6


	)

6228 
	#GPIO_OTYPER_ODR_7
 
GPIO_ODR_ODR_7


	)

6229 
	#GPIO_OTYPER_ODR_8
 
GPIO_ODR_ODR_8


	)

6230 
	#GPIO_OTYPER_ODR_9
 
GPIO_ODR_ODR_9


	)

6231 
	#GPIO_OTYPER_ODR_10
 
GPIO_ODR_ODR_10


	)

6232 
	#GPIO_OTYPER_ODR_11
 
GPIO_ODR_ODR_11


	)

6233 
	#GPIO_OTYPER_ODR_12
 
GPIO_ODR_ODR_12


	)

6234 
	#GPIO_OTYPER_ODR_13
 
GPIO_ODR_ODR_13


	)

6235 
	#GPIO_OTYPER_ODR_14
 
GPIO_ODR_ODR_14


	)

6236 
	#GPIO_OTYPER_ODR_15
 
GPIO_ODR_ODR_15


	)

6239 
	#GPIO_BSRR_BS_0
 ((
uöt32_t
)0x00000001)

	)

6240 
	#GPIO_BSRR_BS_1
 ((
uöt32_t
)0x00000002)

	)

6241 
	#GPIO_BSRR_BS_2
 ((
uöt32_t
)0x00000004)

	)

6242 
	#GPIO_BSRR_BS_3
 ((
uöt32_t
)0x00000008)

	)

6243 
	#GPIO_BSRR_BS_4
 ((
uöt32_t
)0x00000010)

	)

6244 
	#GPIO_BSRR_BS_5
 ((
uöt32_t
)0x00000020)

	)

6245 
	#GPIO_BSRR_BS_6
 ((
uöt32_t
)0x00000040)

	)

6246 
	#GPIO_BSRR_BS_7
 ((
uöt32_t
)0x00000080)

	)

6247 
	#GPIO_BSRR_BS_8
 ((
uöt32_t
)0x00000100)

	)

6248 
	#GPIO_BSRR_BS_9
 ((
uöt32_t
)0x00000200)

	)

6249 
	#GPIO_BSRR_BS_10
 ((
uöt32_t
)0x00000400)

	)

6250 
	#GPIO_BSRR_BS_11
 ((
uöt32_t
)0x00000800)

	)

6251 
	#GPIO_BSRR_BS_12
 ((
uöt32_t
)0x00001000)

	)

6252 
	#GPIO_BSRR_BS_13
 ((
uöt32_t
)0x00002000)

	)

6253 
	#GPIO_BSRR_BS_14
 ((
uöt32_t
)0x00004000)

	)

6254 
	#GPIO_BSRR_BS_15
 ((
uöt32_t
)0x00008000)

	)

6255 
	#GPIO_BSRR_BR_0
 ((
uöt32_t
)0x00010000)

	)

6256 
	#GPIO_BSRR_BR_1
 ((
uöt32_t
)0x00020000)

	)

6257 
	#GPIO_BSRR_BR_2
 ((
uöt32_t
)0x00040000)

	)

6258 
	#GPIO_BSRR_BR_3
 ((
uöt32_t
)0x00080000)

	)

6259 
	#GPIO_BSRR_BR_4
 ((
uöt32_t
)0x00100000)

	)

6260 
	#GPIO_BSRR_BR_5
 ((
uöt32_t
)0x00200000)

	)

6261 
	#GPIO_BSRR_BR_6
 ((
uöt32_t
)0x00400000)

	)

6262 
	#GPIO_BSRR_BR_7
 ((
uöt32_t
)0x00800000)

	)

6263 
	#GPIO_BSRR_BR_8
 ((
uöt32_t
)0x01000000)

	)

6264 
	#GPIO_BSRR_BR_9
 ((
uöt32_t
)0x02000000)

	)

6265 
	#GPIO_BSRR_BR_10
 ((
uöt32_t
)0x04000000)

	)

6266 
	#GPIO_BSRR_BR_11
 ((
uöt32_t
)0x08000000)

	)

6267 
	#GPIO_BSRR_BR_12
 ((
uöt32_t
)0x10000000)

	)

6268 
	#GPIO_BSRR_BR_13
 ((
uöt32_t
)0x20000000)

	)

6269 
	#GPIO_BSRR_BR_14
 ((
uöt32_t
)0x40000000)

	)

6270 
	#GPIO_BSRR_BR_15
 ((
uöt32_t
)0x80000000)

	)

6278 
	#HASH_CR_INIT
 ((
uöt32_t
)0x00000004)

	)

6279 
	#HASH_CR_DMAE
 ((
uöt32_t
)0x00000008)

	)

6280 
	#HASH_CR_DATATYPE
 ((
uöt32_t
)0x00000030)

	)

6281 
	#HASH_CR_DATATYPE_0
 ((
uöt32_t
)0x00000010)

	)

6282 
	#HASH_CR_DATATYPE_1
 ((
uöt32_t
)0x00000020)

	)

6283 
	#HASH_CR_MODE
 ((
uöt32_t
)0x00000040)

	)

6284 
	#HASH_CR_ALGO
 ((
uöt32_t
)0x00040080)

	)

6285 
	#HASH_CR_ALGO_0
 ((
uöt32_t
)0x00000080)

	)

6286 
	#HASH_CR_ALGO_1
 ((
uöt32_t
)0x00040000)

	)

6287 
	#HASH_CR_NBW
 ((
uöt32_t
)0x00000F00)

	)

6288 
	#HASH_CR_NBW_0
 ((
uöt32_t
)0x00000100)

	)

6289 
	#HASH_CR_NBW_1
 ((
uöt32_t
)0x00000200)

	)

6290 
	#HASH_CR_NBW_2
 ((
uöt32_t
)0x00000400)

	)

6291 
	#HASH_CR_NBW_3
 ((
uöt32_t
)0x00000800)

	)

6292 
	#HASH_CR_DINNE
 ((
uöt32_t
)0x00001000)

	)

6293 
	#HASH_CR_MDMAT
 ((
uöt32_t
)0x00002000)

	)

6294 
	#HASH_CR_LKEY
 ((
uöt32_t
)0x00010000)

	)

6297 
	#HASH_STR_NBW
 ((
uöt32_t
)0x0000001F)

	)

6298 
	#HASH_STR_NBW_0
 ((
uöt32_t
)0x00000001)

	)

6299 
	#HASH_STR_NBW_1
 ((
uöt32_t
)0x00000002)

	)

6300 
	#HASH_STR_NBW_2
 ((
uöt32_t
)0x00000004)

	)

6301 
	#HASH_STR_NBW_3
 ((
uöt32_t
)0x00000008)

	)

6302 
	#HASH_STR_NBW_4
 ((
uöt32_t
)0x00000010)

	)

6303 
	#HASH_STR_DCAL
 ((
uöt32_t
)0x00000100)

	)

6306 
	#HASH_IMR_DINIM
 ((
uöt32_t
)0x00000001)

	)

6307 
	#HASH_IMR_DCIM
 ((
uöt32_t
)0x00000002)

	)

6310 
	#HASH_SR_DINIS
 ((
uöt32_t
)0x00000001)

	)

6311 
	#HASH_SR_DCIS
 ((
uöt32_t
)0x00000002)

	)

6312 
	#HASH_SR_DMAS
 ((
uöt32_t
)0x00000004)

	)

6313 
	#HASH_SR_BUSY
 ((
uöt32_t
)0x00000008)

	)

6321 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

6322 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

6323 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

6324 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

6325 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

6326 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

6327 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

6328 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

6329 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

6330 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

6331 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

6332 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

6333 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

6334 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

6337 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

6338 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

6339 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

6340 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

6341 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

6342 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

6343 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

6345 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

6346 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

6347 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

6348 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

6349 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

6352 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

6353 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

6355 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

6356 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

6357 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

6358 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

6359 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

6360 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

6361 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

6362 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

6363 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

6364 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

6366 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

6369 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

6370 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

6373 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

6376 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

6377 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

6378 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

6379 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

6380 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

6381 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

6382 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

6383 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

6384 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

6385 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

6386 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

6387 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

6388 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

6389 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

6392 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

6393 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

6394 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

6395 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

6396 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

6397 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

6398 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

6399 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

6402 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

6403 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

6404 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

6407 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

6410 
	#I2C_FLTR_DNF
 ((
uöt8_t
)0x0FË

	)

6411 
	#I2C_FLTR_ANOFF
 ((
uöt8_t
)0x10Ë

	)

6419 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

6422 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

6423 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

6424 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

6425 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

6428 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

6431 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

6432 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

6442 
	#LTDC_SSCR_VSH
 ((
uöt32_t
)0x000007FFË

	)

6443 
	#LTDC_SSCR_HSW
 ((
uöt32_t
)0x0FFF0000Ë

	)

6447 
	#LTDC_BPCR_AVBP
 ((
uöt32_t
)0x000007FFË

	)

6448 
	#LTDC_BPCR_AHBP
 ((
uöt32_t
)0x0FFF0000Ë

	)

6452 
	#LTDC_AWCR_AAH
 ((
uöt32_t
)0x000007FFË

	)

6453 
	#LTDC_AWCR_AAW
 ((
uöt32_t
)0x0FFF0000Ë

	)

6457 
	#LTDC_TWCR_TOTALH
 ((
uöt32_t
)0x000007FFË

	)

6458 
	#LTDC_TWCR_TOTALW
 ((
uöt32_t
)0x0FFF0000Ë

	)

6462 
	#LTDC_GCR_LTDCEN
 ((
uöt32_t
)0x00000001Ë

	)

6463 
	#LTDC_GCR_DBW
 ((
uöt32_t
)0x00000070Ë

	)

6464 
	#LTDC_GCR_DGW
 ((
uöt32_t
)0x00000700Ë

	)

6465 
	#LTDC_GCR_DRW
 ((
uöt32_t
)0x00007000Ë

	)

6466 
	#LTDC_GCR_DTEN
 ((
uöt32_t
)0x00010000Ë

	)

6467 
	#LTDC_GCR_PCPOL
 ((
uöt32_t
)0x10000000Ë

	)

6468 
	#LTDC_GCR_DEPOL
 ((
uöt32_t
)0x20000000Ë

	)

6469 
	#LTDC_GCR_VSPOL
 ((
uöt32_t
)0x40000000Ë

	)

6470 
	#LTDC_GCR_HSPOL
 ((
uöt32_t
)0x80000000Ë

	)

6474 
	#LTDC_SRCR_IMR
 ((
uöt32_t
)0x00000001Ë

	)

6475 
	#LTDC_SRCR_VBR
 ((
uöt32_t
)0x00000002Ë

	)

6479 
	#LTDC_BCCR_BCBLUE
 ((
uöt32_t
)0x000000FFË

	)

6480 
	#LTDC_BCCR_BCGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6481 
	#LTDC_BCCR_BCRED
 ((
uöt32_t
)0x00FF0000Ë

	)

6485 
	#LTDC_IER_LIE
 ((
uöt32_t
)0x00000001Ë

	)

6486 
	#LTDC_IER_FUIE
 ((
uöt32_t
)0x00000002Ë

	)

6487 
	#LTDC_IER_TERRIE
 ((
uöt32_t
)0x00000004Ë

	)

6488 
	#LTDC_IER_RRIE
 ((
uöt32_t
)0x00000008Ë

	)

6492 
	#LTDC_ISR_LIF
 ((
uöt32_t
)0x00000001Ë

	)

6493 
	#LTDC_ISR_FUIF
 ((
uöt32_t
)0x00000002Ë

	)

6494 
	#LTDC_ISR_TERRIF
 ((
uöt32_t
)0x00000004Ë

	)

6495 
	#LTDC_ISR_RRIF
 ((
uöt32_t
)0x00000008Ë

	)

6499 
	#LTDC_ICR_CLIF
 ((
uöt32_t
)0x00000001Ë

	)

6500 
	#LTDC_ICR_CFUIF
 ((
uöt32_t
)0x00000002Ë

	)

6501 
	#LTDC_ICR_CTERRIF
 ((
uöt32_t
)0x00000004Ë

	)

6502 
	#LTDC_ICR_CRRIF
 ((
uöt32_t
)0x00000008Ë

	)

6506 
	#LTDC_LIPCR_LIPOS
 ((
uöt32_t
)0x000007FFË

	)

6510 
	#LTDC_CPSR_CYPOS
 ((
uöt32_t
)0x0000FFFFË

	)

6511 
	#LTDC_CPSR_CXPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

6515 
	#LTDC_CDSR_VDES
 ((
uöt32_t
)0x00000001Ë

	)

6516 
	#LTDC_CDSR_HDES
 ((
uöt32_t
)0x00000002Ë

	)

6517 
	#LTDC_CDSR_VSYNCS
 ((
uöt32_t
)0x00000004Ë

	)

6518 
	#LTDC_CDSR_HSYNCS
 ((
uöt32_t
)0x00000008Ë

	)

6522 
	#LTDC_LxCR_LEN
 ((
uöt32_t
)0x00000001Ë

	)

6523 
	#LTDC_LxCR_COLKEN
 ((
uöt32_t
)0x00000002Ë

	)

6524 
	#LTDC_LxCR_CLUTEN
 ((
uöt32_t
)0x00000010Ë

	)

6528 
	#LTDC_LxWHPCR_WHSTPOS
 ((
uöt32_t
)0x00000FFFË

	)

6529 
	#LTDC_LxWHPCR_WHSPPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

6533 
	#LTDC_LxWVPCR_WVSTPOS
 ((
uöt32_t
)0x00000FFFË

	)

6534 
	#LTDC_LxWVPCR_WVSPPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

6538 
	#LTDC_LxCKCR_CKBLUE
 ((
uöt32_t
)0x000000FFË

	)

6539 
	#LTDC_LxCKCR_CKGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6540 
	#LTDC_LxCKCR_CKRED
 ((
uöt32_t
)0x00FF0000Ë

	)

6544 
	#LTDC_LxPFCR_PF
 ((
uöt32_t
)0x00000007Ë

	)

6548 
	#LTDC_LxCACR_CONSTA
 ((
uöt32_t
)0x000000FFË

	)

6552 
	#LTDC_LxDCCR_DCBLUE
 ((
uöt32_t
)0x000000FFË

	)

6553 
	#LTDC_LxDCCR_DCGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6554 
	#LTDC_LxDCCR_DCRED
 ((
uöt32_t
)0x00FF0000Ë

	)

6555 
	#LTDC_LxDCCR_DCALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

6559 
	#LTDC_LxBFCR_BF2
 ((
uöt32_t
)0x00000007Ë

	)

6560 
	#LTDC_LxBFCR_BF1
 ((
uöt32_t
)0x00000700Ë

	)

6564 
	#LTDC_LxCFBAR_CFBADD
 ((
uöt32_t
)0xFFFFFFFFË

	)

6568 
	#LTDC_LxCFBLR_CFBLL
 ((
uöt32_t
)0x00001FFFË

	)

6569 
	#LTDC_LxCFBLR_CFBP
 ((
uöt32_t
)0x1FFF0000Ë

	)

6573 
	#LTDC_LxCFBLNR_CFBLNBR
 ((
uöt32_t
)0x000007FFË

	)

6577 
	#LTDC_LxCLUTWR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

6578 
	#LTDC_LxCLUTWR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6579 
	#LTDC_LxCLUTWR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

6580 
	#LTDC_LxCLUTWR_CLUTADD
 ((
uöt32_t
)0xFF000000Ë

	)

6588 
	#PWR_CR_LPDS
 ((
uöt32_t
)0x00000001Ë

	)

6589 
	#PWR_CR_PDDS
 ((
uöt32_t
)0x00000002Ë

	)

6590 
	#PWR_CR_CWUF
 ((
uöt32_t
)0x00000004Ë

	)

6591 
	#PWR_CR_CSBF
 ((
uöt32_t
)0x00000008Ë

	)

6592 
	#PWR_CR_PVDE
 ((
uöt32_t
)0x00000010Ë

	)

6594 
	#PWR_CR_PLS
 ((
uöt32_t
)0x000000E0Ë

	)

6595 
	#PWR_CR_PLS_0
 ((
uöt32_t
)0x00000020Ë

	)

6596 
	#PWR_CR_PLS_1
 ((
uöt32_t
)0x00000040Ë

	)

6597 
	#PWR_CR_PLS_2
 ((
uöt32_t
)0x00000080Ë

	)

6600 
	#PWR_CR_PLS_LEV0
 ((
uöt32_t
)0x00000000Ë

	)

6601 
	#PWR_CR_PLS_LEV1
 ((
uöt32_t
)0x00000020Ë

	)

6602 
	#PWR_CR_PLS_LEV2
 ((
uöt32_t
)0x00000040Ë

	)

6603 
	#PWR_CR_PLS_LEV3
 ((
uöt32_t
)0x00000060Ë

	)

6604 
	#PWR_CR_PLS_LEV4
 ((
uöt32_t
)0x00000080Ë

	)

6605 
	#PWR_CR_PLS_LEV5
 ((
uöt32_t
)0x000000A0Ë

	)

6606 
	#PWR_CR_PLS_LEV6
 ((
uöt32_t
)0x000000C0Ë

	)

6607 
	#PWR_CR_PLS_LEV7
 ((
uöt32_t
)0x000000E0Ë

	)

6609 
	#PWR_CR_DBP
 ((
uöt32_t
)0x00000100Ë

	)

6610 
	#PWR_CR_FPDS
 ((
uöt32_t
)0x00000200Ë

	)

6611 
	#PWR_CR_LPUDS
 ((
uöt32_t
)0x00000400Ë

	)

6612 
	#PWR_CR_MRUDS
 ((
uöt32_t
)0x00000800Ë

	)

6613 
	#PWR_CR_LPLVDS
 ((
uöt32_t
)0x00000400Ë

	)

6614 
	#PWR_CR_MRLVDS
 ((
uöt32_t
)0x00000800Ë

	)

6616 
	#PWR_CR_ADCDC1
 ((
uöt32_t
)0x00002000Ë

	)

6618 
	#PWR_CR_VOS
 ((
uöt32_t
)0x0000C000Ë

	)

6619 
	#PWR_CR_VOS_0
 ((
uöt32_t
)0x00004000Ë

	)

6620 
	#PWR_CR_VOS_1
 ((
uöt32_t
)0x00008000Ë

	)

6622 
	#PWR_CR_ODEN
 ((
uöt32_t
)0x00010000Ë

	)

6623 
	#PWR_CR_ODSWEN
 ((
uöt32_t
)0x00020000Ë

	)

6624 
	#PWR_CR_UDEN
 ((
uöt32_t
)0x000C0000Ë

	)

6625 
	#PWR_CR_UDEN_0
 ((
uöt32_t
)0x00040000Ë

	)

6626 
	#PWR_CR_UDEN_1
 ((
uöt32_t
)0x00080000Ë

	)

6628 
	#PWR_CR_FMSSR
 ((
uöt32_t
)0x00100000Ë

	)

6629 
	#PWR_CR_FISSR
 ((
uöt32_t
)0x00200000Ë

	)

6632 
	#PWR_CR_PMODE
 
PWR_CR_VOS


	)

6635 
	#PWR_CSR_WUF
 ((
uöt32_t
)0x00000001Ë

	)

6636 
	#PWR_CSR_SBF
 ((
uöt32_t
)0x00000002Ë

	)

6637 
	#PWR_CSR_PVDO
 ((
uöt32_t
)0x00000004Ë

	)

6638 
	#PWR_CSR_BRR
 ((
uöt32_t
)0x00000008Ë

	)

6639 
	#PWR_CSR_EWUP
 ((
uöt32_t
)0x00000100Ë

	)

6640 
	#PWR_CSR_BRE
 ((
uöt32_t
)0x00000200Ë

	)

6641 
	#PWR_CSR_VOSRDY
 ((
uöt32_t
)0x00004000Ë

	)

6642 
	#PWR_CSR_ODRDY
 ((
uöt32_t
)0x00010000Ë

	)

6643 
	#PWR_CSR_ODSWRDY
 ((
uöt32_t
)0x00020000Ë

	)

6644 
	#PWR_CSR_UDSWRDY
 ((
uöt32_t
)0x000C0000Ë

	)

6647 
	#PWR_CSR_REGRDY
 
PWR_CSR_VOSRDY


	)

6655 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001)

	)

6656 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002)

	)

6658 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8)

	)

6659 
	#RCC_CR_HSITRIM_0
 ((
uöt32_t
)0x00000008)

	)

6660 
	#RCC_CR_HSITRIM_1
 ((
uöt32_t
)0x00000010)

	)

6661 
	#RCC_CR_HSITRIM_2
 ((
uöt32_t
)0x00000020)

	)

6662 
	#RCC_CR_HSITRIM_3
 ((
uöt32_t
)0x00000040)

	)

6663 
	#RCC_CR_HSITRIM_4
 ((
uöt32_t
)0x00000080)

	)

6665 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00)

	)

6666 
	#RCC_CR_HSICAL_0
 ((
uöt32_t
)0x00000100)

	)

6667 
	#RCC_CR_HSICAL_1
 ((
uöt32_t
)0x00000200)

	)

6668 
	#RCC_CR_HSICAL_2
 ((
uöt32_t
)0x00000400)

	)

6669 
	#RCC_CR_HSICAL_3
 ((
uöt32_t
)0x00000800)

	)

6670 
	#RCC_CR_HSICAL_4
 ((
uöt32_t
)0x00001000)

	)

6671 
	#RCC_CR_HSICAL_5
 ((
uöt32_t
)0x00002000)

	)

6672 
	#RCC_CR_HSICAL_6
 ((
uöt32_t
)0x00004000)

	)

6673 
	#RCC_CR_HSICAL_7
 ((
uöt32_t
)0x00008000)

	)

6675 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000)

	)

6676 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000)

	)

6677 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000)

	)

6678 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000)

	)

6679 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000)

	)

6680 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000)

	)

6681 
	#RCC_CR_PLLI2SON
 ((
uöt32_t
)0x04000000)

	)

6682 
	#RCC_CR_PLLI2SRDY
 ((
uöt32_t
)0x08000000)

	)

6683 
	#RCC_CR_PLLSAION
 ((
uöt32_t
)0x10000000)

	)

6684 
	#RCC_CR_PLLSAIRDY
 ((
uöt32_t
)0x20000000)

	)

6687 
	#RCC_PLLCFGR_PLLM
 ((
uöt32_t
)0x0000003F)

	)

6688 
	#RCC_PLLCFGR_PLLM_0
 ((
uöt32_t
)0x00000001)

	)

6689 
	#RCC_PLLCFGR_PLLM_1
 ((
uöt32_t
)0x00000002)

	)

6690 
	#RCC_PLLCFGR_PLLM_2
 ((
uöt32_t
)0x00000004)

	)

6691 
	#RCC_PLLCFGR_PLLM_3
 ((
uöt32_t
)0x00000008)

	)

6692 
	#RCC_PLLCFGR_PLLM_4
 ((
uöt32_t
)0x00000010)

	)

6693 
	#RCC_PLLCFGR_PLLM_5
 ((
uöt32_t
)0x00000020)

	)

6695 
	#RCC_PLLCFGR_PLLN
 ((
uöt32_t
)0x00007FC0)

	)

6696 
	#RCC_PLLCFGR_PLLN_0
 ((
uöt32_t
)0x00000040)

	)

6697 
	#RCC_PLLCFGR_PLLN_1
 ((
uöt32_t
)0x00000080)

	)

6698 
	#RCC_PLLCFGR_PLLN_2
 ((
uöt32_t
)0x00000100)

	)

6699 
	#RCC_PLLCFGR_PLLN_3
 ((
uöt32_t
)0x00000200)

	)

6700 
	#RCC_PLLCFGR_PLLN_4
 ((
uöt32_t
)0x00000400)

	)

6701 
	#RCC_PLLCFGR_PLLN_5
 ((
uöt32_t
)0x00000800)

	)

6702 
	#RCC_PLLCFGR_PLLN_6
 ((
uöt32_t
)0x00001000)

	)

6703 
	#RCC_PLLCFGR_PLLN_7
 ((
uöt32_t
)0x00002000)

	)

6704 
	#RCC_PLLCFGR_PLLN_8
 ((
uöt32_t
)0x00004000)

	)

6706 
	#RCC_PLLCFGR_PLLP
 ((
uöt32_t
)0x00030000)

	)

6707 
	#RCC_PLLCFGR_PLLP_0
 ((
uöt32_t
)0x00010000)

	)

6708 
	#RCC_PLLCFGR_PLLP_1
 ((
uöt32_t
)0x00020000)

	)

6710 
	#RCC_PLLCFGR_PLLSRC
 ((
uöt32_t
)0x00400000)

	)

6711 
	#RCC_PLLCFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00400000)

	)

6712 
	#RCC_PLLCFGR_PLLSRC_HSI
 ((
uöt32_t
)0x00000000)

	)

6714 
	#RCC_PLLCFGR_PLLQ
 ((
uöt32_t
)0x0F000000)

	)

6715 
	#RCC_PLLCFGR_PLLQ_0
 ((
uöt32_t
)0x01000000)

	)

6716 
	#RCC_PLLCFGR_PLLQ_1
 ((
uöt32_t
)0x02000000)

	)

6717 
	#RCC_PLLCFGR_PLLQ_2
 ((
uöt32_t
)0x04000000)

	)

6718 
	#RCC_PLLCFGR_PLLQ_3
 ((
uöt32_t
)0x08000000)

	)

6722 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

6723 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

6724 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

6726 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

6727 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

6728 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

6731 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

6732 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

6733 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

6735 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

6736 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

6737 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

6740 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

6741 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

6742 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

6743 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

6744 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

6746 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

6747 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

6748 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

6749 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

6750 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

6751 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

6752 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

6753 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

6754 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

6757 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00001C00Ë

	)

6758 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000400Ë

	)

6759 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000800Ë

	)

6760 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00001000Ë

	)

6762 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

6763 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00001000Ë

	)

6764 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00001400Ë

	)

6765 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00001800Ë

	)

6766 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00001C00Ë

	)

6769 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x0000E000Ë

	)

6770 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00002000Ë

	)

6771 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00004000Ë

	)

6772 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00008000Ë

	)

6774 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

6775 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00008000Ë

	)

6776 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x0000A000Ë

	)

6777 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

6778 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x0000E000Ë

	)

6781 
	#RCC_CFGR_RTCPRE
 ((
uöt32_t
)0x001F0000)

	)

6782 
	#RCC_CFGR_RTCPRE_0
 ((
uöt32_t
)0x00010000)

	)

6783 
	#RCC_CFGR_RTCPRE_1
 ((
uöt32_t
)0x00020000)

	)

6784 
	#RCC_CFGR_RTCPRE_2
 ((
uöt32_t
)0x00040000)

	)

6785 
	#RCC_CFGR_RTCPRE_3
 ((
uöt32_t
)0x00080000)

	)

6786 
	#RCC_CFGR_RTCPRE_4
 ((
uöt32_t
)0x00100000)

	)

6789 
	#RCC_CFGR_MCO1
 ((
uöt32_t
)0x00600000)

	)

6790 
	#RCC_CFGR_MCO1_0
 ((
uöt32_t
)0x00200000)

	)

6791 
	#RCC_CFGR_MCO1_1
 ((
uöt32_t
)0x00400000)

	)

6793 
	#RCC_CFGR_I2SSRC
 ((
uöt32_t
)0x00800000)

	)

6795 
	#RCC_CFGR_MCO1PRE
 ((
uöt32_t
)0x07000000)

	)

6796 
	#RCC_CFGR_MCO1PRE_0
 ((
uöt32_t
)0x01000000)

	)

6797 
	#RCC_CFGR_MCO1PRE_1
 ((
uöt32_t
)0x02000000)

	)

6798 
	#RCC_CFGR_MCO1PRE_2
 ((
uöt32_t
)0x04000000)

	)

6800 
	#RCC_CFGR_MCO2PRE
 ((
uöt32_t
)0x38000000)

	)

6801 
	#RCC_CFGR_MCO2PRE_0
 ((
uöt32_t
)0x08000000)

	)

6802 
	#RCC_CFGR_MCO2PRE_1
 ((
uöt32_t
)0x10000000)

	)

6803 
	#RCC_CFGR_MCO2PRE_2
 ((
uöt32_t
)0x20000000)

	)

6805 
	#RCC_CFGR_MCO2
 ((
uöt32_t
)0xC0000000)

	)

6806 
	#RCC_CFGR_MCO2_0
 ((
uöt32_t
)0x40000000)

	)

6807 
	#RCC_CFGR_MCO2_1
 ((
uöt32_t
)0x80000000)

	)

6810 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001)

	)

6811 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002)

	)

6812 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004)

	)

6813 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008)

	)

6814 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010)

	)

6815 
	#RCC_CIR_PLLI2SRDYF
 ((
uöt32_t
)0x00000020)

	)

6816 
	#RCC_CIR_PLLSAIRDYF
 ((
uöt32_t
)0x00000040)

	)

6817 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080)

	)

6818 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100)

	)

6819 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200)

	)

6820 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400)

	)

6821 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800)

	)

6822 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000)

	)

6823 
	#RCC_CIR_PLLI2SRDYIE
 ((
uöt32_t
)0x00002000)

	)

6824 
	#RCC_CIR_PLLSAIRDYIE
 ((
uöt32_t
)0x00004000)

	)

6825 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000)

	)

6826 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000)

	)

6827 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000)

	)

6828 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000)

	)

6829 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000)

	)

6830 
	#RCC_CIR_PLLI2SRDYC
 ((
uöt32_t
)0x00200000)

	)

6831 
	#RCC_CIR_PLLSAIRDYC
 ((
uöt32_t
)0x00400000)

	)

6832 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000)

	)

6835 
	#RCC_AHB1RSTR_GPIOARST
 ((
uöt32_t
)0x00000001)

	)

6836 
	#RCC_AHB1RSTR_GPIOBRST
 ((
uöt32_t
)0x00000002)

	)

6837 
	#RCC_AHB1RSTR_GPIOCRST
 ((
uöt32_t
)0x00000004)

	)

6838 
	#RCC_AHB1RSTR_GPIODRST
 ((
uöt32_t
)0x00000008)

	)

6839 
	#RCC_AHB1RSTR_GPIOERST
 ((
uöt32_t
)0x00000010)

	)

6840 
	#RCC_AHB1RSTR_GPIOFRST
 ((
uöt32_t
)0x00000020)

	)

6841 
	#RCC_AHB1RSTR_GPIOGRST
 ((
uöt32_t
)0x00000040)

	)

6842 
	#RCC_AHB1RSTR_GPIOHRST
 ((
uöt32_t
)0x00000080)

	)

6843 
	#RCC_AHB1RSTR_GPIOIRST
 ((
uöt32_t
)0x00000100)

	)

6844 
	#RCC_AHB1RSTR_GPIOJRST
 ((
uöt32_t
)0x00000200)

	)

6845 
	#RCC_AHB1RSTR_GPIOKRST
 ((
uöt32_t
)0x00000400)

	)

6846 
	#RCC_AHB1RSTR_CRCRST
 ((
uöt32_t
)0x00001000)

	)

6847 
	#RCC_AHB1RSTR_DMA1RST
 ((
uöt32_t
)0x00200000)

	)

6848 
	#RCC_AHB1RSTR_DMA2RST
 ((
uöt32_t
)0x00400000)

	)

6849 
	#RCC_AHB1RSTR_DMA2DRST
 ((
uöt32_t
)0x00800000)

	)

6850 
	#RCC_AHB1RSTR_ETHMACRST
 ((
uöt32_t
)0x02000000)

	)

6851 
	#RCC_AHB1RSTR_OTGHRST
 ((
uöt32_t
)0x10000000)

	)

6854 
	#RCC_AHB2RSTR_DCMIRST
 ((
uöt32_t
)0x00000001)

	)

6855 
	#RCC_AHB2RSTR_CRYPRST
 ((
uöt32_t
)0x00000010)

	)

6856 
	#RCC_AHB2RSTR_HASHRST
 ((
uöt32_t
)0x00000020)

	)

6858 
	#RCC_AHB2RSTR_HSAHRST
 
RCC_AHB2RSTR_HASHRST


	)

6859 
	#RCC_AHB2RSTR_RNGRST
 ((
uöt32_t
)0x00000040)

	)

6860 
	#RCC_AHB2RSTR_OTGFSRST
 ((
uöt32_t
)0x00000080)

	)

6863 #i‡
deföed
(
STM32F40_41xxx
)

6864 
	#RCC_AHB3RSTR_FSMCRST
 ((
uöt32_t
)0x00000001)

	)

6867 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

6868 
	#RCC_AHB3RSTR_FMCRST
 ((
uöt32_t
)0x00000001)

	)

6871 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001)

	)

6872 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002)

	)

6873 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004)

	)

6874 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008)

	)

6875 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010)

	)

6876 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020)

	)

6877 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040)

	)

6878 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080)

	)

6879 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100)

	)

6880 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800)

	)

6881 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000)

	)

6882 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000)

	)

6883 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000)

	)

6884 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000)

	)

6885 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000)

	)

6886 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000)

	)

6887 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000)

	)

6888 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000)

	)

6889 
	#RCC_APB1RSTR_I2C3RST
 ((
uöt32_t
)0x00800000)

	)

6890 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000)

	)

6891 
	#RCC_APB1RSTR_CAN2RST
 ((
uöt32_t
)0x04000000)

	)

6892 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000)

	)

6893 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000)

	)

6894 
	#RCC_APB1RSTR_UART7RST
 ((
uöt32_t
)0x40000000)

	)

6895 
	#RCC_APB1RSTR_UART8RST
 ((
uöt32_t
)0x80000000)

	)

6898 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000001)

	)

6899 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt32_t
)0x00000002)

	)

6900 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00000010)

	)

6901 
	#RCC_APB2RSTR_USART6RST
 ((
uöt32_t
)0x00000020)

	)

6902 
	#RCC_APB2RSTR_ADCRST
 ((
uöt32_t
)0x00000100)

	)

6903 
	#RCC_APB2RSTR_SDIORST
 ((
uöt32_t
)0x00000800)

	)

6904 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000)

	)

6905 
	#RCC_APB2RSTR_SPI4RST
 ((
uöt32_t
)0x00002000)

	)

6906 
	#RCC_APB2RSTR_SYSCFGRST
 ((
uöt32_t
)0x00004000)

	)

6907 
	#RCC_APB2RSTR_TIM9RST
 ((
uöt32_t
)0x00010000)

	)

6908 
	#RCC_APB2RSTR_TIM10RST
 ((
uöt32_t
)0x00020000)

	)

6909 
	#RCC_APB2RSTR_TIM11RST
 ((
uöt32_t
)0x00040000)

	)

6910 
	#RCC_APB2RSTR_SPI5RST
 ((
uöt32_t
)0x00100000)

	)

6911 
	#RCC_APB2RSTR_SPI6RST
 ((
uöt32_t
)0x00200000)

	)

6912 
	#RCC_APB2RSTR_SAI1RST
 ((
uöt32_t
)0x00400000)

	)

6913 
	#RCC_APB2RSTR_LTDCRST
 ((
uöt32_t
)0x04000000)

	)

6916 
	#RCC_APB2RSTR_SPI1
 
RCC_APB2RSTR_SPI1RST


	)

6919 
	#RCC_AHB1ENR_GPIOAEN
 ((
uöt32_t
)0x00000001)

	)

6920 
	#RCC_AHB1ENR_GPIOBEN
 ((
uöt32_t
)0x00000002)

	)

6921 
	#RCC_AHB1ENR_GPIOCEN
 ((
uöt32_t
)0x00000004)

	)

6922 
	#RCC_AHB1ENR_GPIODEN
 ((
uöt32_t
)0x00000008)

	)

6923 
	#RCC_AHB1ENR_GPIOEEN
 ((
uöt32_t
)0x00000010)

	)

6924 
	#RCC_AHB1ENR_GPIOFEN
 ((
uöt32_t
)0x00000020)

	)

6925 
	#RCC_AHB1ENR_GPIOGEN
 ((
uöt32_t
)0x00000040)

	)

6926 
	#RCC_AHB1ENR_GPIOHEN
 ((
uöt32_t
)0x00000080)

	)

6927 
	#RCC_AHB1ENR_GPIOIEN
 ((
uöt32_t
)0x00000100)

	)

6928 
	#RCC_AHB1ENR_GPIOJEN
 ((
uöt32_t
)0x00000200)

	)

6929 
	#RCC_AHB1ENR_GPIOKEN
 ((
uöt32_t
)0x00000400)

	)

6930 
	#RCC_AHB1ENR_CRCEN
 ((
uöt32_t
)0x00001000)

	)

6931 
	#RCC_AHB1ENR_BKPSRAMEN
 ((
uöt32_t
)0x00040000)

	)

6932 
	#RCC_AHB1ENR_CCMDATARAMEN
 ((
uöt32_t
)0x00100000)

	)

6933 
	#RCC_AHB1ENR_DMA1EN
 ((
uöt32_t
)0x00200000)

	)

6934 
	#RCC_AHB1ENR_DMA2EN
 ((
uöt32_t
)0x00400000)

	)

6935 
	#RCC_AHB1ENR_DMA2DEN
 ((
uöt32_t
)0x00800000)

	)

6936 
	#RCC_AHB1ENR_ETHMACEN
 ((
uöt32_t
)0x02000000)

	)

6937 
	#RCC_AHB1ENR_ETHMACTXEN
 ((
uöt32_t
)0x04000000)

	)

6938 
	#RCC_AHB1ENR_ETHMACRXEN
 ((
uöt32_t
)0x08000000)

	)

6939 
	#RCC_AHB1ENR_ETHMACPTPEN
 ((
uöt32_t
)0x10000000)

	)

6940 
	#RCC_AHB1ENR_OTGHSEN
 ((
uöt32_t
)0x20000000)

	)

6941 
	#RCC_AHB1ENR_OTGHSULPIEN
 ((
uöt32_t
)0x40000000)

	)

6944 
	#RCC_AHB2ENR_DCMIEN
 ((
uöt32_t
)0x00000001)

	)

6945 
	#RCC_AHB2ENR_CRYPEN
 ((
uöt32_t
)0x00000010)

	)

6946 
	#RCC_AHB2ENR_HASHEN
 ((
uöt32_t
)0x00000020)

	)

6947 
	#RCC_AHB2ENR_RNGEN
 ((
uöt32_t
)0x00000040)

	)

6948 
	#RCC_AHB2ENR_OTGFSEN
 ((
uöt32_t
)0x00000080)

	)

6952 #i‡
deföed
(
STM32F40_41xxx
)

6953 
	#RCC_AHB3ENR_FSMCEN
 ((
uöt32_t
)0x00000001)

	)

6956 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

6957 
	#RCC_AHB3ENR_FMCEN
 ((
uöt32_t
)0x00000001)

	)

6961 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001)

	)

6962 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002)

	)

6963 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004)

	)

6964 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008)

	)

6965 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010)

	)

6966 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020)

	)

6967 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040)

	)

6968 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080)

	)

6969 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100)

	)

6970 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800)

	)

6971 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000)

	)

6972 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000)

	)

6973 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000)

	)

6974 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000)

	)

6975 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000)

	)

6976 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000)

	)

6977 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000)

	)

6978 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000)

	)

6979 
	#RCC_APB1ENR_I2C3EN
 ((
uöt32_t
)0x00800000)

	)

6980 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000)

	)

6981 
	#RCC_APB1ENR_CAN2EN
 ((
uöt32_t
)0x04000000)

	)

6982 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000)

	)

6983 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000)

	)

6984 
	#RCC_APB1ENR_UART7EN
 ((
uöt32_t
)0x40000000)

	)

6985 
	#RCC_APB1ENR_UART8EN
 ((
uöt32_t
)0x80000000)

	)

6988 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000001)

	)

6989 
	#RCC_APB2ENR_TIM8EN
 ((
uöt32_t
)0x00000002)

	)

6990 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00000010)

	)

6991 
	#RCC_APB2ENR_USART6EN
 ((
uöt32_t
)0x00000020)

	)

6992 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000100)

	)

6993 
	#RCC_APB2ENR_ADC2EN
 ((
uöt32_t
)0x00000200)

	)

6994 
	#RCC_APB2ENR_ADC3EN
 ((
uöt32_t
)0x00000400)

	)

6995 
	#RCC_APB2ENR_SDIOEN
 ((
uöt32_t
)0x00000800)

	)

6996 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000)

	)

6997 
	#RCC_APB2ENR_SPI4EN
 ((
uöt32_t
)0x00002000)

	)

6998 
	#RCC_APB2ENR_SYSCFGEN
 ((
uöt32_t
)0x00004000)

	)

6999 
	#RCC_APB2ENR_TIM9EN
 ((
uöt32_t
)0x00010000)

	)

7000 
	#RCC_APB2ENR_TIM10EN
 ((
uöt32_t
)0x00020000)

	)

7001 
	#RCC_APB2ENR_TIM11EN
 ((
uöt32_t
)0x00040000)

	)

7002 
	#RCC_APB2ENR_SPI5EN
 ((
uöt32_t
)0x00100000)

	)

7003 
	#RCC_APB2ENR_SPI6EN
 ((
uöt32_t
)0x00200000)

	)

7004 
	#RCC_APB2ENR_SAI1EN
 ((
uöt32_t
)0x00400000)

	)

7005 
	#RCC_APB2ENR_LTDCEN
 ((
uöt32_t
)0x04000000)

	)

7008 
	#RCC_AHB1LPENR_GPIOALPEN
 ((
uöt32_t
)0x00000001)

	)

7009 
	#RCC_AHB1LPENR_GPIOBLPEN
 ((
uöt32_t
)0x00000002)

	)

7010 
	#RCC_AHB1LPENR_GPIOCLPEN
 ((
uöt32_t
)0x00000004)

	)

7011 
	#RCC_AHB1LPENR_GPIODLPEN
 ((
uöt32_t
)0x00000008)

	)

7012 
	#RCC_AHB1LPENR_GPIOELPEN
 ((
uöt32_t
)0x00000010)

	)

7013 
	#RCC_AHB1LPENR_GPIOFLPEN
 ((
uöt32_t
)0x00000020)

	)

7014 
	#RCC_AHB1LPENR_GPIOGLPEN
 ((
uöt32_t
)0x00000040)

	)

7015 
	#RCC_AHB1LPENR_GPIOHLPEN
 ((
uöt32_t
)0x00000080)

	)

7016 
	#RCC_AHB1LPENR_GPIOILPEN
 ((
uöt32_t
)0x00000100)

	)

7017 
	#RCC_AHB1LPENR_GPIOJLPEN
 ((
uöt32_t
)0x00000200)

	)

7018 
	#RCC_AHB1LPENR_GPIOKLPEN
 ((
uöt32_t
)0x00000400)

	)

7019 
	#RCC_AHB1LPENR_CRCLPEN
 ((
uöt32_t
)0x00001000)

	)

7020 
	#RCC_AHB1LPENR_FLITFLPEN
 ((
uöt32_t
)0x00008000)

	)

7021 
	#RCC_AHB1LPENR_SRAM1LPEN
 ((
uöt32_t
)0x00010000)

	)

7022 
	#RCC_AHB1LPENR_SRAM2LPEN
 ((
uöt32_t
)0x00020000)

	)

7023 
	#RCC_AHB1LPENR_BKPSRAMLPEN
 ((
uöt32_t
)0x00040000)

	)

7024 
	#RCC_AHB1LPENR_SRAM3LPEN
 ((
uöt32_t
)0x00080000)

	)

7025 
	#RCC_AHB1LPENR_DMA1LPEN
 ((
uöt32_t
)0x00200000)

	)

7026 
	#RCC_AHB1LPENR_DMA2LPEN
 ((
uöt32_t
)0x00400000)

	)

7027 
	#RCC_AHB1LPENR_DMA2DLPEN
 ((
uöt32_t
)0x00800000)

	)

7028 
	#RCC_AHB1LPENR_ETHMACLPEN
 ((
uöt32_t
)0x02000000)

	)

7029 
	#RCC_AHB1LPENR_ETHMACTXLPEN
 ((
uöt32_t
)0x04000000)

	)

7030 
	#RCC_AHB1LPENR_ETHMACRXLPEN
 ((
uöt32_t
)0x08000000)

	)

7031 
	#RCC_AHB1LPENR_ETHMACPTPLPEN
 ((
uöt32_t
)0x10000000)

	)

7032 
	#RCC_AHB1LPENR_OTGHSLPEN
 ((
uöt32_t
)0x20000000)

	)

7033 
	#RCC_AHB1LPENR_OTGHSULPILPEN
 ((
uöt32_t
)0x40000000)

	)

7036 
	#RCC_AHB2LPENR_DCMILPEN
 ((
uöt32_t
)0x00000001)

	)

7037 
	#RCC_AHB2LPENR_CRYPLPEN
 ((
uöt32_t
)0x00000010)

	)

7038 
	#RCC_AHB2LPENR_HASHLPEN
 ((
uöt32_t
)0x00000020)

	)

7039 
	#RCC_AHB2LPENR_RNGLPEN
 ((
uöt32_t
)0x00000040)

	)

7040 
	#RCC_AHB2LPENR_OTGFSLPEN
 ((
uöt32_t
)0x00000080)

	)

7043 #i‡
deföed
(
STM32F40_41xxx
)

7044 
	#RCC_AHB3LPENR_FSMCLPEN
 ((
uöt32_t
)0x00000001)

	)

7047 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

7048 
	#RCC_AHB3LPENR_FMCLPEN
 ((
uöt32_t
)0x00000001)

	)

7052 
	#RCC_APB1LPENR_TIM2LPEN
 ((
uöt32_t
)0x00000001)

	)

7053 
	#RCC_APB1LPENR_TIM3LPEN
 ((
uöt32_t
)0x00000002)

	)

7054 
	#RCC_APB1LPENR_TIM4LPEN
 ((
uöt32_t
)0x00000004)

	)

7055 
	#RCC_APB1LPENR_TIM5LPEN
 ((
uöt32_t
)0x00000008)

	)

7056 
	#RCC_APB1LPENR_TIM6LPEN
 ((
uöt32_t
)0x00000010)

	)

7057 
	#RCC_APB1LPENR_TIM7LPEN
 ((
uöt32_t
)0x00000020)

	)

7058 
	#RCC_APB1LPENR_TIM12LPEN
 ((
uöt32_t
)0x00000040)

	)

7059 
	#RCC_APB1LPENR_TIM13LPEN
 ((
uöt32_t
)0x00000080)

	)

7060 
	#RCC_APB1LPENR_TIM14LPEN
 ((
uöt32_t
)0x00000100)

	)

7061 
	#RCC_APB1LPENR_WWDGLPEN
 ((
uöt32_t
)0x00000800)

	)

7062 
	#RCC_APB1LPENR_SPI2LPEN
 ((
uöt32_t
)0x00004000)

	)

7063 
	#RCC_APB1LPENR_SPI3LPEN
 ((
uöt32_t
)0x00008000)

	)

7064 
	#RCC_APB1LPENR_USART2LPEN
 ((
uöt32_t
)0x00020000)

	)

7065 
	#RCC_APB1LPENR_USART3LPEN
 ((
uöt32_t
)0x00040000)

	)

7066 
	#RCC_APB1LPENR_UART4LPEN
 ((
uöt32_t
)0x00080000)

	)

7067 
	#RCC_APB1LPENR_UART5LPEN
 ((
uöt32_t
)0x00100000)

	)

7068 
	#RCC_APB1LPENR_I2C1LPEN
 ((
uöt32_t
)0x00200000)

	)

7069 
	#RCC_APB1LPENR_I2C2LPEN
 ((
uöt32_t
)0x00400000)

	)

7070 
	#RCC_APB1LPENR_I2C3LPEN
 ((
uöt32_t
)0x00800000)

	)

7071 
	#RCC_APB1LPENR_CAN1LPEN
 ((
uöt32_t
)0x02000000)

	)

7072 
	#RCC_APB1LPENR_CAN2LPEN
 ((
uöt32_t
)0x04000000)

	)

7073 
	#RCC_APB1LPENR_PWRLPEN
 ((
uöt32_t
)0x10000000)

	)

7074 
	#RCC_APB1LPENR_DACLPEN
 ((
uöt32_t
)0x20000000)

	)

7075 
	#RCC_APB1LPENR_UART7LPEN
 ((
uöt32_t
)0x40000000)

	)

7076 
	#RCC_APB1LPENR_UART8LPEN
 ((
uöt32_t
)0x80000000)

	)

7079 
	#RCC_APB2LPENR_TIM1LPEN
 ((
uöt32_t
)0x00000001)

	)

7080 
	#RCC_APB2LPENR_TIM8LPEN
 ((
uöt32_t
)0x00000002)

	)

7081 
	#RCC_APB2LPENR_USART1LPEN
 ((
uöt32_t
)0x00000010)

	)

7082 
	#RCC_APB2LPENR_USART6LPEN
 ((
uöt32_t
)0x00000020)

	)

7083 
	#RCC_APB2LPENR_ADC1LPEN
 ((
uöt32_t
)0x00000100)

	)

7084 
	#RCC_APB2LPENR_ADC2PEN
 ((
uöt32_t
)0x00000200)

	)

7085 
	#RCC_APB2LPENR_ADC3LPEN
 ((
uöt32_t
)0x00000400)

	)

7086 
	#RCC_APB2LPENR_SDIOLPEN
 ((
uöt32_t
)0x00000800)

	)

7087 
	#RCC_APB2LPENR_SPI1LPEN
 ((
uöt32_t
)0x00001000)

	)

7088 
	#RCC_APB2LPENR_SPI4LPEN
 ((
uöt32_t
)0x00002000)

	)

7089 
	#RCC_APB2LPENR_SYSCFGLPEN
 ((
uöt32_t
)0x00004000)

	)

7090 
	#RCC_APB2LPENR_TIM9LPEN
 ((
uöt32_t
)0x00010000)

	)

7091 
	#RCC_APB2LPENR_TIM10LPEN
 ((
uöt32_t
)0x00020000)

	)

7092 
	#RCC_APB2LPENR_TIM11LPEN
 ((
uöt32_t
)0x00040000)

	)

7093 
	#RCC_APB2LPENR_SPI5LPEN
 ((
uöt32_t
)0x00100000)

	)

7094 
	#RCC_APB2LPENR_SPI6LPEN
 ((
uöt32_t
)0x00200000)

	)

7095 
	#RCC_APB2LPENR_SAI1LPEN
 ((
uöt32_t
)0x00400000)

	)

7096 
	#RCC_APB2LPENR_LTDCLPEN
 ((
uöt32_t
)0x04000000)

	)

7099 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001)

	)

7100 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002)

	)

7101 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004)

	)

7102 
	#RCC_BDCR_LSEMOD
 ((
uöt32_t
)0x00000008)

	)

7104 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300)

	)

7105 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100)

	)

7106 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200)

	)

7108 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000)

	)

7109 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000)

	)

7112 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001)

	)

7113 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002)

	)

7114 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000)

	)

7115 
	#RCC_CSR_BORRSTF
 ((
uöt32_t
)0x02000000)

	)

7116 
	#RCC_CSR_PADRSTF
 ((
uöt32_t
)0x04000000)

	)

7117 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000)

	)

7118 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000)

	)

7119 
	#RCC_CSR_WDGRSTF
 ((
uöt32_t
)0x20000000)

	)

7120 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000)

	)

7121 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000)

	)

7124 
	#RCC_SSCGR_MODPER
 ((
uöt32_t
)0x00001FFF)

	)

7125 
	#RCC_SSCGR_INCSTEP
 ((
uöt32_t
)0x0FFFE000)

	)

7126 
	#RCC_SSCGR_SPREADSEL
 ((
uöt32_t
)0x40000000)

	)

7127 
	#RCC_SSCGR_SSCGEN
 ((
uöt32_t
)0x80000000)

	)

7130 
	#RCC_PLLI2SCFGR_PLLI2SM
 ((
uöt32_t
)0x0000003F)

	)

7131 
	#RCC_PLLI2SCFGR_PLLI2SM_0
 ((
uöt32_t
)0x00000001)

	)

7132 
	#RCC_PLLI2SCFGR_PLLI2SM_1
 ((
uöt32_t
)0x00000002)

	)

7133 
	#RCC_PLLI2SCFGR_PLLI2SM_2
 ((
uöt32_t
)0x00000004)

	)

7134 
	#RCC_PLLI2SCFGR_PLLI2SM_3
 ((
uöt32_t
)0x00000008)

	)

7135 
	#RCC_PLLI2SCFGR_PLLI2SM_4
 ((
uöt32_t
)0x00000010)

	)

7136 
	#RCC_PLLI2SCFGR_PLLI2SM_5
 ((
uöt32_t
)0x00000020)

	)

7139 
	#RCC_PLLI2SCFGR_PLLI2SN
 ((
uöt32_t
)0x00007FC0)

	)

7140 
	#RCC_PLLI2SCFGR_PLLI2SQ
 ((
uöt32_t
)0x0F000000)

	)

7141 
	#RCC_PLLI2SCFGR_PLLI2SR
 ((
uöt32_t
)0x70000000)

	)

7144 
	#RCC_PLLSAICFGR_PLLI2SN
 ((
uöt32_t
)0x00007FC0)

	)

7145 
	#RCC_PLLSAICFGR_PLLI2SQ
 ((
uöt32_t
)0x0F000000)

	)

7146 
	#RCC_PLLSAICFGR_PLLI2SR
 ((
uöt32_t
)0x70000000)

	)

7149 
	#RCC_DCKCFGR_PLLI2SDIVQ
 ((
uöt32_t
)0x0000001F)

	)

7150 
	#RCC_DCKCFGR_PLLSAIDIVQ
 ((
uöt32_t
)0x00001F00)

	)

7151 
	#RCC_DCKCFGR_PLLSAIDIVR
 ((
uöt32_t
)0x00030000)

	)

7152 
	#RCC_DCKCFGR_SAI1ASRC
 ((
uöt32_t
)0x00300000)

	)

7153 
	#RCC_DCKCFGR_SAI1BSRC
 ((
uöt32_t
)0x00C00000)

	)

7154 
	#RCC_DCKCFGR_TIMPRE
 ((
uöt32_t
)0x01000000)

	)

7163 
	#RNG_CR_RNGEN
 ((
uöt32_t
)0x00000004)

	)

7164 
	#RNG_CR_IE
 ((
uöt32_t
)0x00000008)

	)

7167 
	#RNG_SR_DRDY
 ((
uöt32_t
)0x00000001)

	)

7168 
	#RNG_SR_CECS
 ((
uöt32_t
)0x00000002)

	)

7169 
	#RNG_SR_SECS
 ((
uöt32_t
)0x00000004)

	)

7170 
	#RNG_SR_CEIS
 ((
uöt32_t
)0x00000020)

	)

7171 
	#RNG_SR_SEIS
 ((
uöt32_t
)0x00000040)

	)

7179 
	#RTC_TR_PM
 ((
uöt32_t
)0x00400000)

	)

7180 
	#RTC_TR_HT
 ((
uöt32_t
)0x00300000)

	)

7181 
	#RTC_TR_HT_0
 ((
uöt32_t
)0x00100000)

	)

7182 
	#RTC_TR_HT_1
 ((
uöt32_t
)0x00200000)

	)

7183 
	#RTC_TR_HU
 ((
uöt32_t
)0x000F0000)

	)

7184 
	#RTC_TR_HU_0
 ((
uöt32_t
)0x00010000)

	)

7185 
	#RTC_TR_HU_1
 ((
uöt32_t
)0x00020000)

	)

7186 
	#RTC_TR_HU_2
 ((
uöt32_t
)0x00040000)

	)

7187 
	#RTC_TR_HU_3
 ((
uöt32_t
)0x00080000)

	)

7188 
	#RTC_TR_MNT
 ((
uöt32_t
)0x00007000)

	)

7189 
	#RTC_TR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

7190 
	#RTC_TR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

7191 
	#RTC_TR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

7192 
	#RTC_TR_MNU
 ((
uöt32_t
)0x00000F00)

	)

7193 
	#RTC_TR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

7194 
	#RTC_TR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

7195 
	#RTC_TR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

7196 
	#RTC_TR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

7197 
	#RTC_TR_ST
 ((
uöt32_t
)0x00000070)

	)

7198 
	#RTC_TR_ST_0
 ((
uöt32_t
)0x00000010)

	)

7199 
	#RTC_TR_ST_1
 ((
uöt32_t
)0x00000020)

	)

7200 
	#RTC_TR_ST_2
 ((
uöt32_t
)0x00000040)

	)

7201 
	#RTC_TR_SU
 ((
uöt32_t
)0x0000000F)

	)

7202 
	#RTC_TR_SU_0
 ((
uöt32_t
)0x00000001)

	)

7203 
	#RTC_TR_SU_1
 ((
uöt32_t
)0x00000002)

	)

7204 
	#RTC_TR_SU_2
 ((
uöt32_t
)0x00000004)

	)

7205 
	#RTC_TR_SU_3
 ((
uöt32_t
)0x00000008)

	)

7208 
	#RTC_DR_YT
 ((
uöt32_t
)0x00F00000)

	)

7209 
	#RTC_DR_YT_0
 ((
uöt32_t
)0x00100000)

	)

7210 
	#RTC_DR_YT_1
 ((
uöt32_t
)0x00200000)

	)

7211 
	#RTC_DR_YT_2
 ((
uöt32_t
)0x00400000)

	)

7212 
	#RTC_DR_YT_3
 ((
uöt32_t
)0x00800000)

	)

7213 
	#RTC_DR_YU
 ((
uöt32_t
)0x000F0000)

	)

7214 
	#RTC_DR_YU_0
 ((
uöt32_t
)0x00010000)

	)

7215 
	#RTC_DR_YU_1
 ((
uöt32_t
)0x00020000)

	)

7216 
	#RTC_DR_YU_2
 ((
uöt32_t
)0x00040000)

	)

7217 
	#RTC_DR_YU_3
 ((
uöt32_t
)0x00080000)

	)

7218 
	#RTC_DR_WDU
 ((
uöt32_t
)0x0000E000)

	)

7219 
	#RTC_DR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

7220 
	#RTC_DR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

7221 
	#RTC_DR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

7222 
	#RTC_DR_MT
 ((
uöt32_t
)0x00001000)

	)

7223 
	#RTC_DR_MU
 ((
uöt32_t
)0x00000F00)

	)

7224 
	#RTC_DR_MU_0
 ((
uöt32_t
)0x00000100)

	)

7225 
	#RTC_DR_MU_1
 ((
uöt32_t
)0x00000200)

	)

7226 
	#RTC_DR_MU_2
 ((
uöt32_t
)0x00000400)

	)

7227 
	#RTC_DR_MU_3
 ((
uöt32_t
)0x00000800)

	)

7228 
	#RTC_DR_DT
 ((
uöt32_t
)0x00000030)

	)

7229 
	#RTC_DR_DT_0
 ((
uöt32_t
)0x00000010)

	)

7230 
	#RTC_DR_DT_1
 ((
uöt32_t
)0x00000020)

	)

7231 
	#RTC_DR_DU
 ((
uöt32_t
)0x0000000F)

	)

7232 
	#RTC_DR_DU_0
 ((
uöt32_t
)0x00000001)

	)

7233 
	#RTC_DR_DU_1
 ((
uöt32_t
)0x00000002)

	)

7234 
	#RTC_DR_DU_2
 ((
uöt32_t
)0x00000004)

	)

7235 
	#RTC_DR_DU_3
 ((
uöt32_t
)0x00000008)

	)

7238 
	#RTC_CR_COE
 ((
uöt32_t
)0x00800000)

	)

7239 
	#RTC_CR_OSEL
 ((
uöt32_t
)0x00600000)

	)

7240 
	#RTC_CR_OSEL_0
 ((
uöt32_t
)0x00200000)

	)

7241 
	#RTC_CR_OSEL_1
 ((
uöt32_t
)0x00400000)

	)

7242 
	#RTC_CR_POL
 ((
uöt32_t
)0x00100000)

	)

7243 
	#RTC_CR_COSEL
 ((
uöt32_t
)0x00080000)

	)

7244 
	#RTC_CR_BCK
 ((
uöt32_t
)0x00040000)

	)

7245 
	#RTC_CR_SUB1H
 ((
uöt32_t
)0x00020000)

	)

7246 
	#RTC_CR_ADD1H
 ((
uöt32_t
)0x00010000)

	)

7247 
	#RTC_CR_TSIE
 ((
uöt32_t
)0x00008000)

	)

7248 
	#RTC_CR_WUTIE
 ((
uöt32_t
)0x00004000)

	)

7249 
	#RTC_CR_ALRBIE
 ((
uöt32_t
)0x00002000)

	)

7250 
	#RTC_CR_ALRAIE
 ((
uöt32_t
)0x00001000)

	)

7251 
	#RTC_CR_TSE
 ((
uöt32_t
)0x00000800)

	)

7252 
	#RTC_CR_WUTE
 ((
uöt32_t
)0x00000400)

	)

7253 
	#RTC_CR_ALRBE
 ((
uöt32_t
)0x00000200)

	)

7254 
	#RTC_CR_ALRAE
 ((
uöt32_t
)0x00000100)

	)

7255 
	#RTC_CR_DCE
 ((
uöt32_t
)0x00000080)

	)

7256 
	#RTC_CR_FMT
 ((
uöt32_t
)0x00000040)

	)

7257 
	#RTC_CR_BYPSHAD
 ((
uöt32_t
)0x00000020)

	)

7258 
	#RTC_CR_REFCKON
 ((
uöt32_t
)0x00000010)

	)

7259 
	#RTC_CR_TSEDGE
 ((
uöt32_t
)0x00000008)

	)

7260 
	#RTC_CR_WUCKSEL
 ((
uöt32_t
)0x00000007)

	)

7261 
	#RTC_CR_WUCKSEL_0
 ((
uöt32_t
)0x00000001)

	)

7262 
	#RTC_CR_WUCKSEL_1
 ((
uöt32_t
)0x00000002)

	)

7263 
	#RTC_CR_WUCKSEL_2
 ((
uöt32_t
)0x00000004)

	)

7266 
	#RTC_ISR_RECALPF
 ((
uöt32_t
)0x00010000)

	)

7267 
	#RTC_ISR_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

7268 
	#RTC_ISR_TSOVF
 ((
uöt32_t
)0x00001000)

	)

7269 
	#RTC_ISR_TSF
 ((
uöt32_t
)0x00000800)

	)

7270 
	#RTC_ISR_WUTF
 ((
uöt32_t
)0x00000400)

	)

7271 
	#RTC_ISR_ALRBF
 ((
uöt32_t
)0x00000200)

	)

7272 
	#RTC_ISR_ALRAF
 ((
uöt32_t
)0x00000100)

	)

7273 
	#RTC_ISR_INIT
 ((
uöt32_t
)0x00000080)

	)

7274 
	#RTC_ISR_INITF
 ((
uöt32_t
)0x00000040)

	)

7275 
	#RTC_ISR_RSF
 ((
uöt32_t
)0x00000020)

	)

7276 
	#RTC_ISR_INITS
 ((
uöt32_t
)0x00000010)

	)

7277 
	#RTC_ISR_SHPF
 ((
uöt32_t
)0x00000008)

	)

7278 
	#RTC_ISR_WUTWF
 ((
uöt32_t
)0x00000004)

	)

7279 
	#RTC_ISR_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

7280 
	#RTC_ISR_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

7283 
	#RTC_PRER_PREDIV_A
 ((
uöt32_t
)0x007F0000)

	)

7284 
	#RTC_PRER_PREDIV_S
 ((
uöt32_t
)0x00001FFF)

	)

7287 
	#RTC_WUTR_WUT
 ((
uöt32_t
)0x0000FFFF)

	)

7290 
	#RTC_CALIBR_DCS
 ((
uöt32_t
)0x00000080)

	)

7291 
	#RTC_CALIBR_DC
 ((
uöt32_t
)0x0000001F)

	)

7294 
	#RTC_ALRMAR_MSK4
 ((
uöt32_t
)0x80000000)

	)

7295 
	#RTC_ALRMAR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

7296 
	#RTC_ALRMAR_DT
 ((
uöt32_t
)0x30000000)

	)

7297 
	#RTC_ALRMAR_DT_0
 ((
uöt32_t
)0x10000000)

	)

7298 
	#RTC_ALRMAR_DT_1
 ((
uöt32_t
)0x20000000)

	)

7299 
	#RTC_ALRMAR_DU
 ((
uöt32_t
)0x0F000000)

	)

7300 
	#RTC_ALRMAR_DU_0
 ((
uöt32_t
)0x01000000)

	)

7301 
	#RTC_ALRMAR_DU_1
 ((
uöt32_t
)0x02000000)

	)

7302 
	#RTC_ALRMAR_DU_2
 ((
uöt32_t
)0x04000000)

	)

7303 
	#RTC_ALRMAR_DU_3
 ((
uöt32_t
)0x08000000)

	)

7304 
	#RTC_ALRMAR_MSK3
 ((
uöt32_t
)0x00800000)

	)

7305 
	#RTC_ALRMAR_PM
 ((
uöt32_t
)0x00400000)

	)

7306 
	#RTC_ALRMAR_HT
 ((
uöt32_t
)0x00300000)

	)

7307 
	#RTC_ALRMAR_HT_0
 ((
uöt32_t
)0x00100000)

	)

7308 
	#RTC_ALRMAR_HT_1
 ((
uöt32_t
)0x00200000)

	)

7309 
	#RTC_ALRMAR_HU
 ((
uöt32_t
)0x000F0000)

	)

7310 
	#RTC_ALRMAR_HU_0
 ((
uöt32_t
)0x00010000)

	)

7311 
	#RTC_ALRMAR_HU_1
 ((
uöt32_t
)0x00020000)

	)

7312 
	#RTC_ALRMAR_HU_2
 ((
uöt32_t
)0x00040000)

	)

7313 
	#RTC_ALRMAR_HU_3
 ((
uöt32_t
)0x00080000)

	)

7314 
	#RTC_ALRMAR_MSK2
 ((
uöt32_t
)0x00008000)

	)

7315 
	#RTC_ALRMAR_MNT
 ((
uöt32_t
)0x00007000)

	)

7316 
	#RTC_ALRMAR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

7317 
	#RTC_ALRMAR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

7318 
	#RTC_ALRMAR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

7319 
	#RTC_ALRMAR_MNU
 ((
uöt32_t
)0x00000F00)

	)

7320 
	#RTC_ALRMAR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

7321 
	#RTC_ALRMAR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

7322 
	#RTC_ALRMAR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

7323 
	#RTC_ALRMAR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

7324 
	#RTC_ALRMAR_MSK1
 ((
uöt32_t
)0x00000080)

	)

7325 
	#RTC_ALRMAR_ST
 ((
uöt32_t
)0x00000070)

	)

7326 
	#RTC_ALRMAR_ST_0
 ((
uöt32_t
)0x00000010)

	)

7327 
	#RTC_ALRMAR_ST_1
 ((
uöt32_t
)0x00000020)

	)

7328 
	#RTC_ALRMAR_ST_2
 ((
uöt32_t
)0x00000040)

	)

7329 
	#RTC_ALRMAR_SU
 ((
uöt32_t
)0x0000000F)

	)

7330 
	#RTC_ALRMAR_SU_0
 ((
uöt32_t
)0x00000001)

	)

7331 
	#RTC_ALRMAR_SU_1
 ((
uöt32_t
)0x00000002)

	)

7332 
	#RTC_ALRMAR_SU_2
 ((
uöt32_t
)0x00000004)

	)

7333 
	#RTC_ALRMAR_SU_3
 ((
uöt32_t
)0x00000008)

	)

7336 
	#RTC_ALRMBR_MSK4
 ((
uöt32_t
)0x80000000)

	)

7337 
	#RTC_ALRMBR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

7338 
	#RTC_ALRMBR_DT
 ((
uöt32_t
)0x30000000)

	)

7339 
	#RTC_ALRMBR_DT_0
 ((
uöt32_t
)0x10000000)

	)

7340 
	#RTC_ALRMBR_DT_1
 ((
uöt32_t
)0x20000000)

	)

7341 
	#RTC_ALRMBR_DU
 ((
uöt32_t
)0x0F000000)

	)

7342 
	#RTC_ALRMBR_DU_0
 ((
uöt32_t
)0x01000000)

	)

7343 
	#RTC_ALRMBR_DU_1
 ((
uöt32_t
)0x02000000)

	)

7344 
	#RTC_ALRMBR_DU_2
 ((
uöt32_t
)0x04000000)

	)

7345 
	#RTC_ALRMBR_DU_3
 ((
uöt32_t
)0x08000000)

	)

7346 
	#RTC_ALRMBR_MSK3
 ((
uöt32_t
)0x00800000)

	)

7347 
	#RTC_ALRMBR_PM
 ((
uöt32_t
)0x00400000)

	)

7348 
	#RTC_ALRMBR_HT
 ((
uöt32_t
)0x00300000)

	)

7349 
	#RTC_ALRMBR_HT_0
 ((
uöt32_t
)0x00100000)

	)

7350 
	#RTC_ALRMBR_HT_1
 ((
uöt32_t
)0x00200000)

	)

7351 
	#RTC_ALRMBR_HU
 ((
uöt32_t
)0x000F0000)

	)

7352 
	#RTC_ALRMBR_HU_0
 ((
uöt32_t
)0x00010000)

	)

7353 
	#RTC_ALRMBR_HU_1
 ((
uöt32_t
)0x00020000)

	)

7354 
	#RTC_ALRMBR_HU_2
 ((
uöt32_t
)0x00040000)

	)

7355 
	#RTC_ALRMBR_HU_3
 ((
uöt32_t
)0x00080000)

	)

7356 
	#RTC_ALRMBR_MSK2
 ((
uöt32_t
)0x00008000)

	)

7357 
	#RTC_ALRMBR_MNT
 ((
uöt32_t
)0x00007000)

	)

7358 
	#RTC_ALRMBR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

7359 
	#RTC_ALRMBR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

7360 
	#RTC_ALRMBR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

7361 
	#RTC_ALRMBR_MNU
 ((
uöt32_t
)0x00000F00)

	)

7362 
	#RTC_ALRMBR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

7363 
	#RTC_ALRMBR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

7364 
	#RTC_ALRMBR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

7365 
	#RTC_ALRMBR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

7366 
	#RTC_ALRMBR_MSK1
 ((
uöt32_t
)0x00000080)

	)

7367 
	#RTC_ALRMBR_ST
 ((
uöt32_t
)0x00000070)

	)

7368 
	#RTC_ALRMBR_ST_0
 ((
uöt32_t
)0x00000010)

	)

7369 
	#RTC_ALRMBR_ST_1
 ((
uöt32_t
)0x00000020)

	)

7370 
	#RTC_ALRMBR_ST_2
 ((
uöt32_t
)0x00000040)

	)

7371 
	#RTC_ALRMBR_SU
 ((
uöt32_t
)0x0000000F)

	)

7372 
	#RTC_ALRMBR_SU_0
 ((
uöt32_t
)0x00000001)

	)

7373 
	#RTC_ALRMBR_SU_1
 ((
uöt32_t
)0x00000002)

	)

7374 
	#RTC_ALRMBR_SU_2
 ((
uöt32_t
)0x00000004)

	)

7375 
	#RTC_ALRMBR_SU_3
 ((
uöt32_t
)0x00000008)

	)

7378 
	#RTC_WPR_KEY
 ((
uöt32_t
)0x000000FF)

	)

7381 
	#RTC_SSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

7384 
	#RTC_SHIFTR_SUBFS
 ((
uöt32_t
)0x00007FFF)

	)

7385 
	#RTC_SHIFTR_ADD1S
 ((
uöt32_t
)0x80000000)

	)

7388 
	#RTC_TSTR_PM
 ((
uöt32_t
)0x00400000)

	)

7389 
	#RTC_TSTR_HT
 ((
uöt32_t
)0x00300000)

	)

7390 
	#RTC_TSTR_HT_0
 ((
uöt32_t
)0x00100000)

	)

7391 
	#RTC_TSTR_HT_1
 ((
uöt32_t
)0x00200000)

	)

7392 
	#RTC_TSTR_HU
 ((
uöt32_t
)0x000F0000)

	)

7393 
	#RTC_TSTR_HU_0
 ((
uöt32_t
)0x00010000)

	)

7394 
	#RTC_TSTR_HU_1
 ((
uöt32_t
)0x00020000)

	)

7395 
	#RTC_TSTR_HU_2
 ((
uöt32_t
)0x00040000)

	)

7396 
	#RTC_TSTR_HU_3
 ((
uöt32_t
)0x00080000)

	)

7397 
	#RTC_TSTR_MNT
 ((
uöt32_t
)0x00007000)

	)

7398 
	#RTC_TSTR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

7399 
	#RTC_TSTR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

7400 
	#RTC_TSTR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

7401 
	#RTC_TSTR_MNU
 ((
uöt32_t
)0x00000F00)

	)

7402 
	#RTC_TSTR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

7403 
	#RTC_TSTR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

7404 
	#RTC_TSTR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

7405 
	#RTC_TSTR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

7406 
	#RTC_TSTR_ST
 ((
uöt32_t
)0x00000070)

	)

7407 
	#RTC_TSTR_ST_0
 ((
uöt32_t
)0x00000010)

	)

7408 
	#RTC_TSTR_ST_1
 ((
uöt32_t
)0x00000020)

	)

7409 
	#RTC_TSTR_ST_2
 ((
uöt32_t
)0x00000040)

	)

7410 
	#RTC_TSTR_SU
 ((
uöt32_t
)0x0000000F)

	)

7411 
	#RTC_TSTR_SU_0
 ((
uöt32_t
)0x00000001)

	)

7412 
	#RTC_TSTR_SU_1
 ((
uöt32_t
)0x00000002)

	)

7413 
	#RTC_TSTR_SU_2
 ((
uöt32_t
)0x00000004)

	)

7414 
	#RTC_TSTR_SU_3
 ((
uöt32_t
)0x00000008)

	)

7417 
	#RTC_TSDR_WDU
 ((
uöt32_t
)0x0000E000)

	)

7418 
	#RTC_TSDR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

7419 
	#RTC_TSDR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

7420 
	#RTC_TSDR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

7421 
	#RTC_TSDR_MT
 ((
uöt32_t
)0x00001000)

	)

7422 
	#RTC_TSDR_MU
 ((
uöt32_t
)0x00000F00)

	)

7423 
	#RTC_TSDR_MU_0
 ((
uöt32_t
)0x00000100)

	)

7424 
	#RTC_TSDR_MU_1
 ((
uöt32_t
)0x00000200)

	)

7425 
	#RTC_TSDR_MU_2
 ((
uöt32_t
)0x00000400)

	)

7426 
	#RTC_TSDR_MU_3
 ((
uöt32_t
)0x00000800)

	)

7427 
	#RTC_TSDR_DT
 ((
uöt32_t
)0x00000030)

	)

7428 
	#RTC_TSDR_DT_0
 ((
uöt32_t
)0x00000010)

	)

7429 
	#RTC_TSDR_DT_1
 ((
uöt32_t
)0x00000020)

	)

7430 
	#RTC_TSDR_DU
 ((
uöt32_t
)0x0000000F)

	)

7431 
	#RTC_TSDR_DU_0
 ((
uöt32_t
)0x00000001)

	)

7432 
	#RTC_TSDR_DU_1
 ((
uöt32_t
)0x00000002)

	)

7433 
	#RTC_TSDR_DU_2
 ((
uöt32_t
)0x00000004)

	)

7434 
	#RTC_TSDR_DU_3
 ((
uöt32_t
)0x00000008)

	)

7437 
	#RTC_TSSSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

7440 
	#RTC_CALR_CALP
 ((
uöt32_t
)0x00008000)

	)

7441 
	#RTC_CALR_CALW8
 ((
uöt32_t
)0x00004000)

	)

7442 
	#RTC_CALR_CALW16
 ((
uöt32_t
)0x00002000)

	)

7443 
	#RTC_CALR_CALM
 ((
uöt32_t
)0x000001FF)

	)

7444 
	#RTC_CALR_CALM_0
 ((
uöt32_t
)0x00000001)

	)

7445 
	#RTC_CALR_CALM_1
 ((
uöt32_t
)0x00000002)

	)

7446 
	#RTC_CALR_CALM_2
 ((
uöt32_t
)0x00000004)

	)

7447 
	#RTC_CALR_CALM_3
 ((
uöt32_t
)0x00000008)

	)

7448 
	#RTC_CALR_CALM_4
 ((
uöt32_t
)0x00000010)

	)

7449 
	#RTC_CALR_CALM_5
 ((
uöt32_t
)0x00000020)

	)

7450 
	#RTC_CALR_CALM_6
 ((
uöt32_t
)0x00000040)

	)

7451 
	#RTC_CALR_CALM_7
 ((
uöt32_t
)0x00000080)

	)

7452 
	#RTC_CALR_CALM_8
 ((
uöt32_t
)0x00000100)

	)

7455 
	#RTC_TAFCR_ALARMOUTTYPE
 ((
uöt32_t
)0x00040000)

	)

7456 
	#RTC_TAFCR_TSINSEL
 ((
uöt32_t
)0x00020000)

	)

7457 
	#RTC_TAFCR_TAMPINSEL
 ((
uöt32_t
)0x00010000)

	)

7458 
	#RTC_TAFCR_TAMPPUDIS
 ((
uöt32_t
)0x00008000)

	)

7459 
	#RTC_TAFCR_TAMPPRCH
 ((
uöt32_t
)0x00006000)

	)

7460 
	#RTC_TAFCR_TAMPPRCH_0
 ((
uöt32_t
)0x00002000)

	)

7461 
	#RTC_TAFCR_TAMPPRCH_1
 ((
uöt32_t
)0x00004000)

	)

7462 
	#RTC_TAFCR_TAMPFLT
 ((
uöt32_t
)0x00001800)

	)

7463 
	#RTC_TAFCR_TAMPFLT_0
 ((
uöt32_t
)0x00000800)

	)

7464 
	#RTC_TAFCR_TAMPFLT_1
 ((
uöt32_t
)0x00001000)

	)

7465 
	#RTC_TAFCR_TAMPFREQ
 ((
uöt32_t
)0x00000700)

	)

7466 
	#RTC_TAFCR_TAMPFREQ_0
 ((
uöt32_t
)0x00000100)

	)

7467 
	#RTC_TAFCR_TAMPFREQ_1
 ((
uöt32_t
)0x00000200)

	)

7468 
	#RTC_TAFCR_TAMPFREQ_2
 ((
uöt32_t
)0x00000400)

	)

7469 
	#RTC_TAFCR_TAMPTS
 ((
uöt32_t
)0x00000080)

	)

7470 
	#RTC_TAFCR_TAMPIE
 ((
uöt32_t
)0x00000004)

	)

7471 
	#RTC_TAFCR_TAMP1TRG
 ((
uöt32_t
)0x00000002)

	)

7472 
	#RTC_TAFCR_TAMP1E
 ((
uöt32_t
)0x00000001)

	)

7475 
	#RTC_ALRMASSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

7476 
	#RTC_ALRMASSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

7477 
	#RTC_ALRMASSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

7478 
	#RTC_ALRMASSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

7479 
	#RTC_ALRMASSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

7480 
	#RTC_ALRMASSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

7483 
	#RTC_ALRMBSSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

7484 
	#RTC_ALRMBSSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

7485 
	#RTC_ALRMBSSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

7486 
	#RTC_ALRMBSSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

7487 
	#RTC_ALRMBSSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

7488 
	#RTC_ALRMBSSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

7491 
	#RTC_BKP0R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7494 
	#RTC_BKP1R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7497 
	#RTC_BKP2R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7500 
	#RTC_BKP3R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7503 
	#RTC_BKP4R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7506 
	#RTC_BKP5R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7509 
	#RTC_BKP6R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7512 
	#RTC_BKP7R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7515 
	#RTC_BKP8R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7518 
	#RTC_BKP9R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7521 
	#RTC_BKP10R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7524 
	#RTC_BKP11R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7527 
	#RTC_BKP12R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7530 
	#RTC_BKP13R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7533 
	#RTC_BKP14R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7536 
	#RTC_BKP15R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7539 
	#RTC_BKP16R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7542 
	#RTC_BKP17R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7545 
	#RTC_BKP18R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7548 
	#RTC_BKP19R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7556 
	#SAI_GCR_SYNCIN
 ((
uöt32_t
)0x00000003Ë

	)

7557 
	#SAI_GCR_SYNCIN_0
 ((
uöt32_t
)0x00000001Ë

	)

7558 
	#SAI_GCR_SYNCIN_1
 ((
uöt32_t
)0x00000002Ë

	)

7560 
	#SAI_GCR_SYNCOUT
 ((
uöt32_t
)0x00000030Ë

	)

7561 
	#SAI_GCR_SYNCOUT_0
 ((
uöt32_t
)0x00000010Ë

	)

7562 
	#SAI_GCR_SYNCOUT_1
 ((
uöt32_t
)0x00000020Ë

	)

7565 
	#SAI_xCR1_MODE
 ((
uöt32_t
)0x00000003Ë

	)

7566 
	#SAI_xCR1_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

7567 
	#SAI_xCR1_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

7569 
	#SAI_xCR1_PRTCFG
 ((
uöt32_t
)0x0000000CË

	)

7570 
	#SAI_xCR1_PRTCFG_0
 ((
uöt32_t
)0x00000004Ë

	)

7571 
	#SAI_xCR1_PRTCFG_1
 ((
uöt32_t
)0x00000008Ë

	)

7573 
	#SAI_xCR1_DS
 ((
uöt32_t
)0x000000E0Ë

	)

7574 
	#SAI_xCR1_DS_0
 ((
uöt32_t
)0x00000020Ë

	)

7575 
	#SAI_xCR1_DS_1
 ((
uöt32_t
)0x00000040Ë

	)

7576 
	#SAI_xCR1_DS_2
 ((
uöt32_t
)0x00000080Ë

	)

7578 
	#SAI_xCR1_LSBFIRST
 ((
uöt32_t
)0x00000100Ë

	)

7579 
	#SAI_xCR1_CKSTR
 ((
uöt32_t
)0x00000200Ë

	)

7581 
	#SAI_xCR1_SYNCEN
 ((
uöt32_t
)0x00000C00Ë

	)

7582 
	#SAI_xCR1_SYNCEN_0
 ((
uöt32_t
)0x00000400Ë

	)

7583 
	#SAI_xCR1_SYNCEN_1
 ((
uöt32_t
)0x00000800Ë

	)

7585 
	#SAI_xCR1_MONO
 ((
uöt32_t
)0x00001000Ë

	)

7586 
	#SAI_xCR1_OUTDRIV
 ((
uöt32_t
)0x00002000Ë

	)

7587 
	#SAI_xCR1_SAIEN
 ((
uöt32_t
)0x00010000Ë

	)

7588 
	#SAI_xCR1_DMAEN
 ((
uöt32_t
)0x00020000Ë

	)

7589 
	#SAI_xCR1_NODIV
 ((
uöt32_t
)0x00080000Ë

	)

7591 
	#SAI_xCR1_MCKDIV
 ((
uöt32_t
)0x00780000Ë

	)

7592 
	#SAI_xCR1_MCKDIV_0
 ((
uöt32_t
)0x00080000Ë

	)

7593 
	#SAI_xCR1_MCKDIV_1
 ((
uöt32_t
)0x00100000Ë

	)

7594 
	#SAI_xCR1_MCKDIV_2
 ((
uöt32_t
)0x00200000Ë

	)

7595 
	#SAI_xCR1_MCKDIV_3
 ((
uöt32_t
)0x00400000Ë

	)

7598 
	#SAI_xCR2_FTH
 ((
uöt32_t
)0x00000003Ë

	)

7599 
	#SAI_xCR2_FTH_0
 ((
uöt32_t
)0x00000001Ë

	)

7600 
	#SAI_xCR2_FTH_1
 ((
uöt32_t
)0x00000002Ë

	)

7602 
	#SAI_xCR2_FFLUSH
 ((
uöt32_t
)0x00000008Ë

	)

7603 
	#SAI_xCR2_TRIS
 ((
uöt32_t
)0x00000010Ë

	)

7604 
	#SAI_xCR2_MUTE
 ((
uöt32_t
)0x00000020Ë

	)

7605 
	#SAI_xCR2_MUTEVAL
 ((
uöt32_t
)0x00000040Ë

	)

7607 
	#SAI_xCR2_MUTECNT
 ((
uöt32_t
)0x00001F80Ë

	)

7608 
	#SAI_xCR2_MUTECNT_0
 ((
uöt32_t
)0x00000080Ë

	)

7609 
	#SAI_xCR2_MUTECNT_1
 ((
uöt32_t
)0x00000100Ë

	)

7610 
	#SAI_xCR2_MUTECNT_2
 ((
uöt32_t
)0x00000200Ë

	)

7611 
	#SAI_xCR2_MUTECNT_3
 ((
uöt32_t
)0x00000400Ë

	)

7612 
	#SAI_xCR2_MUTECNT_4
 ((
uöt32_t
)0x00000800Ë

	)

7613 
	#SAI_xCR2_MUTECNT_5
 ((
uöt32_t
)0x00001000Ë

	)

7615 
	#SAI_xCR2_CPL
 ((
uöt32_t
)0x00080000Ë

	)

7617 
	#SAI_xCR2_COMP
 ((
uöt32_t
)0x0000C000Ë

	)

7618 
	#SAI_xCR2_COMP_0
 ((
uöt32_t
)0x00004000Ë

	)

7619 
	#SAI_xCR2_COMP_1
 ((
uöt32_t
)0x00008000Ë

	)

7622 
	#SAI_xFRCR_FRL
 ((
uöt32_t
)0x000000FFË

	)

7623 
	#SAI_xFRCR_FRL_0
 ((
uöt32_t
)0x00000001Ë

	)

7624 
	#SAI_xFRCR_FRL_1
 ((
uöt32_t
)0x00000002Ë

	)

7625 
	#SAI_xFRCR_FRL_2
 ((
uöt32_t
)0x00000004Ë

	)

7626 
	#SAI_xFRCR_FRL_3
 ((
uöt32_t
)0x00000008Ë

	)

7627 
	#SAI_xFRCR_FRL_4
 ((
uöt32_t
)0x00000010Ë

	)

7628 
	#SAI_xFRCR_FRL_5
 ((
uöt32_t
)0x00000020Ë

	)

7629 
	#SAI_xFRCR_FRL_6
 ((
uöt32_t
)0x00000040Ë

	)

7630 
	#SAI_xFRCR_FRL_7
 ((
uöt32_t
)0x00000080Ë

	)

7632 
	#SAI_xFRCR_FSALL
 ((
uöt32_t
)0x00007F00Ë

	)

7633 
	#SAI_xFRCR_FSALL_0
 ((
uöt32_t
)0x00000100Ë

	)

7634 
	#SAI_xFRCR_FSALL_1
 ((
uöt32_t
)0x00000200Ë

	)

7635 
	#SAI_xFRCR_FSALL_2
 ((
uöt32_t
)0x00000400Ë

	)

7636 
	#SAI_xFRCR_FSALL_3
 ((
uöt32_t
)0x00000800Ë

	)

7637 
	#SAI_xFRCR_FSALL_4
 ((
uöt32_t
)0x00001000Ë

	)

7638 
	#SAI_xFRCR_FSALL_5
 ((
uöt32_t
)0x00002000Ë

	)

7639 
	#SAI_xFRCR_FSALL_6
 ((
uöt32_t
)0x00004000Ë

	)

7641 
	#SAI_xFRCR_FSDEF
 ((
uöt32_t
)0x00010000Ë

	)

7642 
	#SAI_xFRCR_FSPO
 ((
uöt32_t
)0x00020000Ë

	)

7643 
	#SAI_xFRCR_FSOFF
 ((
uöt32_t
)0x00040000Ë

	)

7646 
	#SAI_xSLOTR_FBOFF
 ((
uöt32_t
)0x0000001FË

	)

7647 
	#SAI_xSLOTR_FBOFF_0
 ((
uöt32_t
)0x00000001Ë

	)

7648 
	#SAI_xSLOTR_FBOFF_1
 ((
uöt32_t
)0x00000002Ë

	)

7649 
	#SAI_xSLOTR_FBOFF_2
 ((
uöt32_t
)0x00000004Ë

	)

7650 
	#SAI_xSLOTR_FBOFF_3
 ((
uöt32_t
)0x00000008Ë

	)

7651 
	#SAI_xSLOTR_FBOFF_4
 ((
uöt32_t
)0x00000010Ë

	)

7653 
	#SAI_xSLOTR_SLOTSZ
 ((
uöt32_t
)0x000000C0Ë

	)

7654 
	#SAI_xSLOTR_SLOTSZ_0
 ((
uöt32_t
)0x00000040Ë

	)

7655 
	#SAI_xSLOTR_SLOTSZ_1
 ((
uöt32_t
)0x00000080Ë

	)

7657 
	#SAI_xSLOTR_NBSLOT
 ((
uöt32_t
)0x00000F00Ë

	)

7658 
	#SAI_xSLOTR_NBSLOT_0
 ((
uöt32_t
)0x00000100Ë

	)

7659 
	#SAI_xSLOTR_NBSLOT_1
 ((
uöt32_t
)0x00000200Ë

	)

7660 
	#SAI_xSLOTR_NBSLOT_2
 ((
uöt32_t
)0x00000400Ë

	)

7661 
	#SAI_xSLOTR_NBSLOT_3
 ((
uöt32_t
)0x00000800Ë

	)

7663 
	#SAI_xSLOTR_SLOTEN
 ((
uöt32_t
)0xFFFF0000Ë

	)

7666 
	#SAI_xIMR_OVRUDRIE
 ((
uöt32_t
)0x00000001Ë

	)

7667 
	#SAI_xIMR_MUTEDETIE
 ((
uöt32_t
)0x00000002Ë

	)

7668 
	#SAI_xIMR_WCKCFGIE
 ((
uöt32_t
)0x00000004Ë

	)

7669 
	#SAI_xIMR_FREQIE
 ((
uöt32_t
)0x00000008Ë

	)

7670 
	#SAI_xIMR_CNRDYIE
 ((
uöt32_t
)0x00000010Ë

	)

7671 
	#SAI_xIMR_AFSDETIE
 ((
uöt32_t
)0x00000020Ë

	)

7672 
	#SAI_xIMR_LFSDETIE
 ((
uöt32_t
)0x00000040Ë

	)

7675 
	#SAI_xSR_OVRUDR
 ((
uöt32_t
)0x00000001Ë

	)

7676 
	#SAI_xSR_MUTEDET
 ((
uöt32_t
)0x00000002Ë

	)

7677 
	#SAI_xSR_WCKCFG
 ((
uöt32_t
)0x00000004Ë

	)

7678 
	#SAI_xSR_FREQ
 ((
uöt32_t
)0x00000008Ë

	)

7679 
	#SAI_xSR_CNRDY
 ((
uöt32_t
)0x00000010Ë

	)

7680 
	#SAI_xSR_AFSDET
 ((
uöt32_t
)0x00000020Ë

	)

7681 
	#SAI_xSR_LFSDET
 ((
uöt32_t
)0x00000040Ë

	)

7683 
	#SAI_xSR_FLVL
 ((
uöt32_t
)0x00070000Ë

	)

7684 
	#SAI_xSR_FLVL_0
 ((
uöt32_t
)0x00010000Ë

	)

7685 
	#SAI_xSR_FLVL_1
 ((
uöt32_t
)0x00020000Ë

	)

7686 
	#SAI_xSR_FLVL_2
 ((
uöt32_t
)0x00030000Ë

	)

7689 
	#SAI_xCLRFR_COVRUDR
 ((
uöt32_t
)0x00000001Ë

	)

7690 
	#SAI_xCLRFR_CMUTEDET
 ((
uöt32_t
)0x00000002Ë

	)

7691 
	#SAI_xCLRFR_CWCKCFG
 ((
uöt32_t
)0x00000004Ë

	)

7692 
	#SAI_xCLRFR_CFREQ
 ((
uöt32_t
)0x00000008Ë

	)

7693 
	#SAI_xCLRFR_CCNRDY
 ((
uöt32_t
)0x00000010Ë

	)

7694 
	#SAI_xCLRFR_CAFSDET
 ((
uöt32_t
)0x00000020Ë

	)

7695 
	#SAI_xCLRFR_CLFSDET
 ((
uöt32_t
)0x00000040Ë

	)

7698 
	#SAI_xDR_DATA
 ((
uöt32_t
)0xFFFFFFFF)

	)

7706 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

7707 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

7708 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

7711 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

7712 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

7713 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

7714 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

7716 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

7717 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

7718 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

7720 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

7721 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

7724 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

7727 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

7729 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

7730 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

7731 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

7733 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

7734 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

7735 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

7736 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

7737 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

7738 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

7739 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

7742 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

7745 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

7748 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

7751 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

7754 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

7757 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

7760 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

7763 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

7766 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

7767 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

7768 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

7769 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

7771 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

7772 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

7773 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

7774 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

7775 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

7777 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

7778 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

7779 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

7780 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

7783 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

7786 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

7787 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

7788 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

7789 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

7790 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

7791 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

7792 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

7793 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

7794 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

7795 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

7796 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

7797 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

7798 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

7799 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

7800 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

7801 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

7802 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

7803 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

7804 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

7805 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

7806 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

7807 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

7808 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

7809 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

7812 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

7813 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

7814 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

7815 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

7816 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

7817 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

7818 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

7819 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

7820 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

7821 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

7822 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

7823 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

7824 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

7827 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

7828 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

7829 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

7830 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

7831 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

7832 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

7833 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

7834 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

7835 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

7836 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

7837 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

7838 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

7839 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

7840 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

7841 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

7842 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

7843 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

7844 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

7845 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

7846 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

7847 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

7848 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

7849 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

7850 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

7853 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

7856 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

7864 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

7865 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

7866 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

7868 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

7869 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

7870 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

7871 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

7873 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

7874 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

7875 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

7876 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

7877 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

7878 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

7879 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

7880 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

7881 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

7882 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

7885 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

7886 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

7887 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

7888 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

7889 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

7890 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

7893 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

7894 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

7895 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

7896 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

7897 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

7898 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

7899 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

7900 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

7903 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

7906 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

7909 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

7912 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

7915 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

7917 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

7918 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

7919 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

7921 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

7923 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

7924 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

7925 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

7927 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

7929 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

7930 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

7931 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

7933 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

7934 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

7937 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

7938 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

7939 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

7947 
	#SYSCFG_MEMRMP_MEM_MODE
 ((
uöt32_t
)0x00000007Ë

	)

7948 
	#SYSCFG_MEMRMP_MEM_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

7949 
	#SYSCFG_MEMRMP_MEM_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

7950 
	#SYSCFG_MEMRMP_MEM_MODE_2
 ((
uöt32_t
)0x00000004Ë

	)

7952 
	#SYSCFG_MEMRMP_FB_MODE
 ((
uöt32_t
)0x00000100Ë

	)

7954 
	#SYSCFG_MEMRMP_SWP_FMC
 ((
uöt32_t
)0x00000C00Ë

	)

7955 
	#SYSCFG_MEMRMP_SWP_FMC_0
 ((
uöt32_t
)0x00000400Ë

	)

7956 
	#SYSCFG_MEMRMP_SWP_FMC_1
 ((
uöt32_t
)0x00000800Ë

	)

7960 
	#SYSCFG_PMC_ADCxDC2
 ((
uöt32_t
)0x00070000Ë

	)

7961 
	#SYSCFG_PMC_ADC1DC2
 ((
uöt32_t
)0x00010000Ë

	)

7962 
	#SYSCFG_PMC_ADC2DC2
 ((
uöt32_t
)0x00020000Ë

	)

7963 
	#SYSCFG_PMC_ADC3DC2
 ((
uöt32_t
)0x00040000Ë

	)

7965 
	#SYSCFG_PMC_MII_RMII_SEL
 ((
uöt32_t
)0x00800000Ë

	)

7967 
	#SYSCFG_PMC_MII_RMII
 
SYSCFG_PMC_MII_RMII_SEL


	)

7970 
	#SYSCFG_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

7971 
	#SYSCFG_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

7972 
	#SYSCFG_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

7973 
	#SYSCFG_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

7977 
	#SYSCFG_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

7978 
	#SYSCFG_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

7979 
	#SYSCFG_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

7980 
	#SYSCFG_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

7981 
	#SYSCFG_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

7982 
	#SYSCFG_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

7983 
	#SYSCFG_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0006Ë

	)

7984 
	#SYSCFG_EXTICR1_EXTI0_PH
 ((
uöt16_t
)0x0007Ë

	)

7985 
	#SYSCFG_EXTICR1_EXTI0_PI
 ((
uöt16_t
)0x0008Ë

	)

7986 
	#SYSCFG_EXTICR1_EXTI0_PJ
 ((
uöt16_t
)0x0009Ë

	)

7987 
	#SYSCFG_EXTICR1_EXTI0_PK
 ((
uöt16_t
)0x000AË

	)

7992 
	#SYSCFG_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

7993 
	#SYSCFG_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

7994 
	#SYSCFG_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

7995 
	#SYSCFG_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

7996 
	#SYSCFG_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

7997 
	#SYSCFG_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

7998 
	#SYSCFG_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0060Ë

	)

7999 
	#SYSCFG_EXTICR1_EXTI1_PH
 ((
uöt16_t
)0x0070Ë

	)

8000 
	#SYSCFG_EXTICR1_EXTI1_PI
 ((
uöt16_t
)0x0080Ë

	)

8001 
	#SYSCFG_EXTICR1_EXTI1_PJ
 ((
uöt16_t
)0x0090Ë

	)

8002 
	#SYSCFG_EXTICR1_EXTI1_PK
 ((
uöt16_t
)0x00A0Ë

	)

8007 
	#SYSCFG_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

8008 
	#SYSCFG_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

8009 
	#SYSCFG_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

8010 
	#SYSCFG_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

8011 
	#SYSCFG_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

8012 
	#SYSCFG_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

8013 
	#SYSCFG_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0600Ë

	)

8014 
	#SYSCFG_EXTICR1_EXTI2_PH
 ((
uöt16_t
)0x0700Ë

	)

8015 
	#SYSCFG_EXTICR1_EXTI2_PI
 ((
uöt16_t
)0x0800Ë

	)

8016 
	#SYSCFG_EXTICR1_EXTI2_PJ
 ((
uöt16_t
)0x0900Ë

	)

8017 
	#SYSCFG_EXTICR1_EXTI2_PK
 ((
uöt16_t
)0x0A00Ë

	)

8022 
	#SYSCFG_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

8023 
	#SYSCFG_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

8024 
	#SYSCFG_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

8025 
	#SYSCFG_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

8026 
	#SYSCFG_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

8027 
	#SYSCFG_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x5000Ë

	)

8028 
	#SYSCFG_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x6000Ë

	)

8029 
	#SYSCFG_EXTICR1_EXTI3_PH
 ((
uöt16_t
)0x7000Ë

	)

8030 
	#SYSCFG_EXTICR1_EXTI3_PI
 ((
uöt16_t
)0x8000Ë

	)

8031 
	#SYSCFG_EXTICR1_EXTI3_PJ
 ((
uöt16_t
)0x9000Ë

	)

8032 
	#SYSCFG_EXTICR1_EXTI3_PK
 ((
uöt16_t
)0xA000Ë

	)

8035 
	#SYSCFG_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

8036 
	#SYSCFG_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

8037 
	#SYSCFG_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

8038 
	#SYSCFG_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

8042 
	#SYSCFG_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

8043 
	#SYSCFG_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

8044 
	#SYSCFG_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

8045 
	#SYSCFG_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

8046 
	#SYSCFG_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

8047 
	#SYSCFG_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

8048 
	#SYSCFG_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0006Ë

	)

8049 
	#SYSCFG_EXTICR2_EXTI4_PH
 ((
uöt16_t
)0x0007Ë

	)

8050 
	#SYSCFG_EXTICR2_EXTI4_PI
 ((
uöt16_t
)0x0008Ë

	)

8051 
	#SYSCFG_EXTICR2_EXTI4_PJ
 ((
uöt16_t
)0x0009Ë

	)

8052 
	#SYSCFG_EXTICR2_EXTI4_PK
 ((
uöt16_t
)0x000AË

	)

8057 
	#SYSCFG_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

8058 
	#SYSCFG_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

8059 
	#SYSCFG_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

8060 
	#SYSCFG_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

8061 
	#SYSCFG_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

8062 
	#SYSCFG_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

8063 
	#SYSCFG_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0060Ë

	)

8064 
	#SYSCFG_EXTICR2_EXTI5_PH
 ((
uöt16_t
)0x0070Ë

	)

8065 
	#SYSCFG_EXTICR2_EXTI5_PI
 ((
uöt16_t
)0x0080Ë

	)

8066 
	#SYSCFG_EXTICR2_EXTI5_PJ
 ((
uöt16_t
)0x0090Ë

	)

8067 
	#SYSCFG_EXTICR2_EXTI5_PK
 ((
uöt16_t
)0x00A0Ë

	)

8072 
	#SYSCFG_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

8073 
	#SYSCFG_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

8074 
	#SYSCFG_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

8075 
	#SYSCFG_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

8076 
	#SYSCFG_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

8077 
	#SYSCFG_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

8078 
	#SYSCFG_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0600Ë

	)

8079 
	#SYSCFG_EXTICR2_EXTI6_PH
 ((
uöt16_t
)0x0700Ë

	)

8080 
	#SYSCFG_EXTICR2_EXTI6_PI
 ((
uöt16_t
)0x0800Ë

	)

8081 
	#SYSCFG_EXTICR2_EXTI6_PJ
 ((
uöt16_t
)0x0900Ë

	)

8082 
	#SYSCFG_EXTICR2_EXTI6_PK
 ((
uöt16_t
)0x0A00Ë

	)

8087 
	#SYSCFG_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

8088 
	#SYSCFG_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

8089 
	#SYSCFG_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

8090 
	#SYSCFG_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

8091 
	#SYSCFG_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

8092 
	#SYSCFG_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x5000Ë

	)

8093 
	#SYSCFG_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x6000Ë

	)

8094 
	#SYSCFG_EXTICR2_EXTI7_PH
 ((
uöt16_t
)0x7000Ë

	)

8095 
	#SYSCFG_EXTICR2_EXTI7_PI
 ((
uöt16_t
)0x8000Ë

	)

8096 
	#SYSCFG_EXTICR2_EXTI7_PJ
 ((
uöt16_t
)0x9000Ë

	)

8097 
	#SYSCFG_EXTICR2_EXTI7_PK
 ((
uöt16_t
)0xA000Ë

	)

8100 
	#SYSCFG_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

8101 
	#SYSCFG_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

8102 
	#SYSCFG_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

8103 
	#SYSCFG_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

8108 
	#SYSCFG_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

8109 
	#SYSCFG_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

8110 
	#SYSCFG_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

8111 
	#SYSCFG_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

8112 
	#SYSCFG_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

8113 
	#SYSCFG_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0005Ë

	)

8114 
	#SYSCFG_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0006Ë

	)

8115 
	#SYSCFG_EXTICR3_EXTI8_PH
 ((
uöt16_t
)0x0007Ë

	)

8116 
	#SYSCFG_EXTICR3_EXTI8_PI
 ((
uöt16_t
)0x0008Ë

	)

8117 
	#SYSCFG_EXTICR3_EXTI8_PJ
 ((
uöt16_t
)0x0009Ë

	)

8122 
	#SYSCFG_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

8123 
	#SYSCFG_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

8124 
	#SYSCFG_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

8125 
	#SYSCFG_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

8126 
	#SYSCFG_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

8127 
	#SYSCFG_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

8128 
	#SYSCFG_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0060Ë

	)

8129 
	#SYSCFG_EXTICR3_EXTI9_PH
 ((
uöt16_t
)0x0070Ë

	)

8130 
	#SYSCFG_EXTICR3_EXTI9_PI
 ((
uöt16_t
)0x0080Ë

	)

8131 
	#SYSCFG_EXTICR3_EXTI9_PJ
 ((
uöt16_t
)0x0090Ë

	)

8136 
	#SYSCFG_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

8137 
	#SYSCFG_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

8138 
	#SYSCFG_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

8139 
	#SYSCFG_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

8140 
	#SYSCFG_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

8141 
	#SYSCFG_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

8142 
	#SYSCFG_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0600Ë

	)

8143 
	#SYSCFG_EXTICR3_EXTI10_PH
 ((
uöt16_t
)0x0700Ë

	)

8144 
	#SYSCFG_EXTICR3_EXTI10_PI
 ((
uöt16_t
)0x0800Ë

	)

8145 
	#SYSCFG_EXTICR3_EXTI10_PJ
 ((
uöt16_t
)0x0900Ë

	)

8150 
	#SYSCFG_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

8151 
	#SYSCFG_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

8152 
	#SYSCFG_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

8153 
	#SYSCFG_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

8154 
	#SYSCFG_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

8155 
	#SYSCFG_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x5000Ë

	)

8156 
	#SYSCFG_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x6000Ë

	)

8157 
	#SYSCFG_EXTICR3_EXTI11_PH
 ((
uöt16_t
)0x7000Ë

	)

8158 
	#SYSCFG_EXTICR3_EXTI11_PI
 ((
uöt16_t
)0x8000Ë

	)

8159 
	#SYSCFG_EXTICR3_EXTI11_PJ
 ((
uöt16_t
)0x9000Ë

	)

8162 
	#SYSCFG_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

8163 
	#SYSCFG_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

8164 
	#SYSCFG_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

8165 
	#SYSCFG_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

8169 
	#SYSCFG_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

8170 
	#SYSCFG_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

8171 
	#SYSCFG_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

8172 
	#SYSCFG_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

8173 
	#SYSCFG_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

8174 
	#SYSCFG_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0005Ë

	)

8175 
	#SYSCFG_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0006Ë

	)

8176 
	#SYSCFG_EXTICR4_EXTI12_PH
 ((
uöt16_t
)0x0007Ë

	)

8177 
	#SYSCFG_EXTICR4_EXTI12_PI
 ((
uöt16_t
)0x0008Ë

	)

8178 
	#SYSCFG_EXTICR4_EXTI12_PJ
 ((
uöt16_t
)0x0009Ë

	)

8183 
	#SYSCFG_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

8184 
	#SYSCFG_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

8185 
	#SYSCFG_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

8186 
	#SYSCFG_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

8187 
	#SYSCFG_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

8188 
	#SYSCFG_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0050Ë

	)

8189 
	#SYSCFG_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0060Ë

	)

8190 
	#SYSCFG_EXTICR4_EXTI13_PH
 ((
uöt16_t
)0x0070Ë

	)

8191 
	#SYSCFG_EXTICR4_EXTI13_PI
 ((
uöt16_t
)0x0008Ë

	)

8192 
	#SYSCFG_EXTICR4_EXTI13_PJ
 ((
uöt16_t
)0x0009Ë

	)

8197 
	#SYSCFG_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

8198 
	#SYSCFG_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

8199 
	#SYSCFG_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

8200 
	#SYSCFG_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

8201 
	#SYSCFG_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

8202 
	#SYSCFG_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0500Ë

	)

8203 
	#SYSCFG_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0600Ë

	)

8204 
	#SYSCFG_EXTICR4_EXTI14_PH
 ((
uöt16_t
)0x0700Ë

	)

8205 
	#SYSCFG_EXTICR4_EXTI14_PI
 ((
uöt16_t
)0x0800Ë

	)

8206 
	#SYSCFG_EXTICR4_EXTI14_PJ
 ((
uöt16_t
)0x0900Ë

	)

8211 
	#SYSCFG_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

8212 
	#SYSCFG_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

8213 
	#SYSCFG_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

8214 
	#SYSCFG_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

8215 
	#SYSCFG_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

8216 
	#SYSCFG_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x5000Ë

	)

8217 
	#SYSCFG_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x6000Ë

	)

8218 
	#SYSCFG_EXTICR4_EXTI15_PH
 ((
uöt16_t
)0x7000Ë

	)

8219 
	#SYSCFG_EXTICR4_EXTI15_PI
 ((
uöt16_t
)0x8000Ë

	)

8220 
	#SYSCFG_EXTICR4_EXTI15_PJ
 ((
uöt16_t
)0x9000Ë

	)

8223 
	#SYSCFG_CMPCR_CMP_PD
 ((
uöt32_t
)0x00000001Ë

	)

8224 
	#SYSCFG_CMPCR_READY
 ((
uöt32_t
)0x00000100Ë

	)

8232 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

8233 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

8234 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

8235 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

8236 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

8238 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

8239 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

8240 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

8242 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

8244 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

8245 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

8246 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

8249 
	#TIM_CR2_CCPC
 ((
uöt16_t
)0x0001Ë

	)

8250 
	#TIM_CR2_CCUS
 ((
uöt16_t
)0x0004Ë

	)

8251 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

8253 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

8254 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

8255 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

8256 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

8258 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

8259 
	#TIM_CR2_OIS1
 ((
uöt16_t
)0x0100Ë

	)

8260 
	#TIM_CR2_OIS1N
 ((
uöt16_t
)0x0200Ë

	)

8261 
	#TIM_CR2_OIS2
 ((
uöt16_t
)0x0400Ë

	)

8262 
	#TIM_CR2_OIS2N
 ((
uöt16_t
)0x0800Ë

	)

8263 
	#TIM_CR2_OIS3
 ((
uöt16_t
)0x1000Ë

	)

8264 
	#TIM_CR2_OIS3N
 ((
uöt16_t
)0x2000Ë

	)

8265 
	#TIM_CR2_OIS4
 ((
uöt16_t
)0x4000Ë

	)

8268 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

8269 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

8270 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

8271 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

8273 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

8274 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

8275 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

8276 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

8278 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

8280 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

8281 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

8282 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

8283 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

8284 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

8286 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

8287 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

8288 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

8290 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

8291 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

8294 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

8295 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

8296 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

8297 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

8298 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

8299 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

8300 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

8301 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

8302 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

8303 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

8304 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

8305 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

8306 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

8307 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

8308 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

8311 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

8312 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

8313 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

8314 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

8315 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

8316 
	#TIM_SR_COMIF
 ((
uöt16_t
)0x0020Ë

	)

8317 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

8318 
	#TIM_SR_BIF
 ((
uöt16_t
)0x0080Ë

	)

8319 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

8320 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

8321 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

8322 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

8325 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

8326 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

8327 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

8328 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

8329 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

8330 
	#TIM_EGR_COMG
 ((
uöt8_t
)0x20Ë

	)

8331 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

8332 
	#TIM_EGR_BG
 ((
uöt8_t
)0x80Ë

	)

8335 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

8336 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

8337 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

8339 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

8340 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

8342 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

8343 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

8344 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

8345 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

8347 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

8349 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

8350 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

8351 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

8353 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

8354 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

8356 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

8357 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

8358 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

8359 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

8361 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

8365 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

8366 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

8367 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

8369 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

8370 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

8371 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

8372 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

8373 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

8375 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

8376 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

8377 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

8379 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

8380 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

8381 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

8382 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

8383 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

8386 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

8387 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

8388 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

8390 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

8391 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

8393 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

8394 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

8395 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

8396 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

8398 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

8400 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

8401 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

8402 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

8404 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

8405 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

8407 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

8408 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

8409 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

8410 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

8412 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

8416 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

8417 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

8418 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

8420 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

8421 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

8422 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

8423 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

8424 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

8426 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

8427 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

8428 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

8430 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

8431 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

8432 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

8433 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

8434 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

8437 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

8438 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

8439 
	#TIM_CCER_CC1NE
 ((
uöt16_t
)0x0004Ë

	)

8440 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

8441 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

8442 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

8443 
	#TIM_CCER_CC2NE
 ((
uöt16_t
)0x0040Ë

	)

8444 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

8445 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

8446 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

8447 
	#TIM_CCER_CC3NE
 ((
uöt16_t
)0x0400Ë

	)

8448 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

8449 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

8450 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

8451 
	#TIM_CCER_CC4NP
 ((
uöt16_t
)0x8000Ë

	)

8454 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

8457 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

8460 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

8463 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

8466 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

8469 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

8472 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

8475 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

8478 
	#TIM_BDTR_DTG
 ((
uöt16_t
)0x00FFË

	)

8479 
	#TIM_BDTR_DTG_0
 ((
uöt16_t
)0x0001Ë

	)

8480 
	#TIM_BDTR_DTG_1
 ((
uöt16_t
)0x0002Ë

	)

8481 
	#TIM_BDTR_DTG_2
 ((
uöt16_t
)0x0004Ë

	)

8482 
	#TIM_BDTR_DTG_3
 ((
uöt16_t
)0x0008Ë

	)

8483 
	#TIM_BDTR_DTG_4
 ((
uöt16_t
)0x0010Ë

	)

8484 
	#TIM_BDTR_DTG_5
 ((
uöt16_t
)0x0020Ë

	)

8485 
	#TIM_BDTR_DTG_6
 ((
uöt16_t
)0x0040Ë

	)

8486 
	#TIM_BDTR_DTG_7
 ((
uöt16_t
)0x0080Ë

	)

8488 
	#TIM_BDTR_LOCK
 ((
uöt16_t
)0x0300Ë

	)

8489 
	#TIM_BDTR_LOCK_0
 ((
uöt16_t
)0x0100Ë

	)

8490 
	#TIM_BDTR_LOCK_1
 ((
uöt16_t
)0x0200Ë

	)

8492 
	#TIM_BDTR_OSSI
 ((
uöt16_t
)0x0400Ë

	)

8493 
	#TIM_BDTR_OSSR
 ((
uöt16_t
)0x0800Ë

	)

8494 
	#TIM_BDTR_BKE
 ((
uöt16_t
)0x1000Ë

	)

8495 
	#TIM_BDTR_BKP
 ((
uöt16_t
)0x2000Ë

	)

8496 
	#TIM_BDTR_AOE
 ((
uöt16_t
)0x4000Ë

	)

8497 
	#TIM_BDTR_MOE
 ((
uöt16_t
)0x8000Ë

	)

8500 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

8501 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

8502 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

8503 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

8504 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

8505 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

8507 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

8508 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

8509 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

8510 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

8511 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

8512 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

8515 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

8518 
	#TIM_OR_TI4_RMP
 ((
uöt16_t
)0x00C0Ë

	)

8519 
	#TIM_OR_TI4_RMP_0
 ((
uöt16_t
)0x0040Ë

	)

8520 
	#TIM_OR_TI4_RMP_1
 ((
uöt16_t
)0x0080Ë

	)

8521 
	#TIM_OR_ITR1_RMP
 ((
uöt16_t
)0x0C00Ë

	)

8522 
	#TIM_OR_ITR1_RMP_0
 ((
uöt16_t
)0x0400Ë

	)

8523 
	#TIM_OR_ITR1_RMP_1
 ((
uöt16_t
)0x0800Ë

	)

8532 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

8533 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

8534 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

8535 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

8536 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

8537 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

8538 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

8539 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

8540 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

8541 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

8544 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

8547 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt16_t
)0x000FË

	)

8548 
	#USART_BRR_DIV_M™tisß
 ((
uöt16_t
)0xFFF0Ë

	)

8551 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

8552 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

8553 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

8554 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

8555 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

8556 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

8557 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

8558 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

8559 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

8560 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

8561 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

8562 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

8563 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

8564 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

8565 
	#USART_CR1_OVER8
 ((
uöt16_t
)0x8000Ë

	)

8568 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

8569 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

8570 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

8571 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

8572 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

8573 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

8574 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

8576 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

8577 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

8578 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

8580 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

8583 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

8584 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

8585 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

8586 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

8587 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

8588 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

8589 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

8590 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

8591 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

8592 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

8593 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

8594 
	#USART_CR3_ONEBIT
 ((
uöt16_t
)0x0800Ë

	)

8597 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

8598 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

8599 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

8600 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

8601 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

8602 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

8603 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

8604 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

8605 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

8607 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

8615 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

8616 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

8617 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

8618 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

8619 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

8620 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

8621 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

8622 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

8624 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

8627 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

8628 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

8629 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

8630 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

8631 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

8632 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

8633 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

8634 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

8636 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

8637 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

8638 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

8640 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

8643 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

8652 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFF)

	)

8653 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000)

	)

8656 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001)

	)

8657 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002)

	)

8658 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004)

	)

8659 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020)

	)

8661 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0)

	)

8662 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040)

	)

8663 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080)

	)

8666 
	#DBGMCU_APB1_FZ_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

8667 
	#DBGMCU_APB1_FZ_DBG_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

8668 
	#DBGMCU_APB1_FZ_DBG_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

8669 
	#DBGMCU_APB1_FZ_DBG_TIM5_STOP
 ((
uöt32_t
)0x00000008)

	)

8670 
	#DBGMCU_APB1_FZ_DBG_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

8671 
	#DBGMCU_APB1_FZ_DBG_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

8672 
	#DBGMCU_APB1_FZ_DBG_TIM12_STOP
 ((
uöt32_t
)0x00000040)

	)

8673 
	#DBGMCU_APB1_FZ_DBG_TIM13_STOP
 ((
uöt32_t
)0x00000080)

	)

8674 
	#DBGMCU_APB1_FZ_DBG_TIM14_STOP
 ((
uöt32_t
)0x00000100)

	)

8675 
	#DBGMCU_APB1_FZ_DBG_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

8676 
	#DBGMCU_APB1_FZ_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

8677 
	#DBGMCU_APB1_FZ_DBG_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

8678 
	#DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

8679 
	#DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

8680 
	#DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00800000)

	)

8681 
	#DBGMCU_APB1_FZ_DBG_CAN1_STOP
 ((
uöt32_t
)0x02000000)

	)

8682 
	#DBGMCU_APB1_FZ_DBG_CAN2_STOP
 ((
uöt32_t
)0x04000000)

	)

8684 
	#DBGMCU_APB1_FZ_DBG_IWDEG_STOP
 
DBGMCU_APB1_FZ_DBG_IWDG_STOP


	)

8687 
	#DBGMCU_APB1_FZ_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000001)

	)

8688 
	#DBGMCU_APB1_FZ_DBG_TIM8_STOP
 ((
uöt32_t
)0x00000002)

	)

8689 
	#DBGMCU_APB1_FZ_DBG_TIM9_STOP
 ((
uöt32_t
)0x00010000)

	)

8690 
	#DBGMCU_APB1_FZ_DBG_TIM10_STOP
 ((
uöt32_t
)0x00020000)

	)

8691 
	#DBGMCU_APB1_FZ_DBG_TIM11_STOP
 ((
uöt32_t
)0x00040000)

	)

8699 
	#ETH_MACCR_WD
 ((
uöt32_t
)0x00800000Ë

	)

8700 
	#ETH_MACCR_JD
 ((
uöt32_t
)0x00400000Ë

	)

8701 
	#ETH_MACCR_IFG
 ((
uöt32_t
)0x000E0000Ë

	)

8702 
	#ETH_MACCR_IFG_96Bô
 ((
uöt32_t
)0x00000000Ë

	)

8703 
	#ETH_MACCR_IFG_88Bô
 ((
uöt32_t
)0x00020000Ë

	)

8704 
	#ETH_MACCR_IFG_80Bô
 ((
uöt32_t
)0x00040000Ë

	)

8705 
	#ETH_MACCR_IFG_72Bô
 ((
uöt32_t
)0x00060000Ë

	)

8706 
	#ETH_MACCR_IFG_64Bô
 ((
uöt32_t
)0x00080000Ë

	)

8707 
	#ETH_MACCR_IFG_56Bô
 ((
uöt32_t
)0x000A0000Ë

	)

8708 
	#ETH_MACCR_IFG_48Bô
 ((
uöt32_t
)0x000C0000Ë

	)

8709 
	#ETH_MACCR_IFG_40Bô
 ((
uöt32_t
)0x000E0000Ë

	)

8710 
	#ETH_MACCR_CSD
 ((
uöt32_t
)0x00010000Ë

	)

8711 
	#ETH_MACCR_FES
 ((
uöt32_t
)0x00004000Ë

	)

8712 
	#ETH_MACCR_ROD
 ((
uöt32_t
)0x00002000Ë

	)

8713 
	#ETH_MACCR_LM
 ((
uöt32_t
)0x00001000Ë

	)

8714 
	#ETH_MACCR_DM
 ((
uöt32_t
)0x00000800Ë

	)

8715 
	#ETH_MACCR_IPCO
 ((
uöt32_t
)0x00000400Ë

	)

8716 
	#ETH_MACCR_RD
 ((
uöt32_t
)0x00000200Ë

	)

8717 
	#ETH_MACCR_APCS
 ((
uöt32_t
)0x00000080Ë

	)

8718 
	#ETH_MACCR_BL
 ((
uöt32_t
)0x00000060Ë

	)

8720 
	#ETH_MACCR_BL_10
 ((
uöt32_t
)0x00000000Ë

	)

8721 
	#ETH_MACCR_BL_8
 ((
uöt32_t
)0x00000020Ë

	)

8722 
	#ETH_MACCR_BL_4
 ((
uöt32_t
)0x00000040Ë

	)

8723 
	#ETH_MACCR_BL_1
 ((
uöt32_t
)0x00000060Ë

	)

8724 
	#ETH_MACCR_DC
 ((
uöt32_t
)0x00000010Ë

	)

8725 
	#ETH_MACCR_TE
 ((
uöt32_t
)0x00000008Ë

	)

8726 
	#ETH_MACCR_RE
 ((
uöt32_t
)0x00000004Ë

	)

8729 
	#ETH_MACFFR_RA
 ((
uöt32_t
)0x80000000Ë

	)

8730 
	#ETH_MACFFR_HPF
 ((
uöt32_t
)0x00000400Ë

	)

8731 
	#ETH_MACFFR_SAF
 ((
uöt32_t
)0x00000200Ë

	)

8732 
	#ETH_MACFFR_SAIF
 ((
uöt32_t
)0x00000100Ë

	)

8733 
	#ETH_MACFFR_PCF
 ((
uöt32_t
)0x000000C0Ë

	)

8734 
	#ETH_MACFFR_PCF_BlockAŒ
 ((
uöt32_t
)0x00000040Ë

	)

8735 
	#ETH_MACFFR_PCF_F‹w¨dAŒ
 ((
uöt32_t
)0x00000080Ë

	)

8736 
	#ETH_MACFFR_PCF_F‹w¨dPas£dAddrFûãr
 ((
uöt32_t
)0x000000C0Ë

	)

8737 
	#ETH_MACFFR_BFD
 ((
uöt32_t
)0x00000020Ë

	)

8738 
	#ETH_MACFFR_PAM
 ((
uöt32_t
)0x00000010Ë

	)

8739 
	#ETH_MACFFR_DAIF
 ((
uöt32_t
)0x00000008Ë

	)

8740 
	#ETH_MACFFR_HM
 ((
uöt32_t
)0x00000004Ë

	)

8741 
	#ETH_MACFFR_HU
 ((
uöt32_t
)0x00000002Ë

	)

8742 
	#ETH_MACFFR_PM
 ((
uöt32_t
)0x00000001Ë

	)

8745 
	#ETH_MACHTHR_HTH
 ((
uöt32_t
)0xFFFFFFFFË

	)

8748 
	#ETH_MACHTLR_HTL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8751 
	#ETH_MACMIIAR_PA
 ((
uöt32_t
)0x0000F800Ë

	)

8752 
	#ETH_MACMIIAR_MR
 ((
uöt32_t
)0x000007C0Ë

	)

8753 
	#ETH_MACMIIAR_CR
 ((
uöt32_t
)0x0000001CË

	)

8754 
	#ETH_MACMIIAR_CR_Div42
 ((
uöt32_t
)0x00000000Ë

	)

8755 
	#ETH_MACMIIAR_CR_Div62
 ((
uöt32_t
)0x00000004Ë

	)

8756 
	#ETH_MACMIIAR_CR_Div16
 ((
uöt32_t
)0x00000008Ë

	)

8757 
	#ETH_MACMIIAR_CR_Div26
 ((
uöt32_t
)0x0000000CË

	)

8758 
	#ETH_MACMIIAR_CR_Div102
 ((
uöt32_t
)0x00000010Ë

	)

8759 
	#ETH_MACMIIAR_MW
 ((
uöt32_t
)0x00000002Ë

	)

8760 
	#ETH_MACMIIAR_MB
 ((
uöt32_t
)0x00000001Ë

	)

8763 
	#ETH_MACMIIDR_MD
 ((
uöt32_t
)0x0000FFFFË

	)

8766 
	#ETH_MACFCR_PT
 ((
uöt32_t
)0xFFFF0000Ë

	)

8767 
	#ETH_MACFCR_ZQPD
 ((
uöt32_t
)0x00000080Ë

	)

8768 
	#ETH_MACFCR_PLT
 ((
uöt32_t
)0x00000030Ë

	)

8769 
	#ETH_MACFCR_PLT_Möus4
 ((
uöt32_t
)0x00000000Ë

	)

8770 
	#ETH_MACFCR_PLT_Möus28
 ((
uöt32_t
)0x00000010Ë

	)

8771 
	#ETH_MACFCR_PLT_Möus144
 ((
uöt32_t
)0x00000020Ë

	)

8772 
	#ETH_MACFCR_PLT_Möus256
 ((
uöt32_t
)0x00000030Ë

	)

8773 
	#ETH_MACFCR_UPFD
 ((
uöt32_t
)0x00000008Ë

	)

8774 
	#ETH_MACFCR_RFCE
 ((
uöt32_t
)0x00000004Ë

	)

8775 
	#ETH_MACFCR_TFCE
 ((
uöt32_t
)0x00000002Ë

	)

8776 
	#ETH_MACFCR_FCBBPA
 ((
uöt32_t
)0x00000001Ë

	)

8779 
	#ETH_MACVLANTR_VLANTC
 ((
uöt32_t
)0x00010000Ë

	)

8780 
	#ETH_MACVLANTR_VLANTI
 ((
uöt32_t
)0x0000FFFFË

	)

8783 
	#ETH_MACRWUFFR_D
 ((
uöt32_t
)0xFFFFFFFFË

	)

8797 
	#ETH_MACPMTCSR_WFFRPR
 ((
uöt32_t
)0x80000000Ë

	)

8798 
	#ETH_MACPMTCSR_GU
 ((
uöt32_t
)0x00000200Ë

	)

8799 
	#ETH_MACPMTCSR_WFR
 ((
uöt32_t
)0x00000040Ë

	)

8800 
	#ETH_MACPMTCSR_MPR
 ((
uöt32_t
)0x00000020Ë

	)

8801 
	#ETH_MACPMTCSR_WFE
 ((
uöt32_t
)0x00000004Ë

	)

8802 
	#ETH_MACPMTCSR_MPE
 ((
uöt32_t
)0x00000002Ë

	)

8803 
	#ETH_MACPMTCSR_PD
 ((
uöt32_t
)0x00000001Ë

	)

8806 
	#ETH_MACSR_TSTS
 ((
uöt32_t
)0x00000200Ë

	)

8807 
	#ETH_MACSR_MMCTS
 ((
uöt32_t
)0x00000040Ë

	)

8808 
	#ETH_MACSR_MMMCRS
 ((
uöt32_t
)0x00000020Ë

	)

8809 
	#ETH_MACSR_MMCS
 ((
uöt32_t
)0x00000010Ë

	)

8810 
	#ETH_MACSR_PMTS
 ((
uöt32_t
)0x00000008Ë

	)

8813 
	#ETH_MACIMR_TSTIM
 ((
uöt32_t
)0x00000200Ë

	)

8814 
	#ETH_MACIMR_PMTIM
 ((
uöt32_t
)0x00000008Ë

	)

8817 
	#ETH_MACA0HR_MACA0H
 ((
uöt32_t
)0x0000FFFFË

	)

8820 
	#ETH_MACA0LR_MACA0L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8823 
	#ETH_MACA1HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8824 
	#ETH_MACA1HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8825 
	#ETH_MACA1HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8826 
	#ETH_MACA1HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8827 
	#ETH_MACA1HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8828 
	#ETH_MACA1HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8829 
	#ETH_MACA1HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8830 
	#ETH_MACA1HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8831 
	#ETH_MACA1HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8832 
	#ETH_MACA1HR_MACA1H
 ((
uöt32_t
)0x0000FFFFË

	)

8835 
	#ETH_MACA1LR_MACA1L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8838 
	#ETH_MACA2HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8839 
	#ETH_MACA2HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8840 
	#ETH_MACA2HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8841 
	#ETH_MACA2HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8842 
	#ETH_MACA2HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8843 
	#ETH_MACA2HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8844 
	#ETH_MACA2HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8845 
	#ETH_MACA2HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8846 
	#ETH_MACA2HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8847 
	#ETH_MACA2HR_MACA2H
 ((
uöt32_t
)0x0000FFFFË

	)

8850 
	#ETH_MACA2LR_MACA2L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8853 
	#ETH_MACA3HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8854 
	#ETH_MACA3HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8855 
	#ETH_MACA3HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8856 
	#ETH_MACA3HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8857 
	#ETH_MACA3HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8858 
	#ETH_MACA3HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8859 
	#ETH_MACA3HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8860 
	#ETH_MACA3HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8861 
	#ETH_MACA3HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8862 
	#ETH_MACA3HR_MACA3H
 ((
uöt32_t
)0x0000FFFFË

	)

8865 
	#ETH_MACA3LR_MACA3L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8872 
	#ETH_MMCCR_MCFHP
 ((
uöt32_t
)0x00000020Ë

	)

8873 
	#ETH_MMCCR_MCP
 ((
uöt32_t
)0x00000010Ë

	)

8874 
	#ETH_MMCCR_MCF
 ((
uöt32_t
)0x00000008Ë

	)

8875 
	#ETH_MMCCR_ROR
 ((
uöt32_t
)0x00000004Ë

	)

8876 
	#ETH_MMCCR_CSR
 ((
uöt32_t
)0x00000002Ë

	)

8877 
	#ETH_MMCCR_CR
 ((
uöt32_t
)0x00000001Ë

	)

8880 
	#ETH_MMCRIR_RGUFS
 ((
uöt32_t
)0x00020000Ë

	)

8881 
	#ETH_MMCRIR_RFAES
 ((
uöt32_t
)0x00000040Ë

	)

8882 
	#ETH_MMCRIR_RFCES
 ((
uöt32_t
)0x00000020Ë

	)

8885 
	#ETH_MMCTIR_TGFS
 ((
uöt32_t
)0x00200000Ë

	)

8886 
	#ETH_MMCTIR_TGFMSCS
 ((
uöt32_t
)0x00008000Ë

	)

8887 
	#ETH_MMCTIR_TGFSCS
 ((
uöt32_t
)0x00004000Ë

	)

8890 
	#ETH_MMCRIMR_RGUFM
 ((
uöt32_t
)0x00020000Ë

	)

8891 
	#ETH_MMCRIMR_RFAEM
 ((
uöt32_t
)0x00000040Ë

	)

8892 
	#ETH_MMCRIMR_RFCEM
 ((
uöt32_t
)0x00000020Ë

	)

8895 
	#ETH_MMCTIMR_TGFM
 ((
uöt32_t
)0x00200000Ë

	)

8896 
	#ETH_MMCTIMR_TGFMSCM
 ((
uöt32_t
)0x00008000Ë

	)

8897 
	#ETH_MMCTIMR_TGFSCM
 ((
uöt32_t
)0x00004000Ë

	)

8900 
	#ETH_MMCTGFSCCR_TGFSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8903 
	#ETH_MMCTGFMSCCR_TGFMSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8906 
	#ETH_MMCTGFCR_TGFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8909 
	#ETH_MMCRFCECR_RFCEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8912 
	#ETH_MMCRFAECR_RFAEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8915 
	#ETH_MMCRGUFCR_RGUFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8922 
	#ETH_PTPTSCR_TSCNT
 ((
uöt32_t
)0x00030000Ë

	)

8923 
	#ETH_PTPTSSR_TSSMRME
 ((
uöt32_t
)0x00008000Ë

	)

8924 
	#ETH_PTPTSSR_TSSEME
 ((
uöt32_t
)0x00004000Ë

	)

8925 
	#ETH_PTPTSSR_TSSIPV4FE
 ((
uöt32_t
)0x00002000Ë

	)

8926 
	#ETH_PTPTSSR_TSSIPV6FE
 ((
uöt32_t
)0x00001000Ë

	)

8927 
	#ETH_PTPTSSR_TSSPTPOEFE
 ((
uöt32_t
)0x00000800Ë

	)

8928 
	#ETH_PTPTSSR_TSPTPPSV2E
 ((
uöt32_t
)0x00000400Ë

	)

8929 
	#ETH_PTPTSSR_TSSSR
 ((
uöt32_t
)0x00000200Ë

	)

8930 
	#ETH_PTPTSSR_TSSARFE
 ((
uöt32_t
)0x00000100Ë

	)

8932 
	#ETH_PTPTSCR_TSARU
 ((
uöt32_t
)0x00000020Ë

	)

8933 
	#ETH_PTPTSCR_TSITE
 ((
uöt32_t
)0x00000010Ë

	)

8934 
	#ETH_PTPTSCR_TSSTU
 ((
uöt32_t
)0x00000008Ë

	)

8935 
	#ETH_PTPTSCR_TSSTI
 ((
uöt32_t
)0x00000004Ë

	)

8936 
	#ETH_PTPTSCR_TSFCU
 ((
uöt32_t
)0x00000002Ë

	)

8937 
	#ETH_PTPTSCR_TSE
 ((
uöt32_t
)0x00000001Ë

	)

8940 
	#ETH_PTPSSIR_STSSI
 ((
uöt32_t
)0x000000FFË

	)

8943 
	#ETH_PTPTSHR_STS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8946 
	#ETH_PTPTSLR_STPNS
 ((
uöt32_t
)0x80000000Ë

	)

8947 
	#ETH_PTPTSLR_STSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8950 
	#ETH_PTPTSHUR_TSUS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8953 
	#ETH_PTPTSLUR_TSUPNS
 ((
uöt32_t
)0x80000000Ë

	)

8954 
	#ETH_PTPTSLUR_TSUSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8957 
	#ETH_PTPTSAR_TSA
 ((
uöt32_t
)0xFFFFFFFFË

	)

8960 
	#ETH_PTPTTHR_TTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

8963 
	#ETH_PTPTTLR_TTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8966 
	#ETH_PTPTSSR_TSTTR
 ((
uöt32_t
)0x00000020Ë

	)

8967 
	#ETH_PTPTSSR_TSSO
 ((
uöt32_t
)0x00000010Ë

	)

8974 
	#ETH_DMABMR_AAB
 ((
uöt32_t
)0x02000000Ë

	)

8975 
	#ETH_DMABMR_FPM
 ((
uöt32_t
)0x01000000Ë

	)

8976 
	#ETH_DMABMR_USP
 ((
uöt32_t
)0x00800000Ë

	)

8977 
	#ETH_DMABMR_RDP
 ((
uöt32_t
)0x007E0000Ë

	)

8978 
	#ETH_DMABMR_RDP_1Bót
 ((
uöt32_t
)0x00020000Ë

	)

8979 
	#ETH_DMABMR_RDP_2Bót
 ((
uöt32_t
)0x00040000Ë

	)

8980 
	#ETH_DMABMR_RDP_4Bót
 ((
uöt32_t
)0x00080000Ë

	)

8981 
	#ETH_DMABMR_RDP_8Bót
 ((
uöt32_t
)0x00100000Ë

	)

8982 
	#ETH_DMABMR_RDP_16Bót
 ((
uöt32_t
)0x00200000Ë

	)

8983 
	#ETH_DMABMR_RDP_32Bót
 ((
uöt32_t
)0x00400000Ë

	)

8984 
	#ETH_DMABMR_RDP_4xPBL_4Bót
 ((
uöt32_t
)0x01020000Ë

	)

8985 
	#ETH_DMABMR_RDP_4xPBL_8Bót
 ((
uöt32_t
)0x01040000Ë

	)

8986 
	#ETH_DMABMR_RDP_4xPBL_16Bót
 ((
uöt32_t
)0x01080000Ë

	)

8987 
	#ETH_DMABMR_RDP_4xPBL_32Bót
 ((
uöt32_t
)0x01100000Ë

	)

8988 
	#ETH_DMABMR_RDP_4xPBL_64Bót
 ((
uöt32_t
)0x01200000Ë

	)

8989 
	#ETH_DMABMR_RDP_4xPBL_128Bót
 ((
uöt32_t
)0x01400000Ë

	)

8990 
	#ETH_DMABMR_FB
 ((
uöt32_t
)0x00010000Ë

	)

8991 
	#ETH_DMABMR_RTPR
 ((
uöt32_t
)0x0000C000Ë

	)

8992 
	#ETH_DMABMR_RTPR_1_1
 ((
uöt32_t
)0x00000000Ë

	)

8993 
	#ETH_DMABMR_RTPR_2_1
 ((
uöt32_t
)0x00004000Ë

	)

8994 
	#ETH_DMABMR_RTPR_3_1
 ((
uöt32_t
)0x00008000Ë

	)

8995 
	#ETH_DMABMR_RTPR_4_1
 ((
uöt32_t
)0x0000C000Ë

	)

8996 
	#ETH_DMABMR_PBL
 ((
uöt32_t
)0x00003F00Ë

	)

8997 
	#ETH_DMABMR_PBL_1Bót
 ((
uöt32_t
)0x00000100Ë

	)

8998 
	#ETH_DMABMR_PBL_2Bót
 ((
uöt32_t
)0x00000200Ë

	)

8999 
	#ETH_DMABMR_PBL_4Bót
 ((
uöt32_t
)0x00000400Ë

	)

9000 
	#ETH_DMABMR_PBL_8Bót
 ((
uöt32_t
)0x00000800Ë

	)

9001 
	#ETH_DMABMR_PBL_16Bót
 ((
uöt32_t
)0x00001000Ë

	)

9002 
	#ETH_DMABMR_PBL_32Bót
 ((
uöt32_t
)0x00002000Ë

	)

9003 
	#ETH_DMABMR_PBL_4xPBL_4Bót
 ((
uöt32_t
)0x01000100Ë

	)

9004 
	#ETH_DMABMR_PBL_4xPBL_8Bót
 ((
uöt32_t
)0x01000200Ë

	)

9005 
	#ETH_DMABMR_PBL_4xPBL_16Bót
 ((
uöt32_t
)0x01000400Ë

	)

9006 
	#ETH_DMABMR_PBL_4xPBL_32Bót
 ((
uöt32_t
)0x01000800Ë

	)

9007 
	#ETH_DMABMR_PBL_4xPBL_64Bót
 ((
uöt32_t
)0x01001000Ë

	)

9008 
	#ETH_DMABMR_PBL_4xPBL_128Bót
 ((
uöt32_t
)0x01002000Ë

	)

9009 
	#ETH_DMABMR_EDE
 ((
uöt32_t
)0x00000080Ë

	)

9010 
	#ETH_DMABMR_DSL
 ((
uöt32_t
)0x0000007CË

	)

9011 
	#ETH_DMABMR_DA
 ((
uöt32_t
)0x00000002Ë

	)

9012 
	#ETH_DMABMR_SR
 ((
uöt32_t
)0x00000001Ë

	)

9015 
	#ETH_DMATPDR_TPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

9018 
	#ETH_DMARPDR_RPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

9021 
	#ETH_DMARDLAR_SRL
 ((
uöt32_t
)0xFFFFFFFFË

	)

9024 
	#ETH_DMATDLAR_STL
 ((
uöt32_t
)0xFFFFFFFFË

	)

9027 
	#ETH_DMASR_TSTS
 ((
uöt32_t
)0x20000000Ë

	)

9028 
	#ETH_DMASR_PMTS
 ((
uöt32_t
)0x10000000Ë

	)

9029 
	#ETH_DMASR_MMCS
 ((
uöt32_t
)0x08000000Ë

	)

9030 
	#ETH_DMASR_EBS
 ((
uöt32_t
)0x03800000Ë

	)

9032 
	#ETH_DMASR_EBS_DescAc˚ss
 ((
uöt32_t
)0x02000000Ë

	)

9033 
	#ETH_DMASR_EBS_RódTønsf
 ((
uöt32_t
)0x01000000Ë

	)

9034 
	#ETH_DMASR_EBS_D©aTønsfTx
 ((
uöt32_t
)0x00800000Ë

	)

9035 
	#ETH_DMASR_TPS
 ((
uöt32_t
)0x00700000Ë

	)

9036 
	#ETH_DMASR_TPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

9037 
	#ETH_DMASR_TPS_Fëchög
 ((
uöt32_t
)0x00100000Ë

	)

9038 
	#ETH_DMASR_TPS_Waôög
 ((
uöt32_t
)0x00200000Ë

	)

9039 
	#ETH_DMASR_TPS_Ródög
 ((
uöt32_t
)0x00300000Ë

	)

9040 
	#ETH_DMASR_TPS_Su•íded
 ((
uöt32_t
)0x00600000Ë

	)

9041 
	#ETH_DMASR_TPS_Closög
 ((
uöt32_t
)0x00700000Ë

	)

9042 
	#ETH_DMASR_RPS
 ((
uöt32_t
)0x000E0000Ë

	)

9043 
	#ETH_DMASR_RPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

9044 
	#ETH_DMASR_RPS_Fëchög
 ((
uöt32_t
)0x00020000Ë

	)

9045 
	#ETH_DMASR_RPS_Waôög
 ((
uöt32_t
)0x00060000Ë

	)

9046 
	#ETH_DMASR_RPS_Su•íded
 ((
uöt32_t
)0x00080000Ë

	)

9047 
	#ETH_DMASR_RPS_Closög
 ((
uöt32_t
)0x000A0000Ë

	)

9048 
	#ETH_DMASR_RPS_Queuög
 ((
uöt32_t
)0x000E0000Ë

	)

9049 
	#ETH_DMASR_NIS
 ((
uöt32_t
)0x00010000Ë

	)

9050 
	#ETH_DMASR_AIS
 ((
uöt32_t
)0x00008000Ë

	)

9051 
	#ETH_DMASR_ERS
 ((
uöt32_t
)0x00004000Ë

	)

9052 
	#ETH_DMASR_FBES
 ((
uöt32_t
)0x00002000Ë

	)

9053 
	#ETH_DMASR_ETS
 ((
uöt32_t
)0x00000400Ë

	)

9054 
	#ETH_DMASR_RWTS
 ((
uöt32_t
)0x00000200Ë

	)

9055 
	#ETH_DMASR_RPSS
 ((
uöt32_t
)0x00000100Ë

	)

9056 
	#ETH_DMASR_RBUS
 ((
uöt32_t
)0x00000080Ë

	)

9057 
	#ETH_DMASR_RS
 ((
uöt32_t
)0x00000040Ë

	)

9058 
	#ETH_DMASR_TUS
 ((
uöt32_t
)0x00000020Ë

	)

9059 
	#ETH_DMASR_ROS
 ((
uöt32_t
)0x00000010Ë

	)

9060 
	#ETH_DMASR_TJTS
 ((
uöt32_t
)0x00000008Ë

	)

9061 
	#ETH_DMASR_TBUS
 ((
uöt32_t
)0x00000004Ë

	)

9062 
	#ETH_DMASR_TPSS
 ((
uöt32_t
)0x00000002Ë

	)

9063 
	#ETH_DMASR_TS
 ((
uöt32_t
)0x00000001Ë

	)

9066 
	#ETH_DMAOMR_DTCEFD
 ((
uöt32_t
)0x04000000Ë

	)

9067 
	#ETH_DMAOMR_RSF
 ((
uöt32_t
)0x02000000Ë

	)

9068 
	#ETH_DMAOMR_DFRF
 ((
uöt32_t
)0x01000000Ë

	)

9069 
	#ETH_DMAOMR_TSF
 ((
uöt32_t
)0x00200000Ë

	)

9070 
	#ETH_DMAOMR_FTF
 ((
uöt32_t
)0x00100000Ë

	)

9071 
	#ETH_DMAOMR_TTC
 ((
uöt32_t
)0x0001C000Ë

	)

9072 
	#ETH_DMAOMR_TTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

9073 
	#ETH_DMAOMR_TTC_128Byãs
 ((
uöt32_t
)0x00004000Ë

	)

9074 
	#ETH_DMAOMR_TTC_192Byãs
 ((
uöt32_t
)0x00008000Ë

	)

9075 
	#ETH_DMAOMR_TTC_256Byãs
 ((
uöt32_t
)0x0000C000Ë

	)

9076 
	#ETH_DMAOMR_TTC_40Byãs
 ((
uöt32_t
)0x00010000Ë

	)

9077 
	#ETH_DMAOMR_TTC_32Byãs
 ((
uöt32_t
)0x00014000Ë

	)

9078 
	#ETH_DMAOMR_TTC_24Byãs
 ((
uöt32_t
)0x00018000Ë

	)

9079 
	#ETH_DMAOMR_TTC_16Byãs
 ((
uöt32_t
)0x0001C000Ë

	)

9080 
	#ETH_DMAOMR_ST
 ((
uöt32_t
)0x00002000Ë

	)

9081 
	#ETH_DMAOMR_FEF
 ((
uöt32_t
)0x00000080Ë

	)

9082 
	#ETH_DMAOMR_FUGF
 ((
uöt32_t
)0x00000040Ë

	)

9083 
	#ETH_DMAOMR_RTC
 ((
uöt32_t
)0x00000018Ë

	)

9084 
	#ETH_DMAOMR_RTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

9085 
	#ETH_DMAOMR_RTC_32Byãs
 ((
uöt32_t
)0x00000008Ë

	)

9086 
	#ETH_DMAOMR_RTC_96Byãs
 ((
uöt32_t
)0x00000010Ë

	)

9087 
	#ETH_DMAOMR_RTC_128Byãs
 ((
uöt32_t
)0x00000018Ë

	)

9088 
	#ETH_DMAOMR_OSF
 ((
uöt32_t
)0x00000004Ë

	)

9089 
	#ETH_DMAOMR_SR
 ((
uöt32_t
)0x00000002Ë

	)

9092 
	#ETH_DMAIER_NISE
 ((
uöt32_t
)0x00010000Ë

	)

9093 
	#ETH_DMAIER_AISE
 ((
uöt32_t
)0x00008000Ë

	)

9094 
	#ETH_DMAIER_ERIE
 ((
uöt32_t
)0x00004000Ë

	)

9095 
	#ETH_DMAIER_FBEIE
 ((
uöt32_t
)0x00002000Ë

	)

9096 
	#ETH_DMAIER_ETIE
 ((
uöt32_t
)0x00000400Ë

	)

9097 
	#ETH_DMAIER_RWTIE
 ((
uöt32_t
)0x00000200Ë

	)

9098 
	#ETH_DMAIER_RPSIE
 ((
uöt32_t
)0x00000100Ë

	)

9099 
	#ETH_DMAIER_RBUIE
 ((
uöt32_t
)0x00000080Ë

	)

9100 
	#ETH_DMAIER_RIE
 ((
uöt32_t
)0x00000040Ë

	)

9101 
	#ETH_DMAIER_TUIE
 ((
uöt32_t
)0x00000020Ë

	)

9102 
	#ETH_DMAIER_ROIE
 ((
uöt32_t
)0x00000010Ë

	)

9103 
	#ETH_DMAIER_TJTIE
 ((
uöt32_t
)0x00000008Ë

	)

9104 
	#ETH_DMAIER_TBUIE
 ((
uöt32_t
)0x00000004Ë

	)

9105 
	#ETH_DMAIER_TPSIE
 ((
uöt32_t
)0x00000002Ë

	)

9106 
	#ETH_DMAIER_TIE
 ((
uöt32_t
)0x00000001Ë

	)

9109 
	#ETH_DMAMFBOCR_OFOC
 ((
uöt32_t
)0x10000000Ë

	)

9110 
	#ETH_DMAMFBOCR_MFA
 ((
uöt32_t
)0x0FFE0000Ë

	)

9111 
	#ETH_DMAMFBOCR_OMFC
 ((
uöt32_t
)0x00010000Ë

	)

9112 
	#ETH_DMAMFBOCR_MFC
 ((
uöt32_t
)0x0000FFFFË

	)

9115 
	#ETH_DMACHTDR_HTDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9118 
	#ETH_DMACHRDR_HRDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9121 
	#ETH_DMACHTBAR_HTBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9124 
	#ETH_DMACHRBAR_HRBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9134 #ifde‡
USE_STDPERIPH_DRIVER


9135 
	~"°m32f4xx_c⁄f.h
"

9142 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

9144 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

9146 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

9148 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

9150 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

9152 
	#READ_REG
(
REG
Ë((REG))

	)

9154 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

9160 #ifde‡
__˝lu•lus


	@USER/stm32f4xx_conf.h

29 #i‚de‡
__STM32F4xx_CONF_H


30 
	#__STM32F4xx_CONF_H


	)

34 
	~"°m32f4xx_adc.h
"

35 
	~"°m32f4xx_¸c.h
"

36 
	~"°m32f4xx_dbgmcu.h
"

37 
	~"°m32f4xx_dma.h
"

38 
	~"°m32f4xx_exti.h
"

39 
	~"°m32f4xx_Êash.h
"

40 
	~"°m32f4xx_gpio.h
"

41 
	~"°m32f4xx_i2c.h
"

42 
	~"°m32f4xx_iwdg.h
"

43 
	~"°m32f4xx_pwr.h
"

44 
	~"°m32f4xx_rcc.h
"

45 
	~"°m32f4xx_πc.h
"

46 
	~"°m32f4xx_sdio.h
"

47 
	~"°m32f4xx_•i.h
"

48 
	~"°m32f4xx_syscfg.h
"

49 
	~"°m32f4xx_tim.h
"

50 
	~"°m32f4xx_ußπ.h
"

51 
	~"°m32f4xx_wwdg.h
"

52 
	~"misc.h
"

54 #i‡
deföed
 (
STM32F429_439xx
)

55 
	~"°m32f4xx_¸yp.h
"

56 
	~"°m32f4xx_hash.h
"

57 
	~"°m32f4xx_∫g.h
"

58 
	~"°m32f4xx_ˇn.h
"

59 
	~"°m32f4xx_dac.h
"

60 
	~"°m32f4xx_dcmi.h
"

61 
	~"°m32f4xx_dma2d.h
"

62 
	~"°m32f4xx_fmc.h
"

63 
	~"°m32f4xx_…dc.h
"

64 
	~"°m32f4xx_ßi.h
"

67 #i‡
deföed
 (
STM32F427_437xx
)

68 
	~"°m32f4xx_¸yp.h
"

69 
	~"°m32f4xx_hash.h
"

70 
	~"°m32f4xx_∫g.h
"

71 
	~"°m32f4xx_ˇn.h
"

72 
	~"°m32f4xx_dac.h
"

73 
	~"°m32f4xx_dcmi.h
"

74 
	~"°m32f4xx_dma2d.h
"

75 
	~"°m32f4xx_fmc.h
"

76 
	~"°m32f4xx_ßi.h
"

79 #i‡
deföed
 (
STM32F40_41xxx
)

80 
	~"°m32f4xx_¸yp.h
"

81 
	~"°m32f4xx_hash.h
"

82 
	~"°m32f4xx_∫g.h
"

83 
	~"°m32f4xx_ˇn.h
"

84 
	~"°m32f4xx_dac.h
"

85 
	~"°m32f4xx_dcmi.h
"

86 
	~"°m32f4xx_fsmc.h
"

89 #i‡
deföed
 (
STM32F411xE
)

90 
	~"°m32f4xx_Êash_ømfunc.h
"

106 #ifde‡ 
USE_FULL_ASSERT


116 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

118 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

120 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

	@USER/stm32f4xx_it.c

31 
	~"°m32f4xx_ô.h
"

54 
	$NMI_H™dÀr
()

56 
	}
}

63 
	$H¨dFau…_H™dÀr
()

69 
	}
}

76 
	$MemM™age_H™dÀr
()

82 
	}
}

89 
	$BusFau…_H™dÀr
()

95 
	}
}

102 
	$UßgeFau…_H™dÀr
()

108 
	}
}

115 
	$SVC_H™dÀr
()

117 
	}
}

124 
	$DebugM⁄_H™dÀr
()

126 
	}
}

	@USER/stm32f4xx_it.h

29 #i‚de‡
__STM32F4xx_IT_H


30 
	#__STM32F4xx_IT_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"°m32f4xx.h
"

44 
NMI_H™dÀr
();

45 
H¨dFau…_H™dÀr
();

46 
MemM™age_H™dÀr
();

47 
BusFau…_H™dÀr
();

48 
UßgeFau…_H™dÀr
();

49 
SVC_H™dÀr
();

50 
DebugM⁄_H™dÀr
();

51 
PídSV_H™dÀr
();

52 
SysTick_H™dÀr
();

54 #ifde‡
__˝lu•lus


	@USER/system_stm32f4xx.c

262 
	~"°m32f4xx.h
"

283 #i‡
deföed
 (
STM32F40_41xxx
Ë|| deföed (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

287 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

291 #i‡
deföed
 (
STM32F411xE
)

301 #i‡
deföed
 (
USE_HSE_BYPASS
)

302 
	#HSE_BYPASS_INPUT_FREQUENCY
 8000000

	)

309 
	#VECT_TAB_OFFSET
 0x00

	)

314 #i‡
deföed
 (
STM32F40_41xxx
Ë|| deföed (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
Ë|| deföed (
STM32F401xx
)

316 
	#PLL_M
 8

	)

318 #i‡
deföed
 (
USE_HSE_BYPASS
)

319 
	#PLL_M
 8

	)

321 
	#PLL_M
 16

	)

326 
	#PLL_Q
 7

	)

328 #i‡
deföed
 (
STM32F40_41xxx
)

329 
	#PLL_N
 336

	)

331 
	#PLL_P
 2

	)

334 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

335 
	#PLL_N
 360

	)

337 
	#PLL_P
 2

	)

340 #i‡
deföed
 (
STM32F401xx
)

341 
	#PLL_N
 336

	)

343 
	#PLL_P
 4

	)

346 #i‡
deföed
 (
STM32F411xE
)

347 
	#PLL_N
 400

	)

349 
	#PLL_P
 4

	)

370 #i‡
deföed
 (
STM32F40_41xxx
)

371 
uöt32_t
 
	gSy°emC‹eClock
 = 168000000;

374 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

375 
uöt32_t
 
	gSy°emC‹eClock
 = 180000000;

378 #i‡
deföed
 (
STM32F401xx
)

379 
uöt32_t
 
	gSy°emC‹eClock
 = 84000000;

382 #i‡
deföed
 (
STM32F411xE
)

383 
uöt32_t
 
	gSy°emC‹eClock
 = 100000000;

386 
__I
 
uöt8_t
 
	gAHBPªscTabÀ
[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

396 
SëSysClock
();

398 #i‡
deföed
 (
DATA_IN_ExtSRAM
Ë|| deföed (
DATA_IN_ExtSDRAM
)

399 
Sy°emInô_ExtMemCé
();

417 
	$Sy°emInô
()

420 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

421 
SCB
->
CPACR
 |= ((3UL << 10*2)|(3UL << 11*2));

425 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

428 
RCC
->
CFGR
 = 0x00000000;

431 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

434 
RCC
->
PLLCFGR
 = 0x24003010;

437 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

440 
RCC
->
CIR
 = 0x00000000;

442 #i‡
	`deföed
 (
DATA_IN_ExtSRAM
Ë|| deföed (
DATA_IN_ExtSDRAM
)

443 
	`Sy°emInô_ExtMemCé
();

448 
	`SëSysClock
();

451 #ifde‡
VECT_TAB_SRAM


452 
SCB
->
VTOR
 = 
SRAM_BASE
 | 
VECT_TAB_OFFSET
;

454 
SCB
->
VTOR
 = 
FLASH_BASE
 | 
VECT_TAB_OFFSET
;

456 
	}
}

494 
	$Sy°emC‹eClockUpd©e
()

496 
uöt32_t
 
tmp
 = 0, 
∂lvco
 = 0, 
∂Õ
 = 2, 
∂lsour˚
 = 0, 
∂lm
 = 2;

499 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

501 
tmp
)

504 
Sy°emC‹eClock
 = 
HSI_VALUE
;

507 
Sy°emC‹eClock
 = 
HSE_VALUE
;

513 
∂lsour˚
 = (
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
) >> 22;

514 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

516 #i‡
	`deföed
 (
STM32F40_41xxx
Ë|| deföed (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
Ë|| deföed (
STM32F401xx
)

517 i‡(
∂lsour˚
 != 0)

520 
∂lvco
 = (
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

525 
∂lvco
 = (
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

527 #ñi‡
	`deföed
 (
STM32F411xE
)

528 #i‡
	`deföed
 (
USE_HSE_BYPASS
)

529 i‡(
∂lsour˚
 != 0)

532 
∂lvco
 = (
HSE_BYPASS_INPUT_FREQUENCY
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

535 i‡(
∂lsour˚
 == 0)

538 
∂lvco
 = (
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

542 
∂Õ
 = (((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLP
) >>16) + 1 ) *2;

543 
Sy°emC‹eClock
 = 
∂lvco
/
∂Õ
;

546 
Sy°emC‹eClock
 = 
HSI_VALUE
;

551 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4)];

553 
Sy°emC‹eClock
 >>
tmp
;

554 
	}
}

564 
	$SëSysClock
()

566 #i‡
	`deföed
 (
STM32F40_41xxx
Ë|| deföed (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
Ë|| deföed (
STM32F401xx
)

570 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

573 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

578 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

579 
SèπUpCou¡î
++;

580 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

582 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

584 
HSESètus
 = (
uöt32_t
)0x01;

588 
HSESètus
 = (
uöt32_t
)0x00;

591 i‡(
HSESètus
 =(
uöt32_t
)0x01)

594 
RCC
->
APB1ENR
 |
RCC_APB1ENR_PWREN
;

595 
PWR
->
CR
 |
PWR_CR_VOS
;

598 
RCC
->
CFGR
 |
RCC_CFGR_HPRE_DIV1
;

600 #i‡
	`deföed
 (
STM32F40_41xxx
Ë|| deföed (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

602 
RCC
->
CFGR
 |
RCC_CFGR_PPRE2_DIV2
;

605 
RCC
->
CFGR
 |
RCC_CFGR_PPRE1_DIV4
;

608 #i‡
	`deföed
 (
STM32F401xx
)

610 
RCC
->
CFGR
 |
RCC_CFGR_PPRE2_DIV1
;

613 
RCC
->
CFGR
 |
RCC_CFGR_PPRE1_DIV2
;

617 
RCC
->
PLLCFGR
 = 
PLL_M
 | (
PLL_N
 << 6Ë| (((
PLL_P
 >> 1) -1) << 16) |

618 (
RCC_PLLCFGR_PLLSRC_HSE
Ë| (
PLL_Q
 << 24);

621 
RCC
->
CR
 |
RCC_CR_PLLON
;

624 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

628 #i‡
	`deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

630 
PWR
->
CR
 |
PWR_CR_ODEN
;

631 (
PWR
->
CSR
 & 
PWR_CSR_ODRDY
) == 0)

634 
PWR
->
CR
 |
PWR_CR_ODSWEN
;

635 (
PWR
->
CSR
 & 
PWR_CSR_ODSWRDY
) == 0)

639 
FLASH
->
ACR
 = 
FLASH_ACR_PRFTEN
 | 
FLASH_ACR_ICEN
 |
FLASH_ACR_DCEN
 |
FLASH_ACR_LATENCY_5WS
;

642 #i‡
	`deföed
 (
STM32F40_41xxx
)

644 
FLASH
->
ACR
 = 
FLASH_ACR_PRFTEN
 | 
FLASH_ACR_ICEN
 |
FLASH_ACR_DCEN
 |
FLASH_ACR_LATENCY_5WS
;

647 #i‡
	`deföed
 (
STM32F401xx
)

649 
FLASH
->
ACR
 = 
FLASH_ACR_PRFTEN
 | 
FLASH_ACR_ICEN
 |
FLASH_ACR_DCEN
 |
FLASH_ACR_LATENCY_2WS
;

653 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

654 
RCC
->
CFGR
 |
RCC_CFGR_SW_PLL
;

657 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
 ) !
RCC_CFGR_SWS_PLL
);

665 #ñi‡
	`deföed
 (
STM32F411xE
)

666 #i‡
	`deföed
 (
USE_HSE_BYPASS
)

670 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

673 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
 | 
RCC_CR_HSEBYP
);

678 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

679 
SèπUpCou¡î
++;

680 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

682 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

684 
HSESètus
 = (
uöt32_t
)0x01;

688 
HSESètus
 = (
uöt32_t
)0x00;

691 i‡(
HSESètus
 =(
uöt32_t
)0x01)

694 
RCC
->
APB1ENR
 |
RCC_APB1ENR_PWREN
;

695 
PWR
->
CR
 |
PWR_CR_VOS
;

698 
RCC
->
CFGR
 |
RCC_CFGR_HPRE_DIV1
;

701 
RCC
->
CFGR
 |
RCC_CFGR_PPRE2_DIV1
;

704 
RCC
->
CFGR
 |
RCC_CFGR_PPRE1_DIV2
;

707 
RCC
->
PLLCFGR
 = 
PLL_M
 | (
PLL_N
 << 6Ë| (((
PLL_P
 >> 1) -1) << 16) |

708 (
RCC_PLLCFGR_PLLSRC_HSE
Ë| (
PLL_Q
 << 24);

711 
RCC
->
CR
 |
RCC_CR_PLLON
;

714 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

719 
FLASH
->
ACR
 = 
FLASH_ACR_PRFTEN
 | 
FLASH_ACR_ICEN
 |
FLASH_ACR_DCEN
 |
FLASH_ACR_LATENCY_2WS
;

722 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

723 
RCC
->
CFGR
 |
RCC_CFGR_SW_PLL
;

726 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
 ) !
RCC_CFGR_SWS_PLL
);

736 
RCC
->
APB1ENR
 |
RCC_APB1ENR_PWREN
;

737 
PWR
->
CR
 |
PWR_CR_VOS
;

740 
RCC
->
CFGR
 |
RCC_CFGR_HPRE_DIV1
;

743 
RCC
->
CFGR
 |
RCC_CFGR_PPRE2_DIV1
;

746 
RCC
->
CFGR
 |
RCC_CFGR_PPRE1_DIV2
;

749 
RCC
->
PLLCFGR
 = 
PLL_M
 | (
PLL_N
 << 6Ë| (((
PLL_P
 >> 1Ë-1Ë<< 16Ë| (
PLL_Q
 << 24);

752 
RCC
->
CR
 |
RCC_CR_PLLON
;

755 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

760 
FLASH
->
ACR
 = 
FLASH_ACR_PRFTEN
 | 
FLASH_ACR_ICEN
 |
FLASH_ACR_DCEN
 |
FLASH_ACR_LATENCY_2WS
;

763 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

764 
RCC
->
CFGR
 |
RCC_CFGR_SW_PLL
;

767 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
 ) !
RCC_CFGR_SWS_PLL
);

772 
	}
}

780 #ifde‡
DATA_IN_ExtSRAM


789 
	$Sy°emInô_ExtMemCé
()

812 
RCC
->
AHB1ENR
 |= 0x00000078;

815 
GPIOD
->
AFR
[0] = 0x00cc00cc;

816 
GPIOD
->
AFR
[1] = 0xcccccccc;

818 
GPIOD
->
MODER
 = 0xaaaa0a0a;

820 
GPIOD
->
OSPEEDR
 = 0xffff0f0f;

822 
GPIOD
->
OTYPER
 = 0x00000000;

824 
GPIOD
->
PUPDR
 = 0x00000000;

827 
GPIOE
->
AFR
[0] = 0xcccccccc;

828 
GPIOE
->
AFR
[1] = 0xcccccccc;

830 
GPIOE
->
MODER
 = 0xaaaaaaaa;

832 
GPIOE
->
OSPEEDR
 = 0xffffffff;

834 
GPIOE
->
OTYPER
 = 0x00000000;

836 
GPIOE
->
PUPDR
 = 0x00000000;

839 
GPIOF
->
AFR
[0] = 0x00cccccc;

840 
GPIOF
->
AFR
[1] = 0xcccc0000;

842 
GPIOF
->
MODER
 = 0xaa000aaa;

844 
GPIOF
->
OSPEEDR
 = 0xff000fff;

846 
GPIOF
->
OTYPER
 = 0x00000000;

848 
GPIOF
->
PUPDR
 = 0x00000000;

851 
GPIOG
->
AFR
[0] = 0x00cccccc;

852 
GPIOG
->
AFR
[1] = 0x000000c0;

854 
GPIOG
->
MODER
 = 0x00080aaa;

856 
GPIOG
->
OSPEEDR
 = 0x000c0fff;

858 
GPIOG
->
OTYPER
 = 0x00000000;

860 
GPIOG
->
PUPDR
 = 0x00000000;

864 
RCC
->
AHB3ENR
 |= 0x00000001;

866 #i‡
	`deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

868 
FMC_B™k1
->
BTCR
[2] = 0x00001011;

869 
FMC_B™k1
->
BTCR
[3] = 0x00000201;

870 
FMC_B™k1E
->
BWTR
[2] = 0x0fffffff;

873 #i‡
	`deföed
 (
STM32F40_41xxx
)

875 
FSMC_B™k1
->
BTCR
[2] = 0x00001011;

876 
FSMC_B™k1
->
BTCR
[3] = 0x00000201;

877 
FSMC_B™k1E
->
BWTR
[2] = 0x0fffffff;

934 
	}
}

937 #ifde‡
DATA_IN_ExtSDRAM


946 
	$Sy°emInô_ExtMemCé
()

948 
uöt32_t
 
tm¥eg
 = 0, 
timeout
 = 0xFFFF;

949 
uöt32_t
 
ödex
;

953 
RCC
->
AHB1ENR
 |= 0x000001FC;

956 
GPIOC
->
AFR
[0] = 0x0000000c;

957 
GPIOC
->
AFR
[1] = 0x00007700;

959 
GPIOC
->
MODER
 = 0x00a00002;

961 
GPIOC
->
OSPEEDR
 = 0x00a00002;

963 
GPIOC
->
OTYPER
 = 0x00000000;

965 
GPIOC
->
PUPDR
 = 0x00500000;

968 
GPIOD
->
AFR
[0] = 0x000000CC;

969 
GPIOD
->
AFR
[1] = 0xCC000CCC;

971 
GPIOD
->
MODER
 = 0xA02A000A;

973 
GPIOD
->
OSPEEDR
 = 0xA02A000A;

975 
GPIOD
->
OTYPER
 = 0x00000000;

977 
GPIOD
->
PUPDR
 = 0x00000000;

980 
GPIOE
->
AFR
[0] = 0xC00000CC;

981 
GPIOE
->
AFR
[1] = 0xCCCCCCCC;

983 
GPIOE
->
MODER
 = 0xAAAA800A;

985 
GPIOE
->
OSPEEDR
 = 0xAAAA800A;

987 
GPIOE
->
OTYPER
 = 0x00000000;

989 
GPIOE
->
PUPDR
 = 0x00000000;

992 
GPIOF
->
AFR
[0] = 0xcccccccc;

993 
GPIOF
->
AFR
[1] = 0xcccccccc;

995 
GPIOF
->
MODER
 = 0xAA800AAA;

997 
GPIOF
->
OSPEEDR
 = 0xAA800AAA;

999 
GPIOF
->
OTYPER
 = 0x00000000;

1001 
GPIOF
->
PUPDR
 = 0x00000000;

1004 
GPIOG
->
AFR
[0] = 0xcccccccc;

1005 
GPIOG
->
AFR
[1] = 0xcccccccc;

1007 
GPIOG
->
MODER
 = 0xaaaaaaaa;

1009 
GPIOG
->
OSPEEDR
 = 0xaaaaaaaa;

1011 
GPIOG
->
OTYPER
 = 0x00000000;

1013 
GPIOG
->
PUPDR
 = 0x00000000;

1016 
GPIOH
->
AFR
[0] = 0x00C0CC00;

1017 
GPIOH
->
AFR
[1] = 0xCCCCCCCC;

1019 
GPIOH
->
MODER
 = 0xAAAA08A0;

1021 
GPIOH
->
OSPEEDR
 = 0xAAAA08A0;

1023 
GPIOH
->
OTYPER
 = 0x00000000;

1025 
GPIOH
->
PUPDR
 = 0x00000000;

1028 
GPIOI
->
AFR
[0] = 0xCCCCCCCC;

1029 
GPIOI
->
AFR
[1] = 0x00000CC0;

1031 
GPIOI
->
MODER
 = 0x0028AAAA;

1033 
GPIOI
->
OSPEEDR
 = 0x0028AAAA;

1035 
GPIOI
->
OTYPER
 = 0x00000000;

1037 
GPIOI
->
PUPDR
 = 0x00000000;

1041 
RCC
->
AHB3ENR
 |= 0x00000001;

1044 
FMC_B™k5_6
->
SDCR
[0] = 0x000039D0;

1045 
FMC_B™k5_6
->
SDTR
[0] = 0x01115351;

1049 
FMC_B™k5_6
->
SDCMR
 = 0x00000011;

1050 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

1051 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

1053 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

1057 
ödex
 = 0; index<1000; index++);

1060 
FMC_B™k5_6
->
SDCMR
 = 0x00000012;

1061 
timeout
 = 0xFFFF;

1062 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

1064 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

1068 
FMC_B™k5_6
->
SDCMR
 = 0x00000073;

1069 
timeout
 = 0xFFFF;

1070 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

1072 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

1076 
FMC_B™k5_6
->
SDCMR
 = 0x00046014;

1077 
timeout
 = 0xFFFF;

1078 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

1080 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

1084 
tm¥eg
 = 
FMC_B™k5_6
->
SDRTR
;

1085 
FMC_B™k5_6
->
SDRTR
 = (
tm¥eg
 | (0x0000027C<<1));

1088 
tm¥eg
 = 
FMC_B™k5_6
->
SDCR
[0];

1089 
FMC_B™k5_6
->
SDCR
[0] = (
tm¥eg
 & 0xFFFFFDFF);

1115 
	}
}

	@USER/system_stm32f4xx.h

39 #i‚de‡
__SYSTEM_STM32F4XX_H


40 
	#__SYSTEM_STM32F4XX_H


	)

42 #ifde‡
__˝lu•lus


59 
uöt32_t
 
Sy°emC‹eClock
;

86 
Sy°emInô
();

87 
Sy°emC‹eClockUpd©e
();

92 #ifde‡
__˝lu•lus


	@xLib/inc/FlowSensor.h

1 #i‚def 
_FLOWSENSOR_H_


2 
	#_FLOESENSOR_H_


	)

3 
	~"ucos_ii.h
"

4 
	~"°m32f10x.h
"

6 
boﬁ
 
Vít10msPrc
(
INT32S
 *
pAúVítVÆ
, INT32S *
pO2VítVÆ
, INT32S 
AúFlowVÆ
, INT32S 
O2FlowVÆ
);

7 
SëVtPoöt
();

8 
INT16U
 
GëFlowVÆ
(INT16U 
Ad
);

9 
INT32S
 
GëO2VtRól
();

10 
INT32S
 
GëAúVtRól
();

11 
INT32S
 
	gm_O2VítVÆ
 = 0;

12 
INT32S
 
	gm_AúVítVÆ
 = 0;

13 
boﬁ
 
	gm_IsPoöt
 = 
FALSE
;

	@xLib/inc/ModeCommon.h

1 #i‚def 
_MODECOMMON_H_


2 
	#_MODECOMMON_H_


	)

3 
	~"comm⁄.h
"

14 
INT16U
 
GëRESPTime
(INT16U 
RR
);

30 
GëTiTeTime
(
INT16U
 *
pTiTime
, INT16U *
pTeTime
,INT16U 
Time
, INT16U 
TiR©io
, INT16U 
TeR©io
);

31 
INT16U
 
GëTiTime
(INT16U 
Time
, INT16U 
TiR©io
, INT16U 
TeR©io
);

32 
INT16U
 
GëTeTime
(INT16U 
Time
, INT16U 
TiR©io
, INT16U 
TeR©io
);

45 
INT16U
 
GëIn•Time
(INT16U 
TiTime
,INT16U 
In•TabÀ
);

61 
GëFlowVT
(
INT16U
 *
pAúVT
, INT16U *
pO2VT
, INT16U 
Vít
, 
INT8U
 
Pª£¡
, INT8U 
O2Pª
);

62 
INT16U
 
GëAúFlowVT
(INT16U 
Vít
, 
INT8U
 
Pª£¡
, INT8U 
O2Pª
);

63 
INT16U
 
GëO2FlowVT
(INT16U 
Vít
, 
INT8U
 
Pª£¡
, INT8U 
O2Pª
);

65 
INT16U
 
AD_M©ch
(INT16U 
AD
, INT16U 
Lígth
, INT16U* 
ADTab
, INT16U* 
Fa˘VÆTab
);

	@xLib/inc/MsgQueue.h

2 #i‚de‡
__MSG_QUEUE_H_


3 
	#__MSG_QUEUE_H_


	)

5 
	~"ö˛udes.h
"

8 
	#N_MESSAGES
 32

10 (*
	tMsgNŸiÊyPå
)(*, 
	tINT8U
, 
	tINT16U
 , INT16U , *);

	)

12 
	s__Msg__


14 
INT8U
 
	mMsgId
;

15 
INT16U
 
	mlP¨am
;

16 
INT16U
 
	mwP¨am
;

17 * 
	mpBuf
;

18 }
	tMSG
, *
	tP_MSG
;

20 
	s__Msg_Queue_D©a__


22 
OS_Q
 
	mH™dÀr_Q
;

23 * 
	mpArg
;

24 (*
	mMsgNŸiÊy
)(* 
	mpArg
, 
INT8U
 
	mMsgId
, 
INT16U
 
	mlP¨am
, INT16U 
	mwP¨am
, * 
	mpBuf
);

25 }
	tMSGQUEUEDATA
, *
	tP_MSGQUEUEDATA
;

27 
	s__Msg_Queue__


29 
P_MSGQUEUEDATA
 
	mpD©a
;

30 
OS_ERR
 (*
push_back
)(
P_MSGQUEUEDATA
 
	mpD©a
, 
INT8U
 
	mMsgId
, 
INT16U
 
	mlP¨am
, INT16U 
	mwP¨am
, * 
	mpBuf
);

31 (*
	m≥nd
)(
P_MSGQUEUEDATA
 
	mpD©a
);

32 }
	tMSGQUEUE
, *
	tP_MSGQUEUE
;

35 
P_MSGQUEUE
 
MsgQueueCª©e
(
MsgNŸiÊyPå
 
func
, * 
pArg
);

36 
INT8U
 
MsgQueueFªe
(
MSGQUEUE
 *
pMsg
);

38 
OS_ERR
 
MsgQueueInô
(
MSGQUEUE
 *
pMsg
);

39 
OS_ERR
 
MsgQueueDñ
(
MSGQUEUE
 *
pMsg
);

40 
OS_ERR
 
MsgPushBack
(
P_MSGQUEUEDATA
 
pD©a
, 
INT8U
 
MsgId
, 
INT16U
 
lP¨am
, INT16U 
wP¨am
, * 
pBuf
);

41 
MsgPíd
(
P_MSGQUEUEDATA
 
pD©a
);

	@xLib/inc/PID.h

2 #i‚de‡
__PID_H_


3 
	#__PID_H_


	)

4 
	~"comm⁄.h
"

6 
	sPidSåu˘


8 
INT16U
 
	mSëPoöt
;

9 
INT16U
 
	mPr›‹ti⁄
;

10 
INT16U
 
	mI¡egøl
;

11 
INT16U
 
	mDîiv©ive
;

12 
INT32S
 
	mm_I¡
;

13 
INT32S
 
	mLa°Eº‹
;

14 
INT32S
 
	mPªvEº‹
;

15 }
	tPIDSTRUCT
,*
	tPPIDSTRUCT
;

16 
PPIDSTRUCT
 
Cª©ePidCÆ
();

17 
Re£tIncPidCÆc
(
PPIDSTRUCT
 
pSñf
, 
INT16U
 
T¨gë
, INT16U 
P
, INT16U 
I
, INT16U 
D
);

18 
INT16U
 
IncPIDCÆc
(
PPIDSTRUCT
 
pSñf
, INT16U 
NextPoöt
);

	@xLib/inc/dllist.h

30 #i‚de‡
__DLLIST_H__


31 
	#__DLLIST_H__


	)

33 
	#DL_SUCCESS
 0

	)

34 
	#DL_NO_MEM
 1

	)

35 
	#DL_ZERO_SIZE
 2

	)

36 
	#DL_NULL_POINTER
 3

	)

38 
	~<°rög.h
>

39 
	~"°dio.h
"

41 
	sdŒ_li°


43 
	mTag
;

44 
dŒ_li°
 *
	mPªv
;

45 
dŒ_li°
 *
	mNext
;

46 *
	mObje˘
;

47 
size_t
 
	mSize
;

48 }
	tDLLIST
;

50 
DLLIST
 *
DLCª©e
(
Tag
, *
Obje˘
, 
size_t
 
Size
);

55 
DLIn£πBef‹e
(
DLLIST
 *
Exi°ögIãm
, DLLIST *
NewIãm
);

60 
DLIn£πA·î
(
DLLIST
 *
Exi°ögIãm
, DLLIST *
NewIãm
);

63 
DLPª≥nd
(
DLLIST
 **
Iãm
,

64 
Tag
,

65 *
Obje˘
,

66 
size_t
 
Size
);

69 
DLAµíd
(
DLLIST
 **
Iãm
,

70 
Tag
,

71 *
Obje˘
,

72 
size_t
 
Size
);

75 
DLAddA·î
(
DLLIST
 **
Iãm
,

76 
Tag
,

77 *
Obje˘
,

78 
size_t
 
Size
);

81 
DLAddBef‹e
(
DLLIST
 **
Iãm
,

82 
Tag
,

83 *
Obje˘
,

84 
size_t
 
Size
);

87 
DLUpd©e
(
DLLIST
 *
Iãm
,

88 
NewTag
,

89 *
NewObje˘
,

90 
size_t
 
NewSize
);

93 *
DLGëD©a
(
DLLIST
 *
Iãm
,

94 *
Tag
,

95 
size_t
 *
Size
);

100 
DLLIST
 *
DLExåa˘
(DLLIST *
Iãm
);

103 
DLDñëe
(
DLLIST
 *
Iãm
);

106 
DLExch™ge
(
DLLIST
 *
IãmA
, DLLIST *
IãmB
);

109 
DLDe°roy
(
DLLIST
 **
Li°
);

112 
DLLIST
 *
DLGëPªv
(DLLIST *
Li°
);

113 
DLLIST
 *
DLGëNext
(DLLIST *
Li°
);

114 
DLLIST
 *
DLGëFú°
(DLLIST *
Li°
);

115 
DLLIST
 *
DLGëLa°
(DLLIST *
Li°
);

117 
DLLIST
 *
DLJoö
(DLLIST *
Le·
, DLLIST *
Right
);

118 
DLCou¡
(
DLLIST
 *
Li°
);

121 
DLWÆk
(
DLLIST
 *
Li°
,

122 
DLLIST
 **
addr
,

123 (*
Func
)(, *, *),

124 *
Args
);

	@xLib/inc/malloc.h

1 #i‚de‡
__MALLOC_H


2 
	#__MALLOC_H


	)

3 
	~"°m32f4xx.h
"

24 #i‚de‡
NULL


25 
	#NULL
 0

	)

29 
	#SRAMIN
 0

30 
	#SRAMEX
 1

31 
	#SRAMCCM
 2

32 

	)

34 
	#SRAMBANK
 3

35 

	)

38 
	#MEM1_BLOCK_SIZE
 32

39 
	#MEM1_MAX_SIZE
 100*1024

40 
	#MEM1_ALLOC_TABLE_SIZE
 
MEM1_MAX_SIZE
/
MEM1_BLOCK_SIZE


41 

	)

43 
	#MEM2_BLOCK_SIZE
 32

44 
	#MEM2_MAX_SIZE
 960 *1024

45 
	#MEM2_ALLOC_TABLE_SIZE
 
MEM2_MAX_SIZE
/
MEM2_BLOCK_SIZE


46 

	)

48 
	#MEM3_BLOCK_SIZE
 32

49 
	#MEM3_MAX_SIZE
 60 *1024

50 
	#MEM3_ALLOC_TABLE_SIZE
 
MEM3_MAX_SIZE
/
MEM3_BLOCK_SIZE


51 

	)

55 
	s_m_mÆlco_dev


57 (*
	möô
)(
	mu8
);

58 
u8
 (*
≥ru£d
)(
	mu8
);

59 
u8
 *
	mmemba£
[
SRAMBANK
];

60 
u16
 *
	mmemm≠
[
SRAMBANK
];

61 
u8
 
	mmemrdy
[
SRAMBANK
];

63 
_m_mÆlco_dev
 
mÆlco_dev
;

65 
mymem£t
(*
s
,
u8
 
c
,
u32
 
cou¡
);

66 
mymem˝y
(*
des
,*
§c
,
u32
 
n
);

67 
my_mem_öô
(
u8
 
memx
);

68 
u32
 
my_mem_mÆloc
(
u8
 
memx
,u32 
size
);

69 
u8
 
my_mem_‰ì
(u8 
memx
,
u32
 
off£t
);

70 
u8
 
my_mem_≥ru£d
(u8 
memx
);

73 
my‰ì
(
u8
 
memx
,*
±r
);

74 *
mymÆloc
(
u8
 
memx
,
u32
 
size
);

75 *
myªÆloc
(
u8
 
memx
,*
±r
,
u32
 
size
);

	@xLib/src/FlowSensor.c

1 
	~"FlowSís‹.h
"

2 
	~"ModeComm⁄.h
"

4 
	#MAX_FLOW_POINT
 15

	)

6 
boﬁ
 
	$Vít10msPrc
(
INT32S
 *
pAúVítVÆ
, INT32S *
pO2VítVÆ
, INT32S 
AúFlowVÆ
, INT32S 
O2FlowVÆ
)

8 
boﬁ
 
ªt
 = 
m_IsPoöt
;

9 
INT16U
 
Vt
 = 0;

10 if(
ªt
 =
TRUE
)

12 
m_IsPoöt
 = 
FALSE
;

13 
Vt
 = (
INT16U
)(
m_O2VítVÆ
/100.0);

14 *
pO2VítVÆ
 = 
Vt
;

15 
Vt
 = (
INT16U
)(
m_AúVítVÆ
/100.0);

16 *
pAúVítVÆ
 = 
Vt
;

17 
m_O2VítVÆ
 = 0;

18 
m_AúVítVÆ
 = 0;

20 
m_O2VítVÆ
 +
O2FlowVÆ
;

21 
m_AúVítVÆ
 +
AúFlowVÆ
;

22  
ªt
;

23 
	}
}

24 
INT32S
 
	$GëO2VtRól
()

26 
INT32S
 
ªt
;

27 
ªt
 = (
INT32S
)(
m_O2VítVÆ
/100.0);

28  
ªt
;

29 
	}
}

30 
INT32S
 
	$GëAúVtRól
()

32 
INT32S
 
ªt
;

33 
ªt
 = (
INT32S
)(
m_AúVítVÆ
/100.0);

34  
ªt
;

35 
	}
}

36 
	$SëVtPoöt
()

38 
m_IsPoöt
 = 
TRUE
;

39 
	}
}

41 #ifde‡
MONI_FLOW_SENSOR


42 
INT16U
 
	gFlowVÆAº
[
MAX_FLOW_POINT
] = {0,50,93,144,202,264,333,415,512,633,755,892,1040,1246,1483};

43 
INT16U
 
	gFlowAdAº
[
MAX_FLOW_POINT
] = {822,1020,1218,1416,1614,1812,2010,2208,2406,2604,2802,3000,3198,3396,3594};

44 
INT16U
 
	$GëFlowVÆ
(
INT16U
 
Ad
)

46 
INT16U
 
ªt
 = 
	`AD_M©ch
(
Ad
, 
MAX_FLOW_POINT
, 
FlowAdAº
, 
FlowVÆAº
);

48  
ªt
;

49 
	}
}

53 
boﬁ
 
	$AutoVít10msPrc
(
INT16U
 *
pVítVÆ
, INT16U 
FlowVÆ
)

55 
boﬁ
 
ªt
 = 
FALSE
;

56 
INT16U
 
Vt
 = 0;

57 
boﬁ
 
IsPoöt
 = 
FALSE
;

59 
m_TimeM¨k
++;

60 if(
m_TimeM¨k
 % 20==0)

61 
IsPoöt
 = 
	`IsVítM¨kPoöt
(
FlowVÆ
);

62 if(
IsPoöt
 =
TRUE
)

64 
m_IsPoöt
 = 
FALSE
;

65 
Vt
 = (
INT16U
)(
m_VítVÆ
/100.0);

66 *
pVítVÆ
 = 
Vt
;

67 
ªt
 = 
TRUE
;

71 
m_VítVÆ
 = 0;

73 
m_VítVÆ
 +
FlowVÆ
;

75  
ªt
;

76 
	}
}

78 
boﬁ
 
	$IsVítM¨kPoöt
(
INT16U
 
FlowVÆ
)

80 
boﬁ
 
ªt
 = 
FALSE
;

81 if(
m_La°FlowVÆ
 =0 && 
FlowVÆ
>0)

82 
ªt
 = 
TRUE
;

83 
m_La°FlowVÆ
 = 
FlowVÆ
;

84  
ªt
;

85 
	}
}

	@xLib/src/ModeCommon.c

1 
	~"ModeComm⁄.h
"

3 
	#MS_1MIN
 60*100

4 
INT16U
 
	`GëRESPTime
(INT16U 
RR
)

	)

6 
INT16U
 
	gªt
 = 0;

7 
	gªt
 = (
INT16U
)(
MS_1MIN
/(
RR
*1.0));

8  
	gªt
;

11 
	$GëTiTeTime
(
INT16U
 *
pTiTime
, INT16U *
pTeTime
,INT16U 
Time
, INT16U 
TiR©io
, INT16U 
TeR©io
)

13 
sum
 = 
TiR©io
 + 
TeR©io
;

14 
	`PD
(()
sum
);

15 *
pTiTime
 = (
INT16U
)(
Time
*
TiR©io
/
sum
);

16 *
pTeTime
 = (
INT16U
)(
Time
*
TeR©io
/
sum
);

17 
	}
}

18 
INT16U
 
	$GëTiTime
(
INT16U
 
Time
, INT16U 
TiR©io
, INT16U 
TeR©io
)

20 
INT16U
 
sum
 = 
TiR©io
 + 
TeR©io
;

21  (
INT16U
)(
Time
*
TiR©io
/(
sum
*1.0));

22 
	}
}

23 
INT16U
 
	$GëTeTime
(
INT16U
 
Time
, INT16U 
TiR©io
, INT16U 
TeR©io
)

25 
INT16U
 
sum
 = 
TiR©io
 + 
TeR©io
;

26  (
INT16U
)(
Time
*
TeR©io
/(
sum
*1.0));

27 
	}
}

29 
INT16U
 
	$GëIn•Time
(
INT16U
 
TiTime
,INT16U 
In•TabÀ
)

31 
INT16U
 
ªt
 = 0;

32 
ªt
 = (
INT16U
)(
TiTime
*(100-
In•TabÀ
)/(100.0));

33  
ªt
;

34 
	}
}

36 
	$GëFlowVT
(
INT16U
 *
pAúVT
, INT16U *
pO2VT
, INT16U 
Vít
, 
INT8U
 
Pª£¡
, INT8U 
O2Pª
)

38 if(
O2Pª
 > 
Pª£¡
){

39 *
pAúVT
 = (
INT16U
)(
Vít
*(
O2Pª
 - 
Pª£¡
)*1.0/(O2Pre-21));

40 *
pO2VT
 = (
INT16U
)
Vít
 - *
pAúVT
;

42 
	}
}

43 
INT16U
 
	$GëAúFlowVT
(
INT16U
 
Vít
, 
INT8U
 
Pª£¡
, INT8U 
O2Pª
)

45 
INT16U
 
AúVT
 = 0;

46 if(
O2Pª
 >
Pª£¡
){

47 
AúVT
 = (
INT16U
)(
Vít
*(
O2Pª
 - 
Pª£¡
)*1.0/(O2Pre-21));

50  
AúVT
;

51 
	}
}

52 
INT16U
 
	$GëO2FlowVT
(
INT16U
 
Vít
, 
INT8U
 
Pª£¡
, INT8U 
O2Pª
)

54 
INT16U
 
AúVT
 = 0,
O2VT
 = 0;

55 if(
O2Pª
 >
Pª£¡
){

56 
AúVT
 = (
INT16U
)(
Vít
*(
O2Pª
 - 
Pª£¡
)*1.0/(O2Pre-21));

57 
O2VT
 = (
INT16U
)
Vít
 - 
AúVT
;

59  
O2VT
;

60 
	}
}

62 
INT16U
 
	$AD_M©ch
(
INT16U
 
AD
, INT16U 
Lígth
, INT16U* 
ADTab
, INT16U* 
Fa˘VÆTab
)

64 
INT16U
 
FöÆVÆ
 = 0;

65 
INT16U
 
i
 = 0;

66 
INT16U
 
TabÀVÆue
 = 0;

67 
TabÀVÆue
 = 
ADTab
[
Lígth
-1];

68 if(
AD
 >
TabÀVÆue
) {

71 
FöÆVÆ
 = 
Fa˘VÆTab
[
Lígth
-1];

74 if(
AD
 < 
ADTab
[0]) {

75 
FöÆVÆ
 = 
Fa˘VÆTab
[0];

78 
i
 = 1; i < 
Lígth
; i++) {

79 if(
AD
 < 
ADTab
[
i
]) {

80 
FöÆVÆ
 = 
Fa˘VÆTab
[
i
-1]+(Fa˘VÆTab[i]-Fa˘VÆTab[i-1])*(
AD
-
ADTab
[i-1])/(ADTab[i]-ADTab[i-1]);

84 if(
i
 =
Lígth
) {

85 
FöÆVÆ
 = 
Fa˘VÆTab
[
Lígth
 - 1];

90  
FöÆVÆ
;

91 
	}
}

	@xLib/src/MsgQueue.c

1 
	~"MsgQueue.h
"

2 
	~"mÆloc.h
"

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

6 
OS_ERR
 
	$MsgPushBack
(
P_MSGQUEUEDATA
 
pD©a
, 
INT8U
 
MsgId
, 
INT16U
 
lP¨am
, INT16U 
wP¨am
, * 
pBuf
)

8 
OS_ERR
 
ªt
;

9 
P_MSG
 
pMsg
 = 
NULL
;

11 
pMsg
 = (
P_MSG
)
	`mymÆloc
(
SRAMIN
,(
MSG
));

12 if(
pMsg
 !
NULL
){

13 
pMsg
->
MsgId
 = MsgId;

14 
pMsg
->
lP¨am
 =ÜParam;

15 
pMsg
->
wP¨am
 = wParam;

16 
pMsg
->
pBuf
 =ÖBuf;

17 
	`OSQPo°
((
OS_Q
* )&(
pD©a
->
H™dÀr_Q
),

18 (* )
pMsg
,

19 (
OS_MSG_SIZE
)
N_MESSAGES
,

20 (
OS_OPT
 )
OS_OPT_POST_FIFO
,

21 (
OS_ERR
* )&
ªt
);

24 
	`¥ötf
("\r\n OSQPost Error!!\r\n");

26  
ªt
;

27 
	}
}

29 
	$MsgPíd
(
P_MSGQUEUEDATA
 
pD©a
)

31 
P_MSG
 
pKey
 = 
NULL
;

32 
OS_MSG_SIZE
 
size
;

33 
OS_ERR
 
îr
;

36 
pKey
=(
P_MSG
)
	`OSQPíd
((
OS_Q
* )&(
pD©a
->
H™dÀr_Q
),

37 (
OS_TICK
 )0,

38 (
OS_OPT
 )
OS_OPT_PEND_BLOCKING
,

39 (
OS_MSG_SIZE
* )&
size
,

40 (
CPU_TS
* )0,

41 (
OS_ERR
* )&
îr
);

44 if(
pD©a
->
MsgNŸiÊy
 !(*)0 && 
pKey
 !
NULL
)

46 
pD©a
->
	`MsgNŸiÊy
’D©a->
pArg
, 
pKey
->
MsgId
,ÖKey->
lP¨am
,ÖKey->
wP¨am
,ÖKey->
pBuf
);

48 
	`my‰ì
(
SRAMIN
,
pKey
);

50 if(
pKey
 =
NULL
) {

51 
	`¥ötf
("\n GetMsgÉrror!!\n");

54 
	}
}

57 
OS_ERR
 
	$MsgQueueInô
(
MSGQUEUE
 *
pMsg
)

60 
OS_ERR
 
îr
;

61 
	`OSQCª©e
 ((
OS_Q
* )&(
pMsg
->
pD©a
->
H™dÀr_Q
),

62 (
CPU_CHAR
* )"SYSTEM MSG",

63 (
OS_MSG_QTY
 )
N_MESSAGES
,

64 (
OS_ERR
* )&
îr
);

65 
pMsg
->
push_back
 = 
MsgPushBack
;

66 
pMsg
->
≥nd
 = 
MsgPíd
;

67  
îr
;

68 
	}
}

70 
OS_ERR
 
	$MsgQueueDñ
(
MSGQUEUE
 *
pMsg
)

72 
OS_ERR
 
ªt
;

73 
	`OSQDñ
(&(
pMsg
->
pD©a
->
H™dÀr_Q
),
OS_OPT_DEL_ALWAYS
,&
ªt
);

74  
ªt
;

75 
	}
}

77 
INT8U
 
	$MsgQueueFªe
(
MSGQUEUE
 *
pMsg
)

79 
INT8U
 
ªt
 = 0;

80 
ªt
 = 
	`MsgQueueDñ
(
pMsg
);

81 if(
pMsg
->
pD©a
!=
NULL
)

82 
	`‰ì
(
pMsg
->
pD©a
);

83 if(
pMsg
!=
NULL
)

84 
	`‰ì
(
pMsg
);

85  
ªt
;

86 
	}
}

88 
P_MSGQUEUE
 
	$MsgQueueCª©e
(
MsgNŸiÊyPå
 
func
, * 
pArg
)

90 
P_MSGQUEUE
 
pMsg
 = 
NULL
;

94 
pMsg
 = (
P_MSGQUEUE
)
	`mÆloc
((
MSGQUEUE
));

95 
pMsg
->
pD©a
 = 
NULL
;

97 
pMsg
->
pD©a
 = (
P_MSGQUEUEDATA
)
	`mÆloc
((
MSGQUEUEDATA
));

98 
pMsg
->
pD©a
->
pArg
 =ÖArg;

99 
	`MsgQueueInô
(
pMsg
);

100 
pMsg
->
pD©a
->
MsgNŸiÊy
 = 
func
;

101  
pMsg
;

102 
	}
}

	@xLib/src/PID.c

1 
	~"PID.h
"

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

5 
INT16U
 
	$IncPIDCÆc
(
PPIDSTRUCT
 
pSñf
, 
INT16U
 
NextPoöt
)

7 
INT16U
 
ªt
;

8 
INT32S
 
iEº‹
;

9 
INT32S
 
iIncPid
;

11 
iEº‹
 = 
pSñf
->
SëPoöt
 - 
NextPoöt
;

12 
pSñf
->
m_I¡
+=
iEº‹
;

13 
iIncPid
 = 
pSñf
->
Pr›‹ti⁄
*
iEº‹
 +ÖSñf->
I¡egøl
*pSñf->
m_I¡
;

15 
pSñf
->
PªvEº‹
 =ÖSñf->
La°Eº‹
;

16 
pSñf
->
La°Eº‹
 = 
iEº‹
;

21 if(
iIncPid
>=0)

22 
ªt
 = 
iIncPid
;

24 
ªt
 = 0;

26  
ªt
;

27 
	}
}

29 
PPIDSTRUCT
 
	$Cª©ePidCÆ
()

31 
PPIDSTRUCT
 
pObj
 = 
NULL
;

32 
pObj
 = (
PPIDSTRUCT
)
	`mÆloc
((
PIDSTRUCT
));

33 
	`ASSERT
(
pObj
!
NULL
);

34  
pObj
;

35 
	}
}

37 
	$Re£tIncPidCÆc
(
PPIDSTRUCT
 
pSñf
, 
INT16U
 
T¨gë
, INT16U 
P
, INT16U 
I
, INT16U 
D
)

39 if(
pSñf
 =
NULL
)

41 
pSñf
->
SëPoöt
=
T¨gë
;

42 
pSñf
->
Pr›‹ti⁄
=
P
;

43 
pSñf
->
I¡egøl
=
I
;

44 
pSñf
->
Dîiv©ive
=
D
;

45 
pSñf
->
La°Eº‹
=0;

46 
pSñf
->
PªvEº‹
=0;

47 
pSñf
->
m_I¡
 = 0;

48 
	}
}

	@xLib/src/dllist.c

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<as£π.h
>

34 
	~"dŒi°.h
"

37 
DLLIST
 *
	$DLCª©e
 (
Tag
, *
Obje˘
, 
size_t
 
Size
)

39 
DLLIST
 *
NewIãm
 = 
NULL
;

41 
NewIãm
 = 
	`mÆloc
 ( *NewItem);

43 i‡(
NewIãm
 !
NULL
)

45 
NewIãm
->
Pªv
 = NewIãm->
Next
 = 
NULL
;

46 
NewIãm
->
Tag
 = Tag;

47 
NewIãm
->
Size
 = Size;

48 
NewIãm
->
Obje˘
 = 
NULL
;

49 
NewIãm
->
Obje˘
 = 
	`mÆloc
 (
Size
);

51 i‡(
NULL
 !
NewIãm
->
Obje˘
)

53 
	`mem˝y
 (
NewIãm
->
Obje˘
, Obje˘, 
Size
);

57 
	`‰ì
 (
NewIãm
);

58 
NewIãm
 = 
NULL
;

62  
NewIãm
;

63 
	}
}

65 
	$DLIn£πBef‹e
 (
DLLIST
 * 
Exi°ögIãm
, DLLIST * 
NewIãm
)

67 
Resu…
 = 
DL_SUCCESS
;

70 i‡(
Exi°ögIãm
 !
NULL
 && 
NewIãm
 != NULL)

72 
NewIãm
->
Next
 = 
Exi°ögIãm
;

73 
NewIãm
->
Pªv
 = 
Exi°ögIãm
->Prev;

74 
Exi°ögIãm
->
Pªv
 = 
NewIãm
;

75 i‡(
NewIãm
->
Pªv
 !
NULL
)

77 
NewIãm
->
Pªv
->
Next
 = NewItem;

82 
Resu…
 = 
DL_NULL_POINTER
;

86  
Resu…
;

87 
	}
}

89 
	$DLIn£πA·î
 (
DLLIST
 * 
Exi°ögIãm
, DLLIST * 
NewIãm
)

91 
Resu…
 = 
DL_SUCCESS
;

93 i‡(
Exi°ögIãm
 !
NULL
 && 
NewIãm
 != NULL)

95 
NewIãm
->
Pªv
 = 
Exi°ögIãm
;

96 
NewIãm
->
Next
 = 
Exi°ögIãm
->Next;

97 
Exi°ögIãm
->
Next
 = 
NewIãm
;

98 i‡(
NewIãm
->
Next
 !
NULL
)

100 
NewIãm
->
Next
->
Pªv
 = NewItem;

105 
Resu…
 = 
DL_NULL_POINTER
;

108  
Resu…
;

109 
	}
}

111 
	$DLPª≥nd
 (
DLLIST
 ** 
Iãm
, 
Tag
, *
Obje˘
, 
size_t
 
Size
)

113 
Resu…
 = 
DL_SUCCESS
;

115 
DLLIST
 *
p
;

116 
DLLIST
 *
Sèπ
;

120 
p
 = 
	`DLCª©e
 (
Tag
, 
Obje˘
, 
Size
);

122 i‡(
p
 !
NULL
)

124 i‡(
NULL
 =*
Iãm
)

126 *
Iãm
 = 
p
;

130 
Sèπ
 = 
	`DLGëFú°
 (*
Iãm
);

131 
	`DLIn£πBef‹e
 (
Sèπ
, 
p
);

136 
Resu…
 = 
DL_NO_MEM
;

139  
Resu…
;

140 
	}
}

142 
	$DLAµíd
 (
DLLIST
 ** 
Iãm
, 
Tag
, *
Obje˘
, 
size_t
 
Size
)

144 
Resu…
 = 
DL_SUCCESS
;

146 
DLLIST
 *
p
;

147 
DLLIST
 *
End
;

151 
p
 = 
	`DLCª©e
 (
Tag
, 
Obje˘
, 
Size
);

153 i‡(
p
 !
NULL
)

155 i‡(
NULL
 =*
Iãm
)

157 *
Iãm
 = 
p
;

161 
End
 = 
	`DLGëLa°
 (*
Iãm
);

162 
	`DLIn£πA·î
 (
End
, 
p
);

167 
Resu…
 = 
DL_NO_MEM
;

170  
Resu…
;

171 
	}
}

174 
	$DLAddA·î
 (
DLLIST
 ** 
Iãm
, 
Tag
, *
Obje˘
, 
size_t
 
Size
)

176 
Resu…
 = 
DL_SUCCESS
;

177 
DLLIST
 *
p
;

181 
p
 = 
	`DLCª©e
 (
Tag
, 
Obje˘
, 
Size
);

183 i‡(
p
 !
NULL
)

185 i‡(
NULL
 =*
Iãm
)

187 *
Iãm
 = 
p
;

191 
	`DLIn£πA·î
 (*
Iãm
, 
p
);

196 
Resu…
 = 
DL_NO_MEM
;

199  
Resu…
;

200 
	}
}

203 
	$DLAddBef‹e
 (
DLLIST
 ** 
Iãm
, 
Tag
, *
Obje˘
, 
size_t
 
Size
)

205 
Resu…
 = 
DL_SUCCESS
;

206 
DLLIST
 *
p
;

210 
p
 = 
	`DLCª©e
 (
Tag
, 
Obje˘
, 
Size
);

212 i‡(
p
 !
NULL
)

214 i‡(
NULL
 =*
Iãm
)

216 *
Iãm
 = 
p
;

220 
	`DLIn£πBef‹e
 (*
Iãm
, 
p
);

225 
Resu…
 = 
DL_NO_MEM
;

228  
Resu…
;

229 
	}
}

231 
	$DLUpd©e
 (
DLLIST
 * 
Iãm
, 
NewTag
, *
NewObje˘
, 
size_t
 
NewSize
)

233 
Resu…
 = 
DL_SUCCESS
;

235 *
p
;

237 i‡(
NewSize
 > 0)

239 
p
 = 
	`ªÆloc
 (
Iãm
->
Obje˘
, 
NewSize
);

240 i‡(
NULL
 !
p
)

242 
Iãm
->
Obje˘
 = 
p
;

243 
	`memmove
 (
Iãm
->
Obje˘
, 
NewObje˘
, 
NewSize
);

244 
Iãm
->
Tag
 = 
NewTag
;

245 
Iãm
->
Size
 = 
NewSize
;

249 
Resu…
 = 
DL_NO_MEM
;

254 
Resu…
 = 
DL_ZERO_SIZE
;

257  
Resu…
;

258 
	}
}

260 *
	$DLGëD©a
 (
DLLIST
 * 
Iãm
, *
Tag
, 
size_t
 * 
Size
)

262 *
p
 = 
NULL
;

264 i‡(
Iãm
 !
NULL
)

266 i‡(
Tag
 !
NULL
)

268 *
Tag
 = 
Iãm
->Tag;

270 i‡(
Size
 !
NULL
)

272 *
Size
 = 
Iãm
->Size;

274 
p
 = 
Iãm
->
Obje˘
;

277  
p
;

278 
	}
}

280 
DLLIST
 *
	$DLExåa˘
 (
DLLIST
 * 
Iãm
)

283 i‡(
Iãm
 !
NULL
)

285 i‡(
Iãm
->
Pªv
 !
NULL
)

287 
Iãm
->
Pªv
->
Next
 = Item->Next;

290 i‡(
Iãm
->
Next
 !
NULL
)

292 
Iãm
->
Next
->
Pªv
 = Item->Prev;

295 
Iãm
->
Pªv
 = Iãm->
Next
 = 
NULL
;

300  
Iãm
;

301 
	}
}

303 
	$DLDñëe
 (
DLLIST
 * 
Iãm
)

305 i‡(
Iãm
 !
NULL
)

307 
	`DLExåa˘
 (
Iãm
);

309 i‡(
Iãm
->
Obje˘
 !
NULL
)

311 
	`‰ì
 (
Iãm
->
Obje˘
);

314 
	`‰ì
 (
Iãm
);

317 
	}
}

320 
	$DLExch™ge
 (
DLLIST
 * 
IãmA
, DLLIST * 
IãmB
)

322 
Resu…
 = 
DL_SUCCESS
;

323 
DLLIST
 *
t0
;

324 
DLLIST
 *
t1
;

325 
DLLIST
 *
t2
;

326 
DLLIST
 *
t3
;

328 i‡(
IãmA
 !
NULL
 && 
IãmB
 != NULL)

330 i‡(
IãmA
->
Next
 =
IãmB
)

332 
	`DLExåa˘
 (
IãmA
);

333 
	`DLIn£πA·î
 (
IãmB
, 
IãmA
);

335 i‡(
IãmB
->
Next
 =
IãmA
)

337 
	`DLExåa˘
 (
IãmB
);

338 
	`DLIn£πA·î
 (
IãmA
, 
IãmB
);

342 
t0
 = 
IãmA
->
Pªv
;

343 
t1
 = 
IãmA
->
Next
;

344 
t2
 = 
IãmB
->
Pªv
;

345 
t3
 = 
IãmB
->
Next
;

347 
	`DLExåa˘
 (
IãmA
);

348 
	`DLExåa˘
 (
IãmB
);

350 i‡(
t2
 !
NULL
)

352 
	`DLIn£πA·î
 (
t2
, 
IãmA
);

356 
	`DLIn£πBef‹e
 (
t3
, 
IãmA
);

359 i‡(
t0
 !
NULL
)

361 
	`DLIn£πA·î
 (
t0
, 
IãmB
);

365 
	`DLIn£πBef‹e
 (
t1
, 
IãmB
);

371 
Resu…
 = 
DL_NULL_POINTER
;

374  
Resu…
;

375 
	}
}

377 
	$DLDe°roy
 (
DLLIST
 ** 
Li°
)

379 
DLLIST
 *
M¨kî
;

380 
DLLIST
 *
Pªv
;

381 
DLLIST
 *
Next
;

383 i‡(*
Li°
 !
NULL
)

386 
Pªv
 = (*
Li°
)->Prev;

387 
Pªv
 !
NULL
)

389 
M¨kî
 = 
Pªv
->Prev;

390 
	`DLDñëe
 (
Pªv
);

391 
Pªv
 = 
M¨kî
;

394 
Next
 = *
Li°
;

397 
M¨kî
 = 
Next
->Next;

398 
	`DLDñëe
 (
Next
);

399 
Next
 = 
M¨kî
;

401 
Next
 !
NULL
);

402 *
Li°
 = 
NULL
;

404 
	}
}

406 
DLLIST
 *
	$DLGëPªv
 (
DLLIST
 * 
Li°
)

408 i‡(
Li°
 !
NULL
)

410 
Li°
 = Li°->
Pªv
;

413  
Li°
;

414 
	}
}

416 
DLLIST
 *
	$DLGëNext
 (
DLLIST
 * 
Li°
)

418 i‡(
Li°
 !
NULL
)

420 
Li°
 = Li°->
Next
;

423  
Li°
;

424 
	}
}

426 
DLLIST
 *
	$DLGëFú°
 (
DLLIST
 * 
Li°
)

428 i‡(
Li°
 !
NULL
)

430 
Li°
->
Pªv
 !
NULL
)

432 
Li°
 = Li°->
Pªv
;

435  
Li°
;

436 
	}
}

438 
DLLIST
 *
	$DLGëLa°
 (
DLLIST
 * 
Li°
)

440 i‡(
Li°
 !
NULL
)

442 
Li°
->
Next
 !
NULL
)

444 
Li°
 = Li°->
Next
;

447  
Li°
;

448 
	}
}

450 
DLLIST
 *
	$DLJoö
 (
DLLIST
 * 
Le·
, DLLIST * 
Right
)

453 i‡(
Le·
 !
NULL
 && 
Right
 != NULL)

455 
Le·
 = 
	`DLGëLa°
 (Left);

456 
Right
 = 
	`DLGëFú°
 (Right);

458 
Le·
->
Next
 = 
Right
;

459 
Right
->
Pªv
 = 
Le·
;

463  
	`DLGëFú°
 (
Le·
);

464 
	}
}

466 
	$DLCou¡
 (
DLLIST
 * 
Li°
)

468 
Iãms
 = 0;

470 
DLLIST
 *
Pªv
 = 
Li°
;

471 
DLLIST
 *
Next
 = 
Li°
;

473 i‡(
Li°
 !
NULL
)

475 ++
Iãms
;

476 (
Pªv
 = 
	`DLGëPªv
 (Pªv)Ë!
NULL
)

478 ++
Iãms
;

480 (
Next
 = 
	`DLGëNext
 (Next)Ë!
NULL
)

482 ++
Iãms
;

486  
Iãms
;

487 
	}
}

489 
DLWÆk
 (
DLLIST
 * 
Li°
,

490 
DLLIST
 ** 
addr
, (*
Func
Ë(, *, *), *
Args
)

492 
DLLIST
 *
ThisIãm
 = 
Li°
;

493 
Resu…
 = 0;

495 i‡(
Li°
 !
NULL
)

497 
ThisIãm
 = 
	`DLGëFú°
 (
Li°
);

498 0 =
Resu…
 && 
ThisIãm
 !
NULL
; ThisIãm = ThisIãm->
Next
)

500 
Resu…
 = (*
Func
Ë(
ThisIãm
->
Tag
, ThisIãm->
Obje˘
, 
Args
);

502 i‡(
addr
 !
NULL
)

503 *
addr
 = 
ThisIãm
;

506  
Resu…
;

507 
	}
}

	@xLib/src/malloc.c

1 
	~"mÆloc.h
"

23 
	$__Æign
(32Ë
u8
 
mem1ba£
[
MEM1_MAX_SIZE
];

24 
	$__Æign
(32Ë
u8
 
mem2ba£
[
MEM2_MAX_SIZE
] 
	`__©åibuã__
((
	`©
(0X68000000)));

25 
	$__Æign
(32Ë
u8
 
mem3ba£
[
MEM3_MAX_SIZE
] 
	`__©åibuã__
((
	`©
(0X10000000)));

27 
u16
 
mem1m≠ba£
[
MEM1_ALLOC_TABLE_SIZE
];

28 
u16
 
mem2m≠ba£
[
MEM2_ALLOC_TABLE_SIZE
] 
	`__©åibuã__
((
	`©
(0X68000000+
MEM2_MAX_SIZE
)));

29 
u16
 
mem3m≠ba£
[
MEM3_ALLOC_TABLE_SIZE
] 
	`__©åibuã__
((
	`©
(0X10000000+
MEM3_MAX_SIZE
)));

31 c⁄° 
u32
 
memtblsize
[
SRAMBANK
]={
MEM1_ALLOC_TABLE_SIZE
,
MEM2_ALLOC_TABLE_SIZE
,
MEM3_ALLOC_TABLE_SIZE
};

32 c⁄° 
u32
 
	gmemblksize
[
SRAMBANK
]={
MEM1_BLOCK_SIZE
,
MEM2_BLOCK_SIZE
,
MEM3_BLOCK_SIZE
};

33 c⁄° 
u32
 
	gmemsize
[
SRAMBANK
]={
MEM1_MAX_SIZE
,
MEM2_MAX_SIZE
,
MEM3_MAX_SIZE
};

37 
_m_mÆlco_dev
 
	gmÆlco_dev
=

39 
my_mem_öô
,

40 
my_mem_≥ru£d
,

41 
mem1ba£
,
mem2ba£
,
mem3ba£
,

42 
mem1m≠ba£
,
mem2m≠ba£
,
mem3m≠ba£
,

50 
	$mymem˝y
(*
des
,*
§c
,
u32
 
n
)

52 
u8
 *
xdes
=
des
;

53 
u8
 *
x§c
=
§c
;

54 
n
--)*
xdes
++=*
x§c
++;

55 
	}
}

60 
	$mymem£t
(*
s
,
u8
 
c
,
u32
 
cou¡
)

62 
u8
 *
xs
 = 
s
;

63 
cou¡
--)*
xs
++=
c
;

64 
	}
}

67 
	$my_mem_öô
(
u8
 
memx
)

69 
	`mymem£t
(
mÆlco_dev
.
memm≠
[
memx
], 0,
memtblsize
[memx]*2);

70 
	`mymem£t
(
mÆlco_dev
.
memba£
[
memx
], 0,
memsize
[memx]);

71 
mÆlco_dev
.
memrdy
[
memx
]=1;

72 
	}
}

76 
u8
 
	$my_mem_≥ru£d
(
u8
 
memx
)

78 
u32
 
u£d
=0;

79 
u32
 
i
;

80 
i
=0;i<
memtblsize
[
memx
];i++)

82 if(
mÆlco_dev
.
memm≠
[
memx
][
i
])
u£d
++;

84  (
u£d
*100)/(
memtblsize
[
memx
]);

85 
	}
}

90 
u32
 
	$my_mem_mÆloc
(
u8
 
memx
,
u32
 
size
)

92 sig√d 
off£t
=0;

93 
u32
 
nmemb
;

94 
u32
 
cmemb
=0;

95 
u32
 
i
;

96 if(!
mÆlco_dev
.
memrdy
[
memx
])mÆlco_dev.
	`öô
(memx);

97 if(
size
==0) 0XFFFFFFFF;

98 
nmemb
=
size
/
memblksize
[
memx
];

99 if(
size
%
memblksize
[
memx
])
nmemb
++;

100 
off£t
=
memtblsize
[
memx
]-1;offset>=0;offset--)

102 if(!
mÆlco_dev
.
memm≠
[
memx
][
off£t
])
cmemb
++;

103 
cmemb
=0;

104 if(
cmemb
==
nmemb
)

106 
i
=0;i<
nmemb
;i++)

108 
mÆlco_dev
.
memm≠
[
memx
][
off£t
+
i
]=
nmemb
;

110  (
off£t
*
memblksize
[
memx
]);

114 
	}
}

119 
u8
 
	$my_mem_‰ì
(
u8
 
memx
,
u32
 
off£t
)

121 
i
;

122 if(!
mÆlco_dev
.
memrdy
[
memx
])

124 
mÆlco_dev
.
	`öô
(
memx
);

127 if(
off£t
<
memsize
[
memx
])

129 
ödex
=
off£t
/
memblksize
[
memx
];

130 
nmemb
=
mÆlco_dev
.
memm≠
[
memx
][
ödex
];

131 
i
=0;i<
nmemb
;i++)

133 
mÆlco_dev
.
memm≠
[
memx
][
ödex
+
i
]=0;

137 
	}
}

141 
	$my‰ì
(
u8
 
memx
,*
±r
)

143 
u32
 
off£t
;

144 if(
±r
==
NULL
);

145 
off£t
=(
u32
)
±r
-(u32)
mÆlco_dev
.
memba£
[
memx
];

146 
	`my_mem_‰ì
(
memx
,
off£t
);

147 
	}
}

152 *
	$mymÆloc
(
u8
 
memx
,
u32
 
size
)

154 
u32
 
off£t
;

155 
off£t
=
	`my_mem_mÆloc
(
memx
,
size
);

156 if(
off£t
==0XFFFFFFFF) 
NULL
;

157  (*)((
u32
)
mÆlco_dev
.
memba£
[
memx
]+
off£t
);

158 
	}
}

164 *
	$myªÆloc
(
u8
 
memx
,*
±r
,
u32
 
size
)

166 
u32
 
off£t
;

167 
off£t
=
	`my_mem_mÆloc
(
memx
,
size
);

168 if(
off£t
==0XFFFFFFFF) 
NULL
;

171 
	`mymem˝y
((*)((
u32
)
mÆlco_dev
.
memba£
[
memx
]+
off£t
),
±r
,
size
);

172 
	`my‰ì
(
memx
,
±r
);

173  (*)((
u32
)
mÆlco_dev
.
memba£
[
memx
]+
off£t
);

175 
	}
}

	@
1
.
0
191
6999
CORE/core_cm4.h
CORE/core_cm4_simd.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/misc.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_adc.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_can.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_crc.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_cryp.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dac.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dbgmcu.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dcmi.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dma.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dma2d.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_exti.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_flash.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_flash_ramfunc.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_fmc.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_fsmc.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_gpio.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_hash.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_i2c.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_iwdg.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_ltdc.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_pwr.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rng.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rtc.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_sai.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_sdio.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_spi.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_syscfg.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_tim.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h
FWLIB/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_wwdg.h
FWLIB/STM32F4xx_StdPeriph_Driver/src/misc.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_crc.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dac.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dbgmcu.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma2d.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_exti.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_flash.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_flash_ramfunc.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_fmc.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_fsmc.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_gpio.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_iwdg.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_ltdc.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_sai.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_sdio.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_syscfg.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_tim.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c
FWLIB/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c
HARDWARE/inc/Iiclib.h
HARDWARE/inc/Target_Init.h
HARDWARE/inc/adc.h
HARDWARE/inc/dac.h
HARDWARE/inc/dma.h
HARDWARE/inc/exti.h
HARDWARE/inc/gpio.h
HARDWARE/inc/pwm.h
HARDWARE/inc/spi.h
HARDWARE/inc/stmflash.h
HARDWARE/inc/usart1.h
HARDWARE/src/Iiclib.c
HARDWARE/src/Target_Init.c
HARDWARE/src/adc.c
HARDWARE/src/dac.c
HARDWARE/src/dma.c
HARDWARE/src/exti.c
HARDWARE/src/gpio.c
HARDWARE/src/pwm.c
HARDWARE/src/spi.c
HARDWARE/src/stmflash.c
HARDWARE/src/usart1.c
SYSTEM/System_Init.c
SYSTEM/System_Init.h
SYSTEM/delay/delay.c
SYSTEM/delay/delay.h
SYSTEM/sys/sys.c
SYSTEM/sys/sys.h
SYSTEM/usart/usart.c
SYSTEM/usart/usart.h
SYSTEM/usart/usart3.c
SYSTEM/usart/usart3.h
SYSTEM/usart/usart4.c
SYSTEM/usart/usart4.h
SYSTEM/usart/usart5.c
SYSTEM/usart/usart5.h
UCOSIII/UCOS_BSP/bsp.c
UCOSIII/UCOS_BSP/bsp.h
UCOSIII/uC-CPU/ARM-Cortex-M4/GNU/cpu.h
UCOSIII/uC-CPU/ARM-Cortex-M4/GNU/cpu_c.c
UCOSIII/uC-CPU/ARM-Cortex-M4/IAR/cpu.h
UCOSIII/uC-CPU/ARM-Cortex-M4/IAR/cpu_c.c
UCOSIII/uC-CPU/ARM-Cortex-M4/RealView/cpu.h
UCOSIII/uC-CPU/ARM-Cortex-M4/RealView/cpu_c.c
UCOSIII/uC-CPU/cpu_core.c
UCOSIII/uC-CPU/cpu_core.h
UCOSIII/uC-CPU/cpu_def.h
UCOSIII/uC-LIB/lib_ascii.c
UCOSIII/uC-LIB/lib_ascii.h
UCOSIII/uC-LIB/lib_def.h
UCOSIII/uC-LIB/lib_math.c
UCOSIII/uC-LIB/lib_math.h
UCOSIII/uC-LIB/lib_mem.c
UCOSIII/uC-LIB/lib_mem.h
UCOSIII/uC-LIB/lib_str.c
UCOSIII/uC-LIB/lib_str.h
UCOSIII/uCOS-III/Ports/ARM-Cortex-M4/Generic/GNU/os_cpu.h
UCOSIII/uCOS-III/Ports/ARM-Cortex-M4/Generic/GNU/os_cpu_c.c
UCOSIII/uCOS-III/Ports/ARM-Cortex-M4/Generic/IAR/os_cpu.h
UCOSIII/uCOS-III/Ports/ARM-Cortex-M4/Generic/IAR/os_cpu_c.c
UCOSIII/uCOS-III/Ports/ARM-Cortex-M4/Generic/RealView/os_cpu.h
UCOSIII/uCOS-III/Ports/ARM-Cortex-M4/Generic/RealView/os_cpu_c.c
UCOSIII/uCOS-III/Source/os.h
UCOSIII/uCOS-III/Source/os_cfg_app.c
UCOSIII/uCOS-III/Source/os_core.c
UCOSIII/uCOS-III/Source/os_dbg.c
UCOSIII/uCOS-III/Source/os_flag.c
UCOSIII/uCOS-III/Source/os_int.c
UCOSIII/uCOS-III/Source/os_mem.c
UCOSIII/uCOS-III/Source/os_msg.c
UCOSIII/uCOS-III/Source/os_mutex.c
UCOSIII/uCOS-III/Source/os_pend_multi.c
UCOSIII/uCOS-III/Source/os_prio.c
UCOSIII/uCOS-III/Source/os_q.c
UCOSIII/uCOS-III/Source/os_sem.c
UCOSIII/uCOS-III/Source/os_stat.c
UCOSIII/uCOS-III/Source/os_task.c
UCOSIII/uCOS-III/Source/os_tick.c
UCOSIII/uCOS-III/Source/os_time.c
UCOSIII/uCOS-III/Source/os_tmr.c
UCOSIII/uCOS-III/Source/os_type.h
UCOSIII/uCOS-III/Source/os_var.c
UCOSIII/uCOS_CONFIG/app_cfg.h
UCOSIII/uCOS_CONFIG/cpu_cfg.h
UCOSIII/uCOS_CONFIG/includes.h
UCOSIII/uCOS_CONFIG/lib_cfg.h
UCOSIII/uCOS_CONFIG/os_app_hooks.c
UCOSIII/uCOS_CONFIG/os_app_hooks.h
UCOSIII/uCOS_CONFIG/os_cfg.h
UCOSIII/uCOS_CONFIG/os_cfg_app.h
USER/App/inc/ModuleMotorDriver.h
USER/App/inc/ModuleServer.h
USER/App/inc/ModuleXxx.h
USER/App/inc/TaskMain.h
USER/App/inc/struct_def.h
USER/App/src/ModuleMotorDriver.c
USER/App/src/ModuleServer.c
USER/App/src/Modulexxx.c
USER/App/src/TaskMain.c
USER/CreateMultiTask.c
USER/CreateMultiTask.h
USER/app_cfg.h
USER/common.h
USER/main.c
USER/stm32f4xx.h
USER/stm32f4xx_conf.h
USER/stm32f4xx_it.c
USER/stm32f4xx_it.h
USER/system_stm32f4xx.c
USER/system_stm32f4xx.h
xLib/inc/FlowSensor.h
xLib/inc/ModeCommon.h
xLib/inc/MsgQueue.h
xLib/inc/PID.h
xLib/inc/dllist.h
xLib/inc/malloc.h
xLib/src/FlowSensor.c
xLib/src/ModeCommon.c
xLib/src/MsgQueue.c
xLib/src/PID.c
xLib/src/dllist.c
xLib/src/malloc.c
